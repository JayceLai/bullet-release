function instantiate(asmLibraryArg) {
  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "EFYAAAAAAAAAAAAAAAAAAAAZEkQ7Aj8sRxQ9MzAKGwZGS0U3D0kOFwNAHTwrNh9KLRwBICUpIQgMFRYiLhA4Pgs0MRgvQQk5ESNDMkI6BQQmKCcNKh41BxpIEyRM/wAAU3VjY2VzcwBJbGxlZ2FsIGJ5dGUgc2VxdWVuY2UARG9tYWluIGVycm9yAFJlc3VsdCBub3QgcmVwcmVzZW50YWJsZQBOb3QgYSB0dHkAUGVybWlzc2lvbiBkZW5pZWQAT3BlcmF0aW9uIG5vdCBwZXJtaXR0ZWQATm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeQBObyBzdWNoIHByb2Nlc3MARmlsZSBleGlzdHMAVmFsdWUgdG9vIGxhcmdlIGZvciBkYXRhIHR5cGUATm8gc3BhY2UgbGVmdCBvbiBkZXZpY2UAT3V0IG9mIG1lbW9yeQBSZXNvdXJjZSBidXN5AEludGVycnVwdGVkIHN5c3RlbSBjYWxsAFJlc291cmNlIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlAEludmFsaWQgc2VlawBDcm9zcy1kZXZpY2UgbGluawBSZWFkLW9ubHkgZmlsZSBzeXN0ZW0ARGlyZWN0b3J5IG5vdCBlbXB0eQBDb25uZWN0aW9uIHJlc2V0IGJ5IHBlZXIAT3BlcmF0aW9uIHRpbWVkIG91dABDb25uZWN0aW9uIHJlZnVzZWQASG9zdCBpcyB1bnJlYWNoYWJsZQBBZGRyZXNzIGluIHVzZQBCcm9rZW4gcGlwZQBJL08gZXJyb3IATm8gc3VjaCBkZXZpY2Ugb3IgYWRkcmVzcwBObyBzdWNoIGRldmljZQBOb3QgYSBkaXJlY3RvcnkASXMgYSBkaXJlY3RvcnkAVGV4dCBmaWxlIGJ1c3kARXhlYyBmb3JtYXQgZXJyb3IASW52YWxpZCBhcmd1bWVudABBcmd1bWVudCBsaXN0IHRvbyBsb25nAFN5bWJvbGljIGxpbmsgbG9vcABGaWxlbmFtZSB0b28gbG9uZwBUb28gbWFueSBvcGVuIGZpbGVzIGluIHN5c3RlbQBObyBmaWxlIGRlc2NyaXB0b3JzIGF2YWlsYWJsZQBCYWQgZmlsZSBkZXNjcmlwdG9yAE5vIGNoaWxkIHByb2Nlc3MAQmFkIGFkZHJlc3MARmlsZSB0b28gbGFyZ2UAVG9vIG1hbnkgbGlua3MATm8gbG9ja3MgYXZhaWxhYmxlAFJlc291cmNlIGRlYWRsb2NrIHdvdWxkIG9jY3VyAFN0YXRlIG5vdCByZWNvdmVyYWJsZQBQcmV2aW91cyBvd25lciBkaWVkAE9wZXJhdGlvbiBjYW5jZWxlZABGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQATm8gbWVzc2FnZSBvZiBkZXNpcmVkIHR5cGUASWRlbnRpZmllciByZW1vdmVkAExpbmsgaGFzIGJlZW4gc2V2ZXJlZABQcm90b2NvbCBlcnJvcgBCYWQgbWVzc2FnZQBOb3QgYSBzb2NrZXQARGVzdGluYXRpb24gYWRkcmVzcyByZXF1aXJlZABNZXNzYWdlIHRvbyBsYXJnZQBQcm90b2NvbCB3cm9uZyB0eXBlIGZvciBzb2NrZXQAUHJvdG9jb2wgbm90IGF2YWlsYWJsZQBQcm90b2NvbCBub3Qgc3VwcG9ydGVkAE5vdCBzdXBwb3J0ZWQAQWRkcmVzcyBmYW1pbHkgbm90IHN1cHBvcnRlZCBieSBwcm90b2NvbABBZGRyZXNzIG5vdCBhdmFpbGFibGUATmV0d29yayBpcyBkb3duAE5ldHdvcmsgdW5yZWFjaGFibGUAQ29ubmVjdGlvbiByZXNldCBieSBuZXR3b3JrAENvbm5lY3Rpb24gYWJvcnRlZABObyBidWZmZXIgc3BhY2UgYXZhaWxhYmxlAFNvY2tldCBpcyBjb25uZWN0ZWQAU29ja2V0IG5vdCBjb25uZWN0ZWQAT3BlcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MAT3BlcmF0aW9uIGluIHByb2dyZXNzAFN0YWxlIGZpbGUgaGFuZGxlAFF1b3RhIGV4Y2VlZGVkAE11bHRpaG9wIGF0dGVtcHRlZABDYXBhYmlsaXRpZXMgaW5zdWZmaWNpZW50AE5vIGVycm9yIGluZm9ybWF0aW9uAAAtKyAgIDBYMHgAKG51bGwpAAAAAAAAAAAAABkACgAZGRkAAAAABQAAAAAAAAkAAAAACwAAAAAAAAAAGQARChkZGQMKBwABGwkLGAAACQYLAAALAAYZAAAAGRkZAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAABkACg0ZGRkADQAAAgAJDgAAAAkADgAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAATAAAAABMAAAAACQwAAAAAAAwAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAADwAAAAQPAAAAAAkQAAAAAAAQAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAAAAAAAAAAAAABEAAAAAEQAAAAAJEgAAAAAAEgAAEgAAGgAAABoaGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAGhoaAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAFwAAAAAXAAAAAAkUAAAAAAAUAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYAAAAAAAAAAAAAABUAAAAAFQAAAAAJFgAAAAAAFgAAFgAAU3VwcG9ydCBmb3IgZm9ybWF0dGluZyBsb25nIGRvdWJsZSB2YWx1ZXMgaXMgY3VycmVudGx5IGRpc2FibGVkLgpUbyBlbmFibGUgaXQsIGFkZCAtbGMtcHJpbnRzY2FuLWxvbmctZG91YmxlIHRvIHRoZSBsaW5rIGNvbW1hbmQuCgAAAAAAAAAAAAAAAAAAMDEyMzQ1Njc4OUFCQ0RFRi0wWCswWCAwWC0weCsweCAweABpbmYASU5GAG5hbgBOQU4ALgAKAHVuZXhwZWN0ZWRfaGFuZGxlciB1bmV4cGVjdGVkbHkgcmV0dXJuZWQAdGVybWluYXRlX2hhbmRsZXIgdW5leHBlY3RlZGx5IHJldHVybmVkAABzdGQ6OmV4Y2VwdGlvbgBzdGQ6OmJhZF9leGNlcHRpb24AAAAAAABsDgAACAAAAAoAAAALAAAAc3RkOjpiYWRfYWxsb2MAAAAAAACUDgAACQAAAAwAAAANAAAAYmFkX2FycmF5X25ld19sZW5ndGgAAAAAAAAAACAOAAAGAAAADgAAAA8AAABTdDlleGNlcHRpb24AAAAADBcAABAOAAAAAAAAUA4AAAcAAAAQAAAAEQAAAFN0MTNiYWRfZXhjZXB0aW9uAAAANBcAADwOAAAgDgAAU3Q5YmFkX2FsbG9jAAAAADQXAABcDgAAIA4AAFN0MjBiYWRfYXJyYXlfbmV3X2xlbmd0aAAAAAA0FwAAeA4AAGwOAAAAAAAAHA8AABMAAAAVAAAAFgAAAHN0ZDo6YmFkX2Nhc3QAAAAAAAAAOA8AABQAAAAXAAAAGAAAAHN0ZDo6YmFkX3R5cGVpZAAAAAAACA8AABIAAAAZAAAAU3Q5dHlwZV9pbmZvAAAAAAwXAAD4DgAAU3Q4YmFkX2Nhc3QANBcAABAPAAAgDgAAU3QxMGJhZF90eXBlaWQAADQXAAAoDwAAIA4AAFB1cmUgdmlydHVhbCBmdW5jdGlvbiBjYWxsZWQhAERlbGV0ZWQgdmlydHVhbCBmdW5jdGlvbiBjYWxsZWQhAE4xMF9fY3h4YWJpdjExNl9fc2hpbV90eXBlX2luZm9FADQXAACDDwAACA8AAE4xMF9fY3h4YWJpdjExN19fY2xhc3NfdHlwZV9pbmZvRQAAADQXAACwDwAApA8AAE4xMF9fY3h4YWJpdjExN19fcGJhc2VfdHlwZV9pbmZvRQAAADQXAADgDwAApA8AAE4xMF9fY3h4YWJpdjExOV9fcG9pbnRlcl90eXBlX2luZm9FADQXAAAQEAAABBAAAE4xMF9fY3h4YWJpdjEyMF9fZnVuY3Rpb25fdHlwZV9pbmZvRQAAAAA0FwAAQBAAAKQPAABOMTBfX2N4eGFiaXYxMjlfX3BvaW50ZXJfdG9fbWVtYmVyX3R5cGVfaW5mb0UAAAA0FwAAdBAAAAQQAAAAAAAAAAAAAP////8AAAAApA8AACQAAAAlAAAAJgAAACcAAAAoAAAAAAAAABwRAAAaAAAAKQAAACYAAAAnAAAAKgAAAE4xMF9fY3h4YWJpdjEyM19fZnVuZGFtZW50YWxfdHlwZV9pbmZvRQA0FwAA9BAAAKQPAAB2AAAA4BAAACgRAABQdgAACBgAADQRAAAAAAAALBEAAFBLdgAIGAAASBEAAAEAAAAsEQAARG4AAOAQAABcEQAAUERuAAgYAABoEQAAAAAAAGARAABQS0RuAAAAAAgYAAB8EQAAAQAAAGARAABiAAAA4BAAAJQRAABQYgAACBgAAKARAAAAAAAAmBEAAFBLYgAIGAAAtBEAAAEAAACYEQAAdwAAAOAQAADIEQAAUHcAAAgYAADUEQAAAAAAAMwRAABQS3cACBgAAOgRAAABAAAAzBEAAGMAAADgEAAA/BEAAFBjAAAIGAAACBIAAAAAAAAAEgAAUEtjAAgYAAAcEgAAAQAAAAASAABoAAAA4BAAADASAABQaAAACBgAADwSAAAAAAAANBIAAFBLaAAIGAAAUBIAAAEAAAA0EgAAYQAAAOAQAABkEgAAUGEAAAgYAABwEgAAAAAAAGgSAABQS2EACBgAAIQSAAABAAAAaBIAAHMAAADgEAAAmBIAAFBzAAAIGAAApBIAAAAAAACcEgAAUEtzAAgYAAC4EgAAAQAAAJwSAAB0AAAA4BAAAMwSAABQdAAACBgAANgSAAAAAAAA0BIAAFBLdAAIGAAA7BIAAAEAAADQEgAAaQAAAOAQAAAAEwAAUGkAAAgYAAAMEwAAAAAAAAQTAABQS2kACBgAACATAAABAAAABBMAAGoAAADgEAAANBMAAFBqAAAIGAAAQBMAAAAAAAA4EwAAUEtqAAgYAABUEwAAAQAAADgTAABsAAAA4BAAAGgTAABQbAAACBgAAHQTAAAAAAAAbBMAAFBLbAAIGAAAiBMAAAEAAABsEwAAbQAAAOAQAACcEwAAUG0AAAgYAACoEwAAAAAAAKATAABQS20ACBgAALwTAAABAAAAoBMAAHgAAADgEAAA0BMAAFB4AAAIGAAA3BMAAAAAAADUEwAAUEt4AAgYAADwEwAAAQAAANQTAAB5AAAA4BAAAAQUAABQeQAACBgAABAUAAAAAAAACBQAAFBLeQAIGAAAJBQAAAEAAAAIFAAAbgAAAOAQAAA4FAAAUG4AAAgYAABEFAAAAAAAADwUAABQS24ACBgAAFgUAAABAAAAPBQAAG8AAADgEAAAbBQAAFBvAAAIGAAAeBQAAAAAAABwFAAAUEtvAAgYAACMFAAAAQAAAHAUAABEaAAA4BAAAKAUAABQRGgACBgAAKwUAAAAAAAApBQAAFBLRGgAAAAACBgAAMAUAAABAAAApBQAAGYAAADgEAAA2BQAAFBmAAAIGAAA5BQAAAAAAADcFAAAUEtmAAgYAAD4FAAAAQAAANwUAABkAAAA4BAAAAwVAABQZAAACBgAABgVAAAAAAAAEBUAAFBLZAAIGAAALBUAAAEAAAAQFQAAZQAAAOAQAABAFQAAUGUAAAgYAABMFQAAAAAAAEQVAABQS2UACBgAAGAVAAABAAAARBUAAGcAAADgEAAAdBUAAFBnAAAIGAAAgBUAAAAAAAB4FQAAUEtnAAgYAACUFQAAAQAAAHgVAABEdQAA4BAAAKgVAABQRHUACBgAALQVAAAAAAAArBUAAFBLRHUAAAAACBgAAMgVAAABAAAArBUAAERzAADgEAAA4BUAAFBEcwAIGAAA7BUAAAAAAADkFQAAUEtEcwAAAAAIGAAAABYAAAEAAADkFQAARGkAAOAQAAAYFgAAUERpAAgYAAAkFgAAAAAAABwWAABQS0RpAAAAAAgYAAA4FgAAAQAAABwWAAAAAAAAkBYAABsAAAArAAAAJgAAACcAAAAsAAAATjEwX19jeHhhYml2MTE3X19hcnJheV90eXBlX2luZm9FAAAANBcAAGwWAACkDwAAAAAAAGgQAAAcAAAALQAAACYAAAAnAAAALgAAAAAAAAD4FgAAHQAAAC8AAAAmAAAAJwAAADAAAABOMTBfX2N4eGFiaXYxMTZfX2VudW1fdHlwZV9pbmZvRQAAAAA0FwAA1BYAAKQPAAAAAAAA1A8AAB4AAAAxAAAAJgAAACcAAAAyAAAAMwAAADQAAAA1AAAAAAAAAHwXAAAfAAAANgAAACYAAAAnAAAAMgAAADcAAAA4AAAAOQAAAE4xMF9fY3h4YWJpdjEyMF9fc2lfY2xhc3NfdHlwZV9pbmZvRQAAAAA0FwAAVBcAANQPAAAAAAAA2BcAACAAAAA6AAAAJgAAACcAAAAyAAAAOwAAADwAAAA9AAAATjEwX19jeHhhYml2MTIxX192bWlfY2xhc3NfdHlwZV9pbmZvRQAAADQXAACwFwAA1A8AAAAAAAAEEAAAIQAAAD4AAAAmAAAAJwAAAD8AAAAAAAAANBAAACIAAABAAAAAJgAAACcAAABBAAAAAAAAAKQQAAAjAAAAQgAAACYAAAAnAAAAQwAAAAAAAAAAAAAAOGPtPtoPST9emHs/2g/JP2k3rDFoISIztA8UM2ghojPbD0k/2w9Jv+TLFkDkyxbAAAAAAAAAAIDbD0lA2w9JwAMAAAAEAAAABAAAAAYAAACD+aIARE5uAPwpFQDRVycA3TT1AGLbwAA8mZUAQZBDAGNR/gC73qsAt2HFADpuJADSTUIASQbgAAnqLgAcktEA6x3+ACmxHADoPqcA9TWCAES7LgCc6YQAtCZwAEF+XwDWkTkAU4M5AJz0OQCLX4QAKPm9APgfOwDe/5cAD5gFABEv7wAKWosAbR9tAM9+NgAJyycARk+3AJ5mPwAt6l8Auid1AOXrxwA9e/EA9zkHAJJSigD7a+oAH7FfAAhdjQAwA1YAe/xGAPCrawAgvM8ANvSaAOOpHQBeYZEACBvmAIWZZQCgFF8AjUBoAIDY/wAnc00ABgYxAMpWFQDJqHMAe+JgAGuMwAAZxEcAzWfDAAno3ABZgyoAi3bEAKYclgBEr90AGVfRAKU+BQAFB/8AM34/AMIy6ACYT94Au30yACY9wwAea+8An/heADUfOgB/8soA8YcdAHyQIQBqJHwA1W76ADAtdwAVO0MAtRTGAMMZnQCtxMIALE1BAAwAXQCGfUYA43EtAJvGmgAzYgAAtNJ8ALSnlwA3VdUA1z72AKMQGABNdvwAZJ0qAHDXqwBjfPgAerBXABcV5wDASVYAO9bZAKeEOAAkI8sA1op3AFpUIwAAH7kA8QobABnO3wCfMf8AZh5qAJlXYQCs+0cAfn/YACJltwAy6IkA5r9gAO/EzQBsNgkAXT/UABbe1wBYO94A3puSANIiKAAohugA4lhNAMbKMgAI4xYA4H3LABfAUADzHacAGOBbAC4TNACDEmIAg0gBAPWOWwCtsH8AHunyAEhKQwAQZ9MAqt3YAK5fQgBqYc4ACiikANOZtAAGpvIAXHd/AKPCgwBhPIgAinN4AK+MWgBv170ALaZjAPS/ywCNge8AJsFnAFXKRQDK2TYAKKjSAMJhjQASyXcABCYUABJGmwDEWcQAyMVEAE2ykQAAF/MA1EOtAClJ5QD91RAAAL78AB6UzABwzu4AEz71AOzxgACz58MAx/goAJMFlADBcT4ALgmzAAtF8wCIEpwAqyB7AC61nwBHksIAezIvAAxVbQByp5AAa+cfADHLlgB5FkoAQXniAPTfiQDolJcA4uaEAJkxlwCI7WsAX182ALv9DgBImrQAZ6RsAHFyQgCNXTIAnxW4ALzlCQCNMSUA93Q5ADAFHAANDAEASwhoACzuWABHqpAAdOcCAL3WJAD3faYAbkhyAJ8W7wCOlKYAtJH2ANFTUQDPCvIAIJgzAPVLfgCyY2gA3T5fAEBdAwCFiX8AVVIpADdkwABt2BAAMkgyAFtMdQBOcdQARVRuAAsJwQAq9WkAFGbVACcHnQBdBFAAtDvbAOp2xQCH+RcASWt9AB0nugCWaSkAxsysAK0UVACQ4moAiNmJACxyUAAEpL4AdweUAPMwcAAA/CcA6nGoAGbCSQBk4D0Al92DAKM/lwBDlP0ADYaMADFB3gCSOZ0A3XCMABe35wAI3zsAFTcrAFyAoABagJMAEBGSAA/o2ABsgK8A2/9LADiQDwBZGHYAYqUVAGHLuwDHibkAEEC9ANLyBABJdScA67b2ANsiuwAKFKoAiSYvAGSDdgAJOzMADpQaAFE6qgAdo8IAr+2uAFwmEgBtwk0ALXqcAMBWlwADP4MACfD2ACtAjABtMZkAObQHAAwgFQDYw1sA9ZLEAMatSwBOyqUApzfNAOapNgCrkpQA3UJoABlj3gB2jO8AaItSAPzbNwCuoasA3xUxAACuoQAM+9oAZE1mAO0FtwApZTAAV1a/AEf/OgBq+bkAdb7zACiT3wCrgDAAZoz2AATLFQD6IgYA2eQdAD2zpABXG48ANs0JAE5C6QATvqQAMyO1APCqGgBPZagA0sGlAAs/DwBbeM0AI/l2AHuLBACJF3IAxqZTAG9u4gDv6wAAm0pYAMTatwCqZroAds/PANECHQCx8S0AjJnBAMOtdwCGSNoA912gAMaA9ACs8C8A3eyaAD9cvADQ3m0AkMcfACrbtgCjJToAAK+aAK1TkwC2VwQAKS20AEuAfgDaB6cAdqoOAHtZoQAWEioA3LctAPrl/QCJ2/4Aib79AOR2bAAGqfwAPoBwAIVuFQD9h/8AKD4HAGFnMwAqGIYATb3qALPnrwCPbW4AlWc5ADG/WwCE10gAMN8WAMctQwAlYTUAyXDOADDLuAC/bP0ApACiAAVs5ABa3aAAIW9HAGIS0gC5XIQAcGFJAGtW4ACZUgEAUFU3AB7VtwAz8cQAE25fAF0w5ACFLqkAHbLDAKEyNgAIt6QA6rHUABb3IQCPaeQAJ/93AAwDgACNQC0AT82gACClmQCzotMAL10KALT5QgAR2ssAfb7QAJvbwQCrF70AyqKBAAhqXAAuVRcAJwBVAH8U8ADhB4YAFAtkAJZBjQCHvt4A2v0qAGsltgB7iTQABfP+ALm/ngBoak8ASiqoAE/EWgAt+LwA11qYAPTHlQANTY0AIDqmAKRXXwAUP7EAgDiVAMwgAQBx3YYAyd62AL9g9QBNZREAAQdrAIywrACywNAAUVVIAB77DgCVcsMAowY7AMBANQAG3HsA4EXMAE4p+gDWysgA6PNBAHxk3gCbZNgA2b4xAKSXwwB3WNQAaePFAPDaEwC6OjwARhhGAFV1XwDSvfUAbpLGAKwuXQAORO0AHD5CAGHEhwAp/ekA59bzACJ8ygBvkTUACODFAP/XjQBuauIAsP3GAJMIwQB8XXQAa62yAM1unQA+cnsAxhFqAPfPqQApc98Atcm6ALcAUQDisg0AdLokAOV9YAB02IoADRUsAIEYDAB+ZpQAASkWAJ96dgD9/b4AVkXvANl+NgDs2RMAi7q5AMSX/AAxqCcA8W7DAJTFNgDYqFYAtKi1AM/MDgASiS0Ab1c0ACxWiQCZzuMA1iC5AGteqgA+KpwAEV/MAP0LSgDh9PsAjjttAOKGLADp1IQA/LSpAO/u0QAuNckALzlhADghRAAb2cgAgfwKAPtKagAvHNgAU7SEAE6ZjABUIswAKlXcAMDG1gALGZYAGnC4AGmVZAAmWmAAP1LuAH8RDwD0tREA/Mv1ADS8LQA0vO4A6F3MAN1eYABnjpsAkjPvAMkXuABhWJsA4Ve8AFGDxgDYPhAA3XFIAC0c3QCvGKEAISxGAFnz1wDZepgAnlTAAE+G+gBWBvwA5XmuAIkiNgA4rSIAZ5PcAFXoqgCCJjgAyuebAFENpACZM7EAqdcOAGkFSABlsvAAf4inAIhMlwD50TYAIZKzAHuCSgCYzyEAQJ/cANxHVQDhdDoAZ+tCAP6d3wBe1F8Ae2ekALqsegBV9qIAK4gjAEG6VQBZbggAISqGADlHgwCJ4+YA5Z7UAEn7QAD/VukAHA/KAMVZigCU+isA08HFAA/FzwDbWq4AR8WGAIVDYgAhhjsALHmUABBhhwAqTHsAgCwaAEO/EgCIJpAAeDyJAKjE5ADl23sAxDrCACb06gD3Z4oADZK/AGWjKwA9k7EAvXwLAKRR3AAn3WMAaeHdAJqUGQCoKZUAaM4oAAnttABEnyAATpjKAHCCYwB+fCMAD7kyAKf1jgAUVucAIfEIALWdKgBvfk0ApRlRALX5qwCC39YAlt1hABY2AgDEOp8Ag6KhAHLtbQA5jXoAgripAGsyXABGJ1sAADTtANIAdwD89FUAAVlNAOBxgAAAAAAAAAAAAAAAAED7Ifk/AAAAAC1EdD4AAACAmEb4PAAAAGBRzHg7AAAAgIMb8DkAAABAICV6OAAAAIAiguM2AAAAAB3zaTW+8/h57GH2PxkwllvG/t6/PYivSu1x9T+k/NQyaAvbv7AQ8PA5lfQ/e7cfCotB17+FA7iwlcnzP3vPbRrpndO/pWSIDBkN8z8xtvLzmx3Qv6COC3siXvI/8Ho7Gx18yb8/NBpKSrvxP588r5Pj+cK/uuWK8Fgj8T9cjXi/y2C5v6cAmUE/lfA/zl9Htp1vqr8AAAAAAADwPwAAAAAAAAAArEea/Yxg7j899SSfyjizP6BqAh+zpOw/upE4VKl2xD/m/GpXNiDrP9LkxEoLhM4/LaqhY9HC6T8cZcbwRQbUP+1BeAPmhug/+J8bLJyO2D9iSFP13GfnP8x7sU6k4Nw/C25JyRZ20j96xnWgaRnXv926p2wKx94/yPa+SEcV578ruCplRxX3PwAAAAAAAPA/dIUV07DZ7z8PiflsWLXvP1FbEtABk+8/e1F9PLhy7z+quWgxh1TvPzhidW56OO8/4d4f9Z0e7z8VtzEK/gbvP8upOjen8e4/IjQSTKbe7j8tiWFgCM7uPycqNtXav+4/gk+dViu07j8pVEjdB6vuP4VVOrB+pO4/zTt/Zp6g7j90X+zodZ/uP4cB63MUoe4/E85MmYml7j/boCpC5azuP+XFzbA3t+4/kPCjgpHE7j9dJT6yA9XuP63TWpmf6O4/R1778nb/7j+cUoXdmxnvP2mQ79wgN+8/h6T73BhY7z9fm3szl3zvP9qQpKKvpO8/QEVuW3bQ7z8AAAAAAADoQpQjkUv4aqw/88T6UM6/zj/WUgz/Qi7mPwAAAAAAADhD/oIrZUcVR0CUI5FL+Gq8PvPE+lDOvy4/1lIM/0Iulj8AAAAANCYAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAAAMFwAAVyYAAGJ0Q29sbGlzaW9uT2JqZWN0RmxvYXREYXRhADE3YnRDb2xsaXNpb25PYmplY3QAYnRDb2xsaXNpb25TaGFwZURhdGEAMTZidENvbGxpc2lvblNoYXBlAAAMFwAAgCYAADQXAACoJgAAlCYAADEzYnRDb252ZXhTaGFwZQAAAAAAHCcAAFEAAABSAAAAUwAAAFQAAABVAAAAVgAAAFcAAABYAAAAKAAAACgAAABZAAAAWgAAAFsAAABcAAAAXQAAAF4AAABfAAAAKAAAAGAAAAAoAAAAYQAAAGIAAABjAAAANBcAACgnAACcJgAAMjFidENvbnZleEludGVybmFsU2hhcGUAAAAAAFAnAABkAAAAZQAAAAwXAABYJwAAMThidENvbnZleFBvbHloZWRyb24AAAAAAAAAAPgnAABmAAAAZwAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAGgAAAAoAAAAWQAAAFoAAABbAAAAXAAAAF0AAABeAAAAXwAAAGkAAABgAAAAagAAAGEAAABiAAAAYwAAAGsAAABsAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAADQXAAAEKAAAHCcAADIzYnRQb2x5aGVkcmFsQ29udmV4U2hhcGUAAAAAAAAArCgAAGYAAABtAAAAbgAAAFQAAABVAAAAVgAAAG8AAABYAAAAcAAAAHEAAABZAAAAcgAAAFsAAABcAAAAXQAAAF4AAABzAAAAdAAAAGAAAAB1AAAAYQAAAHYAAAB3AAAAawAAAGwAAAB4AAAAeQAAAHoAAAB7AAAAfAAAAH0AAAB+AAAAfwAAADQXAAB+KQAA+CcAAAAAAAAAAAAAAQAAAAIAAAAAAAAAAQAAAAIAAAADAAAABAAAAAQAAAAFAAAABgAAAAEAAAACAAAAAwAAAAMAAAAEAAAABQAAAAYAAAAHAAAABQAAAAYAAAAHAAAABwAAAAAAgD8AAIC/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAPwAAgL8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA/AACAv2J0Q29udmV4SW50ZXJuYWxTaGFwZURhdGEAQm94ADEwYnRCb3hTaGFwZQAAAAAAAPApAABRAAAAgAAAAIEAAABUAAAAVQAAAFYAAACCAAAAWAAAAIMAAACEAAAAhQAAAIYAAABbAAAAhwAAAIgAAABeAAAAXwAAAIkAAABgAAAAigAAAGEAAABiAAAAYwAAADQXAAAcKgAAHCcAAGJ0Q2Fwc3VsZVNoYXBlRGF0YQBDYXBzdWxlU2hhcGUAMTRidENhcHN1bGVTaGFwZQAAAAAAAAAAmCoAAFEAAACLAAAAjAAAAFQAAABVAAAAVgAAAI0AAABYAAAAjgAAAI8AAACQAAAAkQAAAFsAAACSAAAAkwAAAF4AAACUAAAAlQAAAGAAAACWAAAAYQAAAGIAAABjAAAAlwAAADQXAADCKgAAHCcAAGJ0Q3lsaW5kZXJTaGFwZURhdGEAQ3lsaW5kZXJZADE1YnRDeWxpbmRlclNoYXBlAAAAAAA4KwAAUQAAAJgAAABTAAAAVAAAAFUAAABWAAAAmQAAAFgAAACaAAAAmwAAAJwAAABaAAAAWwAAAJ0AAACeAAAAXgAAAJ8AAACgAAAAYAAAAKEAAABhAAAAYgAAAGMAAAA0FwAAWSsAABwnAABidENvbmVTaGFwZURhdGEAQ29uZQAxMWJ0Q29uZVNoYXBlAAA0FwAAdCsAAJQmAAAxNGJ0Q29uY2F2ZVNoYXBlAAAAAAAAAADUKwAAogAAAKMAAACkAAAAVAAAAFUAAABWAAAApQAAAKYAAACnAAAAqAAAAFkAAACpAAAAqgAAAKsAAACsAAAAXgAAAK0AAAA0FwAAAywAAGgrAABidFN0YXRpY1BsYW5lU2hhcGVEYXRhAFNUQVRJQ1BMQU5FADE4YnRTdGF0aWNQbGFuZVNoYXBlAE42YnREYnZ0OElDb2xsaWRlRQAADBcAABgsAAAAAAAAhCwAAK4AAACvAAAAsAAAAFQAAABVAAAAVgAAALEAAACyAAAAswAAALQAAABZAAAAtQAAALYAAAC3AAAAuAAAAF4AAAC5AAAAugAAADQXAADGLAAAlCYAAGJ0Q29tcG91bmRTaGFwZUNoaWxkRGF0YQBidENvbXBvdW5kU2hhcGVEYXRhAENvbXBvdW5kADE1YnRDb21wb3VuZFNoYXBlADE4YnRUcmlhbmdsZUNhbGxiYWNrAAAAAAwXAADYLAAAMzFidEludGVybmFsVHJpYW5nbGVJbmRleENhbGxiYWNrAAAADBcAAPgsAABidEludEluZGV4RGF0YQBidFNob3J0SW50SW5kZXhUcmlwbGV0RGF0YQBidENoYXJJbmRleFRyaXBsZXREYXRhAGJ0VmVjdG9yM0Zsb2F0RGF0YQBidFZlY3RvcjNEb3VibGVEYXRhAGJ0TWVzaFBhcnREYXRhAGJ0U3RyaWRpbmdNZXNoSW50ZXJmYWNlRGF0YQAyM2J0U3RyaWRpbmdNZXNoSW50ZXJmYWNlAAAAAAwXAAC3LQAAAAAAACAuAAC7AAAAvAAAAL0AAAC+AAAAvwAAAMAAAADBAAAAwgAAAMMAAADEAAAAxQAAAMYAAADHAAAAyAAAAMkAAAA0FwAALC4AANQtAAAyNmJ0VHJpYW5nbGVJbmRleFZlcnRleEFycmF5AAAAAAAAAACQLgAAygAAAMsAAAC9AAAAvgAAAL8AAADAAAAAwQAAAMIAAADMAAAAzQAAAMUAAADGAAAAxwAAAMgAAADJAAAANBcAAJwuAAAgLgAAMTRidFRyaWFuZ2xlTWVzaAAAAAAAAAAABC8AAM4AAADPAAAA0AAAAFQAAABVAAAAVgAAANEAAADSAAAA0wAAANQAAABZAAAAqQAAAKoAAADVAAAA1gAAAF4AAADXAAAA2AAAANkAAAA0FwAA2y8AAGgrAAAAAAAAJC8AANoAAADbAAAA3AAAADQXAAAwLwAA8CwAADIxU3VwcG9ydFZlcnRleENhbGxiYWNrAAAAAABcLwAA3QAAAN4AAADfAAAANBcAAGgvAAAcLQAAWk5LMTlidFRyaWFuZ2xlTWVzaFNoYXBlMTlwcm9jZXNzQWxsVHJpYW5nbGVzRVAxOGJ0VHJpYW5nbGVDYWxsYmFja1JLOWJ0VmVjdG9yM1M0X0UxNkZpbHRlcmVkQ2FsbGJhY2sAVFJJQU5HTEVNRVNIADE5YnRUcmlhbmdsZU1lc2hTaGFwZQAAAAAAAAAAGDAAAOAAAADhAAAA4gAAAOMAAADkAAAA5QAAAOYAAAAMFwAAezAAAGJ0T3B0aW1pemVkQnZoTm9kZURhdGEAYnRRdWFudGl6ZWRCdmhOb2RlRGF0YQBidEJ2aFN1YnRyZWVJbmZvRGF0YQBidFF1YW50aXplZEJ2aEZsb2F0RGF0YQAxNGJ0UXVhbnRpemVkQnZoAAAAAAC0MAAA5wAAAOgAAADiAAAA4wAAAOQAAADlAAAA5gAAAOkAAAA0FwAAwDAAABgwAAAxNGJ0T3B0aW1pemVkQnZoAAAAAAAAAABkMQAA3QAAAOoAAADrAAAAAAAAAPwwAADdAAAA7AAAAO0AAAA0FwAACDEAABwtAABaTjE0YnRPcHRpbWl6ZWRCdmg1YnVpbGRFUDIzYnRTdHJpZGluZ01lc2hJbnRlcmZhY2ViUks5YnRWZWN0b3IzUzRfRTIwTm9kZVRyaWFuZ2xlQ2FsbGJhY2sAADQXAABwMQAAHC0AAFpOMTRidE9wdGltaXplZEJ2aDVidWlsZEVQMjNidFN0cmlkaW5nTWVzaEludGVyZmFjZWJSSzlidFZlY3RvcjNTNF9FMjlRdWFudGl6ZWROb2RlVHJpYW5nbGVDYWxsYmFjawAAAAAAMDIAAO4AAADvAAAA0AAAAFQAAABVAAAAVgAAAPAAAADSAAAA0wAAAPEAAABZAAAAqQAAAKoAAADyAAAA8wAAAF4AAAD0AAAA2AAAANkAAAD1AAAA9gAAADQXAAAUMwAABC8AAAAAAABQMgAA9wAAAPgAAAD5AAAANBcAAFwyAADMMgAAWk5LMjJidEJ2aFRyaWFuZ2xlTWVzaFNoYXBlMTlwcm9jZXNzQWxsVHJpYW5nbGVzRVAxOGJ0VHJpYW5nbGVDYWxsYmFja1JLOWJ0VmVjdG9yM1M0X0UyMU15Tm9kZU92ZXJsYXBDYWxsYmFjawAAAAwXAADUMgAAMjFidE5vZGVPdmVybGFwQ2FsbGJhY2sAYnRUcmlhbmdsZU1lc2hTaGFwZURhdGEAQlZIVFJJQU5HTEVNRVNIADIyYnRCdmhUcmlhbmdsZU1lc2hTaGFwZQAAAAAAAAAARDMAAPcAAAD6AAAA+wAAADQXAABQMwAAzDIAAFpOMjJidEJ2aFRyaWFuZ2xlTWVzaFNoYXBlMTRwZXJmb3JtUmF5Y2FzdEVQMThidFRyaWFuZ2xlQ2FsbGJhY2tSSzlidFZlY3RvcjNTNF9FMjFNeU5vZGVPdmVybGFwQ2FsbGJhY2sAAAAAAMwzAAD3AAAA/AAAAP0AAAA0FwAA2DMAAMwyAABaTjIyYnRCdmhUcmlhbmdsZU1lc2hTaGFwZTE3cGVyZm9ybUNvbnZleGNhc3RFUDE4YnRUcmlhbmdsZUNhbGxiYWNrUks5YnRWZWN0b3IzUzRfUzRfUzRfRTIxTXlOb2RlT3ZlcmxhcENhbGxiYWNrAAAAAAAAAACYNAAA/gAAAP8AAAAAAQAAVAAAAFUAAABWAAAAAQEAAAIBAAADAQAABAEAAFkAAACpAAAAqgAAANUAAADWAAAAXgAAAAUBAAA0FwAAqjQAAGgrAABFbXB0eQAxMmJ0RW1wdHlTaGFwZQAAAAA0FwAAyDQAAOw0AAAzMGJ0QWN0aXZhdGluZ0NvbGxpc2lvbkFsZ29yaXRobQAAAAAMFwAA9DQAADIwYnRDb2xsaXNpb25BbGdvcml0aG0AYnRQZXJzaXN0ZW50TWFuaWZvbGRGbG9hdERhdGEAAAAACtejPAAAAABENQAABgEAAAcBAAAIAQAANBcAAFA1AABkNQAAMTdidEdqa1BhaXJEZXRlY3RvcgAMFwAAbDUAADM2YnREaXNjcmV0ZUNvbGxpc2lvbkRldGVjdG9ySW50ZXJmYWNlADEyYnRDb252ZXhDYXN0AAAADBcAAJM1AAAAAAAAwDUAAAkBAAAKAQAACwEAADQXAAAHNgAApDUAAAAAAADoNQAADAEAAA0BAAAOAQAADwEAABABAAA0FwAA9DUAAGg4AAAxNmJ0UG9pbnRDb2xsZWN0b3IAMTVidEdqa0NvbnZleENhc3QAAAAAAAAAADg2AAAMAQAAEQEAABIBAAATAQAAFAEAADQXAABENgAAaDgAADE2YnRNYW5pZm9sZFJlc3VsdABTUEhFUkUAAAAAAAAAxDYAAFEAAAAVAQAAFgEAAFQAAABVAAAAVgAAAFcAAABYAAAAFwEAABgBAABZAAAAGQEAABoBAABcAAAAXQAAAF4AAAAbAQAAHAEAAGAAAAAdAQAAYQAAAGIAAABjAAAANBcAANA2AAAcJwAAMTNidFNwaGVyZVNoYXBlAAAAAAD0NgAAHgEAAB8BAAAgAQAANBcAALo4AAAcQAAAAAAAABw3AAAhAQAAIgEAACMBAAAkAQAAJQEAADQXAACgOAAAvDQAAAAAAABENwAAJgEAACcBAAAoAQAAKQEAACoBAAAMFwAATDcAAE4xMmJ0Q29udmV4Q2FzdDEwQ2FzdFJlc3VsdEUAAAAAAAAAAMw3AAAMAQAAKwEAACwBAAAtAQAALgEAAAAAAACkNwAADAEAAC8BAAASAQAAEwEAADABAAA0FwAAsDcAADg2AAAyNGJ0UGVydHVyYmVkQ29udGFjdFJlc3VsdAAANBcAANg3AABoOAAAWk4yM2J0Q29udmV4Q29udmV4QWxnb3JpdGhtMTZwcm9jZXNzQ29sbGlzaW9uRVBLMjRidENvbGxpc2lvbk9iamVjdFdyYXBwZXJTMl9SSzE2YnREaXNwYXRjaGVySW5mb1AxNmJ0TWFuaWZvbGRSZXN1bHRFMjFidFdpdGhvdXRNYXJnaW5SZXN1bHQAAAAADBcAAHA4AABOMzZidERpc2NyZXRlQ29sbGlzaW9uRGV0ZWN0b3JJbnRlcmZhY2U2UmVzdWx0RQAyM2J0Q29udmV4Q29udmV4QWxnb3JpdGhtAE4yM2J0Q29udmV4Q29udmV4QWxnb3JpdGhtMTBDcmVhdGVGdW5jRQAAAAAAAAD4OAAACQEAADEBAAAyAQAANBcAAAQ5AACkNQAAMjJidFN1YnNpbXBsZXhDb252ZXhDYXN0AAAAAAAAAAAsOgAAMwEAADQBAAA1AQAANgEAADcBAAAAAAAAUDkAADgBAAA5AQAAOgEAADQXAAAPOgAA8CwAAAAAAADoOQAAZgAAADsBAAA8AQAAVAAAAFUAAABWAAAAVwAAAFgAAAA9AQAAPgEAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAAA/AQAAYAAAAEABAABhAAAAQQEAAEIBAABrAAAAbAAAAEMBAABEAQAARQEAAEYBAABHAQAASAEAAEkBAABKAQAANBcAAP05AAD4JwAAVHJpYW5nbGUAMTVidFRyaWFuZ2xlU2hhcGUAMjRidENvbnZleFRyaWFuZ2xlQ2FsbGJhY2sAAAA0FwAA9joAALw0AAAAAAAATDoAANoAAABLAQAATAEAADQXAABYOgAA8CwAAFpOMzNidENvbnZleENvbmNhdmVDb2xsaXNpb25BbGdvcml0aG0yMWNhbGN1bGF0ZVRpbWVPZkltcGFjdEVQMTdidENvbGxpc2lvbk9iamVjdFMxX1JLMTZidERpc3BhdGNoZXJJbmZvUDE2YnRNYW5pZm9sZFJlc3VsdEUzMUxvY2FsVHJpYW5nbGVTcGhlcmVDYXN0Q2FsbGJhY2sAMzNidENvbnZleENvbmNhdmVDb2xsaXNpb25BbGdvcml0aG0AAAAAAAAAODsAAE0BAABOAQAATwEAAFABAABRAQAANBcAAJE7AAC8NAAAAAAAAGw7AABSAQAAUwEAAFQBAABVAQAAVgEAAFcBAABYAQAAWQEAADQXAAB4OwAALCwAADIyYnRDb21wb3VuZExlYWZDYWxsYmFjawAyOGJ0Q29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0AAAAAAMw7AABaAQAAWwEAAFwBAABdAQAAXgEAAAwXAADUOwAAMjNidEhhc2hlZFNpbXBsZVBhaXJDYWNoZQAAAAAAAAAMPAAAXwEAAGABAABhAQAAYgEAAGMBAAA0FwAAbTwAADg7AAAAAAAAQDwAAFIBAABkAQAAZQEAAGYBAABWAQAAVwEAAFgBAABZAQAANBcAAEw8AAAsLAAAMzBidENvbXBvdW5kQ29tcG91bmRMZWFmQ2FsbGJhY2sAMzZidENvbXBvdW5kQ29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0AAAAAALA8AABnAQAAaAEAAGkBAABqAQAAawEAADQXAAC8PAAA7DQAADE2YnRFbXB0eUFsZ29yaXRobQAAAAAAAOw8AABsAQAAbQEAAG4BAABvAQAAcAEAADQXAAD4PAAAvDQAADMyYnRTcGhlcmVTcGhlcmVDb2xsaXNpb25BbGdvcml0aG0AAAAAAAAwPQAABgEAAHEBAAByAQAANBcAADw9AABkNQAAMjJTcGhlcmVUcmlhbmdsZURldGVjdG9yAAAAAAAAAAB0PQAAcwEAAHQBAAB1AQAAdgEAAHcBAAA0FwAAgD0AALw0AAAzNGJ0U3BoZXJlVHJpYW5nbGVDb2xsaXNpb25BbGdvcml0aG0AAAAAAAAAALw9AAAGAQAAeAEAAHkBAAA0FwAAyD0AAGQ1AAAxNmJ0Qm94Qm94RGV0ZWN0b3IAAAAAAAD4PQAAegEAAHsBAAB8AQAAfQEAAH4BAAA0FwAABD4AALw0AAAyNmJ0Qm94Qm94Q29sbGlzaW9uQWxnb3JpdGhtAAAAAAAAAABAPgAAfwEAAIABAACBAQAAggEAAIMBAAA0FwAATD4AAOw0AAAzMWJ0Q29udmV4UGxhbmVDb2xsaXNpb25BbGdvcml0aG0AAAABAAAAAgAAAAAAAAACAAAAAAAAAAEAAAAAAAAAnD4AAIQBAACFAQAAhgEAADQXAACoPgAAzD4AADMwYnRHamtFcGFQZW5ldHJhdGlvbkRlcHRoU29sdmVyAAAAAAwXAADUPgAAMzBidENvbnZleFBlbmV0cmF0aW9uRGVwdGhTb2x2ZXIAAAAAAAAAAHhCAACHAQAAiAEAAIkBAACKAQAAiwEAAIwBAAAAAAAAOEIAAI0BAACOAQAAjwEAAAAAAADwQQAAjQEAAJABAACRAQAAAAAAALRBAACNAQAAkgEAAJMBAAAAAAAAcEEAAI0BAACUAQAAlQEAAAAAAAAwQQAAjQEAAJYBAACXAQAAAAAAAABBAACNAQAAmAEAAJkBAAAAAAAAwEAAAI0BAACaAQAAmwEAAAAAAACAQAAAjQEAAJwBAACdAQAAAAAAAEhAAACNAQAAngEAAJ8BAAAAAAAA4D8AAI0BAACgAQAAoQEAADQXAADsPwAAHEAAAE4zMWJ0Q29udmV4UGxhbmVDb2xsaXNpb25BbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAwXAAAkQAAAMzBidENvbGxpc2lvbkFsZ29yaXRobUNyZWF0ZUZ1bmMAAAAANBcAAFRAAAAcQAAATjI2YnRCb3hCb3hDb2xsaXNpb25BbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAA0FwAAjEAAABxAAABOMzRidFNwaGVyZVRyaWFuZ2xlQ29sbGlzaW9uQWxnb3JpdGhtMTBDcmVhdGVGdW5jRQAANBcAAMxAAAAcQAAATjMyYnRTcGhlcmVTcGhlcmVDb2xsaXNpb25BbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAAAADQXAAAMQQAAHEAAAE4xNmJ0RW1wdHlBbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAAAADQXAAA8QQAAHEAAAE4yOGJ0Q29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0xN1N3YXBwZWRDcmVhdGVGdW5jRQA0FwAAfEEAABxAAABOMzZidENvbXBvdW5kQ29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAAAADQXAADAQQAAHEAAAE4yOGJ0Q29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAAAADQXAAD8QQAAHEAAAE4zM2J0Q29udmV4Q29uY2F2ZUNvbGxpc2lvbkFsZ29yaXRobTE3U3dhcHBlZENyZWF0ZUZ1bmNFAAAAADQXAABEQgAAHEAAAE4zM2J0Q29udmV4Q29uY2F2ZUNvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAAAA0FwAAhEIAAKhCAAAzMWJ0RGVmYXVsdENvbGxpc2lvbkNvbmZpZ3VyYXRpb24AAAAMFwAAsEIAADI0YnRDb2xsaXNpb25Db25maWd1cmF0aW9uADEyYnREaXNwYXRjaGVyAAAADBcAAMtCAAAAAAAALEMAAKIBAACjAQAApAEAAKUBAACmAQAApwEAAKgBAACpAQAAqgEAAKsBAACsAQAArQEAAK4BAACvAQAAsAEAALEBAAA0FwAAkEMAANxCAAAAAAAATEMAALIBAACzAQAAtAEAADQXAABYQwAAdEMAADIzYnRDb2xsaXNpb25QYWlyQ2FsbGJhY2sAAAAMFwAAfEMAADE3YnRPdmVybGFwQ2FsbGJhY2sAMjFidENvbGxpc2lvbkRpc3BhdGNoZXIAAAAAAPhDAAC1AQAAtgEAALcBAAC4AQAAuQEAALoBAAC7AQAAvAEAAL0BAAC+AQAAvwEAAMABAADBAQAAwgEAAMMBAADEAQAAxQEAAMYBAAA0FwAANUUAAFRFAAAAAAAAGEQAALIBAADHAQAAyAEAADQXAAAkRAAAdEMAAFpOMjhidEhhc2hlZE92ZXJsYXBwaW5nUGFpckNhY2hlMTljbGVhblByb3h5RnJvbVBhaXJzRVAxN2J0QnJvYWRwaGFzZVByb3h5UDEyYnREaXNwYXRjaGVyRTE3Q2xlYW5QYWlyQ2FsbGJhY2sAAAAAAAAAqEQAALIBAADJAQAAygEAADQXAAC0RAAAdEMAAFpOMjhidEhhc2hlZE92ZXJsYXBwaW5nUGFpckNhY2hlMzdyZW1vdmVPdmVybGFwcGluZ1BhaXJzQ29udGFpbmluZ1Byb3h5RVAxN2J0QnJvYWRwaGFzZVByb3h5UDEyYnREaXNwYXRjaGVyRTE4UmVtb3ZlUGFpckNhbGxiYWNrADI4YnRIYXNoZWRPdmVybGFwcGluZ1BhaXJDYWNoZQA0FwAAYEUAAHxFAAAyMmJ0T3ZlcmxhcHBpbmdQYWlyQ2FjaGUAAAAADBcAAIRFAAAyNWJ0T3ZlcmxhcHBpbmdQYWlyQ2FsbGJhY2sAAAAAAOBFAADLAQAAzAEAAM0BAADOAQAAzwEAANABAADRAQAA0gEAANMBAADUAQAA1QEAANYBAADXAQAA2AEAADQXAADORgAA5EYAAAAAAAAURgAAUgEAANkBAADaAQAA2wEAAFYBAABXAQAAWAEAAFkBAAA0FwAAIEYAACwsAAAxOGJ0RGJ2dFRyZWVDb2xsaWRlcgAAAAAAAAAAYEYAAFIBAADcAQAAVAEAAN0BAABWAQAAVwEAAFgBAABZAQAANBcAAGxGAAAsLAAAMjBCcm9hZHBoYXNlQWFiYlRlc3RlcgAAAAAAAKxGAABSAQAA3gEAAFQBAADfAQAAVgEAAFcBAABYAQAAWQEAADQXAAC4RgAALCwAADE5QnJvYWRwaGFzZVJheVRlc3RlcgAxNmJ0RGJ2dEJyb2FkcGhhc2UAAAAADBcAAOxGAAAyMWJ0QnJvYWRwaGFzZUludGVyZmFjZQAAAAAAKEcAAOABAADhAQAATAAAAE0AAADiAQAA4wEAAOQBAAA0FwAASUcAADQmAABidFJpZ2lkQm9keUZsb2F0RGF0YQAxMWJ0UmlnaWRCb2R5AAAAAAAAnEcAAOUBAADmAQAA5wEAAOgBAADpAQAA6gEAAOsBAADsAQAA7QEAAO4BAADvAQAA8AEAAPEBAADyAQAA8wEAADQXAACoRwAA0EcAADM1YnRTZXF1ZW50aWFsSW1wdWxzZUNvbnN0cmFpbnRTb2x2ZXIAAAAMFwAA2EcAADE4YnRDb25zdHJhaW50U29sdmVyAAAAAAAAAAABAAAAAgAAAAAAAAAQSAAACQEAAPQBAAD1AQAANBcAABxIAACkNQAAMjdidENvbnRpbnVvdXNDb252ZXhDb2xsaXNpb24AAAA0FwAASEgAAPAsAAAyNWJ0VHJpYW5nbGVSYXljYXN0Q2FsbGJhY2sAAAAAAHxIAADaAAAA9gEAAPcBAAAoAAAANBcAAIhIAADwLAAAMjhidFRyaWFuZ2xlQ29udmV4Y2FzdENhbGxiYWNrAAAAAAAA6EgAAPgBAAD5AQAA+gEAAPsBAAD8AQAA/QEAAP4BAAD/AQAAAAIAAAECAAACAgAAAwIAAAQCAAAFAgAADBcAAGdNAAAAAAAABEkAAAYCAAAHAgAACAIAADQXAADjSwAA/EsAAAAAAACISgAA2gAAAAkCAAAKAgAACwIAAAAAAAD8SQAAUgEAAAwCAABUAQAADQIAAFYBAABXAQAAWAEAAFkBAAAAAAAAaEkAAA4CAAAPAgAAEAIAABECAAA0FwAAdEkAAEBUAABaTjE2YnRDb2xsaXNpb25Xb3JsZDIxcmF5VGVzdFNpbmdsZUludGVybmFsRVJLMTFidFRyYW5zZm9ybVMyX1BLMjRidENvbGxpc2lvbk9iamVjdFdyYXBwZXJSTlNfMTdSYXlSZXN1bHRDYWxsYmFja0VFMTVMb2NhbEluZm9BZGRlcjIAAAAANBcAAAhKAAAsLAAAWk4xNmJ0Q29sbGlzaW9uV29ybGQyMXJheVRlc3RTaW5nbGVJbnRlcm5hbEVSSzExYnRUcmFuc2Zvcm1TMl9QSzI0YnRDb2xsaXNpb25PYmplY3RXcmFwcGVyUk5TXzE3UmF5UmVzdWx0Q2FsbGJhY2tFRTlSYXlUZXN0ZXIAAAA0FwAAlEoAADxIAABaTjE2YnRDb2xsaXNpb25Xb3JsZDIxcmF5VGVzdFNpbmdsZUludGVybmFsRVJLMTFidFRyYW5zZm9ybVMyX1BLMjRidENvbGxpc2lvbk9iamVjdFdyYXBwZXJSTlNfMTdSYXlSZXN1bHRDYWxsYmFja0VFMjlCcmlkZ2VUcmlhbmdsZVJheWNhc3RDYWxsYmFja18wAAAAAAAAAABESwAA2gAAABICAAAKAgAAEwIAADQXAABQSwAAPEgAAFpOMTZidENvbGxpc2lvbldvcmxkMjFyYXlUZXN0U2luZ2xlSW50ZXJuYWxFUksxMWJ0VHJhbnNmb3JtUzJfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18xN1JheVJlc3VsdENhbGxiYWNrRUUyOUJyaWRnZVRyaWFuZ2xlUmF5Y2FzdENhbGxiYWNrADE5YnRTaW5nbGVSYXlDYWxsYmFjawAAAAA0FwAACEwAACRMAAAyM2J0QnJvYWRwaGFzZVJheUNhbGxiYWNrAAAADBcAACxMAAAyNGJ0QnJvYWRwaGFzZUFhYmJDYWxsYmFjawAAAAAAAHRMAAAUAgAAFQIAABYCAAAXAgAA/P///3RMAAAYAgAAGQIAABoCAACQFwAAlEwAAAAAAAACAAAA8CwAAAIAAAAcLQAAAgQAADE3RGVidWdEcmF3Y2FsbGJhY2sAT3ZlcmZsb3cgaW4gQUFCQiwgb2JqZWN0IHJlbW92ZWQgZnJvbSBzaW11bGF0aW9uAElmIHlvdSBjYW4gcmVwcm9kdWNlIHRoaXMsIHBsZWFzZSBlbWFpbCBidWdzQGNvbnRpbnVvdXNwaHlzaWNzLmNvbQoAUGxlYXNlIGluY2x1ZGUgYWJvdmUgaW5mb3JtYXRpb24sIHlvdXIgUGxhdGZvcm0sIHZlcnNpb24gb2YgT1MuCgBUaGFua3MuCgAxNmJ0Q29sbGlzaW9uV29ybGQAAAAAAAAATFAAANoAAAAbAgAA9wEAABwCAAAAAAAAjE8AANoAAAAdAgAA9wEAAB4CAAAAAAAA2E4AAFIBAAAfAgAAVAEAACACAABWAQAAVwEAAFgBAABZAQAAAAAAAOxNAAAhAgAAIgIAACMCAAAkAgAANBcAAPhNAAAcVQAAWlpOMTZidENvbGxpc2lvbldvcmxkMjVvYmplY3RRdWVyeVNpbmdsZUludGVybmFsRVBLMTNidENvbnZleFNoYXBlUksxMWJ0VHJhbnNmb3JtUzVfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18yMENvbnZleFJlc3VsdENhbGxiYWNrRWZFTjIyYnRDb21wb3VuZExlYWZDYWxsYmFjazEyUHJvY2Vzc0NoaWxkRWlTNV9QSzE2YnRDb2xsaXNpb25TaGFwZUUxNExvY2FsSW5mb0FkZGVyAAA0FwAA5E4AACwsAABaTjE2YnRDb2xsaXNpb25Xb3JsZDI1b2JqZWN0UXVlcnlTaW5nbGVJbnRlcm5hbEVQSzEzYnRDb252ZXhTaGFwZVJLMTFidFRyYW5zZm9ybVM1X1BLMjRidENvbGxpc2lvbk9iamVjdFdyYXBwZXJSTlNfMjBDb252ZXhSZXN1bHRDYWxsYmFja0VmRTIyYnRDb21wb3VuZExlYWZDYWxsYmFjawAAAAA0FwAAmE8AAHxIAABaTjE2YnRDb2xsaXNpb25Xb3JsZDI1b2JqZWN0UXVlcnlTaW5nbGVJbnRlcm5hbEVQSzEzYnRDb252ZXhTaGFwZVJLMTFidFRyYW5zZm9ybVM1X1BLMjRidENvbGxpc2lvbk9iamVjdFdyYXBwZXJSTlNfMjBDb252ZXhSZXN1bHRDYWxsYmFja0VmRTMyQnJpZGdlVHJpYW5nbGVDb252ZXhjYXN0Q2FsbGJhY2tfMAAAAAA0FwAAWFAAAHxIAABaTjE2YnRDb2xsaXNpb25Xb3JsZDI1b2JqZWN0UXVlcnlTaW5nbGVJbnRlcm5hbEVQSzEzYnRDb252ZXhTaGFwZVJLMTFidFRyYW5zZm9ybVM1X1BLMjRidENvbGxpc2lvbk9iamVjdFdyYXBwZXJSTlNfMjBDb252ZXhSZXN1bHRDYWxsYmFja0VmRTMyQnJpZGdlVHJpYW5nbGVDb252ZXhjYXN0Q2FsbGJhY2sAAAAAAAAcUQAABgIAACUCAAAmAgAANBcAAChRAAD8SwAAMjFidFNpbmdsZVN3ZWVwQ2FsbGJhY2sAAAAAAFhRAAAnAgAAKAIAACkCAAAqAgAADBcAAGBRAAAyNWJ0U2ltdWxhdGlvbklzbGFuZE1hbmFnZXIAAAAAALxSAAArAgAALAIAAPoBAAD7AQAA/AEAAP0BAAAtAgAA/wEAAAACAAAuAgAAAgIAAC8CAAAEAgAAMAIAADECAAAyAgAAMwIAADQCAAA1AgAANgIAADcCAAA4AgAAOQIAADoCAAA7AgAAPAIAAD0CAAA+AgAAPwIAAEACAABBAgAAQgIAAEMCAABEAgAARQIAAEYCAABHAgAASAIAAEkCAABKAgAASwIAAEwCAABNAgAATgIAAE8CAABQAgAAUQIAAFICAAAAAAAAWFIAAFMCAABUAgAAVQIAADQXAABkUgAAhFIAADI3SW5wbGFjZVNvbHZlcklzbGFuZENhbGxiYWNrAAAADBcAAIxSAABOMjVidFNpbXVsYXRpb25Jc2xhbmRNYW5hZ2VyMTRJc2xhbmRDYWxsYmFja0UAAAA0FwAAKlMAAERTAAAAAAAA4FIAACECAABWAgAAVwIAAFgCAAA0FwAA7FIAANxUAAAzNGJ0Q2xvc2VzdE5vdE1lQ29udmV4UmVzdWx0Q2FsbGJhY2sAYnREeW5hbWljc1dvcmxkRmxvYXREYXRhADIzYnREaXNjcmV0ZUR5bmFtaWNzV29ybGQANBcAAFBTAADoSAAAMTVidER5bmFtaWNzV29ybGQAAAAAAAAAfFMAAFkCAABaAgAAWwIAAFwCAAA0FwAAiFMAAJhTAAAxM0NDTW90aW9uU3RhdGUADBcAAKBTAAAxM2J0TW90aW9uU3RhdGUAAAAAAMhTAABZAgAAXQIAAF4CAABfAgAANBcAANRTAACYUwAAMjBidERlZmF1bHRNb3Rpb25TdGF0ZQAAAAAAAARUAAAOAgAAYAIAAGECAABiAgAANBcAABBUAABAVAAATjE2YnRDb2xsaXNpb25Xb3JsZDI0Q2xvc2VzdFJheVJlc3VsdENhbGxiYWNrRQAADBcAAEhUAABOMTZidENvbGxpc2lvbldvcmxkMTdSYXlSZXN1bHRDYWxsYmFja0UAAAAAAIhUAABjAgAAZAIAAGECAABlAgAANBcAAJRUAABAVAAATjE2YnRDb2xsaXNpb25Xb3JsZDI0QWxsSGl0c1JheVJlc3VsdENhbGxiYWNrRQAAAAAAANxUAAAhAgAAZgIAAGcCAABoAgAANBcAAOhUAAAcVQAATjE2YnRDb2xsaXNpb25Xb3JsZDI3Q2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrRQAAAAwXAAAkVQAATjE2YnRDb2xsaXNpb25Xb3JsZDIwQ29udmV4UmVzdWx0Q2FsbGJhY2tFAAAAAAAAaFUAAGkCAABqAgAAZwIAAGsCAAA0FwAAdFUAABxVAABOMTZidENvbGxpc2lvbldvcmxkMjNBbGxDb252ZXhSZXN1bHRDYWxsYmFja0UAAAAAAAAAuFUAAGwCAABtAgAAbgIAADQXAADEVQAA4FUAADIzY2NPdmVybGFwRmlsdGVyQ2FsbGJhY2sAAAAMFwAA6FUAADIzYnRPdmVybGFwRmlsdGVyQ2FsbGJhY2sA");
  base64DecodeToExistingUint8Array(bufferView, 22024, "AgAAAAEAAAAFAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAFAAAAgFgAAAAAAAAAAAAAAAAAAAIAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArFUAAA==");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.fd_close;
 var fimport$1 = env.fd_write;
 var fimport$3 = env.getWorldTransform;
 var fimport$4 = env.setWorldTransform;
 var legalimport$fimport$2 = env.fd_seek;
 var global$0 = 88432;
 var global$1 = 3464;
 var global$2 = 22028;
 var global$3 = 22024;
 var global$4 = 22684;
 var global$5 = 3500;
 var global$6 = 3580;
 var global$7 = 3536;
 var global$8 = 3692;
 var global$9 = 3732;
 var global$10 = 3616;
 var global$11 = 3600;
 var global$12 = 3624;
 var global$13 = 3664;
 var global$14 = 3644;
 var global$15 = 3676;
 var global$16 = 3704;
 var global$17 = 3744;
 var global$18 = 3780;
 var global$19 = 3868;
 var global$20 = 3896;
 var global$21 = 3816;
 var global$22 = 3848;
 var global$23 = 3832;
 var global$24 = 3856;
 var global$25 = 3880;
 var global$26 = 4052;
 var global$27 = 4004;
 var global$28 = 4100;
 var global$29 = 4448;
 var global$30 = 4148;
 var global$31 = 4396;
 var global$32 = 4200;
 var global$33 = 4260;
 var global$34 = 3971;
 var global$35 = 5932;
 var global$36 = 4016;
 var global$37 = 4064;
 var global$38 = 4112;
 var global$39 = 4160;
 var global$40 = 4212;
 var global$41 = 4284;
 var global$42 = 4312;
 var global$43 = 4380;
 var global$44 = 4340;
 var global$45 = 4392;
 var global$46 = 4404;
 var global$47 = 4408;
 var global$48 = 6144;
 var global$49 = 4424;
 var global$50 = 4428;
 var global$51 = 4444;
 var global$52 = 4456;
 var global$53 = 4460;
 var global$54 = 4476;
 var global$55 = 4484;
 var global$56 = 4500;
 var global$57 = 4504;
 var global$58 = 4512;
 var global$59 = 4516;
 var global$60 = 4532;
 var global$61 = 4536;
 var global$62 = 4552;
 var global$63 = 4556;
 var global$64 = 4564;
 var global$65 = 4568;
 var global$66 = 4584;
 var global$67 = 4588;
 var global$68 = 4604;
 var global$69 = 4608;
 var global$70 = 4616;
 var global$71 = 4620;
 var global$72 = 4636;
 var global$73 = 4640;
 var global$74 = 4656;
 var global$75 = 4660;
 var global$76 = 4668;
 var global$77 = 4672;
 var global$78 = 4688;
 var global$79 = 4692;
 var global$80 = 4708;
 var global$81 = 4712;
 var global$82 = 4720;
 var global$83 = 4724;
 var global$84 = 4740;
 var global$85 = 4744;
 var global$86 = 4760;
 var global$87 = 4764;
 var global$88 = 4772;
 var global$89 = 4776;
 var global$90 = 4792;
 var global$91 = 4796;
 var global$92 = 4812;
 var global$93 = 4816;
 var global$94 = 4824;
 var global$95 = 4828;
 var global$96 = 4844;
 var global$97 = 4848;
 var global$98 = 4864;
 var global$99 = 4868;
 var global$100 = 4876;
 var global$101 = 4880;
 var global$102 = 4896;
 var global$103 = 4900;
 var global$104 = 4916;
 var global$105 = 4920;
 var global$106 = 4928;
 var global$107 = 4932;
 var global$108 = 4948;
 var global$109 = 4952;
 var global$110 = 4968;
 var global$111 = 4972;
 var global$112 = 4980;
 var global$113 = 4984;
 var global$114 = 5e3;
 var global$115 = 5004;
 var global$116 = 5020;
 var global$117 = 5024;
 var global$118 = 5032;
 var global$119 = 5036;
 var global$120 = 5052;
 var global$121 = 5056;
 var global$122 = 5072;
 var global$123 = 5076;
 var global$124 = 5084;
 var global$125 = 5088;
 var global$126 = 5104;
 var global$127 = 5108;
 var global$128 = 5124;
 var global$129 = 5128;
 var global$130 = 5136;
 var global$131 = 5140;
 var global$132 = 5156;
 var global$133 = 5160;
 var global$134 = 5176;
 var global$135 = 5180;
 var global$136 = 5188;
 var global$137 = 5192;
 var global$138 = 5208;
 var global$139 = 5212;
 var global$140 = 5228;
 var global$141 = 5232;
 var global$142 = 5240;
 var global$143 = 5244;
 var global$144 = 5260;
 var global$145 = 5264;
 var global$146 = 5280;
 var global$147 = 5284;
 var global$148 = 5292;
 var global$149 = 5296;
 var global$150 = 5312;
 var global$151 = 5320;
 var global$152 = 5336;
 var global$153 = 5340;
 var global$154 = 5348;
 var global$155 = 5352;
 var global$156 = 5368;
 var global$157 = 5372;
 var global$158 = 5388;
 var global$159 = 5392;
 var global$160 = 5400;
 var global$161 = 5404;
 var global$162 = 5420;
 var global$163 = 5424;
 var global$164 = 5440;
 var global$165 = 5444;
 var global$166 = 5452;
 var global$167 = 5456;
 var global$168 = 5472;
 var global$169 = 5476;
 var global$170 = 5492;
 var global$171 = 5496;
 var global$172 = 5504;
 var global$173 = 5508;
 var global$174 = 5524;
 var global$175 = 5528;
 var global$176 = 5544;
 var global$177 = 5548;
 var global$178 = 5556;
 var global$179 = 5560;
 var global$180 = 5576;
 var global$181 = 5584;
 var global$182 = 5600;
 var global$183 = 5604;
 var global$184 = 5612;
 var global$185 = 5616;
 var global$186 = 5632;
 var global$187 = 5640;
 var global$188 = 5656;
 var global$189 = 5660;
 var global$190 = 5668;
 var global$191 = 5672;
 var global$192 = 5688;
 var global$193 = 5696;
 var global$194 = 5712;
 var global$195 = 5776;
 var global$196 = 5740;
 var global$197 = 5788;
 var global$198 = 5816;
 var global$199 = 5880;
 var global$200 = 5844;
 var global$201 = 5892;
 var global$202 = 6012;
 var global$203 = 5972;
 var global$204 = 6024;
 var global$205 = 6104;
 var global$206 = 6064;
 var global$207 = 6116;
 var global$208 = 6172;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  abort();
 }
 
 function $1($0_1) {
  if (!$0_1) {
   return __wasm_memory_size() << 16
  }
  if (!($0_1 & 65535 | ($0_1 | 0) <= -1)) {
   $0_1 = __wasm_memory_grow($0_1 >>> 16 | 0);
   if (($0_1 | 0) == -1) {
    HEAP32[5537] = 48;
    return -1;
   }
   return $0_1 << 16;
  }
  abort();
 }
 
 function $2($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP8[$0_1 | 0] = $1_1;
   $3_1 = $0_1 + $2_1 | 0;
   HEAP8[$3_1 - 1 | 0] = $1_1;
   if ($2_1 >>> 0 < 3) {
    break label$1
   }
   HEAP8[$0_1 + 2 | 0] = $1_1;
   HEAP8[$0_1 + 1 | 0] = $1_1;
   HEAP8[$3_1 - 3 | 0] = $1_1;
   HEAP8[$3_1 - 2 | 0] = $1_1;
   if ($2_1 >>> 0 < 7) {
    break label$1
   }
   HEAP8[$0_1 + 3 | 0] = $1_1;
   HEAP8[$3_1 - 4 | 0] = $1_1;
   if ($2_1 >>> 0 < 9) {
    break label$1
   }
   $3_1 = 0 - $0_1 & 3;
   $5_1 = $3_1 + $0_1 | 0;
   $1_1 = Math_imul($1_1 & 255, 16843009);
   HEAP32[$5_1 >> 2] = $1_1;
   $2_1 = $2_1 - $3_1 & -4;
   $3_1 = $2_1 + $5_1 | 0;
   HEAP32[$3_1 - 4 >> 2] = $1_1;
   if ($2_1 >>> 0 < 9) {
    break label$1
   }
   HEAP32[$5_1 + 8 >> 2] = $1_1;
   HEAP32[$5_1 + 4 >> 2] = $1_1;
   HEAP32[$3_1 - 8 >> 2] = $1_1;
   HEAP32[$3_1 - 12 >> 2] = $1_1;
   if ($2_1 >>> 0 < 25) {
    break label$1
   }
   HEAP32[$5_1 + 24 >> 2] = $1_1;
   HEAP32[$5_1 + 20 >> 2] = $1_1;
   HEAP32[$5_1 + 16 >> 2] = $1_1;
   HEAP32[$5_1 + 12 >> 2] = $1_1;
   HEAP32[$3_1 - 16 >> 2] = $1_1;
   HEAP32[$3_1 - 20 >> 2] = $1_1;
   HEAP32[$3_1 - 24 >> 2] = $1_1;
   HEAP32[$3_1 - 28 >> 2] = $1_1;
   $4_1 = $5_1 & 4 | 24;
   $2_1 = $2_1 - $4_1 | 0;
   if ($2_1 >>> 0 < 32) {
    break label$1
   }
   $3_1 = $1_1;
   $6_1 = $1_1;
   $1_1 = $5_1 + $4_1 | 0;
   while (1) {
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[$1_1 + 4 >> 2] = $3_1;
    $4_1 = $1_1 + 24 | 0;
    HEAP32[$4_1 >> 2] = $6_1;
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $4_1 = $1_1 + 16 | 0;
    HEAP32[$4_1 >> 2] = $6_1;
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $4_1 = $1_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = $6_1;
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 - 32 | 0;
    if ($2_1 >>> 0 > 31) {
     continue
    }
    break;
   };
  }
  return $0_1;
 }
 
 function $3($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  label$1 : {
   if (!(!$2_1 | !($1_1 & 3))) {
    $3_1 = $0_1;
    while (1) {
     HEAP8[$3_1 | 0] = HEAPU8[$1_1 | 0];
     $4_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     if (($2_1 | 0) == 1) {
      break label$1
     }
     $2_1 = $4_1;
     if ($1_1 & 3) {
      continue
     }
     break;
    };
    break label$1;
   }
   $4_1 = $2_1;
   $3_1 = $0_1;
  }
  $2_1 = $3_1 & 3;
  label$4 : {
   if (!$2_1) {
    label$6 : {
     if ($4_1 >>> 0 < 16) {
      $2_1 = $4_1;
      break label$6;
     }
     $2_1 = $4_1 - 16 | 0;
     while (1) {
      HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$3_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
      HEAP32[$3_1 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2];
      $3_1 = $3_1 + 16 | 0;
      $1_1 = $1_1 + 16 | 0;
      $4_1 = $4_1 - 16 | 0;
      if ($4_1 >>> 0 > 15) {
       continue
      }
      break;
     };
    }
    if ($2_1 & 8) {
     $4_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $3_1 = $3_1 + 8 | 0;
     $1_1 = $1_1 + 8 | 0;
    }
    if ($2_1 & 4) {
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
    }
    if ($2_1 & 2) {
     HEAP8[$3_1 | 0] = HEAPU8[$1_1 | 0];
     HEAP8[$3_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
     $3_1 = $3_1 + 2 | 0;
     $1_1 = $1_1 + 2 | 0;
    }
    if (!($2_1 & 1)) {
     break label$4
    }
    HEAP8[$3_1 | 0] = HEAPU8[$1_1 | 0];
    return $0_1;
   }
   label$12 : {
    if ($4_1 >>> 0 < 32) {
     break label$12
    }
    $2_1 = $2_1 - 1 | 0;
    if ($2_1 >>> 0 > 2) {
     break label$12
    }
    label$13 : {
     switch ($2_1 - 1 | 0) {
     default:
      HEAP8[$3_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
      $5_1 = HEAP32[$1_1 >> 2];
      HEAP8[$3_1 | 0] = $5_1;
      HEAP8[$3_1 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
      $8_1 = $4_1 - 3 | 0;
      $9_1 = $3_1 + 3 | 0;
      $10_1 = $4_1 - 20 & -16;
      $2_1 = 0;
      while (1) {
       $3_1 = $2_1 + $9_1 | 0;
       $7_1 = $1_1 + $2_1 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       HEAP32[$3_1 >> 2] = $6_1 << 8 | $5_1 >>> 24;
       $5_1 = HEAP32[$7_1 + 8 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $5_1 << 8 | $6_1 >>> 24;
       $6_1 = HEAP32[$7_1 + 12 >> 2];
       HEAP32[$3_1 + 8 >> 2] = $6_1 << 8 | $5_1 >>> 24;
       $5_1 = HEAP32[$7_1 + 16 >> 2];
       HEAP32[$3_1 + 12 >> 2] = $5_1 << 8 | $6_1 >>> 24;
       $2_1 = $2_1 + 16 | 0;
       $8_1 = $8_1 - 16 | 0;
       if ($8_1 >>> 0 > 16) {
        continue
       }
       break;
      };
      $3_1 = $2_1 + $9_1 | 0;
      $1_1 = ($1_1 + $2_1 | 0) + 3 | 0;
      $4_1 = ($4_1 - $10_1 | 0) - 19 | 0;
      break label$12;
     case 0:
      $5_1 = HEAP32[$1_1 >> 2];
      HEAP8[$3_1 | 0] = $5_1;
      HEAP8[$3_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
      $8_1 = $4_1 - 2 | 0;
      $9_1 = $3_1 + 2 | 0;
      $10_1 = $4_1 - 20 & -16;
      $2_1 = 0;
      while (1) {
       $3_1 = $2_1 + $9_1 | 0;
       $7_1 = $1_1 + $2_1 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       HEAP32[$3_1 >> 2] = $6_1 << 16 | $5_1 >>> 16;
       $5_1 = HEAP32[$7_1 + 8 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $5_1 << 16 | $6_1 >>> 16;
       $6_1 = HEAP32[$7_1 + 12 >> 2];
       HEAP32[$3_1 + 8 >> 2] = $6_1 << 16 | $5_1 >>> 16;
       $5_1 = HEAP32[$7_1 + 16 >> 2];
       HEAP32[$3_1 + 12 >> 2] = $5_1 << 16 | $6_1 >>> 16;
       $2_1 = $2_1 + 16 | 0;
       $8_1 = $8_1 - 16 | 0;
       if ($8_1 >>> 0 > 17) {
        continue
       }
       break;
      };
      $3_1 = $2_1 + $9_1 | 0;
      $1_1 = ($1_1 + $2_1 | 0) + 2 | 0;
      $4_1 = ($4_1 - $10_1 | 0) - 18 | 0;
      break label$12;
     case 1:
      break label$13;
     };
    }
    $5_1 = HEAP32[$1_1 >> 2];
    HEAP8[$3_1 | 0] = $5_1;
    $8_1 = $4_1 - 1 | 0;
    $9_1 = $3_1 + 1 | 0;
    $10_1 = $4_1 - 20 & -16;
    $2_1 = 0;
    while (1) {
     $3_1 = $2_1 + $9_1 | 0;
     $7_1 = $1_1 + $2_1 | 0;
     $6_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = $6_1 << 24 | $5_1 >>> 8;
     $5_1 = HEAP32[$7_1 + 8 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1 << 24 | $6_1 >>> 8;
     $6_1 = HEAP32[$7_1 + 12 >> 2];
     HEAP32[$3_1 + 8 >> 2] = $6_1 << 24 | $5_1 >>> 8;
     $5_1 = HEAP32[$7_1 + 16 >> 2];
     HEAP32[$3_1 + 12 >> 2] = $5_1 << 24 | $6_1 >>> 8;
     $2_1 = $2_1 + 16 | 0;
     $8_1 = $8_1 - 16 | 0;
     if ($8_1 >>> 0 > 18) {
      continue
     }
     break;
    };
    $3_1 = $2_1 + $9_1 | 0;
    $1_1 = ($1_1 + $2_1 | 0) + 1 | 0;
    $4_1 = ($4_1 - $10_1 | 0) - 17 | 0;
   }
   if ($4_1 & 16) {
    $2_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8;
    HEAP8[$3_1 | 0] = $2_1;
    HEAP8[$3_1 + 1 | 0] = $2_1 >>> 8;
    HEAP8[$3_1 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
    HEAP8[$3_1 + 3 | 0] = HEAPU8[$1_1 + 3 | 0];
    HEAP8[$3_1 + 4 | 0] = HEAPU8[$1_1 + 4 | 0];
    HEAP8[$3_1 + 5 | 0] = HEAPU8[$1_1 + 5 | 0];
    HEAP8[$3_1 + 6 | 0] = HEAPU8[$1_1 + 6 | 0];
    HEAP8[$3_1 + 7 | 0] = HEAPU8[$1_1 + 7 | 0];
    HEAP8[$3_1 + 8 | 0] = HEAPU8[$1_1 + 8 | 0];
    HEAP8[$3_1 + 9 | 0] = HEAPU8[$1_1 + 9 | 0];
    HEAP8[$3_1 + 10 | 0] = HEAPU8[$1_1 + 10 | 0];
    HEAP8[$3_1 + 11 | 0] = HEAPU8[$1_1 + 11 | 0];
    HEAP8[$3_1 + 12 | 0] = HEAPU8[$1_1 + 12 | 0];
    HEAP8[$3_1 + 13 | 0] = HEAPU8[$1_1 + 13 | 0];
    HEAP8[$3_1 + 14 | 0] = HEAPU8[$1_1 + 14 | 0];
    HEAP8[$3_1 + 15 | 0] = HEAPU8[$1_1 + 15 | 0];
    $3_1 = $3_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
   }
   if ($4_1 & 8) {
    HEAP8[$3_1 | 0] = HEAPU8[$1_1 | 0];
    HEAP8[$3_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
    HEAP8[$3_1 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
    HEAP8[$3_1 + 3 | 0] = HEAPU8[$1_1 + 3 | 0];
    HEAP8[$3_1 + 4 | 0] = HEAPU8[$1_1 + 4 | 0];
    HEAP8[$3_1 + 5 | 0] = HEAPU8[$1_1 + 5 | 0];
    HEAP8[$3_1 + 6 | 0] = HEAPU8[$1_1 + 6 | 0];
    HEAP8[$3_1 + 7 | 0] = HEAPU8[$1_1 + 7 | 0];
    $3_1 = $3_1 + 8 | 0;
    $1_1 = $1_1 + 8 | 0;
   }
   if ($4_1 & 4) {
    HEAP8[$3_1 | 0] = HEAPU8[$1_1 | 0];
    HEAP8[$3_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
    HEAP8[$3_1 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
    HEAP8[$3_1 + 3 | 0] = HEAPU8[$1_1 + 3 | 0];
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
   }
   if ($4_1 & 2) {
    HEAP8[$3_1 | 0] = HEAPU8[$1_1 | 0];
    HEAP8[$3_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
    $3_1 = $3_1 + 2 | 0;
    $1_1 = $1_1 + 2 | 0;
   }
   if (!($4_1 & 1)) {
    break label$4
   }
   HEAP8[$3_1 | 0] = HEAPU8[$1_1 | 0];
  }
  return $0_1;
 }
 
 function $4($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 16 | 0;
  global$0 = $11_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             if ($0_1 >>> 0 <= 236) {
              $5_1 = HEAP32[5538];
              $6_1 = $0_1 >>> 0 < 11 ? 16 : $0_1 + 19 & -16;
              $2_1 = $6_1 >>> 3 | 0;
              $1_1 = $5_1 >>> $2_1 | 0;
              if ($1_1 & 3) {
               $3_1 = ($2_1 | $1_1 & 1) ^ 1;
               $1_1 = $3_1 << 3;
               $4_1 = HEAP32[$1_1 + 22200 >> 2];
               $0_1 = $4_1 + 8 | 0;
               $2_1 = HEAP32[$4_1 + 8 >> 2];
               $1_1 = $1_1 + 22192 | 0;
               label$14 : {
                if (($2_1 | 0) == ($1_1 | 0)) {
                 (wasm2js_i32$0 = 22152, wasm2js_i32$1 = __wasm_rotl_i32($3_1) & $5_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                 break label$14;
                }
                HEAP32[$1_1 + 8 >> 2] = $2_1;
                HEAP32[$2_1 + 12 >> 2] = $1_1;
               }
               $1_1 = $3_1 << 3;
               HEAP32[$4_1 + 4 >> 2] = $1_1 | 3;
               $1_1 = $1_1 + $4_1 | 0;
               HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
               break label$1;
              }
              $9_1 = HEAP32[5540];
              if ($9_1 >>> 0 >= $6_1 >>> 0) {
               break label$11
              }
              if ($1_1) {
               $0_1 = 2 << $2_1;
               $0_1 = (0 - $0_1 | $0_1) & $1_1 << $2_1;
               $1_1 = (0 - $0_1 & $0_1) - 1 | 0;
               $0_1 = $1_1 >>> 12 & 16;
               $2_1 = $0_1;
               $1_1 = $1_1 >>> $0_1 | 0;
               $0_1 = $1_1 >>> 5 & 8;
               $2_1 = $2_1 | $0_1;
               $1_1 = $1_1 >>> $0_1 | 0;
               $0_1 = $1_1 >>> 2 & 4;
               $2_1 = $2_1 | $0_1;
               $1_1 = $1_1 >>> $0_1 | 0;
               $0_1 = $1_1 >>> 1 & 2;
               $2_1 = $2_1 | $0_1;
               $1_1 = $1_1 >>> $0_1 | 0;
               $0_1 = $1_1 >>> 1 & 1;
               $2_1 = ($2_1 | $0_1) + ($1_1 >>> $0_1 | 0) | 0;
               $0_1 = $2_1 << 3;
               $3_1 = HEAP32[$0_1 + 22200 >> 2];
               $1_1 = HEAP32[$3_1 + 8 >> 2];
               $0_1 = $0_1 + 22192 | 0;
               label$17 : {
                if (($1_1 | 0) == ($0_1 | 0)) {
                 $5_1 = __wasm_rotl_i32($2_1) & $5_1;
                 HEAP32[5538] = $5_1;
                 break label$17;
                }
                HEAP32[$0_1 + 8 >> 2] = $1_1;
                HEAP32[$1_1 + 12 >> 2] = $0_1;
               }
               $0_1 = $3_1 + 8 | 0;
               HEAP32[$3_1 + 4 >> 2] = $6_1 | 3;
               $1_1 = $2_1 << 3;
               $4_1 = $1_1 - $6_1 | 0;
               HEAP32[$1_1 + $3_1 >> 2] = $4_1;
               $3_1 = $3_1 + $6_1 | 0;
               HEAP32[$3_1 + 4 >> 2] = $4_1 | 1;
               if ($9_1) {
                $1_1 = $9_1 >>> 3 | 0;
                $2_1 = ($1_1 << 3) + 22192 | 0;
                $6_1 = HEAP32[5543];
                $1_1 = 1 << $1_1;
                label$20 : {
                 if (!($1_1 & $5_1)) {
                  HEAP32[5538] = $1_1 | $5_1;
                  $1_1 = $2_1;
                  break label$20;
                 }
                 $1_1 = HEAP32[$2_1 + 8 >> 2];
                }
                HEAP32[$1_1 + 12 >> 2] = $6_1;
                HEAP32[$2_1 + 8 >> 2] = $6_1;
                HEAP32[$6_1 + 12 >> 2] = $2_1;
                HEAP32[$6_1 + 8 >> 2] = $1_1;
               }
               HEAP32[5543] = $3_1;
               HEAP32[5540] = $4_1;
               break label$1;
              }
              $7_1 = HEAP32[5539];
              if (!$7_1) {
               break label$11
              }
              $1_1 = (0 - $7_1 & $7_1) - 1 | 0;
              $0_1 = $1_1 >>> 12 & 16;
              $2_1 = $0_1;
              $1_1 = $1_1 >>> $0_1 | 0;
              $0_1 = $1_1 >>> 5 & 8;
              $2_1 = $2_1 | $0_1;
              $1_1 = $1_1 >>> $0_1 | 0;
              $0_1 = $1_1 >>> 2 & 4;
              $2_1 = $2_1 | $0_1;
              $1_1 = $1_1 >>> $0_1 | 0;
              $0_1 = $1_1 >>> 1 & 2;
              $2_1 = $2_1 | $0_1;
              $1_1 = $1_1 >>> $0_1 | 0;
              $0_1 = $1_1 >>> 1 & 1;
              $1_1 = HEAP32[(($2_1 | $0_1) + ($1_1 >>> $0_1 | 0) << 2) + 22456 >> 2];
              $3_1 = (HEAP32[$1_1 + 4 >> 2] & -8) - $6_1 | 0;
              $2_1 = $1_1;
              while (1) {
               label$23 : {
                $0_1 = HEAP32[$2_1 + 16 >> 2];
                if (!$0_1) {
                 $0_1 = HEAP32[$2_1 + 20 >> 2];
                 if (!$0_1) {
                  break label$23
                 }
                }
                $2_1 = (HEAP32[$0_1 + 4 >> 2] & -8) - $6_1 | 0;
                $4_1 = $2_1 >>> 0 < $3_1 >>> 0;
                $3_1 = $4_1 ? $2_1 : $3_1;
                $1_1 = $4_1 ? $0_1 : $1_1;
                $2_1 = $0_1;
                continue;
               }
               break;
              };
              $10_1 = HEAP32[$1_1 + 24 >> 2];
              $4_1 = HEAP32[$1_1 + 12 >> 2];
              if (($4_1 | 0) != ($1_1 | 0)) {
               $0_1 = HEAP32[$1_1 + 8 >> 2];
               HEAP32[$4_1 + 8 >> 2] = $0_1;
               HEAP32[$0_1 + 12 >> 2] = $4_1;
               break label$2;
              }
              $2_1 = $1_1 + 20 | 0;
              $0_1 = HEAP32[$2_1 >> 2];
              if (!$0_1) {
               $0_1 = HEAP32[$1_1 + 16 >> 2];
               if (!$0_1) {
                break label$10
               }
               $2_1 = $1_1 + 16 | 0;
              }
              while (1) {
               $8_1 = $2_1;
               $4_1 = $0_1;
               $2_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$2_1 >> 2];
               if ($0_1) {
                continue
               }
               $2_1 = $4_1 + 16 | 0;
               $0_1 = HEAP32[$4_1 + 16 >> 2];
               if ($0_1) {
                continue
               }
               break;
              };
              HEAP32[$8_1 >> 2] = 0;
              break label$2;
             }
             $6_1 = -1;
             if ($0_1 >>> 0 > 4294967231) {
              break label$11
             }
             $0_1 = $0_1 + 19 | 0;
             $6_1 = $0_1 & -16;
             $7_1 = HEAP32[5539];
             if (!$7_1) {
              break label$11
             }
             $2_1 = 0 - $6_1 | 0;
             $0_1 = $0_1 >>> 8 | 0;
             $8_1 = 0;
             label$32 : {
              if (!$0_1) {
               break label$32
              }
              $8_1 = 31;
              if ($6_1 >>> 0 > 16777215) {
               break label$32
              }
              $1_1 = $0_1 + 1048320 >>> 16 & 8;
              $0_1 = $0_1 << $1_1;
              $5_1 = $0_1 + 520192 >>> 16 & 4;
              $0_1 = $0_1 << $5_1;
              $3_1 = $0_1 + 245760 >>> 16 & 2;
              $0_1 = ($0_1 << $3_1 >>> 15 | 0) - ($3_1 | ($1_1 | $5_1)) | 0;
              $8_1 = ($0_1 << 1 | $6_1 >>> $0_1 + 21 & 1) + 28 | 0;
             }
             $3_1 = HEAP32[($8_1 << 2) + 22456 >> 2];
             label$29 : {
              label$30 : {
               label$31 : {
                if (!$3_1) {
                 $0_1 = 0;
                 break label$31;
                }
                $1_1 = $6_1 << (($8_1 | 0) == 31 ? 0 : 25 - ($8_1 >>> 1 | 0) | 0);
                $0_1 = 0;
                while (1) {
                 label$35 : {
                  $5_1 = (HEAP32[$3_1 + 4 >> 2] & -8) - $6_1 | 0;
                  if ($5_1 >>> 0 >= $2_1 >>> 0) {
                   break label$35
                  }
                  $4_1 = $3_1;
                  $2_1 = $5_1;
                  if ($2_1) {
                   break label$35
                  }
                  $2_1 = 0;
                  $0_1 = $3_1;
                  break label$30;
                 }
                 $5_1 = HEAP32[$3_1 + 20 >> 2];
                 $3_1 = HEAP32[(($1_1 >>> 29 & 4) + $3_1 | 0) + 16 >> 2];
                 $0_1 = $5_1 ? (($5_1 | 0) == ($3_1 | 0) ? $0_1 : $5_1) : $0_1;
                 $1_1 = $1_1 << (($3_1 | 0) != 0);
                 if ($3_1) {
                  continue
                 }
                 break;
                };
               }
               if (!($0_1 | $4_1)) {
                $0_1 = 2 << $8_1;
                $0_1 = (0 - $0_1 | $0_1) & $7_1;
                if (!$0_1) {
                 break label$11
                }
                $1_1 = ($0_1 & 0 - $0_1) - 1 | 0;
                $0_1 = $1_1 >>> 12 & 16;
                $3_1 = $0_1;
                $1_1 = $1_1 >>> $0_1 | 0;
                $0_1 = $1_1 >>> 5 & 8;
                $3_1 = $3_1 | $0_1;
                $1_1 = $1_1 >>> $0_1 | 0;
                $0_1 = $1_1 >>> 2 & 4;
                $3_1 = $3_1 | $0_1;
                $1_1 = $1_1 >>> $0_1 | 0;
                $0_1 = $1_1 >>> 1 & 2;
                $3_1 = $3_1 | $0_1;
                $1_1 = $1_1 >>> $0_1 | 0;
                $0_1 = $1_1 >>> 1 & 1;
                $0_1 = HEAP32[(($3_1 | $0_1) + ($1_1 >>> $0_1 | 0) << 2) + 22456 >> 2];
               }
               if (!$0_1) {
                break label$29
               }
              }
              while (1) {
               $1_1 = (HEAP32[$0_1 + 4 >> 2] & -8) - $6_1 | 0;
               $3_1 = $1_1 >>> 0 < $2_1 >>> 0;
               $2_1 = $3_1 ? $1_1 : $2_1;
               $4_1 = $3_1 ? $0_1 : $4_1;
               $1_1 = HEAP32[$0_1 + 16 >> 2];
               if ($1_1) {
                $0_1 = $1_1
               } else {
                $0_1 = HEAP32[$0_1 + 20 >> 2]
               }
               if ($0_1) {
                continue
               }
               break;
              };
             }
             if (!$4_1 | HEAP32[5540] - $6_1 >>> 0 <= $2_1 >>> 0) {
              break label$11
             }
             $8_1 = HEAP32[$4_1 + 24 >> 2];
             $1_1 = HEAP32[$4_1 + 12 >> 2];
             if (($4_1 | 0) != ($1_1 | 0)) {
              $0_1 = HEAP32[$4_1 + 8 >> 2];
              HEAP32[$1_1 + 8 >> 2] = $0_1;
              HEAP32[$0_1 + 12 >> 2] = $1_1;
              break label$3;
             }
             $3_1 = $4_1 + 20 | 0;
             $0_1 = HEAP32[$3_1 >> 2];
             if (!$0_1) {
              $0_1 = HEAP32[$4_1 + 16 >> 2];
              if (!$0_1) {
               break label$9
              }
              $3_1 = $4_1 + 16 | 0;
             }
             while (1) {
              $5_1 = $3_1;
              $1_1 = $0_1;
              $3_1 = $0_1 + 20 | 0;
              $0_1 = HEAP32[$3_1 >> 2];
              if ($0_1) {
               continue
              }
              $3_1 = $1_1 + 16 | 0;
              $0_1 = HEAP32[$1_1 + 16 >> 2];
              if ($0_1) {
               continue
              }
              break;
             };
             HEAP32[$5_1 >> 2] = 0;
             break label$3;
            }
            $2_1 = HEAP32[5540];
            if ($2_1 >>> 0 >= $6_1 >>> 0) {
             $3_1 = HEAP32[5543];
             $1_1 = $2_1 - $6_1 | 0;
             label$45 : {
              if ($1_1 >>> 0 >= 16) {
               $0_1 = $3_1 + $6_1 | 0;
               HEAP32[$0_1 + 4 >> 2] = $1_1 | 1;
               HEAP32[5540] = $1_1;
               HEAP32[5543] = $0_1;
               HEAP32[$2_1 + $3_1 >> 2] = $1_1;
               HEAP32[$3_1 + 4 >> 2] = $6_1 | 3;
               break label$45;
              }
              HEAP32[$3_1 + 4 >> 2] = $2_1 | 3;
              $0_1 = $2_1 + $3_1 | 0;
              HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] | 1;
              HEAP32[5543] = 0;
              HEAP32[5540] = 0;
             }
             $0_1 = $3_1 + 8 | 0;
             break label$1;
            }
            $7_1 = HEAP32[5541];
            if ($7_1 >>> 0 > $6_1 >>> 0) {
             $2_1 = HEAP32[5544];
             $1_1 = $2_1 + $6_1 | 0;
             $0_1 = $7_1 - $6_1 | 0;
             HEAP32[$1_1 + 4 >> 2] = $0_1 | 1;
             HEAP32[5541] = $0_1;
             HEAP32[5544] = $1_1;
             HEAP32[$2_1 + 4 >> 2] = $6_1 | 3;
             $0_1 = $2_1 + 8 | 0;
             break label$1;
            }
            $0_1 = 0;
            $8_1 = $6_1 + 71 | 0;
            $1_1 = $8_1;
            if (HEAP32[5656]) {
             $2_1 = HEAP32[5658]
            } else {
             HEAP32[5659] = -1;
             HEAP32[5660] = -1;
             HEAP32[5657] = 65536;
             HEAP32[5658] = 65536;
             HEAP32[5656] = $11_1 + 12 & -16 ^ 1431655768;
             HEAP32[5661] = 0;
             HEAP32[5649] = 0;
             $2_1 = 65536;
            }
            $4_1 = $1_1 + $2_1 | 0;
            $3_1 = 0 - $2_1 | 0;
            $2_1 = $4_1 & $3_1;
            if ($2_1 >>> 0 <= $6_1 >>> 0) {
             HEAP32[5537] = 48;
             break label$1;
            }
            label$51 : {
             $1_1 = HEAP32[5648];
             if (!$1_1) {
              break label$51
             }
             $0_1 = HEAP32[5646];
             $5_1 = $0_1 + $2_1 | 0;
             if ($1_1 >>> 0 >= $5_1 >>> 0 ? $0_1 >>> 0 < $5_1 >>> 0 : 0) {
              break label$51
             }
             $0_1 = 0;
             HEAP32[5537] = 48;
             break label$1;
            }
            if (HEAPU8[22596] & 4) {
             break label$6
            }
            label$52 : {
             label$53 : {
              $5_1 = HEAP32[5544];
              if ($5_1) {
               $0_1 = 22600;
               while (1) {
                $1_1 = HEAP32[$0_1 >> 2];
                if ($5_1 >>> 0 < $1_1 + HEAP32[$0_1 + 4 >> 2] >>> 0 ? $1_1 >>> 0 <= $5_1 >>> 0 : 0) {
                 break label$53
                }
                $0_1 = HEAP32[$0_1 + 8 >> 2];
                if ($0_1) {
                 continue
                }
                break;
               };
              }
              $1_1 = $1(0);
              if (($1_1 | 0) == -1) {
               break label$7
              }
              $5_1 = $2_1;
              $3_1 = HEAP32[5657];
              $0_1 = $3_1 - 1 | 0;
              if ($0_1 & $1_1) {
               $5_1 = ($2_1 - $1_1 | 0) + ($0_1 + $1_1 & 0 - $3_1) | 0
              }
              if ($5_1 >>> 0 <= $6_1 >>> 0 | $5_1 >>> 0 > 2147483646) {
               break label$7
              }
              $3_1 = HEAP32[5648];
              if ($3_1) {
               $0_1 = HEAP32[5646];
               $4_1 = $0_1 + $5_1 | 0;
               if ($3_1 >>> 0 < $4_1 >>> 0 | $0_1 >>> 0 >= $4_1 >>> 0) {
                break label$7
               }
              }
              $0_1 = $1($5_1);
              if (($1_1 | 0) != ($0_1 | 0)) {
               break label$52
              }
              break label$5;
             }
             $5_1 = $3_1 & $4_1 - $7_1;
             if ($5_1 >>> 0 > 2147483646) {
              break label$7
             }
             $1_1 = $1($5_1);
             if (($1_1 | 0) == (HEAP32[$0_1 >> 2] + HEAP32[$0_1 + 4 >> 2] | 0)) {
              break label$8
             }
             $0_1 = $1_1;
            }
            $1_1 = $0_1;
            if (!($6_1 + 72 >>> 0 <= $5_1 >>> 0 | $5_1 >>> 0 > 2147483646 | ($0_1 | 0) == -1)) {
             $0_1 = HEAP32[5658];
             $0_1 = $0_1 + ($8_1 - $5_1 | 0) & 0 - $0_1;
             if ($0_1 >>> 0 > 2147483646) {
              break label$5
             }
             if (($1($0_1) | 0) != -1) {
              $5_1 = $0_1 + $5_1 | 0;
              break label$5;
             }
             $1(0 - $5_1 | 0);
             break label$7;
            }
            if (($1_1 | 0) != -1) {
             break label$5
            }
            break label$7;
           }
           $4_1 = 0;
           break label$2;
          }
          $1_1 = 0;
          break label$3;
         }
         if (($1_1 | 0) != -1) {
          break label$5
         }
        }
        HEAP32[5649] = HEAP32[5649] | 4;
       }
       if ($2_1 >>> 0 > 2147483646) {
        break label$4
       }
       $1_1 = $1($2_1);
       $0_1 = $1(0);
       if ($1_1 >>> 0 >= $0_1 >>> 0 | ($1_1 | 0) == -1 | ($0_1 | 0) == -1) {
        break label$4
       }
       $5_1 = $0_1 - $1_1 | 0;
       if ($5_1 >>> 0 <= $6_1 + 56 >>> 0) {
        break label$4
       }
      }
      $0_1 = HEAP32[5646] + $5_1 | 0;
      HEAP32[5646] = $0_1;
      if ($0_1 >>> 0 > HEAPU32[5647]) {
       HEAP32[5647] = $0_1
      }
      label$62 : {
       label$63 : {
        label$64 : {
         $7_1 = HEAP32[5544];
         if ($7_1) {
          $0_1 = 22600;
          while (1) {
           $2_1 = HEAP32[$0_1 >> 2];
           $4_1 = HEAP32[$0_1 + 4 >> 2];
           if (($2_1 + $4_1 | 0) == ($1_1 | 0)) {
            break label$64
           }
           $0_1 = HEAP32[$0_1 + 8 >> 2];
           if ($0_1) {
            continue
           }
           break;
          };
          break label$63;
         }
         $0_1 = HEAP32[5542];
         if (!($0_1 >>> 0 <= $1_1 >>> 0 ? $0_1 : 0)) {
          HEAP32[5542] = $1_1
         }
         $0_1 = 0;
         HEAP32[5651] = $5_1;
         HEAP32[5650] = $1_1;
         HEAP32[5546] = -1;
         HEAP32[5547] = HEAP32[5656];
         HEAP32[5653] = 0;
         while (1) {
          $2_1 = $0_1 + 22192 | 0;
          HEAP32[$0_1 + 22200 >> 2] = $2_1;
          HEAP32[$0_1 + 22204 >> 2] = $2_1;
          $0_1 = $0_1 + 8 | 0;
          if (($0_1 | 0) != 256) {
           continue
          }
          break;
         };
         $0_1 = $1_1 + 8 & 15 ? -8 - $1_1 & 15 : 0;
         $3_1 = $0_1 + $1_1 | 0;
         $2_1 = $5_1 - 56 | 0;
         $0_1 = $2_1 - $0_1 | 0;
         HEAP32[$3_1 + 4 >> 2] = $0_1 | 1;
         HEAP32[5545] = HEAP32[5660];
         HEAP32[5541] = $0_1;
         HEAP32[5544] = $3_1;
         HEAP32[($1_1 + $2_1 | 0) + 4 >> 2] = 56;
         break label$62;
        }
        if (HEAPU8[$0_1 + 12 | 0] & 8 | $1_1 >>> 0 <= $7_1 >>> 0 | $2_1 >>> 0 > $7_1 >>> 0) {
         break label$63
        }
        $1_1 = $7_1 + 8 & 15 ? -8 - $7_1 & 15 : 0;
        $3_1 = $1_1 + $7_1 | 0;
        $2_1 = HEAP32[5541] + $5_1 | 0;
        $1_1 = $2_1 - $1_1 | 0;
        HEAP32[$3_1 + 4 >> 2] = $1_1 | 1;
        HEAP32[$0_1 + 4 >> 2] = $4_1 + $5_1;
        HEAP32[5545] = HEAP32[5660];
        HEAP32[5541] = $1_1;
        HEAP32[5544] = $3_1;
        HEAP32[($2_1 + $7_1 | 0) + 4 >> 2] = 56;
        break label$62;
       }
       $4_1 = HEAP32[5542];
       if ($4_1 >>> 0 > $1_1 >>> 0) {
        HEAP32[5542] = $1_1;
        $4_1 = 0;
       }
       $2_1 = $1_1 + $5_1 | 0;
       $0_1 = 22600;
       label$70 : {
        label$71 : {
         label$72 : {
          label$73 : {
           label$74 : {
            label$75 : {
             while (1) {
              if (($2_1 | 0) != HEAP32[$0_1 >> 2]) {
               $0_1 = HEAP32[$0_1 + 8 >> 2];
               if ($0_1) {
                continue
               }
               break label$75;
              }
              break;
             };
             if (!(HEAPU8[$0_1 + 12 | 0] & 8)) {
              break label$74
             }
            }
            $0_1 = 22600;
            while (1) {
             $2_1 = HEAP32[$0_1 >> 2];
             if ($2_1 >>> 0 <= $7_1 >>> 0) {
              $4_1 = $2_1 + HEAP32[$0_1 + 4 >> 2] | 0;
              if ($4_1 >>> 0 > $7_1 >>> 0) {
               break label$73
              }
             }
             $0_1 = HEAP32[$0_1 + 8 >> 2];
             continue;
            };
           }
           HEAP32[$0_1 >> 2] = $1_1;
           HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + $5_1;
           $10_1 = ($1_1 + 8 & 15 ? -8 - $1_1 & 15 : 0) + $1_1 | 0;
           HEAP32[$10_1 + 4 >> 2] = $6_1 | 3;
           $1_1 = $2_1 + ($2_1 + 8 & 15 ? -8 - $2_1 & 15 : 0) | 0;
           $0_1 = ($1_1 - $10_1 | 0) - $6_1 | 0;
           $8_1 = $6_1 + $10_1 | 0;
           if (($1_1 | 0) == ($7_1 | 0)) {
            HEAP32[5544] = $8_1;
            $0_1 = HEAP32[5541] + $0_1 | 0;
            HEAP32[5541] = $0_1;
            HEAP32[$8_1 + 4 >> 2] = $0_1 | 1;
            break label$71;
           }
           if (HEAP32[5543] == ($1_1 | 0)) {
            HEAP32[5543] = $8_1;
            $0_1 = HEAP32[5540] + $0_1 | 0;
            HEAP32[5540] = $0_1;
            HEAP32[$8_1 + 4 >> 2] = $0_1 | 1;
            HEAP32[$0_1 + $8_1 >> 2] = $0_1;
            break label$71;
           }
           $2_1 = HEAP32[$1_1 + 4 >> 2];
           if (($2_1 & 3) == 1) {
            $7_1 = $2_1 & -8;
            label$83 : {
             if ($2_1 >>> 0 <= 255) {
              $4_1 = HEAP32[$1_1 + 8 >> 2];
              $2_1 = $2_1 >>> 3 | 0;
              $3_1 = HEAP32[$1_1 + 12 >> 2];
              if (($3_1 | 0) == ($4_1 | 0)) {
               (wasm2js_i32$0 = 22152, wasm2js_i32$1 = HEAP32[5538] & __wasm_rotl_i32($2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$83;
              }
              HEAP32[$3_1 + 8 >> 2] = $4_1;
              HEAP32[$4_1 + 12 >> 2] = $3_1;
              break label$83;
             }
             $9_1 = HEAP32[$1_1 + 24 >> 2];
             $5_1 = HEAP32[$1_1 + 12 >> 2];
             label$86 : {
              if (($5_1 | 0) != ($1_1 | 0)) {
               $2_1 = HEAP32[$1_1 + 8 >> 2];
               HEAP32[$5_1 + 8 >> 2] = $2_1;
               HEAP32[$2_1 + 12 >> 2] = $5_1;
               break label$86;
              }
              label$89 : {
               $3_1 = $1_1 + 20 | 0;
               $6_1 = HEAP32[$3_1 >> 2];
               if ($6_1) {
                break label$89
               }
               $3_1 = $1_1 + 16 | 0;
               $6_1 = HEAP32[$3_1 >> 2];
               if ($6_1) {
                break label$89
               }
               $5_1 = 0;
               break label$86;
              }
              while (1) {
               $2_1 = $3_1;
               $5_1 = $6_1;
               $3_1 = $5_1 + 20 | 0;
               $6_1 = HEAP32[$3_1 >> 2];
               if ($6_1) {
                continue
               }
               $3_1 = $5_1 + 16 | 0;
               $6_1 = HEAP32[$5_1 + 16 >> 2];
               if ($6_1) {
                continue
               }
               break;
              };
              HEAP32[$2_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$83
             }
             $3_1 = HEAP32[$1_1 + 28 >> 2];
             $2_1 = ($3_1 << 2) + 22456 | 0;
             label$91 : {
              if (HEAP32[$2_1 >> 2] == ($1_1 | 0)) {
               HEAP32[$2_1 >> 2] = $5_1;
               if ($5_1) {
                break label$91
               }
               (wasm2js_i32$0 = 22156, wasm2js_i32$1 = HEAP32[5539] & __wasm_rotl_i32($3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$83;
              }
              HEAP32[$9_1 + (HEAP32[$9_1 + 16 >> 2] == ($1_1 | 0) ? 16 : 20) >> 2] = $5_1;
              if (!$5_1) {
               break label$83
              }
             }
             HEAP32[$5_1 + 24 >> 2] = $9_1;
             $2_1 = HEAP32[$1_1 + 16 >> 2];
             if ($2_1) {
              HEAP32[$5_1 + 16 >> 2] = $2_1;
              HEAP32[$2_1 + 24 >> 2] = $5_1;
             }
             $2_1 = HEAP32[$1_1 + 20 >> 2];
             if (!$2_1) {
              break label$83
             }
             HEAP32[$5_1 + 20 >> 2] = $2_1;
             HEAP32[$2_1 + 24 >> 2] = $5_1;
            }
            $1_1 = $1_1 + $7_1 | 0;
            $0_1 = $0_1 + $7_1 | 0;
           }
           HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] & -2;
           HEAP32[$0_1 + $8_1 >> 2] = $0_1;
           HEAP32[$8_1 + 4 >> 2] = $0_1 | 1;
           if ($0_1 >>> 0 <= 255) {
            $0_1 = $0_1 >>> 3 | 0;
            $1_1 = ($0_1 << 3) + 22192 | 0;
            $2_1 = HEAP32[5538];
            $0_1 = 1 << $0_1;
            label$95 : {
             if (!($2_1 & $0_1)) {
              HEAP32[5538] = $0_1 | $2_1;
              $0_1 = $1_1;
              break label$95;
             }
             $0_1 = HEAP32[$1_1 + 8 >> 2];
            }
            HEAP32[$0_1 + 12 >> 2] = $8_1;
            HEAP32[$1_1 + 8 >> 2] = $8_1;
            HEAP32[$8_1 + 12 >> 2] = $1_1;
            HEAP32[$8_1 + 8 >> 2] = $0_1;
            break label$71;
           }
           $2_1 = $8_1;
           $5_1 = $2_1;
           $3_1 = $0_1 >>> 8 | 0;
           $1_1 = 0;
           label$97 : {
            if (!$3_1) {
             break label$97
            }
            $1_1 = 31;
            if ($0_1 >>> 0 > 16777215) {
             break label$97
            }
            $1_1 = $3_1;
            $3_1 = $3_1 + 1048320 >>> 16 & 8;
            $1_1 = $1_1 << $3_1;
            $6_1 = $1_1 + 520192 >>> 16 & 4;
            $1_1 = $1_1 << $6_1;
            $4_1 = $1_1 + 245760 >>> 16 & 2;
            $1_1 = ($1_1 << $4_1 >>> 15 | 0) - ($4_1 | ($3_1 | $6_1)) | 0;
            $1_1 = ($1_1 << 1 | $0_1 >>> $1_1 + 21 & 1) + 28 | 0;
           }
           HEAP32[$5_1 + 28 >> 2] = $1_1;
           HEAP32[$2_1 + 16 >> 2] = 0;
           HEAP32[$2_1 + 20 >> 2] = 0;
           $6_1 = ($1_1 << 2) + 22456 | 0;
           $4_1 = HEAP32[5539];
           $3_1 = 1 << $1_1;
           if (!($4_1 & $3_1)) {
            HEAP32[$6_1 >> 2] = $2_1;
            HEAP32[5539] = $3_1 | $4_1;
            HEAP32[$2_1 + 24 >> 2] = $6_1;
            HEAP32[$2_1 + 8 >> 2] = $2_1;
            HEAP32[$2_1 + 12 >> 2] = $2_1;
            break label$71;
           }
           $3_1 = $0_1 << (($1_1 | 0) == 31 ? 0 : 25 - ($1_1 >>> 1 | 0) | 0);
           $1_1 = HEAP32[$6_1 >> 2];
           while (1) {
            $4_1 = $1_1;
            if ((HEAP32[$1_1 + 4 >> 2] & -8) == ($0_1 | 0)) {
             break label$72
            }
            $1_1 = $3_1 >>> 29 | 0;
            $3_1 = $3_1 << 1;
            $6_1 = ($4_1 + ($1_1 & 4) | 0) + 16 | 0;
            $1_1 = HEAP32[$6_1 >> 2];
            if ($1_1) {
             continue
            }
            break;
           };
           HEAP32[$6_1 >> 2] = $2_1;
           HEAP32[$2_1 + 24 >> 2] = $4_1;
           HEAP32[$2_1 + 12 >> 2] = $2_1;
           HEAP32[$2_1 + 8 >> 2] = $2_1;
           break label$71;
          }
          $2_1 = $1_1 + 8 & 15 ? -8 - $1_1 & 15 : 0;
          $3_1 = $2_1 + $1_1 | 0;
          $0_1 = $5_1 - 56 | 0;
          $2_1 = $0_1 - $2_1 | 0;
          HEAP32[$3_1 + 4 >> 2] = $2_1 | 1;
          HEAP32[($0_1 + $1_1 | 0) + 4 >> 2] = 56;
          $0_1 = ($4_1 + ($4_1 - 55 & 15 ? 55 - $4_1 & 15 : 0) | 0) - 63 | 0;
          $8_1 = $0_1 >>> 0 < $7_1 + 16 >>> 0 ? $7_1 : $0_1;
          HEAP32[$8_1 + 4 >> 2] = 35;
          HEAP32[5545] = HEAP32[5660];
          HEAP32[5541] = $2_1;
          HEAP32[5544] = $3_1;
          $0_1 = HEAP32[5653];
          $2_1 = $8_1 + 16 | 0;
          HEAP32[$2_1 >> 2] = HEAP32[5652];
          HEAP32[$2_1 + 4 >> 2] = $0_1;
          $0_1 = HEAP32[5651];
          HEAP32[$8_1 + 8 >> 2] = HEAP32[5650];
          HEAP32[$8_1 + 12 >> 2] = $0_1;
          HEAP32[5652] = $8_1 + 8;
          HEAP32[5651] = $5_1;
          HEAP32[5650] = $1_1;
          HEAP32[5653] = 0;
          $0_1 = $8_1 + 36 | 0;
          while (1) {
           HEAP32[$0_1 >> 2] = 7;
           $0_1 = $0_1 + 4 | 0;
           if ($4_1 >>> 0 > $0_1 >>> 0) {
            continue
           }
           break;
          };
          if (($7_1 | 0) == ($8_1 | 0)) {
           break label$62
          }
          HEAP32[$8_1 + 4 >> 2] = HEAP32[$8_1 + 4 >> 2] & -2;
          $5_1 = $8_1 - $7_1 | 0;
          HEAP32[$8_1 >> 2] = $5_1;
          HEAP32[$7_1 + 4 >> 2] = $5_1 | 1;
          if ($5_1 >>> 0 <= 255) {
           $0_1 = $5_1 >>> 3 | 0;
           $1_1 = ($0_1 << 3) + 22192 | 0;
           $2_1 = HEAP32[5538];
           $0_1 = 1 << $0_1;
           label$102 : {
            if (!($2_1 & $0_1)) {
             HEAP32[5538] = $0_1 | $2_1;
             $0_1 = $1_1;
             break label$102;
            }
            $0_1 = HEAP32[$1_1 + 8 >> 2];
           }
           HEAP32[$0_1 + 12 >> 2] = $7_1;
           HEAP32[$1_1 + 8 >> 2] = $7_1;
           HEAP32[$7_1 + 12 >> 2] = $1_1;
           HEAP32[$7_1 + 8 >> 2] = $0_1;
           break label$62;
          }
          HEAP32[$7_1 + 16 >> 2] = 0;
          HEAP32[$7_1 + 20 >> 2] = 0;
          $2_1 = $7_1 + 28 | 0;
          $1_1 = $5_1 >>> 8 | 0;
          $0_1 = 0;
          label$104 : {
           if (!$1_1) {
            break label$104
           }
           $0_1 = 31;
           if ($5_1 >>> 0 > 16777215) {
            break label$104
           }
           $0_1 = $1_1;
           $1_1 = $1_1 + 1048320 >>> 16 & 8;
           $0_1 = $0_1 << $1_1;
           $4_1 = $0_1 + 520192 >>> 16 & 4;
           $0_1 = $0_1 << $4_1;
           $3_1 = $0_1 + 245760 >>> 16 & 2;
           $0_1 = ($0_1 << $3_1 >>> 15 | 0) - ($3_1 | ($1_1 | $4_1)) | 0;
           $0_1 = ($0_1 << 1 | $5_1 >>> $0_1 + 21 & 1) + 28 | 0;
          }
          HEAP32[$2_1 >> 2] = $0_1;
          $3_1 = ($0_1 << 2) + 22456 | 0;
          $2_1 = HEAP32[5539];
          $1_1 = 1 << $0_1;
          if (!($2_1 & $1_1)) {
           HEAP32[$3_1 >> 2] = $7_1;
           HEAP32[5539] = $1_1 | $2_1;
           HEAP32[$7_1 + 24 >> 2] = $3_1;
           HEAP32[$7_1 + 8 >> 2] = $7_1;
           HEAP32[$7_1 + 12 >> 2] = $7_1;
           break label$62;
          }
          $0_1 = $5_1 << (($0_1 | 0) == 31 ? 0 : 25 - ($0_1 >>> 1 | 0) | 0);
          $1_1 = HEAP32[$3_1 >> 2];
          while (1) {
           $2_1 = $1_1;
           if (($5_1 | 0) == (HEAP32[$1_1 + 4 >> 2] & -8)) {
            break label$70
           }
           $1_1 = $0_1 >>> 29 | 0;
           $0_1 = $0_1 << 1;
           $3_1 = ($2_1 + ($1_1 & 4) | 0) + 16 | 0;
           $1_1 = HEAP32[$3_1 >> 2];
           if ($1_1) {
            continue
           }
           break;
          };
          HEAP32[$3_1 >> 2] = $7_1;
          HEAP32[$7_1 + 24 >> 2] = $2_1;
          HEAP32[$7_1 + 12 >> 2] = $7_1;
          HEAP32[$7_1 + 8 >> 2] = $7_1;
          break label$62;
         }
         $0_1 = HEAP32[$4_1 + 8 >> 2];
         HEAP32[$4_1 + 8 >> 2] = $2_1;
         HEAP32[$0_1 + 12 >> 2] = $2_1;
         HEAP32[$2_1 + 24 >> 2] = 0;
         HEAP32[$2_1 + 8 >> 2] = $0_1;
         HEAP32[$2_1 + 12 >> 2] = $4_1;
        }
        $0_1 = $10_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[$2_1 + 8 >> 2];
       HEAP32[$2_1 + 8 >> 2] = $7_1;
       HEAP32[$0_1 + 12 >> 2] = $7_1;
       HEAP32[$7_1 + 24 >> 2] = 0;
       HEAP32[$7_1 + 8 >> 2] = $0_1;
       HEAP32[$7_1 + 12 >> 2] = $2_1;
      }
      $0_1 = HEAP32[5541];
      if ($0_1 >>> 0 <= $6_1 >>> 0) {
       break label$4
      }
      $2_1 = HEAP32[5544];
      $1_1 = $2_1 + $6_1 | 0;
      $0_1 = $0_1 - $6_1 | 0;
      HEAP32[$1_1 + 4 >> 2] = $0_1 | 1;
      HEAP32[5541] = $0_1;
      HEAP32[5544] = $1_1;
      HEAP32[$2_1 + 4 >> 2] = $6_1 | 3;
      $0_1 = $2_1 + 8 | 0;
      break label$1;
     }
     $0_1 = 0;
     HEAP32[5537] = 48;
     break label$1;
    }
    label$107 : {
     if (!$8_1) {
      break label$107
     }
     $3_1 = HEAP32[$4_1 + 28 >> 2];
     $0_1 = ($3_1 << 2) + 22456 | 0;
     label$108 : {
      if (HEAP32[$0_1 >> 2] == ($4_1 | 0)) {
       HEAP32[$0_1 >> 2] = $1_1;
       if ($1_1) {
        break label$108
       }
       $7_1 = __wasm_rotl_i32($3_1) & $7_1;
       HEAP32[5539] = $7_1;
       break label$107;
      }
      HEAP32[$8_1 + (HEAP32[$8_1 + 16 >> 2] == ($4_1 | 0) ? 16 : 20) >> 2] = $1_1;
      if (!$1_1) {
       break label$107
      }
     }
     HEAP32[$1_1 + 24 >> 2] = $8_1;
     $0_1 = HEAP32[$4_1 + 16 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 16 >> 2] = $0_1;
      HEAP32[$0_1 + 24 >> 2] = $1_1;
     }
     $0_1 = HEAP32[$4_1 + 20 >> 2];
     if (!$0_1) {
      break label$107
     }
     HEAP32[$1_1 + 20 >> 2] = $0_1;
     HEAP32[$0_1 + 24 >> 2] = $1_1;
    }
    label$111 : {
     if ($2_1 >>> 0 <= 15) {
      $0_1 = $2_1 + $6_1 | 0;
      HEAP32[$4_1 + 4 >> 2] = $0_1 | 3;
      $0_1 = $0_1 + $4_1 | 0;
      HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] | 1;
      break label$111;
     }
     $3_1 = $4_1 + $6_1 | 0;
     HEAP32[$3_1 + 4 >> 2] = $2_1 | 1;
     HEAP32[$4_1 + 4 >> 2] = $6_1 | 3;
     HEAP32[$2_1 + $3_1 >> 2] = $2_1;
     if ($2_1 >>> 0 <= 255) {
      $0_1 = $2_1 >>> 3 | 0;
      $1_1 = ($0_1 << 3) + 22192 | 0;
      $2_1 = HEAP32[5538];
      $0_1 = 1 << $0_1;
      label$114 : {
       if (!($2_1 & $0_1)) {
        HEAP32[5538] = $0_1 | $2_1;
        $0_1 = $1_1;
        break label$114;
       }
       $0_1 = HEAP32[$1_1 + 8 >> 2];
      }
      HEAP32[$0_1 + 12 >> 2] = $3_1;
      HEAP32[$1_1 + 8 >> 2] = $3_1;
      HEAP32[$3_1 + 12 >> 2] = $1_1;
      HEAP32[$3_1 + 8 >> 2] = $0_1;
      break label$111;
     }
     $1_1 = $3_1;
     $8_1 = $1_1;
     $3_1 = $2_1 >>> 8 | 0;
     $0_1 = 0;
     label$116 : {
      if (!$3_1) {
       break label$116
      }
      $0_1 = 31;
      if ($2_1 >>> 0 > 16777215) {
       break label$116
      }
      $0_1 = $3_1;
      $3_1 = $3_1 + 1048320 >>> 16 & 8;
      $0_1 = $0_1 << $3_1;
      $5_1 = $0_1 + 520192 >>> 16 & 4;
      $0_1 = $0_1 << $5_1;
      $6_1 = $0_1 + 245760 >>> 16 & 2;
      $0_1 = ($0_1 << $6_1 >>> 15 | 0) - ($6_1 | ($3_1 | $5_1)) | 0;
      $0_1 = ($0_1 << 1 | $2_1 >>> $0_1 + 21 & 1) + 28 | 0;
     }
     HEAP32[$8_1 + 28 >> 2] = $0_1;
     HEAP32[$1_1 + 16 >> 2] = 0;
     HEAP32[$1_1 + 20 >> 2] = 0;
     $6_1 = ($0_1 << 2) + 22456 | 0;
     $3_1 = 1 << $0_1;
     if (!($3_1 & $7_1)) {
      HEAP32[$6_1 >> 2] = $1_1;
      HEAP32[5539] = $3_1 | $7_1;
      HEAP32[$1_1 + 24 >> 2] = $6_1;
      HEAP32[$1_1 + 8 >> 2] = $1_1;
      HEAP32[$1_1 + 12 >> 2] = $1_1;
      break label$111;
     }
     $0_1 = $2_1 << (($0_1 | 0) == 31 ? 0 : 25 - ($0_1 >>> 1 | 0) | 0);
     $6_1 = HEAP32[$6_1 >> 2];
     label$118 : {
      while (1) {
       $3_1 = $6_1;
       if ((HEAP32[$3_1 + 4 >> 2] & -8) == ($2_1 | 0)) {
        break label$118
       }
       $6_1 = $0_1 >>> 29 | 0;
       $0_1 = $0_1 << 1;
       $5_1 = ($3_1 + ($6_1 & 4) | 0) + 16 | 0;
       $6_1 = HEAP32[$5_1 >> 2];
       if ($6_1) {
        continue
       }
       break;
      };
      HEAP32[$5_1 >> 2] = $1_1;
      HEAP32[$1_1 + 24 >> 2] = $3_1;
      HEAP32[$1_1 + 12 >> 2] = $1_1;
      HEAP32[$1_1 + 8 >> 2] = $1_1;
      break label$111;
     }
     $0_1 = HEAP32[$3_1 + 8 >> 2];
     HEAP32[$3_1 + 8 >> 2] = $1_1;
     HEAP32[$0_1 + 12 >> 2] = $1_1;
     HEAP32[$1_1 + 24 >> 2] = 0;
     HEAP32[$1_1 + 8 >> 2] = $0_1;
     HEAP32[$1_1 + 12 >> 2] = $3_1;
    }
    $0_1 = $4_1 + 8 | 0;
    break label$1;
   }
   label$120 : {
    if (!$10_1) {
     break label$120
    }
    $2_1 = HEAP32[$1_1 + 28 >> 2];
    $0_1 = ($2_1 << 2) + 22456 | 0;
    label$121 : {
     if (HEAP32[$0_1 >> 2] == ($1_1 | 0)) {
      HEAP32[$0_1 >> 2] = $4_1;
      if ($4_1) {
       break label$121
      }
      (wasm2js_i32$0 = 22156, wasm2js_i32$1 = __wasm_rotl_i32($2_1) & $7_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$120;
     }
     HEAP32[$10_1 + (HEAP32[$10_1 + 16 >> 2] == ($1_1 | 0) ? 16 : 20) >> 2] = $4_1;
     if (!$4_1) {
      break label$120
     }
    }
    HEAP32[$4_1 + 24 >> 2] = $10_1;
    $0_1 = HEAP32[$1_1 + 16 >> 2];
    if ($0_1) {
     HEAP32[$4_1 + 16 >> 2] = $0_1;
     HEAP32[$0_1 + 24 >> 2] = $4_1;
    }
    $0_1 = HEAP32[$1_1 + 20 >> 2];
    if (!$0_1) {
     break label$120
    }
    HEAP32[$4_1 + 20 >> 2] = $0_1;
    HEAP32[$0_1 + 24 >> 2] = $4_1;
   }
   label$124 : {
    if ($3_1 >>> 0 <= 15) {
     $0_1 = $3_1 + $6_1 | 0;
     HEAP32[$1_1 + 4 >> 2] = $0_1 | 3;
     $0_1 = $0_1 + $1_1 | 0;
     HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] | 1;
     break label$124;
    }
    $4_1 = $1_1 + $6_1 | 0;
    HEAP32[$4_1 + 4 >> 2] = $3_1 | 1;
    HEAP32[$1_1 + 4 >> 2] = $6_1 | 3;
    HEAP32[$3_1 + $4_1 >> 2] = $3_1;
    if ($9_1) {
     $0_1 = $9_1 >>> 3 | 0;
     $2_1 = ($0_1 << 3) + 22192 | 0;
     $6_1 = HEAP32[5543];
     $0_1 = 1 << $0_1;
     label$127 : {
      if (!($0_1 & $5_1)) {
       HEAP32[5538] = $0_1 | $5_1;
       $0_1 = $2_1;
       break label$127;
      }
      $0_1 = HEAP32[$2_1 + 8 >> 2];
     }
     HEAP32[$0_1 + 12 >> 2] = $6_1;
     HEAP32[$2_1 + 8 >> 2] = $6_1;
     HEAP32[$6_1 + 12 >> 2] = $2_1;
     HEAP32[$6_1 + 8 >> 2] = $0_1;
    }
    HEAP32[5543] = $4_1;
    HEAP32[5540] = $3_1;
   }
   $0_1 = $1_1 + 8 | 0;
  }
  global$0 = $11_1 + 16 | 0;
  return $0_1;
 }
 
 function $5($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $2_1 = $0_1 - 8 | 0;
   $0_1 = HEAP32[$0_1 - 4 >> 2];
   $4_1 = $0_1 & -8;
   $5_1 = $2_1 + $4_1 | 0;
   label$2 : {
    if ($0_1 & 1) {
     break label$2
    }
    if (!($0_1 & 3)) {
     break label$1
    }
    $0_1 = HEAP32[$2_1 >> 2];
    $2_1 = $2_1 - $0_1 | 0;
    if ($2_1 >>> 0 < HEAPU32[5542]) {
     break label$1
    }
    $4_1 = $0_1 + $4_1 | 0;
    if (HEAP32[5543] != ($2_1 | 0)) {
     if ($0_1 >>> 0 <= 255) {
      $3_1 = $0_1 >>> 3 | 0;
      $0_1 = HEAP32[$2_1 + 8 >> 2];
      $1_1 = HEAP32[$2_1 + 12 >> 2];
      if (($1_1 | 0) == ($0_1 | 0)) {
       (wasm2js_i32$0 = 22152, wasm2js_i32$1 = HEAP32[5538] & __wasm_rotl_i32($3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$1_1 + 8 >> 2] = $0_1;
      HEAP32[$0_1 + 12 >> 2] = $1_1;
      break label$2;
     }
     $7_1 = HEAP32[$2_1 + 24 >> 2];
     $0_1 = HEAP32[$2_1 + 12 >> 2];
     label$6 : {
      if (($2_1 | 0) != ($0_1 | 0)) {
       $1_1 = HEAP32[$2_1 + 8 >> 2];
       HEAP32[$0_1 + 8 >> 2] = $1_1;
       HEAP32[$1_1 + 12 >> 2] = $0_1;
       break label$6;
      }
      label$9 : {
       $1_1 = $2_1 + 20 | 0;
       $3_1 = HEAP32[$1_1 >> 2];
       if ($3_1) {
        break label$9
       }
       $1_1 = $2_1 + 16 | 0;
       $3_1 = HEAP32[$1_1 >> 2];
       if ($3_1) {
        break label$9
       }
       $0_1 = 0;
       break label$6;
      }
      while (1) {
       $6_1 = $1_1;
       $0_1 = $3_1;
       $1_1 = $0_1 + 20 | 0;
       $3_1 = HEAP32[$1_1 >> 2];
       if ($3_1) {
        continue
       }
       $1_1 = $0_1 + 16 | 0;
       $3_1 = HEAP32[$0_1 + 16 >> 2];
       if ($3_1) {
        continue
       }
       break;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     $1_1 = HEAP32[$2_1 + 28 >> 2];
     $3_1 = ($1_1 << 2) + 22456 | 0;
     label$11 : {
      if (HEAP32[$3_1 >> 2] == ($2_1 | 0)) {
       HEAP32[$3_1 >> 2] = $0_1;
       if ($0_1) {
        break label$11
       }
       (wasm2js_i32$0 = 22156, wasm2js_i32$1 = HEAP32[5539] & __wasm_rotl_i32($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($2_1 | 0) ? 16 : 20) >> 2] = $0_1;
      if (!$0_1) {
       break label$2
      }
     }
     HEAP32[$0_1 + 24 >> 2] = $7_1;
     $1_1 = HEAP32[$2_1 + 16 >> 2];
     if ($1_1) {
      HEAP32[$0_1 + 16 >> 2] = $1_1;
      HEAP32[$1_1 + 24 >> 2] = $0_1;
     }
     $1_1 = HEAP32[$2_1 + 20 >> 2];
     if (!$1_1) {
      break label$2
     }
     HEAP32[$0_1 + 20 >> 2] = $1_1;
     HEAP32[$1_1 + 24 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = HEAP32[$5_1 + 4 >> 2];
    if (($0_1 & 3) != 3) {
     break label$2
    }
    HEAP32[$5_1 + 4 >> 2] = $0_1 & -2;
    HEAP32[5540] = $4_1;
    HEAP32[$2_1 + $4_1 >> 2] = $4_1;
    HEAP32[$2_1 + 4 >> 2] = $4_1 | 1;
    break label$1;
   }
   if ($2_1 >>> 0 >= $5_1 >>> 0) {
    break label$1
   }
   $0_1 = HEAP32[$5_1 + 4 >> 2];
   if (!($0_1 & 1)) {
    break label$1
   }
   label$14 : {
    if (!($0_1 & 2)) {
     if (HEAP32[5544] == ($5_1 | 0)) {
      HEAP32[5544] = $2_1;
      $0_1 = HEAP32[5541] + $4_1 | 0;
      HEAP32[5541] = $0_1;
      HEAP32[$2_1 + 4 >> 2] = $0_1 | 1;
      if (HEAP32[5543] != ($2_1 | 0)) {
       break label$1
      }
      HEAP32[5540] = 0;
      HEAP32[5543] = 0;
      break label$1;
     }
     if (HEAP32[5543] == ($5_1 | 0)) {
      HEAP32[5543] = $2_1;
      $0_1 = HEAP32[5540] + $4_1 | 0;
      HEAP32[5540] = $0_1;
      HEAP32[$2_1 + 4 >> 2] = $0_1 | 1;
      HEAP32[$0_1 + $2_1 >> 2] = $0_1;
      break label$1;
     }
     $4_1 = ($0_1 & -8) + $4_1 | 0;
     label$18 : {
      if ($0_1 >>> 0 <= 255) {
       $3_1 = HEAP32[$5_1 + 8 >> 2];
       $0_1 = $0_1 >>> 3 | 0;
       $1_1 = HEAP32[$5_1 + 12 >> 2];
       if (($3_1 | 0) == ($1_1 | 0)) {
        (wasm2js_i32$0 = 22152, wasm2js_i32$1 = HEAP32[5538] & __wasm_rotl_i32($0_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$1_1 + 8 >> 2] = $3_1;
       HEAP32[$3_1 + 12 >> 2] = $1_1;
       break label$18;
      }
      $7_1 = HEAP32[$5_1 + 24 >> 2];
      $0_1 = HEAP32[$5_1 + 12 >> 2];
      label$23 : {
       if (($5_1 | 0) != ($0_1 | 0)) {
        $1_1 = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$0_1 + 8 >> 2] = $1_1;
        HEAP32[$1_1 + 12 >> 2] = $0_1;
        break label$23;
       }
       label$26 : {
        $1_1 = $5_1 + 20 | 0;
        $3_1 = HEAP32[$1_1 >> 2];
        if ($3_1) {
         break label$26
        }
        $1_1 = $5_1 + 16 | 0;
        $3_1 = HEAP32[$1_1 >> 2];
        if ($3_1) {
         break label$26
        }
        $0_1 = 0;
        break label$23;
       }
       while (1) {
        $6_1 = $1_1;
        $0_1 = $3_1;
        $1_1 = $0_1 + 20 | 0;
        $3_1 = HEAP32[$1_1 >> 2];
        if ($3_1) {
         continue
        }
        $1_1 = $0_1 + 16 | 0;
        $3_1 = HEAP32[$0_1 + 16 >> 2];
        if ($3_1) {
         continue
        }
        break;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$18
      }
      $1_1 = HEAP32[$5_1 + 28 >> 2];
      $3_1 = ($1_1 << 2) + 22456 | 0;
      label$28 : {
       if (HEAP32[$3_1 >> 2] == ($5_1 | 0)) {
        HEAP32[$3_1 >> 2] = $0_1;
        if ($0_1) {
         break label$28
        }
        (wasm2js_i32$0 = 22156, wasm2js_i32$1 = HEAP32[5539] & __wasm_rotl_i32($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($5_1 | 0) ? 16 : 20) >> 2] = $0_1;
       if (!$0_1) {
        break label$18
       }
      }
      HEAP32[$0_1 + 24 >> 2] = $7_1;
      $1_1 = HEAP32[$5_1 + 16 >> 2];
      if ($1_1) {
       HEAP32[$0_1 + 16 >> 2] = $1_1;
       HEAP32[$1_1 + 24 >> 2] = $0_1;
      }
      $1_1 = HEAP32[$5_1 + 20 >> 2];
      if (!$1_1) {
       break label$18
      }
      HEAP32[$0_1 + 20 >> 2] = $1_1;
      HEAP32[$1_1 + 24 >> 2] = $0_1;
     }
     HEAP32[$2_1 + $4_1 >> 2] = $4_1;
     HEAP32[$2_1 + 4 >> 2] = $4_1 | 1;
     if (HEAP32[5543] != ($2_1 | 0)) {
      break label$14
     }
     HEAP32[5540] = $4_1;
     break label$1;
    }
    HEAP32[$5_1 + 4 >> 2] = $0_1 & -2;
    HEAP32[$2_1 + $4_1 >> 2] = $4_1;
    HEAP32[$2_1 + 4 >> 2] = $4_1 | 1;
   }
   if ($4_1 >>> 0 <= 255) {
    $1_1 = $4_1 >>> 3 | 0;
    $0_1 = ($1_1 << 3) + 22192 | 0;
    $3_1 = HEAP32[5538];
    $1_1 = 1 << $1_1;
    label$32 : {
     if (!($3_1 & $1_1)) {
      HEAP32[5538] = $1_1 | $3_1;
      $1_1 = $0_1;
      break label$32;
     }
     $1_1 = HEAP32[$0_1 + 8 >> 2];
    }
    HEAP32[$1_1 + 12 >> 2] = $2_1;
    HEAP32[$0_1 + 8 >> 2] = $2_1;
    HEAP32[$2_1 + 12 >> 2] = $0_1;
    HEAP32[$2_1 + 8 >> 2] = $1_1;
    break label$1;
   }
   HEAP32[$2_1 + 16 >> 2] = 0;
   HEAP32[$2_1 + 20 >> 2] = 0;
   $3_1 = $2_1 + 28 | 0;
   $1_1 = $4_1 >>> 8 | 0;
   $0_1 = 0;
   label$34 : {
    if (!$1_1) {
     break label$34
    }
    $0_1 = 31;
    if ($4_1 >>> 0 > 16777215) {
     break label$34
    }
    $6_1 = $1_1 + 1048320 >>> 16 & 8;
    $1_1 = $1_1 << $6_1;
    $0_1 = $1_1 + 520192 >>> 16 & 4;
    $5_1 = $1_1 << $0_1;
    $1_1 = $5_1 + 245760 >>> 16 & 2;
    $0_1 = ($5_1 << $1_1 >>> 15 | 0) - ($1_1 | ($0_1 | $6_1)) | 0;
    $0_1 = ($0_1 << 1 | $4_1 >>> $0_1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$3_1 >> 2] = $0_1;
   $3_1 = ($0_1 << 2) + 22456 | 0;
   $1_1 = HEAP32[5539];
   $6_1 = 1 << $0_1;
   label$35 : {
    if (!($1_1 & $6_1)) {
     HEAP32[$3_1 >> 2] = $2_1;
     HEAP32[5539] = $1_1 | $6_1;
     HEAP32[$2_1 + 24 >> 2] = $3_1;
     HEAP32[$2_1 + 8 >> 2] = $2_1;
     HEAP32[$2_1 + 12 >> 2] = $2_1;
     break label$35;
    }
    $1_1 = $4_1 << (($0_1 | 0) == 31 ? 0 : 25 - ($0_1 >>> 1 | 0) | 0);
    $0_1 = HEAP32[$3_1 >> 2];
    label$37 : {
     while (1) {
      $3_1 = $0_1;
      if ((HEAP32[$0_1 + 4 >> 2] & -8) == ($4_1 | 0)) {
       break label$37
      }
      $0_1 = $1_1 >>> 29 | 0;
      $1_1 = $1_1 << 1;
      $6_1 = ($3_1 + ($0_1 & 4) | 0) + 16 | 0;
      $0_1 = HEAP32[$6_1 >> 2];
      if ($0_1) {
       continue
      }
      break;
     };
     HEAP32[$6_1 >> 2] = $2_1;
     HEAP32[$2_1 + 24 >> 2] = $3_1;
     HEAP32[$2_1 + 12 >> 2] = $2_1;
     HEAP32[$2_1 + 8 >> 2] = $2_1;
     break label$35;
    }
    $0_1 = HEAP32[$3_1 + 8 >> 2];
    HEAP32[$3_1 + 8 >> 2] = $2_1;
    HEAP32[$0_1 + 12 >> 2] = $2_1;
    HEAP32[$2_1 + 24 >> 2] = 0;
    HEAP32[$2_1 + 8 >> 2] = $0_1;
    HEAP32[$2_1 + 12 >> 2] = $3_1;
   }
   $0_1 = HEAP32[5546] - 1 | 0;
   HEAP32[5546] = $0_1;
   if ($0_1) {
    break label$1
   }
   $2_1 = 22608;
   while (1) {
    $0_1 = HEAP32[$2_1 >> 2];
    $2_1 = $0_1 + 8 | 0;
    if ($0_1) {
     continue
    }
    break;
   };
   HEAP32[5546] = -1;
  }
 }
 
 function $6($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[$0_1 + 4 >> 2];
    if ($2_1 & 1) {
     break label$2
    }
    if (!($2_1 & 3)) {
     break label$1
    }
    $2_1 = HEAP32[$0_1 >> 2];
    $1_1 = $2_1 + $1_1 | 0;
    $0_1 = $0_1 - $2_1 | 0;
    if (($0_1 | 0) != HEAP32[5543]) {
     if ($2_1 >>> 0 <= 255) {
      $4_1 = $2_1 >>> 3 | 0;
      $2_1 = HEAP32[$0_1 + 8 >> 2];
      $3_1 = HEAP32[$0_1 + 12 >> 2];
      if (($3_1 | 0) == ($2_1 | 0)) {
       (wasm2js_i32$0 = 22152, wasm2js_i32$1 = HEAP32[5538] & __wasm_rotl_i32($4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$3_1 + 8 >> 2] = $2_1;
      HEAP32[$2_1 + 12 >> 2] = $3_1;
      break label$2;
     }
     $7_1 = HEAP32[$0_1 + 24 >> 2];
     $2_1 = HEAP32[$0_1 + 12 >> 2];
     label$6 : {
      if (($2_1 | 0) != ($0_1 | 0)) {
       $3_1 = HEAP32[$0_1 + 8 >> 2];
       HEAP32[$2_1 + 8 >> 2] = $3_1;
       HEAP32[$3_1 + 12 >> 2] = $2_1;
       break label$6;
      }
      label$9 : {
       $3_1 = $0_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2];
       if ($4_1) {
        break label$9
       }
       $3_1 = $0_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2];
       if ($4_1) {
        break label$9
       }
       $2_1 = 0;
       break label$6;
      }
      while (1) {
       $6_1 = $3_1;
       $2_1 = $4_1;
       $3_1 = $2_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2];
       if ($4_1) {
        continue
       }
       $3_1 = $2_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 + 16 >> 2];
       if ($4_1) {
        continue
       }
       break;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     $3_1 = HEAP32[$0_1 + 28 >> 2];
     $4_1 = ($3_1 << 2) + 22456 | 0;
     label$11 : {
      if (HEAP32[$4_1 >> 2] == ($0_1 | 0)) {
       HEAP32[$4_1 >> 2] = $2_1;
       if ($2_1) {
        break label$11
       }
       (wasm2js_i32$0 = 22156, wasm2js_i32$1 = HEAP32[5539] & __wasm_rotl_i32($3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($0_1 | 0) ? 16 : 20) >> 2] = $2_1;
      if (!$2_1) {
       break label$2
      }
     }
     HEAP32[$2_1 + 24 >> 2] = $7_1;
     $3_1 = HEAP32[$0_1 + 16 >> 2];
     if ($3_1) {
      HEAP32[$2_1 + 16 >> 2] = $3_1;
      HEAP32[$3_1 + 24 >> 2] = $2_1;
     }
     $3_1 = HEAP32[$0_1 + 20 >> 2];
     if (!$3_1) {
      break label$2
     }
     HEAP32[$2_1 + 20 >> 2] = $3_1;
     HEAP32[$3_1 + 24 >> 2] = $2_1;
     break label$2;
    }
    $2_1 = HEAP32[$5_1 + 4 >> 2];
    if (($2_1 & 3) != 3) {
     break label$2
    }
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[5540] = $1_1;
    HEAP32[$5_1 >> 2] = $1_1;
    HEAP32[$0_1 + 4 >> 2] = $1_1 | 1;
    return;
   }
   $2_1 = HEAP32[$5_1 + 4 >> 2];
   label$14 : {
    if (!($2_1 & 2)) {
     if (HEAP32[5544] == ($5_1 | 0)) {
      HEAP32[5544] = $0_1;
      $1_1 = HEAP32[5541] + $1_1 | 0;
      HEAP32[5541] = $1_1;
      HEAP32[$0_1 + 4 >> 2] = $1_1 | 1;
      if (HEAP32[5543] != ($0_1 | 0)) {
       break label$1
      }
      HEAP32[5540] = 0;
      HEAP32[5543] = 0;
      return;
     }
     if (HEAP32[5543] == ($5_1 | 0)) {
      HEAP32[5543] = $0_1;
      $1_1 = HEAP32[5540] + $1_1 | 0;
      HEAP32[5540] = $1_1;
      HEAP32[$0_1 + 4 >> 2] = $1_1 | 1;
      HEAP32[$0_1 + $1_1 >> 2] = $1_1;
      return;
     }
     $1_1 = ($2_1 & -8) + $1_1 | 0;
     label$18 : {
      if ($2_1 >>> 0 <= 255) {
       $4_1 = $2_1 >>> 3 | 0;
       $2_1 = HEAP32[$5_1 + 8 >> 2];
       $3_1 = HEAP32[$5_1 + 12 >> 2];
       if (($3_1 | 0) == ($2_1 | 0)) {
        (wasm2js_i32$0 = 22152, wasm2js_i32$1 = HEAP32[5538] & __wasm_rotl_i32($4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$3_1 + 8 >> 2] = $2_1;
       HEAP32[$2_1 + 12 >> 2] = $3_1;
       break label$18;
      }
      $7_1 = HEAP32[$5_1 + 24 >> 2];
      $2_1 = HEAP32[$5_1 + 12 >> 2];
      label$21 : {
       if (($5_1 | 0) != ($2_1 | 0)) {
        $3_1 = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$2_1 + 8 >> 2] = $3_1;
        HEAP32[$3_1 + 12 >> 2] = $2_1;
        break label$21;
       }
       label$24 : {
        $3_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2];
        if ($4_1) {
         break label$24
        }
        $3_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[$3_1 >> 2];
        if ($4_1) {
         break label$24
        }
        $2_1 = 0;
        break label$21;
       }
       while (1) {
        $6_1 = $3_1;
        $2_1 = $4_1;
        $3_1 = $2_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2];
        if ($4_1) {
         continue
        }
        $3_1 = $2_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 + 16 >> 2];
        if ($4_1) {
         continue
        }
        break;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$18
      }
      $3_1 = HEAP32[$5_1 + 28 >> 2];
      $4_1 = ($3_1 << 2) + 22456 | 0;
      label$26 : {
       if (HEAP32[$4_1 >> 2] == ($5_1 | 0)) {
        HEAP32[$4_1 >> 2] = $2_1;
        if ($2_1) {
         break label$26
        }
        (wasm2js_i32$0 = 22156, wasm2js_i32$1 = HEAP32[5539] & __wasm_rotl_i32($3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($5_1 | 0) ? 16 : 20) >> 2] = $2_1;
       if (!$2_1) {
        break label$18
       }
      }
      HEAP32[$2_1 + 24 >> 2] = $7_1;
      $3_1 = HEAP32[$5_1 + 16 >> 2];
      if ($3_1) {
       HEAP32[$2_1 + 16 >> 2] = $3_1;
       HEAP32[$3_1 + 24 >> 2] = $2_1;
      }
      $3_1 = HEAP32[$5_1 + 20 >> 2];
      if (!$3_1) {
       break label$18
      }
      HEAP32[$2_1 + 20 >> 2] = $3_1;
      HEAP32[$3_1 + 24 >> 2] = $2_1;
     }
     HEAP32[$0_1 + $1_1 >> 2] = $1_1;
     HEAP32[$0_1 + 4 >> 2] = $1_1 | 1;
     if (HEAP32[5543] != ($0_1 | 0)) {
      break label$14
     }
     HEAP32[5540] = $1_1;
     return;
    }
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[$0_1 + $1_1 >> 2] = $1_1;
    HEAP32[$0_1 + 4 >> 2] = $1_1 | 1;
   }
   if ($1_1 >>> 0 <= 255) {
    $2_1 = $1_1 >>> 3 | 0;
    $1_1 = ($2_1 << 3) + 22192 | 0;
    $3_1 = HEAP32[5538];
    $2_1 = 1 << $2_1;
    label$30 : {
     if (!($3_1 & $2_1)) {
      HEAP32[5538] = $2_1 | $3_1;
      $2_1 = $1_1;
      break label$30;
     }
     $2_1 = HEAP32[$1_1 + 8 >> 2];
    }
    HEAP32[$2_1 + 12 >> 2] = $0_1;
    HEAP32[$1_1 + 8 >> 2] = $0_1;
    HEAP32[$0_1 + 12 >> 2] = $1_1;
    HEAP32[$0_1 + 8 >> 2] = $2_1;
    return;
   }
   HEAP32[$0_1 + 16 >> 2] = 0;
   HEAP32[$0_1 + 20 >> 2] = 0;
   $4_1 = $0_1 + 28 | 0;
   $3_1 = $1_1 >>> 8 | 0;
   $2_1 = 0;
   label$32 : {
    if (!$3_1) {
     break label$32
    }
    $2_1 = 31;
    if ($1_1 >>> 0 > 16777215) {
     break label$32
    }
    $6_1 = $3_1 + 1048320 >>> 16 & 8;
    $3_1 = $3_1 << $6_1;
    $2_1 = $3_1 + 520192 >>> 16 & 4;
    $5_1 = $3_1 << $2_1;
    $3_1 = $5_1 + 245760 >>> 16 & 2;
    $2_1 = ($5_1 << $3_1 >>> 15 | 0) - ($3_1 | ($2_1 | $6_1)) | 0;
    $2_1 = ($2_1 << 1 | $1_1 >>> $2_1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$4_1 >> 2] = $2_1;
   $4_1 = ($2_1 << 2) + 22456 | 0;
   $3_1 = HEAP32[5539];
   $6_1 = 1 << $2_1;
   if (!($3_1 & $6_1)) {
    HEAP32[$4_1 >> 2] = $0_1;
    HEAP32[5539] = $3_1 | $6_1;
    HEAP32[$0_1 + 24 >> 2] = $4_1;
    HEAP32[$0_1 + 8 >> 2] = $0_1;
    HEAP32[$0_1 + 12 >> 2] = $0_1;
    return;
   }
   $3_1 = $1_1 << (($2_1 | 0) == 31 ? 0 : 25 - ($2_1 >>> 1 | 0) | 0);
   $2_1 = HEAP32[$4_1 >> 2];
   label$34 : {
    while (1) {
     $4_1 = $2_1;
     if ((HEAP32[$2_1 + 4 >> 2] & -8) == ($1_1 | 0)) {
      break label$34
     }
     $2_1 = $3_1 >>> 29 | 0;
     $3_1 = $3_1 << 1;
     $6_1 = ($4_1 + ($2_1 & 4) | 0) + 16 | 0;
     $2_1 = HEAP32[$6_1 >> 2];
     if ($2_1) {
      continue
     }
     break;
    };
    HEAP32[$6_1 >> 2] = $0_1;
    HEAP32[$0_1 + 24 >> 2] = $4_1;
    HEAP32[$0_1 + 12 >> 2] = $0_1;
    HEAP32[$0_1 + 8 >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[$4_1 + 8 >> 2];
   HEAP32[$4_1 + 8 >> 2] = $0_1;
   HEAP32[$1_1 + 12 >> 2] = $0_1;
   HEAP32[$0_1 + 24 >> 2] = 0;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
   HEAP32[$0_1 + 12 >> 2] = $4_1;
  }
 }
 
 function $7($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  if (!HEAP32[$1_1 + 12 >> 2]) {
   HEAP32[$1_1 + 12 >> 2] = 1
  }
  $0_1 = $8(22028, HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $8($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  HEAP32[$2_1 + 4 >> 2] = 4;
  HEAP32[$2_1 >> 2] = HEAP32[HEAP32[$2_1 + 12 >> 2] >> 2];
  HEAP32[HEAP32[$2_1 + 12 >> 2] >> 2] = HEAP32[$2_1 + 8 >> 2];
  return HEAP32[$2_1 >> 2];
 }
 
 function $9($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  if (!HEAP32[$1_1 + 12 >> 2]) {
   HEAP32[$1_1 + 12 >> 2] = 2
  }
  $0_1 = $8(22024, HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $0_1 = fimport$0(HEAP32[$0_1 + 56 >> 2]) | 0;
  $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[5537] = $0_1;
   $1_1 = -1;
  }
  return $1_1 | 0;
 }
 
 function $11($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = -1;
  label$1 : {
   if (($2_1 | 0) <= -1) {
    HEAP32[5537] = 28;
    break label$1;
   }
   $0_1 = fimport$1($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 + 12 | 0) | 0;
   if ($0_1) {
    HEAP32[5537] = $0_1;
    break label$1;
   }
   $4_1 = HEAP32[$3_1 + 12 >> 2];
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1;
 }
 
 function $12($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $2_1;
  HEAP32[$3_1 + 8 >> 2] = $1_1;
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  HEAP32[$3_1 >> 2] = $1_1;
  $1_1 = HEAP32[$0_1 + 20 >> 2] - $1_1 | 0;
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $6_1 = 2;
  $4_1 = $11(HEAP32[$0_1 + 56 >> 2], $3_1, 2);
  $7_1 = $1_1 + $2_1 | 0;
  label$1 : {
   if (($4_1 | 0) != ($7_1 | 0)) {
    $1_1 = $3_1;
    while (1) {
     if (($4_1 | 0) <= -1) {
      HEAP32[$0_1 + 24 >> 2] = 0;
      HEAP32[$0_1 + 16 >> 2] = 0;
      HEAP32[$0_1 + 20 >> 2] = 0;
      HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 32;
      $0_1 = 0;
      if (($6_1 | 0) == 2) {
       break label$1
      }
      $0_1 = $2_1 - HEAP32[$1_1 + 4 >> 2] | 0;
      break label$1;
     }
     $5_1 = HEAP32[$1_1 + 4 >> 2];
     $8_1 = $5_1 >>> 0 < $4_1 >>> 0;
     $1_1 = $8_1 ? $1_1 + 8 | 0 : $1_1;
     $5_1 = $4_1 - ($8_1 ? $5_1 : 0) | 0;
     HEAP32[$1_1 >> 2] = $5_1 + HEAP32[$1_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] - $5_1;
     $7_1 = $7_1 - $4_1 | 0;
     $6_1 = $6_1 - $8_1 | 0;
     $4_1 = $11(HEAP32[$0_1 + 56 >> 2], $1_1, $6_1);
     if (($7_1 | 0) != ($4_1 | 0)) {
      continue
     }
     break;
    };
   }
   $1_1 = HEAP32[$0_1 + 40 >> 2];
   HEAP32[$0_1 + 24 >> 2] = $1_1;
   HEAP32[$0_1 + 20 >> 2] = $1_1;
   HEAP32[$0_1 + 16 >> 2] = $1_1 + HEAP32[$0_1 + 44 >> 2];
   $0_1 = $2_1;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $13($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $0_1 = legalimport$fimport$2(HEAP32[$0_1 + 56 >> 2], $1_1 | 0, $2_1 | 0, $3_1 & 255, $4_1 + 8 | 0) | 0;
  label$1 : {
   if ($0_1) {
    HEAP32[5537] = ($0_1 | 0) == 76 ? 70 : $0_1;
    $1_1 = -1;
    $0_1 = -1;
    break label$1;
   }
   $1_1 = HEAP32[$4_1 + 12 >> 2];
   $0_1 = HEAP32[$4_1 + 8 >> 2];
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $0_1 | 0;
 }
 
 function $14($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 60 >> 2];
  HEAP32[$0_1 + 60 >> 2] = $1_1 - 1 | $1_1;
  $1_1 = HEAP32[$0_1 >> 2];
  if ($1_1 & 8) {
   HEAP32[$0_1 >> 2] = $1_1 | 32;
   return -1;
  }
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 40 >> 2];
  HEAP32[$0_1 + 24 >> 2] = $1_1;
  HEAP32[$0_1 + 20 >> 2] = $1_1;
  HEAP32[$0_1 + 16 >> 2] = $1_1 + HEAP32[$0_1 + 44 >> 2];
  return 0;
 }
 
 function $15($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$2_1 + 16 >> 2];
   if (!$3_1) {
    if ($14($2_1)) {
     break label$1
    }
    $3_1 = HEAP32[$2_1 + 16 >> 2];
   }
   $5_1 = HEAP32[$2_1 + 20 >> 2];
   if ($3_1 - $5_1 >>> 0 < $1_1 >>> 0) {
    FUNCTION_TABLE[HEAP32[$2_1 + 32 >> 2]]($2_1, $0_1, $1_1) | 0;
    return;
   }
   label$5 : {
    if (HEAP32[$2_1 + 64 >> 2] < 0) {
     break label$5
    }
    $3_1 = $0_1;
    while (1) {
     if (($1_1 | 0) == ($4_1 | 0)) {
      break label$5
     }
     $4_1 = $4_1 + 1 | 0;
     $7_1 = $1_1 + $3_1 | 0;
     $6_1 = $3_1 - 1 | 0;
     $3_1 = $6_1;
     if (HEAPU8[$7_1 - 1 | 0] != 10) {
      continue
     }
     break;
    };
    $3_1 = $0_1;
    $0_1 = ($1_1 - $4_1 | 0) + 1 | 0;
    if (FUNCTION_TABLE[HEAP32[$2_1 + 32 >> 2]]($2_1, $3_1, $0_1) >>> 0 < $0_1 >>> 0) {
     break label$1
    }
    $0_1 = ($1_1 + $6_1 | 0) + 1 | 0;
    $5_1 = HEAP32[$2_1 + 20 >> 2];
    $1_1 = $4_1 - 1 | 0;
   }
   $3($5_1, $0_1, $1_1);
   HEAP32[$2_1 + 20 >> 2] = HEAP32[$2_1 + 20 >> 2] + $1_1;
  }
 }
 
 function $16($0_1, $1_1) {
  if (!$0_1) {
   return 0
  }
  if ($0_1) {
   label$3 : {
    if ($1_1 >>> 0 <= 127) {
     HEAP8[$0_1 | 0] = $1_1;
     $0_1 = 1;
     break label$3;
    }
    label$5 : {
     if (!HEAP32[5664]) {
      if (($1_1 & -128) != 57216) {
       break label$5
      }
      HEAP8[$0_1 | 0] = $1_1;
      $0_1 = 1;
      break label$3;
     }
     if ($1_1 >>> 0 <= 2047) {
      HEAP8[$0_1 + 1 | 0] = $1_1 & 63 | 128;
      HEAP8[$0_1 | 0] = $1_1 >>> 6 | 192;
      $0_1 = 2;
      break label$3;
     }
     if (!(($1_1 & -8192) != 57344 ? $1_1 >>> 0 >= 55296 : 0)) {
      HEAP8[$0_1 + 2 | 0] = $1_1 & 63 | 128;
      HEAP8[$0_1 | 0] = $1_1 >>> 12 | 224;
      HEAP8[$0_1 + 1 | 0] = $1_1 >>> 6 & 63 | 128;
      $0_1 = 3;
      break label$3;
     }
     if ($1_1 - 65536 >>> 0 <= 1048575) {
      HEAP8[$0_1 + 3 | 0] = $1_1 & 63 | 128;
      HEAP8[$0_1 | 0] = $1_1 >>> 18 | 240;
      HEAP8[$0_1 + 2 | 0] = $1_1 >>> 6 & 63 | 128;
      HEAP8[$0_1 + 1 | 0] = $1_1 >>> 12 & 63 | 128;
      $0_1 = 4;
      break label$3;
     }
    }
    HEAP32[5537] = 25;
    $0_1 = -1;
   }
  } else {
   $0_1 = 1
  }
  return $0_1;
 }
 
 function $17($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  $3_1 = wasm2js_scratch_load_i32(1) | 0;
  $4_1 = wasm2js_scratch_load_i32(0) | 0;
  $2_1 = $3_1 >>> 20 & 2047;
  if (($2_1 | 0) != 2047) {
   if (!$2_1) {
    if ($0_1 == 0.0) {
     HEAP32[$1_1 >> 2] = 0;
     return $0_1;
    }
    $0_1 = $17($0_1 * 18446744073709551615.0, $1_1);
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + -64;
    return $0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 - 1022;
   wasm2js_scratch_store_i32(0, $4_1 | 0);
   wasm2js_scratch_store_i32(1, $3_1 & -2146435073 | 1071644672);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return $0_1;
 }
 
 function $18($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 208 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 204 >> 2] = $2_1;
  $4_1 = $3_1 + 192 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 184 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 176 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 168 >> 2] = 0;
  HEAP32[$3_1 + 172 >> 2] = 0;
  HEAP32[$3_1 + 160 >> 2] = 0;
  HEAP32[$3_1 + 164 >> 2] = 0;
  HEAP32[$3_1 + 200 >> 2] = $2_1;
  if (($19(0, $1_1, $3_1 + 200 | 0, $3_1 + 80 | 0, $3_1 + 160 | 0) | 0) >= 0) {
   $4_1 = HEAP32[$0_1 >> 2];
   if (HEAP32[$0_1 + 60 >> 2] <= 0) {
    HEAP32[$0_1 >> 2] = $4_1 & -33
   }
   label$3 : {
    label$4 : {
     label$5 : {
      if (!HEAP32[$0_1 + 44 >> 2]) {
       HEAP32[$0_1 + 44 >> 2] = 80;
       HEAP32[$0_1 + 24 >> 2] = 0;
       HEAP32[$0_1 + 16 >> 2] = 0;
       HEAP32[$0_1 + 20 >> 2] = 0;
       $5_1 = HEAP32[$0_1 + 40 >> 2];
       HEAP32[$0_1 + 40 >> 2] = $3_1;
       break label$5;
      }
      if (HEAP32[$0_1 + 16 >> 2]) {
       break label$4
      }
     }
     if ($14($0_1)) {
      break label$3
     }
    }
    $19($0_1, $1_1, $3_1 + 200 | 0, $3_1 + 80 | 0, $3_1 + 160 | 0);
   }
   if ($5_1) {
    FUNCTION_TABLE[HEAP32[$0_1 + 32 >> 2]]($0_1, 0, 0) | 0;
    HEAP32[$0_1 + 44 >> 2] = 0;
    HEAP32[$0_1 + 40 >> 2] = $5_1;
    HEAP32[$0_1 + 24 >> 2] = 0;
    HEAP32[$0_1 + 16 >> 2] = 0;
    HEAP32[$0_1 + 20 >> 2] = 0;
   }
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | $4_1 & 32;
  }
  global$0 = $3_1 + 208 | 0;
 }
 
 function $19($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0.0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0.0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 880 | 0;
  global$0 = $11_1;
  $34_1 = $11_1 + 336 | 8;
  $35_1 = $11_1 + 55 | 0;
  $36_1 = -338 - $11_1 | 0;
  $30_1 = $11_1 + 336 | 9;
  $37_1 = $11_1 + 656 | 0;
  $27_1 = $11_1 + 336 | 0;
  $33_1 = -336 - $11_1 | 0;
  $26_1 = $11_1 + 56 | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      $8_1 = $1_1;
      if ((2147483647 - $21_1 | 0) < ($5_1 | 0)) {
       break label$4
      }
      $21_1 = $5_1 + $21_1 | 0;
      label$5 : {
       label$6 : {
        label$7 : {
         $5_1 = HEAPU8[$8_1 | 0];
         if ($5_1) {
          while (1) {
           label$10 : {
            $5_1 = $5_1 & 255;
            label$11 : {
             if ($5_1) {
              if (($5_1 | 0) != 37) {
               break label$10
              }
              $6_1 = $1_1;
              $5_1 = $6_1;
              while (1) {
               if (HEAPU8[$5_1 + 1 | 0] != 37) {
                $1_1 = $5_1;
                break label$11;
               }
               $6_1 = $6_1 + 1 | 0;
               $7_1 = HEAPU8[$5_1 + 2 | 0];
               $1_1 = $5_1 + 2 | 0;
               $5_1 = $1_1;
               if (($7_1 | 0) == 37) {
                continue
               }
               break;
              };
              break label$11;
             }
             $6_1 = $1_1;
            }
            $5_1 = $6_1 - $8_1 | 0;
            $22_1 = 2147483647 - $21_1 | 0;
            if (($5_1 | 0) > ($22_1 | 0)) {
             break label$4
            }
            if (!(!$0_1 | HEAPU8[$0_1 | 0] & 32)) {
             $15($8_1, $5_1, $0_1)
            }
            if ($5_1) {
             continue label$3
            }
            $5_1 = $1_1 + 1 | 0;
            $9_1 = HEAP8[$1_1 + 1 | 0];
            $10_1 = $9_1 - 48 | 0;
            $7_1 = -1;
            label$16 : {
             if ($10_1 >>> 0 > 9) {
              break label$16
             }
             $6_1 = HEAPU8[$1_1 + 2 | 0] == 36;
             $5_1 = $6_1 ? $1_1 + 3 | 0 : $5_1;
             $28_1 = $6_1 ? 1 : $28_1;
             $9_1 = HEAP8[($6_1 ? 3 : 1) + $1_1 | 0];
             $7_1 = $6_1 ? $10_1 : -1;
            }
            $6_1 = 0;
            $1_1 = $9_1 - 32 | 0;
            label$17 : {
             if ($1_1 >>> 0 > 31) {
              $1_1 = $5_1;
              break label$17;
             }
             $12_1 = 1 << $1_1;
             if (!($12_1 & 75913)) {
              $1_1 = $5_1;
              break label$17;
             }
             while (1) {
              $1_1 = $5_1 + 1 | 0;
              $6_1 = $6_1 | $12_1;
              $9_1 = HEAP8[$5_1 + 1 | 0];
              $10_1 = $9_1 - 32 | 0;
              if ($10_1 >>> 0 > 31) {
               break label$17
              }
              $5_1 = $1_1;
              $12_1 = 1 << $10_1;
              if ($12_1 & 75913) {
               continue
              }
              break;
             };
            }
            label$21 : {
             if (($9_1 | 0) == 42) {
              $5_1 = HEAP8[$1_1 + 1 | 0] - 48 | 0;
              label$23 : {
               if (!(HEAPU8[$1_1 + 2 | 0] != 36 | $5_1 >>> 0 > 9)) {
                HEAP32[($5_1 << 2) + $4_1 >> 2] = 10;
                $10_1 = $1_1 + 3 | 0;
                $28_1 = 1;
                $15_1 = HEAP32[((HEAP8[$1_1 + 1 | 0] << 3) + $3_1 | 0) - 384 >> 2];
                break label$23;
               }
               if ($28_1) {
                break label$7
               }
               $10_1 = $1_1 + 1 | 0;
               if (!$0_1) {
                $28_1 = 0;
                $15_1 = 0;
                break label$21;
               }
               $1_1 = HEAP32[$2_1 >> 2];
               HEAP32[$2_1 >> 2] = $1_1 + 4;
               $28_1 = 0;
               $15_1 = HEAP32[$1_1 >> 2];
              }
              if (($15_1 | 0) > -1) {
               break label$21
              }
              $15_1 = 0 - $15_1 | 0;
              $6_1 = $6_1 | 8192;
              break label$21;
             }
             $15_1 = 0;
             $12_1 = $9_1 - 48 | 0;
             if ($12_1 >>> 0 > 9) {
              $10_1 = $1_1;
              break label$21;
             }
             $5_1 = 0;
             while (1) {
              $15_1 = -1;
              $9_1 = HEAP8[$1_1 + 1 | 0];
              $10_1 = $1_1 + 1 | 0;
              $1_1 = $10_1;
              if ($5_1 >>> 0 <= 214748364) {
               $5_1 = Math_imul($5_1, 10);
               $15_1 = (2147483647 - $5_1 | 0) < ($12_1 | 0) ? -1 : $5_1 + $12_1 | 0;
              }
              $5_1 = $15_1;
              $12_1 = $9_1 - 48 | 0;
              if ($12_1 >>> 0 < 10) {
               continue
              }
              break;
             };
             if (($15_1 | 0) < 0) {
              break label$4
             }
            }
            $5_1 = 0;
            $9_1 = -1;
            label$29 : {
             if (HEAPU8[$10_1 | 0] != 46) {
              $1_1 = $10_1;
              $19_1 = 0;
              break label$29;
             }
             $9_1 = HEAP8[$10_1 + 1 | 0];
             if (($9_1 | 0) == 42) {
              $1_1 = HEAP8[$10_1 + 2 | 0] - 48 | 0;
              label$32 : {
               if (!(HEAPU8[$10_1 + 3 | 0] != 36 | $1_1 >>> 0 > 9)) {
                HEAP32[($1_1 << 2) + $4_1 >> 2] = 10;
                $1_1 = $10_1 + 4 | 0;
                $9_1 = HEAP32[((HEAP8[$10_1 + 2 | 0] << 3) + $3_1 | 0) - 384 >> 2];
                break label$32;
               }
               if ($28_1) {
                break label$7
               }
               $1_1 = $10_1 + 2 | 0;
               $9_1 = 0;
               if (!$0_1) {
                break label$32
               }
               $10_1 = HEAP32[$2_1 >> 2];
               HEAP32[$2_1 >> 2] = $10_1 + 4;
               $9_1 = HEAP32[$10_1 >> 2];
              }
              $19_1 = ($9_1 ^ -1) >>> 31 | 0;
              break label$29;
             }
             $1_1 = $10_1 + 1 | 0;
             $14_1 = $9_1 - 48 | 0;
             if ($14_1 >>> 0 > 9) {
              $19_1 = 1;
              $9_1 = 0;
              break label$29;
             }
             $10_1 = 0;
             $12_1 = $1_1;
             while (1) {
              $9_1 = -1;
              if ($10_1 >>> 0 <= 214748364) {
               $1_1 = Math_imul($10_1, 10);
               $9_1 = (2147483647 - $1_1 | 0) < ($14_1 | 0) ? -1 : $1_1 + $14_1 | 0;
              }
              $19_1 = 1;
              $13_1 = HEAP8[$12_1 + 1 | 0];
              $1_1 = $12_1 + 1 | 0;
              $12_1 = $1_1;
              $10_1 = $9_1;
              $14_1 = $13_1 - 48 | 0;
              if ($14_1 >>> 0 < 10) {
               continue
              }
              break;
             };
            }
            while (1) {
             $12_1 = $5_1;
             $5_1 = HEAP8[$1_1 | 0] - 65 | 0;
             if ($5_1 >>> 0 > 57) {
              break label$7
             }
             $1_1 = $1_1 + 1 | 0;
             $5_1 = HEAPU8[($5_1 + Math_imul($12_1, 58) | 0) + 2720 | 0];
             if ($5_1 - 1 >>> 0 < 8) {
              continue
             }
             break;
            };
            if (!$5_1) {
             break label$7
            }
            label$38 : {
             label$39 : {
              label$40 : {
               if (($5_1 | 0) == 27) {
                if (($7_1 | 0) <= -1) {
                 break label$40
                }
                break label$7;
               }
               if (($7_1 | 0) < 0) {
                break label$39
               }
               HEAP32[($7_1 << 2) + $4_1 >> 2] = $5_1;
               $5_1 = ($7_1 << 3) + $3_1 | 0;
               $7_1 = HEAP32[$5_1 + 4 >> 2];
               HEAP32[$11_1 + 56 >> 2] = HEAP32[$5_1 >> 2];
               HEAP32[$11_1 + 60 >> 2] = $7_1;
              }
              $5_1 = 0;
              if (!$0_1) {
               continue label$3
              }
              break label$38;
             }
             if (!$0_1) {
              $21_1 = 0;
              break label$1;
             }
             $20($11_1 + 56 | 0, $5_1, $2_1);
            }
            $7_1 = $6_1 & -65537;
            $16_1 = $6_1 & 8192 ? $7_1 : $6_1;
            label$43 : {
             label$44 : {
              label$45 : {
               $5_1 = HEAP8[$1_1 - 1 | 0];
               $10_1 = $12_1 ? (($5_1 & 15) == 3 ? $5_1 & -33 : $5_1) : $5_1;
               $5_1 = $10_1 - 65 | 0;
               if ($5_1 >>> 0 > 55) {
                break label$45
               }
               label$46 : {
                label$47 : {
                 label$48 : {
                  label$49 : {
                   label$50 : {
                    label$51 : {
                     label$52 : {
                      label$53 : {
                       label$54 : {
                        label$55 : {
                         label$56 : {
                          label$57 : {
                           switch ($5_1 - 1 | 0) {
                           case 51:
                            $13_1 = 0;
                            $12_1 = HEAP32[$11_1 + 56 >> 2];
                            $5_1 = HEAP32[$11_1 + 60 >> 2];
                            $14_1 = 2694;
                            break label$56;
                           case 44:
                            $5_1 = 0;
                            $6_1 = $12_1 & 255;
                            if ($6_1 >>> 0 > 7) {
                             continue label$3
                            }
                            label$63 : {
                             switch ($6_1 - 1 | 0) {
                             default:
                              HEAP32[HEAP32[$11_1 + 56 >> 2] >> 2] = $21_1;
                              continue label$3;
                             case 0:
                              HEAP32[HEAP32[$11_1 + 56 >> 2] >> 2] = $21_1;
                              continue label$3;
                             case 1:
                              $6_1 = HEAP32[$11_1 + 56 >> 2];
                              HEAP32[$6_1 >> 2] = $21_1;
                              HEAP32[$6_1 + 4 >> 2] = $21_1 >> 31;
                              continue label$3;
                             case 2:
                              HEAP16[HEAP32[$11_1 + 56 >> 2] >> 1] = $21_1;
                              continue label$3;
                             case 3:
                              HEAP8[HEAP32[$11_1 + 56 >> 2]] = $21_1;
                              continue label$3;
                             case 5:
                              HEAP32[HEAP32[$11_1 + 56 >> 2] >> 2] = $21_1;
                              continue label$3;
                             case 4:
                              continue label$3;
                             case 6:
                              break label$63;
                             };
                            }
                            $6_1 = HEAP32[$11_1 + 56 >> 2];
                            HEAP32[$6_1 >> 2] = $21_1;
                            HEAP32[$6_1 + 4 >> 2] = $21_1 >> 31;
                            continue label$3;
                           case 46:
                            $9_1 = $9_1 >>> 0 > 8 ? $9_1 : 8;
                            $16_1 = $16_1 | 8;
                            $10_1 = 120;
                           case 22:
                           case 54:
                            $13_1 = 0;
                            $14_1 = 2694;
                            $6_1 = HEAP32[$11_1 + 60 >> 2];
                            $5_1 = $6_1;
                            $12_1 = HEAP32[$11_1 + 56 >> 2];
                            if (!($5_1 | $12_1)) {
                             $8_1 = $26_1;
                             break label$55;
                            }
                            $7_1 = $10_1 & 32;
                            $8_1 = $26_1;
                            while (1) {
                             $8_1 = $8_1 - 1 | 0;
                             HEAP8[$8_1 | 0] = $7_1 | HEAPU8[($12_1 & 15) + 3328 | 0];
                             $6_1 = $5_1;
                             $5_1 = $5_1 >>> 4 | 0;
                             $12_1 = ($6_1 & 15) << 28 | $12_1 >>> 4;
                             if ($12_1 | $5_1) {
                              continue
                             }
                             break;
                            };
                            if (!($16_1 & 8) | !(HEAP32[$11_1 + 56 >> 2] | HEAP32[$11_1 + 60 >> 2])) {
                             break label$55
                            }
                            $14_1 = ($10_1 >> 4) + 2694 | 0;
                            $13_1 = 2;
                            break label$55;
                           case 45:
                            $8_1 = $26_1;
                            $6_1 = HEAP32[$11_1 + 60 >> 2];
                            $5_1 = $6_1;
                            $12_1 = HEAP32[$11_1 + 56 >> 2];
                            if ($5_1 | $12_1) {
                             while (1) {
                              $8_1 = $8_1 - 1 | 0;
                              HEAP8[$8_1 | 0] = $12_1 & 7 | 48;
                              $6_1 = $5_1;
                              $5_1 = $5_1 >>> 3 | 0;
                              $12_1 = ($6_1 & 7) << 29 | $12_1 >>> 3;
                              if ($12_1 | $5_1) {
                               continue
                              }
                              break;
                             }
                            }
                            $13_1 = 0;
                            $14_1 = 2694;
                            if (!($16_1 & 8)) {
                             break label$55
                            }
                            $5_1 = $26_1 - $8_1 | 0;
                            $9_1 = ($5_1 | 0) < ($9_1 | 0) ? $9_1 : $5_1 + 1 | 0;
                            break label$55;
                           case 0:
                           case 2:
                           case 6:
                           case 7:
                           case 8:
                           case 9:
                           case 10:
                           case 11:
                           case 12:
                           case 13:
                           case 14:
                           case 15:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 23:
                           case 24:
                           case 25:
                           case 26:
                           case 27:
                           case 28:
                           case 29:
                           case 30:
                           case 32:
                           case 38:
                           case 40:
                           case 41:
                           case 42:
                           case 47:
                           case 48:
                           case 50:
                           case 52:
                           case 53:
                            break label$45;
                           case 1:
                            break label$49;
                           case 17:
                            break label$50;
                           case 49:
                            break label$52;
                           case 43:
                            break label$53;
                           case 33:
                            break label$54;
                           case 34:
                           case 39:
                            break label$57;
                           default:
                            break label$46;
                           };
                          }
                          $6_1 = HEAP32[$11_1 + 60 >> 2];
                          $5_1 = $6_1;
                          $12_1 = HEAP32[$11_1 + 56 >> 2];
                          if (($5_1 | 0) < -1 ? 1 : ($5_1 | 0) <= -1) {
                           $5_1 = 0 - ((($12_1 | 0) != 0) + $5_1 | 0) | 0;
                           $12_1 = 0 - $12_1 | 0;
                           HEAP32[$11_1 + 56 >> 2] = $12_1;
                           HEAP32[$11_1 + 60 >> 2] = $5_1;
                           $13_1 = 1;
                           $14_1 = 2694;
                           break label$56;
                          }
                          if ($16_1 & 2048) {
                           $13_1 = 1;
                           $14_1 = 2695;
                           break label$56;
                          }
                          $13_1 = $16_1 & 1;
                          $14_1 = $13_1 ? 2696 : 2694;
                         }
                         label$76 : {
                          if ($5_1 >>> 0 < 1) {
                           $6_1 = $12_1;
                           $8_1 = $26_1;
                           break label$76;
                          }
                          $8_1 = $26_1;
                          while (1) {
                           $6_1 = __wasm_i64_udiv($12_1, $5_1, 10);
                           $10_1 = i64toi32_i32$HIGH_BITS;
                           $7_1 = $10_1;
                           $8_1 = $8_1 - 1 | 0;
                           (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $12_1 - __wasm_i64_mul($6_1, $7_1, 10, 0) | 48), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
                           $10_1 = $5_1 >>> 0 > 9;
                           $12_1 = $6_1;
                           $5_1 = $7_1;
                           if ($10_1) {
                            continue
                           }
                           break;
                          };
                         }
                         $5_1 = $6_1;
                         if (!$5_1) {
                          break label$55
                         }
                         while (1) {
                          $8_1 = $8_1 - 1 | 0;
                          $6_1 = ($5_1 >>> 0) / 10 | 0;
                          HEAP8[$8_1 | 0] = $5_1 - Math_imul($6_1, 10) | 48;
                          $7_1 = $5_1 >>> 0 > 9;
                          $5_1 = $6_1;
                          if ($7_1) {
                           continue
                          }
                          break;
                         };
                        }
                        if (($9_1 | 0) < 0 ? $19_1 : 0) {
                         break label$4
                        }
                        $16_1 = $19_1 ? $16_1 & -65537 : $16_1;
                        $5_1 = HEAP32[$11_1 + 60 >> 2];
                        $6_1 = $5_1;
                        $7_1 = HEAP32[$11_1 + 56 >> 2];
                        if (!(!!($5_1 | $7_1) | $9_1)) {
                         $8_1 = $26_1;
                         $5_1 = $8_1;
                         $9_1 = 0;
                         break label$5;
                        }
                        $5_1 = !($6_1 | $7_1) + ($26_1 - $8_1 | 0) | 0;
                        $9_1 = ($5_1 | 0) < ($9_1 | 0) ? $9_1 : $5_1;
                        break label$44;
                       }
                       HEAP8[$11_1 + 55 | 0] = HEAP32[$11_1 + 56 >> 2];
                       $13_1 = 0;
                       $14_1 = 2694;
                       $9_1 = 1;
                       $8_1 = $35_1;
                       $5_1 = $26_1;
                       $16_1 = $7_1;
                       break label$5;
                      }
                      $8_1 = HEAP32[5537];
                      $5_1 = 0;
                      if (!HEAP32[5670]) {
                       HEAP32[5670] = 22656
                      }
                      label$82 : {
                       label$83 : {
                        while (1) {
                         if (($8_1 | 0) != HEAPU8[$5_1 + 1040 | 0]) {
                          $6_1 = 77;
                          $5_1 = $5_1 + 1 | 0;
                          if (($5_1 | 0) != 77) {
                           continue
                          }
                          break label$83;
                         }
                         break;
                        };
                        $6_1 = $5_1;
                        if ($5_1) {
                         break label$83
                        }
                        $8_1 = 1120;
                        break label$82;
                       }
                       $5_1 = 1120;
                       while (1) {
                        $10_1 = HEAPU8[$5_1 | 0];
                        $8_1 = $5_1 + 1 | 0;
                        $5_1 = $8_1;
                        if ($10_1) {
                         continue
                        }
                        $5_1 = $8_1;
                        $6_1 = $6_1 - 1 | 0;
                        if ($6_1) {
                         continue
                        }
                        break;
                       };
                      }
                      break label$51;
                     }
                     $5_1 = HEAP32[$11_1 + 56 >> 2];
                     $8_1 = $5_1 ? $5_1 : 2704;
                    }
                    $13_1 = 0;
                    $14_1 = $8_1;
                    $10_1 = $8_1;
                    $19_1 = ($9_1 | 0) < 0 ? 2147483647 : $9_1;
                    $6_1 = $19_1;
                    $16_1 = ($6_1 | 0) != 0;
                    label$87 : {
                     label$88 : {
                      label$89 : {
                       label$90 : {
                        if (!$6_1) {
                         $5_1 = $6_1;
                         break label$90;
                        }
                        if (!($10_1 & 3)) {
                         $5_1 = $6_1;
                         break label$90;
                        }
                        while (1) {
                         if (!HEAPU8[$10_1 | 0]) {
                          $5_1 = $6_1;
                          break label$89;
                         }
                         $16_1 = ($6_1 | 0) != 1;
                         $5_1 = $6_1 - 1 | 0;
                         $10_1 = $10_1 + 1 | 0;
                         if (($6_1 | 0) == 1) {
                          break label$90
                         }
                         $6_1 = $5_1;
                         if ($10_1 & 3) {
                          continue
                         }
                         break;
                        };
                       }
                       if (!$16_1) {
                        break label$88
                       }
                      }
                      label$95 : {
                       if (!HEAPU8[$10_1 | 0] | $5_1 >>> 0 < 4) {
                        break label$95
                       }
                       $12_1 = $5_1 - 4 | 0;
                       $6_1 = $12_1 & 3;
                       $12_1 = (($12_1 & -4) + $10_1 | 0) + 4 | 0;
                       while (1) {
                        $16_1 = HEAP32[$10_1 >> 2];
                        if (($16_1 ^ -1) & $16_1 - 16843009 & -2139062144) {
                         break label$95
                        }
                        $10_1 = $10_1 + 4 | 0;
                        $5_1 = $5_1 - 4 | 0;
                        if ($5_1 >>> 0 > 3) {
                         continue
                        }
                        break;
                       };
                       $5_1 = $6_1;
                       $10_1 = $12_1;
                      }
                      if (!$5_1) {
                       break label$88
                      }
                      while (1) {
                       if (!HEAPU8[$10_1 | 0]) {
                        break label$87
                       }
                       $10_1 = $10_1 + 1 | 0;
                       $5_1 = $5_1 - 1 | 0;
                       if ($5_1) {
                        continue
                       }
                       break;
                      };
                     }
                     $10_1 = 0;
                    }
                    $6_1 = $10_1 ? $10_1 - $8_1 | 0 : $19_1;
                    $5_1 = $6_1 + $14_1 | 0;
                    $14_1 = 2694;
                    if (($9_1 | 0) <= -1) {
                     break label$43
                    }
                    $16_1 = $7_1;
                    $9_1 = $6_1;
                    break label$5;
                   }
                   $8_1 = HEAP32[$11_1 + 56 >> 2];
                   $6_1 = $8_1;
                   if ($9_1) {
                    break label$48
                   }
                   $5_1 = 0;
                   break label$47;
                  }
                  HEAP32[$11_1 + 12 >> 2] = 0;
                  HEAP32[$11_1 + 8 >> 2] = HEAP32[$11_1 + 56 >> 2];
                  HEAP32[$11_1 + 56 >> 2] = $11_1 + 8;
                  $9_1 = -1;
                  $6_1 = $11_1 + 8 | 0;
                 }
                 $5_1 = 0;
                 $8_1 = $6_1;
                 label$98 : {
                  while (1) {
                   $7_1 = HEAP32[$6_1 >> 2];
                   if (!$7_1) {
                    break label$98
                   }
                   $7_1 = $16($11_1 + 4 | 0, $7_1);
                   $10_1 = ($7_1 | 0) < 0;
                   if (!($10_1 | $7_1 >>> 0 > $9_1 - $5_1 >>> 0)) {
                    $6_1 = $6_1 + 4 | 0;
                    $5_1 = $5_1 + $7_1 | 0;
                    if ($9_1 >>> 0 > $5_1 >>> 0) {
                     continue
                    }
                    break label$98;
                   }
                   break;
                  };
                  if ($10_1) {
                   break label$2
                  }
                 }
                 if (($5_1 | 0) < 0) {
                  break label$4
                 }
                }
                $10_1 = $16_1 & 73728;
                label$101 : {
                 if ($10_1 | ($5_1 | 0) >= ($15_1 | 0)) {
                  break label$101
                 }
                 $14_1 = $15_1 - $5_1 | 0;
                 $6_1 = $14_1 >>> 0 < 256;
                 $2($11_1 - -64 | 0, 32, $6_1 ? $14_1 : 256);
                 $12_1 = HEAP32[$0_1 >> 2];
                 $7_1 = $12_1 & 32;
                 label$102 : {
                  if (!$6_1) {
                   $6_1 = !$7_1;
                   $7_1 = $14_1;
                   while (1) {
                    if ($6_1 & 1) {
                     $15($11_1 - -64 | 0, 256, $0_1);
                     $12_1 = HEAP32[$0_1 >> 2];
                    }
                    $9_1 = $12_1 & 32;
                    $6_1 = !$9_1;
                    $7_1 = $7_1 - 256 | 0;
                    if ($7_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($9_1) {
                    break label$101
                   }
                   $14_1 = $14_1 & 255;
                   break label$102;
                  }
                  if ($7_1) {
                   break label$101
                  }
                 }
                 $15($11_1 - -64 | 0, $14_1, $0_1);
                }
                label$106 : {
                 if (!$5_1) {
                  break label$106
                 }
                 $6_1 = 0;
                 while (1) {
                  $7_1 = HEAP32[$8_1 >> 2];
                  if (!$7_1) {
                   break label$106
                  }
                  $7_1 = $16($11_1 + 4 | 0, $7_1);
                  $6_1 = $7_1 + $6_1 | 0;
                  if ($6_1 >>> 0 > $5_1 >>> 0) {
                   break label$106
                  }
                  if (!(HEAPU8[$0_1 | 0] & 32)) {
                   $15($11_1 + 4 | 0, $7_1, $0_1)
                  }
                  $8_1 = $8_1 + 4 | 0;
                  if ($5_1 >>> 0 > $6_1 >>> 0) {
                   continue
                  }
                  break;
                 };
                }
                label$109 : {
                 if (($10_1 | 0) != 8192 | ($5_1 | 0) >= ($15_1 | 0)) {
                  break label$109
                 }
                 $9_1 = $15_1 - $5_1 | 0;
                 $6_1 = $9_1 >>> 0 < 256;
                 $2($11_1 - -64 | 0, 32, $6_1 ? $9_1 : 256);
                 $8_1 = HEAP32[$0_1 >> 2];
                 $7_1 = $8_1 & 32;
                 label$110 : {
                  if (!$6_1) {
                   $6_1 = !$7_1;
                   $7_1 = $9_1;
                   while (1) {
                    if ($6_1 & 1) {
                     $15($11_1 - -64 | 0, 256, $0_1);
                     $8_1 = HEAP32[$0_1 >> 2];
                    }
                    $10_1 = $8_1 & 32;
                    $6_1 = !$10_1;
                    $7_1 = $7_1 - 256 | 0;
                    if ($7_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($10_1) {
                    break label$109
                   }
                   $9_1 = $9_1 & 255;
                   break label$110;
                  }
                  if ($7_1) {
                   break label$109
                  }
                 }
                 $15($11_1 - -64 | 0, $9_1, $0_1);
                }
                $5_1 = ($5_1 | 0) < ($15_1 | 0) ? $15_1 : $5_1;
                continue label$3;
               }
               if ($19_1 ? ($9_1 | 0) <= -1 : 0) {
                break label$4
               }
               $18_1 = HEAPF64[$11_1 + 56 >> 3];
               HEAP32[$11_1 + 364 >> 2] = 0;
               wasm2js_scratch_store_f64(+$18_1);
               $5_1 = wasm2js_scratch_load_i32(1) | 0;
               wasm2js_scratch_load_i32(0) | 0;
               label$114 : {
                if (($5_1 | 0) < -1 ? 1 : ($5_1 | 0) <= -1) {
                 $18_1 = -$18_1;
                 $22_1 = 1;
                 $20_1 = 3344;
                 break label$114;
                }
                if ($16_1 & 2048) {
                 $22_1 = 1;
                 $20_1 = 3347;
                 break label$114;
                }
                $22_1 = $16_1 & 1;
                $20_1 = $22_1 ? 3350 : 3345;
               }
               $24_1 = Math_abs($18_1);
               label$117 : {
                if (!($24_1 != infinity & $24_1 == $24_1)) {
                 $8_1 = $22_1 + 3 | 0;
                 label$119 : {
                  if ($16_1 & 8192 | ($8_1 | 0) >= ($15_1 | 0)) {
                   break label$119
                  }
                  $9_1 = $15_1 - $8_1 | 0;
                  $5_1 = $9_1 >>> 0 < 256;
                  $2($11_1 - -64 | 0, 32, $5_1 ? $9_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $6_1 = $7_1 & 32;
                  label$120 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $9_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $15($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $12_1 = $7_1 & 32;
                     $5_1 = !$12_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($12_1) {
                     break label$119
                    }
                    $9_1 = $9_1 & 255;
                    break label$120;
                   }
                   if ($6_1) {
                    break label$119
                   }
                  }
                  $15($11_1 - -64 | 0, $9_1, $0_1);
                 }
                 $5_1 = HEAP32[$0_1 >> 2];
                 if (!($5_1 & 32)) {
                  $15($20_1, $22_1, $0_1);
                  $5_1 = HEAP32[$0_1 >> 2];
                 }
                 if (!($5_1 & 32)) {
                  $5_1 = ($10_1 & 32) >>> 5 | 0;
                  $15($18_1 != $18_1 ? ($5_1 ? 3371 : 3375) : $5_1 ? 3363 : 3367, 3, $0_1);
                 }
                 label$127 : {
                  if (($16_1 & 73728) != 8192 | ($8_1 | 0) >= ($15_1 | 0)) {
                   break label$127
                  }
                  $9_1 = $15_1 - $8_1 | 0;
                  $5_1 = $9_1 >>> 0 < 256;
                  $2($11_1 - -64 | 0, 32, $5_1 ? $9_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $6_1 = $7_1 & 32;
                  label$128 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $9_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $15($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $10_1 = $7_1 & 32;
                     $5_1 = !$10_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($10_1) {
                     break label$127
                    }
                    $9_1 = $9_1 & 255;
                    break label$128;
                   }
                   if ($6_1) {
                    break label$127
                   }
                  }
                  $15($11_1 - -64 | 0, $9_1, $0_1);
                 }
                 $5_1 = ($8_1 | 0) < ($15_1 | 0) ? $15_1 : $8_1;
                 break label$117;
                }
                $18_1 = $17($18_1, $11_1 + 364 | 0);
                $18_1 = $18_1 + $18_1;
                if ($18_1 != 0.0) {
                 HEAP32[$11_1 + 364 >> 2] = HEAP32[$11_1 + 364 >> 2] - 1
                }
                $25_1 = $10_1 | 32;
                if (($25_1 | 0) == 97) {
                 $6_1 = $20_1 + 9 | 0;
                 $5_1 = $20_1;
                 $20_1 = $10_1 & 32;
                 $13_1 = $20_1 ? $6_1 : $5_1;
                 label$134 : {
                  if (($9_1 | 0) == 12 | $9_1 >>> 0 > 11) {
                   break label$134
                  }
                  $5_1 = $9_1 - 12 | 0;
                  $24_1 = 16.0;
                  while (1) {
                   $24_1 = $24_1 * 16.0;
                   $6_1 = $5_1;
                   $5_1 = $5_1 + 1 | 0;
                   if ($5_1 >>> 0 >= $6_1 >>> 0) {
                    continue
                   }
                   break;
                  };
                  if (HEAPU8[$13_1 | 0] == 45) {
                   $18_1 = -($24_1 + (-$18_1 - $24_1));
                   break label$134;
                  }
                  $18_1 = $18_1 + $24_1 - $24_1;
                 }
                 $7_1 = $27_1;
                 $12_1 = HEAP32[$11_1 + 364 >> 2];
                 $5_1 = $12_1 >> 31;
                 $5_1 = $5_1 ^ $5_1 + $12_1;
                 label$137 : {
                  if ($5_1) {
                   $6_1 = 0;
                   while (1) {
                    $8_1 = ($5_1 >>> 0) / 10 | 0;
                    HEAP8[($6_1 + $11_1 | 0) + 335 | 0] = $5_1 - Math_imul($8_1, 10) | 48;
                    $6_1 = $6_1 - 1 | 0;
                    $7_1 = $5_1 >>> 0 > 9;
                    $5_1 = $8_1;
                    if ($7_1) {
                     continue
                    }
                    break;
                   };
                   $7_1 = ($6_1 + $11_1 | 0) + 336 | 0;
                   if ($6_1) {
                    break label$137
                   }
                  }
                  $7_1 = $7_1 - 1 | 0;
                  HEAP8[$7_1 | 0] = 48;
                 }
                 $14_1 = $22_1 | 2;
                 $19_1 = $7_1 - 2 | 0;
                 HEAP8[$19_1 | 0] = $10_1 + 15;
                 HEAP8[$7_1 - 1 | 0] = ($12_1 | 0) < 0 ? 45 : 43;
                 $7_1 = $16_1 & 8;
                 $6_1 = $11_1 + 336 | 0;
                 while (1) {
                  $5_1 = $6_1;
                  $6_1 = $5_1;
                  $10_1 = $20_1;
                  if (Math_abs($18_1) < 2147483648.0) {
                   $8_1 = ~~$18_1
                  } else {
                   $8_1 = -2147483648
                  }
                  HEAP8[$6_1 | 0] = $10_1 | HEAPU8[$8_1 + 3328 | 0];
                  $6_1 = $5_1 + 1 | 0;
                  $18_1 = ($18_1 - +($8_1 | 0)) * 16.0;
                  if (!(($6_1 - ($11_1 + 336 | 0) | 0) != 1 | ($18_1 == 0.0 ? !($7_1 | ($9_1 | 0) > 0) : 0))) {
                   HEAP8[$5_1 + 1 | 0] = 46;
                   $6_1 = $5_1 + 2 | 0;
                  }
                  if ($18_1 != 0.0) {
                   continue
                  }
                  break;
                 };
                 $5_1 = -1;
                 $20_1 = $27_1 - $19_1 | 0;
                 $8_1 = $20_1 + $14_1 | 0;
                 if ((2147483645 - $8_1 | 0) < ($9_1 | 0)) {
                  break label$117
                 }
                 $16_1 = $16_1 & 73728;
                 $12_1 = $6_1 - ($11_1 + 336 | 0) | 0;
                 $9_1 = $9_1 ? (($6_1 + $36_1 | 0) < ($9_1 | 0) ? $9_1 + 2 | 0 : $12_1) : $12_1;
                 $8_1 = $9_1 + $8_1 | 0;
                 label$144 : {
                  if ($16_1 | ($8_1 | 0) >= ($15_1 | 0)) {
                   break label$144
                  }
                  $10_1 = $15_1 - $8_1 | 0;
                  $5_1 = $10_1 >>> 0 < 256;
                  $2($11_1 - -64 | 0, 32, $5_1 ? $10_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $6_1 = $7_1 & 32;
                  label$145 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $10_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $15($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $17_1 = $7_1 & 32;
                     $5_1 = !$17_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($17_1) {
                     break label$144
                    }
                    $10_1 = $10_1 & 255;
                    break label$145;
                   }
                   if ($6_1) {
                    break label$144
                   }
                  }
                  $15($11_1 - -64 | 0, $10_1, $0_1);
                 }
                 if (!(HEAPU8[$0_1 | 0] & 32)) {
                  $15($13_1, $14_1, $0_1)
                 }
                 label$150 : {
                  if (($16_1 | 0) != 65536 | ($8_1 | 0) >= ($15_1 | 0)) {
                   break label$150
                  }
                  $14_1 = $15_1 - $8_1 | 0;
                  $5_1 = $14_1 >>> 0 < 256;
                  $2($11_1 - -64 | 0, 48, $5_1 ? $14_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $6_1 = $7_1 & 32;
                  label$151 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $14_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $15($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $10_1 = $7_1 & 32;
                     $5_1 = !$10_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($10_1) {
                     break label$150
                    }
                    $14_1 = $14_1 & 255;
                    break label$151;
                   }
                   if ($6_1) {
                    break label$150
                   }
                  }
                  $15($11_1 - -64 | 0, $14_1, $0_1);
                 }
                 if (!(HEAPU8[$0_1 | 0] & 32)) {
                  $15($11_1 + 336 | 0, $12_1, $0_1)
                 }
                 $9_1 = $9_1 - $12_1 | 0;
                 label$156 : {
                  if (($9_1 | 0) < 1) {
                   break label$156
                  }
                  $6_1 = $9_1 >>> 0 < 256;
                  $2($11_1 - -64 | 0, 48, $6_1 ? $9_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $5_1 = $7_1 & 32;
                  label$157 : {
                   if (!$6_1) {
                    $5_1 = !$5_1;
                    $6_1 = $9_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $15($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $10_1 = $7_1 & 32;
                     $5_1 = !$10_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($10_1) {
                     break label$156
                    }
                    $9_1 = $9_1 & 255;
                    break label$157;
                   }
                   if ($5_1) {
                    break label$156
                   }
                  }
                  $15($11_1 - -64 | 0, $9_1, $0_1);
                 }
                 if (!(HEAPU8[$0_1 | 0] & 32)) {
                  $15($19_1, $20_1, $0_1)
                 }
                 label$162 : {
                  if (($16_1 | 0) != 8192 | ($8_1 | 0) >= ($15_1 | 0)) {
                   break label$162
                  }
                  $9_1 = $15_1 - $8_1 | 0;
                  $5_1 = $9_1 >>> 0 < 256;
                  $2($11_1 - -64 | 0, 32, $5_1 ? $9_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $6_1 = $7_1 & 32;
                  label$163 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $9_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $15($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $10_1 = $7_1 & 32;
                     $5_1 = !$10_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($10_1) {
                     break label$162
                    }
                    $9_1 = $9_1 & 255;
                    break label$163;
                   }
                   if ($6_1) {
                    break label$162
                   }
                  }
                  $15($11_1 - -64 | 0, $9_1, $0_1);
                 }
                 $5_1 = ($8_1 | 0) < ($15_1 | 0) ? $15_1 : $8_1;
                 break label$117;
                }
                $5_1 = ($9_1 | 0) < 0;
                label$167 : {
                 if ($18_1 == 0.0) {
                  $8_1 = HEAP32[$11_1 + 364 >> 2];
                  break label$167;
                 }
                 $8_1 = HEAP32[$11_1 + 364 >> 2] - 28 | 0;
                 HEAP32[$11_1 + 364 >> 2] = $8_1;
                 $18_1 = $18_1 * 268435456.0;
                }
                $13_1 = $5_1 ? 6 : $9_1;
                $19_1 = ($8_1 | 0) < 0 ? $11_1 + 368 | 0 : $37_1;
                $7_1 = $19_1;
                while (1) {
                 $6_1 = $7_1;
                 if ($18_1 < 4294967296.0 & $18_1 >= 0.0) {
                  $5_1 = ~~$18_1 >>> 0
                 } else {
                  $5_1 = 0
                 }
                 HEAP32[$6_1 >> 2] = $5_1;
                 $7_1 = $7_1 + 4 | 0;
                 $18_1 = ($18_1 - +($5_1 >>> 0)) * 1.0e9;
                 if ($18_1 != 0.0) {
                  continue
                 }
                 break;
                };
                label$172 : {
                 if (($8_1 | 0) < 1) {
                  $5_1 = $7_1;
                  $6_1 = $19_1;
                  break label$172;
                 }
                 $6_1 = $19_1;
                 while (1) {
                  $9_1 = ($8_1 | 0) < 29 ? $8_1 : 29;
                  $5_1 = $7_1 - 4 | 0;
                  label$175 : {
                   if ($6_1 >>> 0 > $5_1 >>> 0) {
                    break label$175
                   }
                   $8_1 = $9_1;
                   $12_1 = 0;
                   while (1) {
                    $32_1 = $12_1;
                    $14_1 = $5_1;
                    $12_1 = HEAP32[$5_1 >> 2];
                    $5_1 = $8_1 & 31;
                    if (($8_1 & 63) >>> 0 >= 32) {
                     $17_1 = $12_1 << $5_1;
                     $23_1 = 0;
                    } else {
                     $17_1 = (1 << $5_1) - 1 & $12_1 >>> 32 - $5_1;
                     $23_1 = $12_1 << $5_1;
                    }
                    $12_1 = $32_1 + $23_1 | 0;
                    $5_1 = $17_1;
                    $17_1 = $12_1;
                    $12_1 = __wasm_i64_udiv($12_1, $12_1 >>> 0 < $23_1 >>> 0 ? $5_1 + 1 | 0 : $5_1, 1e9);
                    (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $17_1 - __wasm_i64_mul($12_1, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                    $5_1 = $14_1 - 4 | 0;
                    if ($6_1 >>> 0 <= $5_1 >>> 0) {
                     continue
                    }
                    break;
                   };
                   if (!$12_1) {
                    break label$175
                   }
                   $6_1 = $6_1 - 4 | 0;
                   HEAP32[$6_1 >> 2] = $12_1;
                  }
                  while (1) {
                   $5_1 = $7_1;
                   if ($6_1 >>> 0 < $5_1 >>> 0) {
                    $7_1 = $5_1 - 4 | 0;
                    if (!HEAP32[$7_1 >> 2]) {
                     continue
                    }
                   }
                   break;
                  };
                  $8_1 = HEAP32[$11_1 + 364 >> 2] - $9_1 | 0;
                  HEAP32[$11_1 + 364 >> 2] = $8_1;
                  $7_1 = $5_1;
                  if (($8_1 | 0) > 0) {
                   continue
                  }
                  break;
                 };
                }
                if (($8_1 | 0) <= -1) {
                 $12_1 = (($13_1 + 25 >>> 0) / 9 | 0) + 1 | 0;
                 while (1) {
                  $9_1 = ($8_1 | 0) < -9 ? 9 : 0 - $8_1 | 0;
                  label$181 : {
                   if ($5_1 >>> 0 <= $6_1 >>> 0) {
                    $6_1 = HEAP32[$6_1 >> 2] ? $6_1 : $6_1 + 4 | 0;
                    break label$181;
                   }
                   $14_1 = 1e9 >>> $9_1 | 0;
                   $17_1 = -1 << $9_1 ^ -1;
                   $8_1 = 0;
                   $7_1 = $6_1;
                   while (1) {
                    $23_1 = $8_1;
                    $8_1 = HEAP32[$7_1 >> 2];
                    HEAP32[$7_1 >> 2] = $23_1 + ($8_1 >>> $9_1 | 0);
                    $8_1 = Math_imul($14_1, $8_1 & $17_1);
                    $7_1 = $7_1 + 4 | 0;
                    if ($7_1 >>> 0 < $5_1 >>> 0) {
                     continue
                    }
                    break;
                   };
                   $6_1 = HEAP32[$6_1 >> 2] ? $6_1 : $6_1 + 4 | 0;
                   if (!$8_1) {
                    break label$181
                   }
                   HEAP32[$5_1 >> 2] = $8_1;
                   $5_1 = $5_1 + 4 | 0;
                  }
                  $8_1 = $9_1 + HEAP32[$11_1 + 364 >> 2] | 0;
                  HEAP32[$11_1 + 364 >> 2] = $8_1;
                  $7_1 = ($25_1 | 0) == 102 ? $19_1 : $6_1;
                  $5_1 = ($12_1 | 0) < $5_1 - $7_1 >> 2 ? $7_1 + ($12_1 << 2) | 0 : $5_1;
                  if (($8_1 | 0) < 0) {
                   continue
                  }
                  break;
                 };
                }
                $7_1 = 0;
                label$184 : {
                 if ($5_1 >>> 0 <= $6_1 >>> 0) {
                  break label$184
                 }
                 $7_1 = Math_imul($19_1 - $6_1 >> 2, 9);
                 $9_1 = HEAP32[$6_1 >> 2];
                 if ($9_1 >>> 0 < 10) {
                  break label$184
                 }
                 $8_1 = 10;
                 while (1) {
                  $7_1 = $7_1 + 1 | 0;
                  $8_1 = Math_imul($8_1, 10);
                  if ($9_1 >>> 0 >= $8_1 >>> 0) {
                   continue
                  }
                  break;
                 };
                }
                $12_1 = ($25_1 | 0) == 102 ? 0 : $7_1;
                $25_1 = ($25_1 | 0) == 103;
                $14_1 = $25_1 & ($13_1 | 0) != 0;
                $8_1 = ($13_1 - $12_1 | 0) - $14_1 | 0;
                if (($8_1 | 0) < (Math_imul($5_1 - $19_1 >> 2, 9) - 9 | 0)) {
                 $17_1 = $8_1 + 9216 | 0;
                 $23_1 = ($17_1 | 0) / 9 | 0;
                 $31_1 = $19_1 + ($23_1 << 2) | 0;
                 $9_1 = $31_1 - 4092 | 0;
                 $8_1 = 10;
                 $32_1 = $17_1;
                 $17_1 = Math_imul($23_1, 9);
                 if (($32_1 - $17_1 | 0) <= 7) {
                  $12_1 = ((($13_1 - $14_1 | 0) - $12_1 | 0) - $17_1 | 0) + 9215 | 0;
                  while (1) {
                   $8_1 = Math_imul($8_1, 10);
                   $12_1 = $12_1 + 1 | 0;
                   if (($12_1 | 0) < 7) {
                    continue
                   }
                   break;
                  };
                 }
                 $14_1 = HEAP32[$9_1 >> 2];
                 $17_1 = ($14_1 >>> 0) / ($8_1 >>> 0) | 0;
                 $23_1 = $9_1 + 4 | 0;
                 $12_1 = $14_1 - Math_imul($8_1, $17_1) | 0;
                 label$189 : {
                  if ($12_1 ? 0 : ($23_1 | 0) == ($5_1 | 0)) {
                   break label$189
                  }
                  label$190 : {
                   if (!($17_1 & 1)) {
                    $18_1 = 9007199254740992.0;
                    if (!(HEAP8[$9_1 - 4 | 0] & 1) | (($8_1 | 0) != 1e9 | $6_1 >>> 0 >= $9_1 >>> 0)) {
                     break label$190
                    }
                   }
                   $18_1 = 9007199254740994.0;
                  }
                  $17_1 = $8_1 >>> 1 | 0;
                  $24_1 = $12_1 >>> 0 < $17_1 >>> 0 ? .5 : ($5_1 | 0) == ($23_1 | 0) ? (($17_1 | 0) == ($12_1 | 0) ? 1.0 : 1.5) : 1.5;
                  if (!(!$22_1 | HEAPU8[$20_1 | 0] != 45)) {
                   $24_1 = -$24_1;
                   $18_1 = -$18_1;
                  }
                  $12_1 = $14_1 - $12_1 | 0;
                  HEAP32[$9_1 >> 2] = $12_1;
                  if ($18_1 + $24_1 == $18_1) {
                   break label$189
                  }
                  $8_1 = $8_1 + $12_1 | 0;
                  HEAP32[$9_1 >> 2] = $8_1;
                  if ($8_1 >>> 0 >= 1e9) {
                   $7_1 = $31_1 - 4096 | 0;
                   while (1) {
                    HEAP32[$7_1 + 4 >> 2] = 0;
                    if ($6_1 >>> 0 > $7_1 >>> 0) {
                     $6_1 = $6_1 - 4 | 0;
                     HEAP32[$6_1 >> 2] = 0;
                    }
                    $8_1 = HEAP32[$7_1 >> 2] + 1 | 0;
                    HEAP32[$7_1 >> 2] = $8_1;
                    $7_1 = $7_1 - 4 | 0;
                    if ($8_1 >>> 0 > 999999999) {
                     continue
                    }
                    break;
                   };
                   $9_1 = $7_1 + 4 | 0;
                  }
                  $7_1 = Math_imul($19_1 - $6_1 >> 2, 9);
                  $12_1 = HEAP32[$6_1 >> 2];
                  if ($12_1 >>> 0 < 10) {
                   break label$189
                  }
                  $8_1 = 10;
                  while (1) {
                   $7_1 = $7_1 + 1 | 0;
                   $8_1 = Math_imul($8_1, 10);
                   if ($12_1 >>> 0 >= $8_1 >>> 0) {
                    continue
                   }
                   break;
                  };
                 }
                 $8_1 = $9_1 + 4 | 0;
                 $5_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $8_1 : $5_1;
                }
                label$197 : {
                 while (1) {
                  $12_1 = $5_1;
                  $9_1 = 0;
                  if ($6_1 >>> 0 >= $5_1 >>> 0) {
                   break label$197
                  }
                  $5_1 = $12_1 - 4 | 0;
                  if (!HEAP32[$5_1 >> 2]) {
                   continue
                  }
                  break;
                 };
                 $9_1 = 1;
                }
                label$199 : {
                 if (!$25_1) {
                  $14_1 = $16_1 & 8;
                  break label$199;
                 }
                 $5_1 = $13_1 ? $13_1 : 1;
                 $8_1 = ($5_1 | 0) > ($7_1 | 0) & ($7_1 | 0) > -5;
                 $13_1 = ($8_1 ? $7_1 ^ -1 : -1) + $5_1 | 0;
                 $10_1 = ($8_1 ? -1 : -2) + $10_1 | 0;
                 $14_1 = $16_1 & 8;
                 if ($14_1) {
                  break label$199
                 }
                 $5_1 = 9;
                 label$201 : {
                  if (!$9_1) {
                   break label$201
                  }
                  $14_1 = HEAP32[$12_1 - 4 >> 2];
                  if (!$14_1) {
                   break label$201
                  }
                  $5_1 = 0;
                  if (($14_1 >>> 0) % 10 | 0) {
                   break label$201
                  }
                  $8_1 = 10;
                  while (1) {
                   $5_1 = $5_1 + 1 | 0;
                   $8_1 = Math_imul($8_1, 10);
                   if (!(($14_1 >>> 0) % ($8_1 >>> 0) | 0)) {
                    continue
                   }
                   break;
                  };
                 }
                 $8_1 = Math_imul($12_1 - $19_1 >> 2, 9) - 9 | 0;
                 if (($10_1 | 32) == 102) {
                  $14_1 = 0;
                  $5_1 = $8_1 - $5_1 | 0;
                  $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
                  $13_1 = ($5_1 | 0) > ($13_1 | 0) ? $13_1 : $5_1;
                  break label$199;
                 }
                 $14_1 = 0;
                 $5_1 = ($7_1 + $8_1 | 0) - $5_1 | 0;
                 $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
                 $13_1 = ($5_1 | 0) > ($13_1 | 0) ? $13_1 : $5_1;
                }
                $5_1 = -1;
                $23_1 = $13_1 | $14_1;
                if ((($23_1 ? 2147483645 : 2147483646) | 0) < ($13_1 | 0)) {
                 break label$117
                }
                $25_1 = ((($23_1 | 0) != 0) + $13_1 | 0) + 1 | 0;
                $31_1 = ($10_1 | 32) != 102;
                label$204 : {
                 if (!$31_1) {
                  if ((2147483647 - $25_1 | 0) < ($7_1 | 0)) {
                   break label$117
                  }
                  $7_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
                  break label$204;
                 }
                 $8_1 = $27_1;
                 $5_1 = $7_1 >> 31;
                 $5_1 = $5_1 + $7_1 ^ $5_1;
                 if ($5_1) {
                  while (1) {
                   $8_1 = $8_1 - 1 | 0;
                   $17_1 = ($5_1 >>> 0) / 10 | 0;
                   HEAP8[$8_1 | 0] = $5_1 - Math_imul($17_1, 10) | 48;
                   $29_1 = $5_1 >>> 0 > 9;
                   $5_1 = $17_1;
                   if ($29_1) {
                    continue
                   }
                   break;
                  }
                 }
                 if (($27_1 - $8_1 | 0) <= 1) {
                  $5_1 = $8_1 - 1 | 0;
                  while (1) {
                   HEAP8[$5_1 | 0] = 48;
                   $8_1 = $27_1 - $5_1 | 0;
                   $17_1 = $5_1 - 1 | 0;
                   $5_1 = $17_1;
                   if (($8_1 | 0) < 2) {
                    continue
                   }
                   break;
                  };
                  $8_1 = $17_1 + 1 | 0;
                 }
                 $29_1 = $8_1 - 2 | 0;
                 HEAP8[$29_1 | 0] = $10_1;
                 $5_1 = -1;
                 HEAP8[$8_1 - 1 | 0] = ($7_1 | 0) < 0 ? 45 : 43;
                 $7_1 = $27_1 - $29_1 | 0;
                 if (($7_1 | 0) > (2147483647 - $25_1 | 0)) {
                  break label$117
                 }
                }
                $8_1 = $7_1 + $25_1 | 0;
                if (($8_1 | 0) > ($22_1 ^ 2147483647)) {
                 break label$117
                }
                $16_1 = $16_1 & 73728;
                $17_1 = $8_1 + $22_1 | 0;
                label$210 : {
                 if ($16_1 | ($17_1 | 0) >= ($15_1 | 0)) {
                  break label$210
                 }
                 $10_1 = $15_1 - $17_1 | 0;
                 $5_1 = $10_1 >>> 0 < 256;
                 $2($11_1 - -64 | 0, 32, $5_1 ? $10_1 : 256);
                 $8_1 = HEAP32[$0_1 >> 2];
                 $7_1 = $8_1 & 32;
                 label$211 : {
                  if (!$5_1) {
                   $5_1 = !$7_1;
                   $7_1 = $10_1;
                   while (1) {
                    if ($5_1 & 1) {
                     $15($11_1 - -64 | 0, 256, $0_1);
                     $8_1 = HEAP32[$0_1 >> 2];
                    }
                    $25_1 = $8_1 & 32;
                    $5_1 = !$25_1;
                    $7_1 = $7_1 - 256 | 0;
                    if ($7_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($25_1) {
                    break label$210
                   }
                   $10_1 = $10_1 & 255;
                   break label$211;
                  }
                  if ($7_1) {
                   break label$210
                  }
                 }
                 $15($11_1 - -64 | 0, $10_1, $0_1);
                }
                if (!(HEAPU8[$0_1 | 0] & 32)) {
                 $15($20_1, $22_1, $0_1)
                }
                label$216 : {
                 if (($16_1 | 0) != 65536 | ($15_1 | 0) <= ($17_1 | 0)) {
                  break label$216
                 }
                 $10_1 = $15_1 - $17_1 | 0;
                 $5_1 = $10_1 >>> 0 < 256;
                 $2($11_1 - -64 | 0, 48, $5_1 ? $10_1 : 256);
                 $8_1 = HEAP32[$0_1 >> 2];
                 $7_1 = $8_1 & 32;
                 label$217 : {
                  if (!$5_1) {
                   $5_1 = !$7_1;
                   $7_1 = $10_1;
                   while (1) {
                    if ($5_1 & 1) {
                     $15($11_1 - -64 | 0, 256, $0_1);
                     $8_1 = HEAP32[$0_1 >> 2];
                    }
                    $20_1 = $8_1 & 32;
                    $5_1 = !$20_1;
                    $7_1 = $7_1 - 256 | 0;
                    if ($7_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($20_1) {
                    break label$216
                   }
                   $10_1 = $10_1 & 255;
                   break label$217;
                  }
                  if ($7_1) {
                   break label$216
                  }
                 }
                 $15($11_1 - -64 | 0, $10_1, $0_1);
                }
                label$221 : {
                 if (!$31_1) {
                  $7_1 = $6_1 >>> 0 > $19_1 >>> 0 ? $19_1 : $6_1;
                  $9_1 = $7_1;
                  while (1) {
                   $5_1 = HEAP32[$9_1 >> 2];
                   label$224 : {
                    if (!$5_1) {
                     $6_1 = 0;
                     break label$224;
                    }
                    $6_1 = 0;
                    while (1) {
                     $8_1 = ($5_1 >>> 0) / 10 | 0;
                     HEAP8[$6_1 + $34_1 | 0] = $5_1 - Math_imul($8_1, 10) | 48;
                     $6_1 = $6_1 - 1 | 0;
                     $10_1 = $5_1 >>> 0 > 9;
                     $5_1 = $8_1;
                     if ($10_1) {
                      continue
                     }
                     break;
                    };
                   }
                   $5_1 = $6_1 + $30_1 | 0;
                   label$227 : {
                    if (($7_1 | 0) != ($9_1 | 0)) {
                     if ($11_1 + 336 >>> 0 >= $5_1 >>> 0) {
                      break label$227
                     }
                     $2($11_1 + 336 | 0, 48, $6_1 + 9 | 0);
                     $5_1 = $11_1 + 336 | 0;
                     break label$227;
                    }
                    if ($6_1) {
                     break label$227
                    }
                    $5_1 = $5_1 - 1 | 0;
                    HEAP8[$5_1 | 0] = 48;
                   }
                   if (!(HEAPU8[$0_1 | 0] & 32)) {
                    $15($5_1, $30_1 - $5_1 | 0, $0_1)
                   }
                   $9_1 = $9_1 + 4 | 0;
                   if ($19_1 >>> 0 >= $9_1 >>> 0) {
                    continue
                   }
                   break;
                  };
                  if (!(!$23_1 | HEAPU8[$0_1 | 0] & 32)) {
                   $15(3379, 1, $0_1)
                  }
                  label$231 : {
                   if (($13_1 | 0) < 1) {
                    $5_1 = $13_1;
                    break label$231;
                   }
                   if ($9_1 >>> 0 >= $12_1 >>> 0) {
                    $5_1 = $13_1;
                    break label$231;
                   }
                   while (1) {
                    $5_1 = $30_1;
                    $6_1 = HEAP32[$9_1 >> 2];
                    label$235 : {
                     if ($6_1) {
                      while (1) {
                       $5_1 = $5_1 - 1 | 0;
                       $8_1 = ($6_1 >>> 0) / 10 | 0;
                       HEAP8[$5_1 | 0] = $6_1 - Math_imul($8_1, 10) | 48;
                       $7_1 = $6_1 >>> 0 > 9;
                       $6_1 = $8_1;
                       if ($7_1) {
                        continue
                       }
                       break;
                      };
                      if ($11_1 + 336 >>> 0 >= $5_1 >>> 0) {
                       break label$235
                      }
                     }
                     $2($11_1 + 336 | 0, 48, $5_1 + $33_1 | 0);
                     while (1) {
                      $5_1 = $5_1 - 1 | 0;
                      if ($5_1 >>> 0 > $11_1 + 336 >>> 0) {
                       continue
                      }
                      break;
                     };
                    }
                    if (!(HEAPU8[$0_1 | 0] & 32)) {
                     $15($5_1, ($13_1 | 0) < 9 ? $13_1 : 9, $0_1)
                    }
                    $5_1 = $13_1 - 9 | 0;
                    if (($13_1 | 0) < 10) {
                     break label$231
                    }
                    $13_1 = $5_1;
                    $9_1 = $9_1 + 4 | 0;
                    if ($12_1 >>> 0 > $9_1 >>> 0) {
                     continue
                    }
                    break;
                   };
                  }
                  if (($5_1 | 0) < 1) {
                   break label$221
                  }
                  $7_1 = $5_1 >>> 0 < 256;
                  $2($11_1 - -64 | 0, 48, $7_1 ? $5_1 : 256);
                  $8_1 = HEAP32[$0_1 >> 2];
                  $6_1 = $8_1 & 32;
                  label$240 : {
                   if (!$7_1) {
                    $6_1 = !$6_1;
                    $7_1 = $5_1;
                    while (1) {
                     if ($6_1 & 1) {
                      $15($11_1 - -64 | 0, 256, $0_1);
                      $8_1 = HEAP32[$0_1 >> 2];
                     }
                     $10_1 = $8_1 & 32;
                     $6_1 = !$10_1;
                     $7_1 = $7_1 - 256 | 0;
                     if ($7_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($10_1) {
                     break label$221
                    }
                    $5_1 = $5_1 & 255;
                    break label$240;
                   }
                   if ($6_1) {
                    break label$221
                   }
                  }
                  $15($11_1 - -64 | 0, $5_1, $0_1);
                  break label$221;
                 }
                 label$244 : {
                  if (($13_1 | 0) < 0) {
                   break label$244
                  }
                  $10_1 = $9_1 ? $12_1 : $6_1 + 4 | 0;
                  $9_1 = $6_1;
                  while (1) {
                   $8_1 = $30_1;
                   $5_1 = HEAP32[$9_1 >> 2];
                   label$246 : {
                    if ($5_1) {
                     $7_1 = 0;
                     while (1) {
                      $8_1 = ($5_1 >>> 0) / 10 | 0;
                      HEAP8[($7_1 + $11_1 | 0) + 344 | 0] = $5_1 - Math_imul($8_1, 10) | 48;
                      $7_1 = $7_1 - 1 | 0;
                      $12_1 = $5_1 >>> 0 > 9;
                      $5_1 = $8_1;
                      if ($12_1) {
                       continue
                      }
                      break;
                     };
                     $8_1 = ($7_1 + $11_1 | 0) + 345 | 0;
                     if ($7_1) {
                      break label$246
                     }
                    }
                    $8_1 = $8_1 - 1 | 0;
                    HEAP8[$8_1 | 0] = 48;
                   }
                   label$249 : {
                    if (($6_1 | 0) != ($9_1 | 0)) {
                     if ($11_1 + 336 >>> 0 >= $8_1 >>> 0) {
                      break label$249
                     }
                     $2($11_1 + 336 | 0, 48, $8_1 + $33_1 | 0);
                     while (1) {
                      $8_1 = $8_1 - 1 | 0;
                      if ($8_1 >>> 0 > $11_1 + 336 >>> 0) {
                       continue
                      }
                      break;
                     };
                     break label$249;
                    }
                    if (!(HEAPU8[$0_1 | 0] & 32)) {
                     $15($8_1, 1, $0_1)
                    }
                    $8_1 = $8_1 + 1 | 0;
                    if (HEAPU8[$0_1 | 0] & 32 | (($13_1 | 0) < 1 ? !$14_1 : 0)) {
                     break label$249
                    }
                    $15(3379, 1, $0_1);
                   }
                   $5_1 = $30_1 - $8_1 | 0;
                   if (!(HEAPU8[$0_1 | 0] & 32)) {
                    $15($8_1, ($5_1 | 0) < ($13_1 | 0) ? $5_1 : $13_1, $0_1)
                   }
                   $9_1 = $9_1 + 4 | 0;
                   $13_1 = $13_1 - $5_1 | 0;
                   if (($13_1 | 0) > -1 ? $10_1 >>> 0 > $9_1 >>> 0 : 0) {
                    continue
                   }
                   break;
                  };
                  if (($13_1 | 0) < 1) {
                   break label$244
                  }
                  $6_1 = $13_1 >>> 0 < 256;
                  $2($11_1 - -64 | 0, 48, $6_1 ? $13_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $5_1 = $7_1 & 32;
                  label$254 : {
                   if (!$6_1) {
                    $5_1 = !$5_1;
                    $6_1 = $13_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $15($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $8_1 = $7_1 & 32;
                     $5_1 = !$8_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8_1) {
                     break label$244
                    }
                    $13_1 = $13_1 & 255;
                    break label$254;
                   }
                   if ($5_1) {
                    break label$244
                   }
                  }
                  $15($11_1 - -64 | 0, $13_1, $0_1);
                 }
                 if (HEAPU8[$0_1 | 0] & 32) {
                  break label$221
                 }
                 $15($29_1, $27_1 - $29_1 | 0, $0_1);
                }
                label$258 : {
                 if (($16_1 | 0) != 8192 | ($15_1 | 0) <= ($17_1 | 0)) {
                  break label$258
                 }
                 $12_1 = $15_1 - $17_1 | 0;
                 $5_1 = $12_1 >>> 0 < 256;
                 $2($11_1 - -64 | 0, 32, $5_1 ? $12_1 : 256);
                 $7_1 = HEAP32[$0_1 >> 2];
                 $6_1 = $7_1 & 32;
                 label$259 : {
                  if (!$5_1) {
                   $5_1 = !$6_1;
                   $6_1 = $12_1;
                   while (1) {
                    if ($5_1 & 1) {
                     $15($11_1 - -64 | 0, 256, $0_1);
                     $7_1 = HEAP32[$0_1 >> 2];
                    }
                    $8_1 = $7_1 & 32;
                    $5_1 = !$8_1;
                    $6_1 = $6_1 - 256 | 0;
                    if ($6_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($8_1) {
                    break label$258
                   }
                   $12_1 = $12_1 & 255;
                   break label$259;
                  }
                  if ($6_1) {
                   break label$258
                  }
                 }
                 $15($11_1 - -64 | 0, $12_1, $0_1);
                }
                $5_1 = ($15_1 | 0) > ($17_1 | 0) ? $15_1 : $17_1;
               }
               if (($5_1 | 0) >= 0) {
                continue label$3
               }
               break label$4;
              }
              $13_1 = 0;
              $14_1 = 2694;
             }
             $5_1 = $26_1;
             break label$5;
            }
            $16_1 = $7_1;
            $9_1 = $6_1;
            if (!HEAPU8[$5_1 | 0]) {
             break label$5
            }
            break label$4;
           }
           $5_1 = HEAPU8[$1_1 + 1 | 0];
           $1_1 = $1_1 + 1 | 0;
           continue;
          }
         }
         if ($0_1) {
          break label$1
         }
         if (!$28_1) {
          $21_1 = 0;
          break label$1;
         }
         $1_1 = HEAP32[$4_1 + 4 >> 2];
         $0_1 = 1;
         label$264 : {
          if (!$1_1) {
           break label$264
          }
          $20($3_1 + 8 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 8 >> 2];
          $0_1 = 2;
          if (!$1_1) {
           break label$264
          }
          $20($3_1 + 16 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 12 >> 2];
          $0_1 = 3;
          if (!$1_1) {
           break label$264
          }
          $20($3_1 + 24 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 16 >> 2];
          $0_1 = 4;
          if (!$1_1) {
           break label$264
          }
          $20($3_1 + 32 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 20 >> 2];
          $0_1 = 5;
          if (!$1_1) {
           break label$264
          }
          $20($3_1 + 40 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 24 >> 2];
          $0_1 = 6;
          if (!$1_1) {
           break label$264
          }
          $20($3_1 + 48 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 28 >> 2];
          $0_1 = 7;
          if (!$1_1) {
           break label$264
          }
          $20($3_1 + 56 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 32 >> 2];
          $0_1 = 8;
          if (!$1_1) {
           break label$264
          }
          $20($3_1 - -64 | 0, $1_1, $2_1);
          $0_1 = HEAP32[$4_1 + 36 >> 2];
          if ($0_1) {
           break label$6
          }
          $0_1 = 9;
         }
         $5_1 = $0_1 - 1 | 0;
         $1_1 = ($0_1 << 2) + $4_1 | 0;
         while (1) {
          if (HEAP32[$1_1 >> 2]) {
           break label$7
          }
          $1_1 = $1_1 + 4 | 0;
          $21_1 = 1;
          $5_1 = $5_1 + 1 | 0;
          if ($5_1 >>> 0 <= 8) {
           continue
          }
          break;
         };
         break label$1;
        }
        HEAP32[5537] = 28;
        break label$2;
       }
       $20($3_1 + 72 | 0, $0_1, $2_1);
       $21_1 = 1;
       break label$1;
      }
      $20_1 = $5_1 - $8_1 | 0;
      $17_1 = ($9_1 | 0) < ($20_1 | 0) ? $20_1 : $9_1;
      if (($17_1 | 0) > (2147483647 - $13_1 | 0)) {
       break label$4
      }
      $19_1 = $13_1 + $17_1 | 0;
      $5_1 = ($15_1 | 0) < ($19_1 | 0) ? $19_1 : $15_1;
      if (($22_1 | 0) < ($5_1 | 0)) {
       break label$4
      }
      $16_1 = $16_1 & 73728;
      label$266 : {
       if ($16_1 | ($15_1 | 0) <= ($19_1 | 0)) {
        break label$266
       }
       $10_1 = $5_1 - $19_1 | 0;
       $6_1 = $10_1 >>> 0 < 256;
       $2($11_1 - -64 | 0, 32, $6_1 ? $10_1 : 256);
       $12_1 = HEAP32[$0_1 >> 2];
       $7_1 = $12_1 & 32;
       label$267 : {
        if (!$6_1) {
         $6_1 = !$7_1;
         $7_1 = $10_1;
         while (1) {
          if ($6_1 & 1) {
           $15($11_1 - -64 | 0, 256, $0_1);
           $12_1 = HEAP32[$0_1 >> 2];
          }
          $22_1 = $12_1 & 32;
          $6_1 = !$22_1;
          $7_1 = $7_1 - 256 | 0;
          if ($7_1 >>> 0 > 255) {
           continue
          }
          break;
         };
         if ($22_1) {
          break label$266
         }
         $10_1 = $10_1 & 255;
         break label$267;
        }
        if ($7_1) {
         break label$266
        }
       }
       $15($11_1 - -64 | 0, $10_1, $0_1);
      }
      if (!(HEAPU8[$0_1 | 0] & 32)) {
       $15($14_1, $13_1, $0_1)
      }
      label$272 : {
       if (($16_1 | 0) != 65536 | ($15_1 | 0) <= ($19_1 | 0)) {
        break label$272
       }
       $13_1 = $5_1 - $19_1 | 0;
       $6_1 = $13_1 >>> 0 < 256;
       $2($11_1 - -64 | 0, 48, $6_1 ? $13_1 : 256);
       $12_1 = HEAP32[$0_1 >> 2];
       $7_1 = $12_1 & 32;
       label$273 : {
        if (!$6_1) {
         $6_1 = !$7_1;
         $7_1 = $13_1;
         while (1) {
          if ($6_1 & 1) {
           $15($11_1 - -64 | 0, 256, $0_1);
           $12_1 = HEAP32[$0_1 >> 2];
          }
          $10_1 = $12_1 & 32;
          $6_1 = !$10_1;
          $7_1 = $7_1 - 256 | 0;
          if ($7_1 >>> 0 > 255) {
           continue
          }
          break;
         };
         if ($10_1) {
          break label$272
         }
         $13_1 = $13_1 & 255;
         break label$273;
        }
        if ($7_1) {
         break label$272
        }
       }
       $15($11_1 - -64 | 0, $13_1, $0_1);
      }
      label$277 : {
       if (($9_1 | 0) <= ($20_1 | 0)) {
        break label$277
       }
       $10_1 = $17_1 - $20_1 | 0;
       $6_1 = $10_1 >>> 0 < 256;
       $2($11_1 - -64 | 0, 48, $6_1 ? $10_1 : 256);
       $12_1 = HEAP32[$0_1 >> 2];
       $7_1 = $12_1 & 32;
       label$278 : {
        if (!$6_1) {
         $6_1 = !$7_1;
         $7_1 = $10_1;
         while (1) {
          if ($6_1 & 1) {
           $15($11_1 - -64 | 0, 256, $0_1);
           $12_1 = HEAP32[$0_1 >> 2];
          }
          $9_1 = $12_1 & 32;
          $6_1 = !$9_1;
          $7_1 = $7_1 - 256 | 0;
          if ($7_1 >>> 0 > 255) {
           continue
          }
          break;
         };
         if ($9_1) {
          break label$277
         }
         $10_1 = $10_1 & 255;
         break label$278;
        }
        if ($7_1) {
         break label$277
        }
       }
       $15($11_1 - -64 | 0, $10_1, $0_1);
      }
      if (!(HEAPU8[$0_1 | 0] & 32)) {
       $15($8_1, $20_1, $0_1)
      }
      if (($16_1 | 0) != 8192 | ($15_1 | 0) <= ($19_1 | 0)) {
       continue
      }
      $15_1 = $5_1 - $19_1 | 0;
      $6_1 = $15_1 >>> 0 < 256;
      $2($11_1 - -64 | 0, 32, $6_1 ? $15_1 : 256);
      $8_1 = HEAP32[$0_1 >> 2];
      $7_1 = $8_1 & 32;
      label$283 : {
       if (!$6_1) {
        $6_1 = !$7_1;
        $7_1 = $15_1;
        while (1) {
         if ($6_1 & 1) {
          $15($11_1 - -64 | 0, 256, $0_1);
          $8_1 = HEAP32[$0_1 >> 2];
         }
         $10_1 = $8_1 & 32;
         $6_1 = !$10_1;
         $7_1 = $7_1 - 256 | 0;
         if ($7_1 >>> 0 > 255) {
          continue
         }
         break;
        };
        if ($10_1) {
         continue
        }
        $15_1 = $15_1 & 255;
        break label$283;
       }
       if ($7_1) {
        continue
       }
      }
      $15($11_1 - -64 | 0, $15_1, $0_1);
      continue;
     }
     break;
    };
    HEAP32[5537] = 61;
   }
   $21_1 = -1;
  }
  global$0 = $11_1 + 880 | 0;
  return $21_1;
 }
 
 function $20($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $1_1 = $1_1 - 9 | 0;
     if ($1_1 >>> 0 <= 17) {
      label$5 : {
       switch ($1_1 - 1 | 0) {
       case 5:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        $1_1 = HEAP16[$1_1 >> 1];
        HEAP32[$0_1 >> 2] = $1_1;
        HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31;
        return;
       case 6:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0_1 >> 2] = HEAPU16[$1_1 >> 1];
        HEAP32[$0_1 + 4 >> 2] = 0;
        return;
       case 7:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        $1_1 = HEAP8[$1_1 | 0];
        HEAP32[$0_1 >> 2] = $1_1;
        HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31;
        return;
       case 8:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0_1 >> 2] = HEAPU8[$1_1 | 0];
        HEAP32[$0_1 + 4 >> 2] = 0;
        return;
       case 16:
        $0_1 = 3180;
        while (1) {
         $0_1 = $0_1 + 4 | 0;
         $2_1 = HEAP32[$0_1 >> 2];
         if (!(($2_1 ^ -1) & $2_1 - 16843009 & -2139062144)) {
          continue
         }
         break;
        };
        $1_1 = $0_1 - 3184 | 0;
        label$11 : {
         if (!($2_1 & 255)) {
          break label$11
         }
         while (1) {
          $2_1 = HEAPU8[$0_1 + 1 | 0];
          $1_1 = $0_1 + 1 | 0;
          $0_1 = $1_1;
          if ($2_1) {
           continue
          }
          break;
         };
         $1_1 = $1_1 - 3184 | 0;
        }
        $0_1 = $1_1;
        $2_1 = 0;
        $5_1 = 3184;
        $1_1 = HEAP32[5512];
        label$19 : {
         if (!$1_1) {
          $1_1 = 0;
          if ($14(22032)) {
           break label$19
          }
          $1_1 = HEAP32[5512];
         }
         $4_1 = HEAP32[5513];
         if ($1_1 - $4_1 >>> 0 < $0_1 >>> 0) {
          $1_1 = FUNCTION_TABLE[HEAP32[5516]](22032, 3184, $0_1) | 0;
          break label$19;
         }
         $3_1 = $0_1;
         label$23 : {
          if (HEAP32[5524] < 0) {
           break label$23
          }
          $6_1 = $0_1 + 3184 | 0;
          $1_1 = 0;
          while (1) {
           $3_1 = $0_1;
           if (!($0_1 + $1_1 | 0)) {
            break label$23
           }
           $7_1 = $1_1 + $6_1 | 0;
           $3_1 = $1_1 - 1 | 0;
           $1_1 = $3_1;
           if (HEAPU8[$7_1 - 1 | 0] != 10) {
            continue
           }
           break;
          };
          $2_1 = ($0_1 + $3_1 | 0) + 1 | 0;
          $1_1 = FUNCTION_TABLE[HEAP32[5516]](22032, 3184, $2_1) | 0;
          if ($1_1 >>> 0 < $2_1 >>> 0) {
           break label$19
          }
          $5_1 = ($3_1 + $6_1 | 0) + 1 | 0;
          $4_1 = HEAP32[5513];
          $3_1 = $3_1 ^ -1;
         }
         $3($4_1, $5_1, $3_1);
         HEAP32[5513] = $3_1 + HEAP32[5513];
         $1_1 = $2_1 + $3_1 | 0;
        }
        label$18 : {
         if (($0_1 | 0) == ($1_1 | 0)) {
          break label$18
         }
        }
        abort();
       case 2:
       case 9:
       case 11:
       case 12:
       case 15:
        break label$1;
       case 1:
       case 4:
       case 10:
       case 14:
        break label$2;
       case 0:
       case 3:
       case 13:
        break label$3;
       default:
        break label$5;
       };
      }
      $1_1 = HEAP32[$2_1 >> 2];
      HEAP32[$2_1 >> 2] = $1_1 + 4;
      HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     }
     return;
    }
    $1_1 = HEAP32[$2_1 >> 2];
    HEAP32[$2_1 >> 2] = $1_1 + 4;
    $1_1 = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 >> 2] = $1_1;
    HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31;
    return;
   }
   $1_1 = HEAP32[$2_1 >> 2];
   HEAP32[$2_1 >> 2] = $1_1 + 4;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = 0;
   return;
  }
  $1_1 = HEAP32[$2_1 >> 2] + 7 & -8;
  HEAP32[$2_1 >> 2] = $1_1 + 8;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $21($0_1) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  $18(HEAP32[256], HEAP32[$1_1 + 12 >> 2], HEAP32[$1_1 + 8 >> 2]);
  $1_1 = HEAP32[256];
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP32[$0_1 + 12 >> 2] = 0;
  $18($1_1, 3381, 0);
  global$0 = $0_1 + 16 | 0;
  abort();
 }
 
 function $22() {
  return $23(22028) | 0;
 }
 
 function $23($0_1) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  HEAP32[$1_1 + 8 >> 2] = 2;
  return HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
 }
 
 function $24() {
  var $0_1 = 0, $1_1 = 0;
  $1_1 = $23(22028);
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  FUNCTION_TABLE[HEAP32[$0_1 + 12 >> 2]]();
  $21(3383);
  abort();
 }
 
 function $25() {
  return $23(22024) | 0;
 }
 
 function $26() {
  var $0_1 = 0, $1_1 = 0;
  $1_1 = $23(22024);
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  FUNCTION_TABLE[HEAP32[$0_1 + 12 >> 2]]();
  $21(3424);
  abort();
 }
 
 function $27($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = $8(22684, HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $28() {
  return $23(22684) | 0;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  if (!HEAP32[$1_1 + 12 >> 2]) {
   HEAP32[$1_1 + 12 >> 2] = 1
  }
  while (1) {
   label$3 : {
    $0_1 = $4(HEAP32[$1_1 + 12 >> 2]);
    HEAP32[$1_1 + 8 >> 2] = $0_1;
    if ($0_1) {
     break label$3
    }
    (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $23(22684)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
    if (!HEAP32[$1_1 + 4 >> 2]) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[$1_1 + 4 >> 2]]();
    continue;
   }
   break;
  };
  global$0 = $1_1 + 16 | 0;
  return HEAP32[$1_1 + 8 >> 2];
 }
 
 function $30($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  HEAP32[$2_1 + 4 >> 2] = 0;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $29(HEAP32[$2_1 + 12 >> 2])), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  global$0 = $2_1 + 16 | 0;
  return HEAP32[$2_1 + 4 >> 2];
 }
 
 function $31($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = $29(HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $32($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  HEAP32[$2_1 + 4 >> 2] = 0;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $31(HEAP32[$2_1 + 12 >> 2])), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  global$0 = $2_1 + 16 | 0;
  return HEAP32[$2_1 + 4 >> 2];
 }
 
 function $33($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $5(HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $34($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  $33(HEAP32[$2_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $35($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $33(HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $36($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  $35(HEAP32[$2_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $37($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $0_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  if (!HEAP32[$4_1 + 12 >> 2]) {
   HEAP32[$4_1 + 12 >> 2] = 1
  }
  if (HEAPU32[$4_1 + 8 >> 2] < 4) {
   HEAP32[$4_1 + 8 >> 2] = 4
  }
  while (1) {
   label$4 : {
    $8_1 = $4_1 + 4 | 0;
    $2_1 = HEAP32[$4_1 + 12 >> 2];
    $0_1 = HEAP32[$4_1 + 8 >> 2];
    label$5 : {
     label$6 : {
      label$7 : {
       if (($0_1 | 0) == 16) {
        $0_1 = $4($2_1);
        break label$7;
       }
       $1_1 = $0_1 >>> 2 | 0;
       $3_1 = 0;
       while (1) {
        if ($1_1) {
         $1_1 = $1_1 - 1 & $1_1;
         $3_1 = $3_1 + 1 | 0;
         continue;
        }
        break;
       };
       $1_1 = 28;
       if ($0_1 & 3 | ($3_1 | 0) != 1) {
        break label$6
       }
       $1_1 = 48;
       if ($2_1 >>> 0 > -64 - $0_1 >>> 0) {
        break label$6
       }
       $0_1 = $0_1 >>> 0 > 16 ? $0_1 : 16;
       $3_1 = $0_1 >>> 0 > 16 ? $0_1 : 16;
       label$10 : {
        if (!($3_1 - 1 & $3_1)) {
         $0_1 = $3_1;
         break label$10;
        }
        $1_1 = 32;
        while (1) {
         $0_1 = $1_1;
         $1_1 = $0_1 << 1;
         if ($0_1 >>> 0 < $3_1 >>> 0) {
          continue
         }
         break;
        };
       }
       label$9 : {
        if ($2_1 >>> 0 >= -64 - $0_1 >>> 0) {
         HEAP32[5537] = 48;
         $1_1 = 0;
         break label$9;
        }
        $3_1 = $2_1 >>> 0 < 11 ? 16 : $2_1 + 19 & -16;
        $2_1 = $4(($3_1 | 12) + $0_1 | 0);
        $1_1 = 0;
        if (!$2_1) {
         break label$9
        }
        $1_1 = $2_1 - 8 | 0;
        label$14 : {
         if (!($2_1 & $0_1 - 1)) {
          $0_1 = $1_1;
          break label$14;
         }
         $6_1 = $2_1 - 4 | 0;
         $7_1 = HEAP32[$6_1 >> 2];
         $2_1 = (($0_1 + $2_1 | 0) - 1 & 0 - $0_1) - 8 | 0;
         $0_1 = $2_1 - $1_1 >>> 0 > 15 ? $2_1 : $0_1 + $2_1 | 0;
         $2_1 = $0_1 - $1_1 | 0;
         $5_1 = ($7_1 & -8) - $2_1 | 0;
         if (!($7_1 & 3)) {
          HEAP32[$0_1 + 4 >> 2] = $5_1;
          HEAP32[$0_1 >> 2] = $2_1 + HEAP32[$1_1 >> 2];
          break label$14;
         }
         HEAP32[$0_1 + 4 >> 2] = $5_1 | HEAP32[$0_1 + 4 >> 2] & 1 | 2;
         $5_1 = $0_1 + $5_1 | 0;
         HEAP32[$5_1 + 4 >> 2] = HEAP32[$5_1 + 4 >> 2] | 1;
         HEAP32[$6_1 >> 2] = $2_1 | HEAP32[$6_1 >> 2] & 1 | 2;
         HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] | 1;
         $6($1_1, $2_1);
        }
        $1_1 = HEAP32[$0_1 + 4 >> 2];
        label$17 : {
         if (!($1_1 & 3)) {
          break label$17
         }
         $2_1 = $1_1 & -8;
         if ($2_1 >>> 0 <= $3_1 + 16 >>> 0) {
          break label$17
         }
         HEAP32[$0_1 + 4 >> 2] = $3_1 | $1_1 & 1 | 2;
         $1_1 = $0_1 + $3_1 | 0;
         $3_1 = $2_1 - $3_1 | 0;
         HEAP32[$1_1 + 4 >> 2] = $3_1 | 3;
         $2_1 = $0_1 + $2_1 | 0;
         HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] | 1;
         $6($1_1, $3_1);
        }
        $1_1 = $0_1 + 8 | 0;
       }
       $0_1 = $1_1;
      }
      $1_1 = 48;
      if (!$0_1) {
       break label$5
      }
      HEAP32[$8_1 >> 2] = $0_1;
      $1_1 = 0;
     }
    }
    if (!$1_1) {
     break label$4
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $23(22684)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    label$18 : {
     if (HEAP32[$4_1 >> 2]) {
      FUNCTION_TABLE[HEAP32[$4_1 >> 2]]();
      break label$18;
     }
     HEAP32[$4_1 + 4 >> 2] = 0;
     break label$4;
    }
    continue;
   }
   break;
  };
  global$0 = $4_1 + 16 | 0;
  return HEAP32[$4_1 + 4 >> 2];
 }
 
 function $38($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $0_1;
  HEAP32[$3_1 + 8 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $37(HEAP32[$3_1 + 12 >> 2], HEAP32[$3_1 + 8 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $3_1 + 16 | 0;
  return HEAP32[$3_1 >> 2];
 }
 
 function $39($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  $0_1 = $37(HEAP32[$2_1 + 12 >> 2], HEAP32[$2_1 + 8 >> 2]);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $40($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $0_1;
  HEAP32[$3_1 + 8 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $39(HEAP32[$3_1 + 12 >> 2], HEAP32[$3_1 + 8 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $3_1 + 16 | 0;
  return HEAP32[$3_1 >> 2];
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  $5(HEAP32[$2_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $42($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $0_1;
  HEAP32[$3_1 + 8 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $41(HEAP32[$3_1 + 12 >> 2], HEAP32[$3_1 + 8 >> 2]);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $43($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $0_1;
  HEAP32[$3_1 + 8 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $41(HEAP32[$3_1 + 12 >> 2], HEAP32[$3_1 + 4 >> 2]);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $44($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  $41(HEAP32[$2_1 + 12 >> 2], HEAP32[$2_1 + 8 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $45($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $0_1;
  HEAP32[$3_1 + 8 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $44(HEAP32[$3_1 + 12 >> 2], HEAP32[$3_1 + 8 >> 2]);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $46($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $0_1;
  HEAP32[$3_1 + 8 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $44(HEAP32[$3_1 + 12 >> 2], HEAP32[$3_1 + 4 >> 2]);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $47($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  return HEAP32[$1_1 + 12 >> 2];
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $47($0_1);
  $33($0_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $49($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0_1;
  return 3465;
 }
 
 function $50($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $47($0_1);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $51($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $50($0_1);
  $33($0_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $52($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0_1;
  return 3480;
 }
 
 function $53($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $62($0_1);
  HEAP32[$0_1 >> 2] = 3508;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $55($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0_1;
  return 3520;
 }
 
 function $56($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $53($0_1);
  HEAP32[$0_1 >> 2] = 3544;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $57($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $50($0_1);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $57($0_1);
  $33($0_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $59($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0_1;
  return 3556;
 }
 
 function $61($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $62($0_1);
  HEAP32[$0_1 >> 2] = 3752;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $62($0_1) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2] = 3588;
 }
 
 function $64($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0_1;
  return 3764;
 }
 
 function $65($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $62($0_1);
  HEAP32[$0_1 >> 2] = 3788;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $67($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0_1;
  return 3800;
 }
 
 function $68($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAPU8[$0_1 | 0];
  $3_1 = HEAPU8[$1_1 | 0];
  label$1 : {
   if (!$2_1 | ($3_1 | 0) != ($2_1 | 0)) {
    break label$1
   }
   $0_1 = $0_1 + 1 | 0;
   $1_1 = $1_1 + 1 | 0;
   while (1) {
    $3_1 = HEAPU8[$1_1 | 0];
    $2_1 = HEAPU8[$0_1 | 0];
    if (!$2_1) {
     break label$1
    }
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($2_1 | 0) == ($3_1 | 0)) {
     continue
    }
    break;
   };
  }
  return $2_1 - $3_1 | 0;
 }
 
 function $69() {
  $21(3908);
  abort();
 }
 
 function $70() {
  $21(3938);
  abort();
 }
 
 function $71($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0_1;
  abort();
 }
 
 function $72($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0_1;
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $57($0_1);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $79($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $78($0_1);
  $33($0_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $84($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $0_1;
  HEAP32[$3_1 + 8 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $0_1 = $85(HEAP32[$3_1 + 12 >> 2], HEAP32[$3_1 + 8 >> 2], 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 & 1;
 }
 
 function $85($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 8 >> 2] = $0_1;
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  HEAP8[$3_1 + 3 | 0] = $2_1;
  label$1 : {
   if (!(HEAP8[$3_1 + 3 | 0] & 1)) {
    $1_1 = HEAP32[$3_1 + 4 >> 2];
    $0_1 = global$0 - 16 | 0;
    global$0 = $0_1;
    HEAP32[$0_1 + 4 >> 2] = HEAP32[$3_1 + 8 >> 2];
    HEAP32[$0_1 >> 2] = $1_1;
    $1_1 = HEAP32[HEAP32[$0_1 >> 2] + 4 >> 2];
    HEAP32[$0_1 + 12 >> 2] = HEAP32[HEAP32[$0_1 + 4 >> 2] + 4 >> 2];
    HEAP32[$0_1 + 8 >> 2] = $1_1;
    $1_1 = 1;
    if (HEAP32[$0_1 + 12 >> 2] != HEAP32[$0_1 + 8 >> 2]) {
     $1_1 = !$68(HEAP32[$0_1 + 12 >> 2], HEAP32[$0_1 + 8 >> 2])
    }
    global$0 = $0_1 + 16 | 0;
    HEAP8[$3_1 + 15 | 0] = $1_1 & 1;
    break label$1;
   }
   $0_1 = $3_1;
   if (HEAP32[$3_1 + 8 >> 2] != HEAP32[$3_1 + 4 >> 2]) {
    $1_1 = !$68($86(HEAP32[$3_1 + 8 >> 2]), $86(HEAP32[$3_1 + 4 >> 2]))
   } else {
    $1_1 = 1
   }
   HEAP8[$0_1 + 15 | 0] = $1_1;
  }
  global$0 = $3_1 + 16 | 0;
  return HEAP8[$3_1 + 15 | 0] & 1;
 }
 
 function $86($0_1) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAP32[$1_1 + 8 >> 2] = $0_1;
  HEAP32[$1_1 + 12 >> 2] = HEAP32[HEAP32[$1_1 + 8 >> 2] + 4 >> 2];
  return HEAP32[$1_1 + 12 >> 2];
 }
 
 function $87($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[$3_1 + 12 >> 2] = $0_1;
  HEAP32[$3_1 + 8 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  return 0;
 }
 
 function $88($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 72 >> 2] = $0_1;
  HEAP32[$3_1 + 68 >> 2] = $1_1;
  HEAP32[$3_1 + 64 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 72 >> 2];
  label$1 : {
   if ($85($1_1, HEAP32[$3_1 + 68 >> 2], 0) & 1) {
    HEAP8[$3_1 + 79 | 0] = 1;
    break label$1;
   }
   $2_1 = $3_1;
   $0_1 = HEAP32[$3_1 + 68 >> 2];
   label$3 : {
    if ($0_1) {
     $0_1 = $89($0_1, 4004, 4052, 0);
     break label$3;
    }
    $0_1 = 0;
   }
   HEAP32[$2_1 + 60 >> 2] = $0_1;
   if (!HEAP32[$3_1 + 60 >> 2]) {
    HEAP8[$3_1 + 79 | 0] = 0;
    break label$1;
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 + 60 >> 2];
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 8 >> 2] = $1_1;
   HEAP32[$3_1 + 12 >> 2] = -1;
   HEAP32[$3_1 + 16 >> 2] = 0;
   HEAP32[$3_1 + 20 >> 2] = 0;
   HEAP32[$3_1 + 24 >> 2] = 0;
   HEAP32[$3_1 + 28 >> 2] = 0;
   HEAP32[$3_1 + 32 >> 2] = 0;
   HEAP32[$3_1 + 36 >> 2] = 0;
   HEAP32[$3_1 + 40 >> 2] = 0;
   HEAP32[$3_1 + 44 >> 2] = 0;
   HEAP32[$3_1 + 48 >> 2] = 0;
   HEAP8[$3_1 + 52 | 0] = 0;
   HEAP8[$3_1 + 53 | 0] = 0;
   HEAP8[$3_1 + 54 | 0] = 0;
   HEAP32[$3_1 + 48 >> 2] = 1;
   $0_1 = HEAP32[$3_1 + 60 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $3_1, HEAP32[HEAP32[$3_1 + 64 >> 2] >> 2], 1);
   if (HEAP32[$3_1 + 24 >> 2] == 1) {
    HEAP32[HEAP32[$3_1 + 64 >> 2] >> 2] = HEAP32[$3_1 + 16 >> 2];
    HEAP8[$3_1 + 79 | 0] = 1;
    break label$1;
   }
   HEAP8[$3_1 + 79 | 0] = 0;
  }
  global$0 = $3_1 + 80 | 0;
  return HEAP8[$3_1 + 79 | 0] & 1;
 }
 
 function $89($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 92 >> 2] = $0_1;
  HEAP32[$4_1 + 88 >> 2] = $1_1;
  HEAP32[$4_1 + 84 >> 2] = $2_1;
  HEAP32[$4_1 + 80 >> 2] = $3_1;
  HEAP32[$4_1 + 76 >> 2] = HEAP32[HEAP32[$4_1 + 92 >> 2] >> 2];
  HEAP32[$4_1 + 72 >> 2] = HEAP32[HEAP32[$4_1 + 76 >> 2] - 8 >> 2];
  HEAP32[$4_1 + 68 >> 2] = HEAP32[$4_1 + 92 >> 2] + HEAP32[$4_1 + 72 >> 2];
  HEAP32[$4_1 + 64 >> 2] = HEAP32[HEAP32[$4_1 + 76 >> 2] - 4 >> 2];
  HEAP32[$4_1 + 60 >> 2] = 0;
  HEAP32[$4_1 >> 2] = HEAP32[$4_1 + 84 >> 2];
  HEAP32[$4_1 + 4 >> 2] = HEAP32[$4_1 + 92 >> 2];
  HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 88 >> 2];
  HEAP32[$4_1 + 12 >> 2] = HEAP32[$4_1 + 80 >> 2];
  HEAP32[$4_1 + 16 >> 2] = 0;
  HEAP32[$4_1 + 20 >> 2] = 0;
  HEAP32[$4_1 + 24 >> 2] = 0;
  HEAP32[$4_1 + 28 >> 2] = 0;
  HEAP32[$4_1 + 32 >> 2] = 0;
  HEAP32[$4_1 + 36 >> 2] = 0;
  HEAP32[$4_1 + 40 >> 2] = 0;
  HEAP32[$4_1 + 44 >> 2] = 0;
  HEAP32[$4_1 + 48 >> 2] = 0;
  HEAP8[$4_1 + 52 | 0] = 0;
  HEAP8[$4_1 + 53 | 0] = 0;
  HEAP8[$4_1 + 54 | 0] = 0;
  label$1 : {
   if ($85(HEAP32[$4_1 + 64 >> 2], HEAP32[$4_1 + 84 >> 2], 0) & 1) {
    HEAP32[$4_1 + 48 >> 2] = 1;
    $0_1 = HEAP32[$4_1 + 64 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, $4_1, HEAP32[$4_1 + 68 >> 2], HEAP32[$4_1 + 68 >> 2], 1, 0);
    if (HEAP32[$4_1 + 24 >> 2] == 1) {
     HEAP32[$4_1 + 60 >> 2] = HEAP32[$4_1 + 68 >> 2]
    }
    break label$1;
   }
   $0_1 = HEAP32[$4_1 + 64 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $4_1, HEAP32[$4_1 + 68 >> 2], 1, 0);
   $0_1 = HEAP32[$4_1 + 36 >> 2];
   label$4 : {
    if ($0_1 >>> 0 > 1) {
     break label$4
    }
    if (($0_1 | 0) != 1) {
     if (HEAP32[$4_1 + 40 >> 2] != 1 | HEAP32[$4_1 + 28 >> 2] != 1 | HEAP32[$4_1 + 32 >> 2] != 1) {
      break label$4
     }
     HEAP32[$4_1 + 60 >> 2] = HEAP32[$4_1 + 20 >> 2];
     break label$4;
    }
    label$6 : {
     if (HEAP32[$4_1 + 24 >> 2] != 1) {
      if (HEAP32[$4_1 + 40 >> 2] | HEAP32[$4_1 + 28 >> 2] != 1 | HEAP32[$4_1 + 32 >> 2] != 1) {
       break label$6
      }
     }
     HEAP32[$4_1 + 60 >> 2] = HEAP32[$4_1 + 16 >> 2];
    }
   }
  }
  global$0 = $4_1 + 96 | 0;
  return HEAP32[$4_1 + 60 >> 2];
 }
 
 function $90($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[$4_1 + 12 >> 2] = $0_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $3_1;
  label$1 : {
   if (!HEAP32[HEAP32[$4_1 + 8 >> 2] + 16 >> 2]) {
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 16 >> 2] = HEAP32[$4_1 + 4 >> 2];
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 24 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 36 >> 2] = 1;
    break label$1;
   }
   label$3 : {
    if (HEAP32[HEAP32[$4_1 + 8 >> 2] + 16 >> 2] == HEAP32[$4_1 + 4 >> 2]) {
     if (HEAP32[HEAP32[$4_1 + 8 >> 2] + 24 >> 2] == 2) {
      HEAP32[HEAP32[$4_1 + 8 >> 2] + 24 >> 2] = HEAP32[$4_1 >> 2]
     }
     break label$3;
    }
    $0_1 = HEAP32[$4_1 + 8 >> 2];
    HEAP32[$0_1 + 36 >> 2] = HEAP32[$0_1 + 36 >> 2] + 1;
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 24 >> 2] = 2;
    HEAP8[HEAP32[$4_1 + 8 >> 2] + 54 | 0] = 1;
   }
  }
 }
 
 function $91($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $0_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $3_1;
  $0_1 = HEAP32[$4_1 + 12 >> 2];
  if ($85($0_1, HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2], 0) & 1) {
   $90($0_1, HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 4 >> 2], HEAP32[$4_1 >> 2])
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $92($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $0_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $3_1;
  $0_1 = HEAP32[$4_1 + 12 >> 2];
  label$1 : {
   if ($85($0_1, HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2], 0) & 1) {
    $90($0_1, HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 4 >> 2], HEAP32[$4_1 >> 2]);
    break label$1;
   }
   $0_1 = HEAP32[$0_1 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 4 >> 2], HEAP32[$4_1 >> 2]);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $93($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 28 >> 2] = $0_1;
  HEAP32[$4_1 + 24 >> 2] = $1_1;
  HEAP32[$4_1 + 20 >> 2] = $2_1;
  HEAP32[$4_1 + 16 >> 2] = $3_1;
  $0_1 = HEAP32[$4_1 + 28 >> 2];
  HEAP32[$4_1 + 12 >> 2] = 0;
  if (HEAP32[$4_1 + 20 >> 2]) {
   HEAP32[$4_1 + 12 >> 2] = HEAP32[$0_1 + 4 >> 2] >> 8;
   if (HEAP32[$0_1 + 4 >> 2] & 1) {
    HEAP32[$4_1 + 8 >> 2] = HEAP32[HEAP32[$4_1 + 20 >> 2] >> 2];
    HEAP32[$4_1 + 12 >> 2] = HEAP32[HEAP32[$4_1 + 8 >> 2] + HEAP32[$4_1 + 12 >> 2] >> 2];
   }
  }
  $1_1 = HEAP32[$0_1 >> 2];
  $2_1 = $1_1;
  $3_1 = HEAP32[$4_1 + 24 >> 2];
  $5_1 = HEAP32[$4_1 + 20 >> 2] + HEAP32[$4_1 + 12 >> 2] | 0;
  if (HEAP32[$0_1 + 4 >> 2] & 2) {
   $0_1 = HEAP32[$4_1 + 16 >> 2]
  } else {
   $0_1 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($2_1, $3_1, $5_1, $0_1);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $94($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 28 >> 2] = $0_1;
  HEAP32[$4_1 + 24 >> 2] = $1_1;
  HEAP32[$4_1 + 20 >> 2] = $2_1;
  HEAP32[$4_1 + 16 >> 2] = $3_1;
  $0_1 = HEAP32[$4_1 + 28 >> 2];
  label$1 : {
   if ($85($0_1, HEAP32[HEAP32[$4_1 + 24 >> 2] + 8 >> 2], 0) & 1) {
    $90($0_1, HEAP32[$4_1 + 24 >> 2], HEAP32[$4_1 + 20 >> 2], HEAP32[$4_1 + 16 >> 2]);
    break label$1;
   }
   HEAP32[$4_1 + 12 >> 2] = ($0_1 + 16 | 0) + (HEAP32[$0_1 + 12 >> 2] << 3);
   HEAP32[$4_1 + 8 >> 2] = $0_1 + 16;
   $93(HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 24 >> 2], HEAP32[$4_1 + 20 >> 2], HEAP32[$4_1 + 16 >> 2]);
   $0_1 = HEAP32[$4_1 + 8 >> 2] + 8 | 0;
   HEAP32[$4_1 + 8 >> 2] = $0_1;
   if ($0_1 >>> 0 < HEAPU32[$4_1 + 12 >> 2]) {
    while (1) {
     label$5 : {
      $93(HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 24 >> 2], HEAP32[$4_1 + 20 >> 2], HEAP32[$4_1 + 16 >> 2]);
      if (HEAP8[HEAP32[$4_1 + 24 >> 2] + 54 | 0] & 1) {
       break label$5
      }
      $0_1 = HEAP32[$4_1 + 8 >> 2] + 8 | 0;
      HEAP32[$4_1 + 8 >> 2] = $0_1;
      if ($0_1 >>> 0 < HEAPU32[$4_1 + 12 >> 2]) {
       continue
      }
     }
     break;
    }
   }
  }
  global$0 = $4_1 + 32 | 0;
 }
 
 function $95($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 24 >> 2] = $0_1;
  HEAP32[$3_1 + 20 >> 2] = $1_1;
  HEAP32[$3_1 + 16 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 24 >> 2];
  HEAP8[$3_1 + 15 | 0] = (HEAP32[$1_1 + 8 >> 2] & 24) != 0;
  label$1 : {
   if (!(HEAP8[$3_1 + 15 | 0] & 1)) {
    $2_1 = $3_1;
    $0_1 = HEAP32[$3_1 + 20 >> 2];
    label$3 : {
     if ($0_1) {
      $0_1 = $89($0_1, 4004, 4100, 0);
      break label$3;
     }
     $0_1 = 0;
    }
    HEAP32[$2_1 + 8 >> 2] = $0_1;
    if (!HEAP32[$3_1 + 8 >> 2]) {
     HEAP8[$3_1 + 31 | 0] = 0;
     break label$1;
    }
    HEAP8[$3_1 + 15 | 0] = (HEAP32[HEAP32[$3_1 + 8 >> 2] + 8 >> 2] & 24) != 0;
   }
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $85($1_1, HEAP32[$3_1 + 20 >> 2], HEAP8[$3_1 + 15 | 0] & 1) & 1), HEAP8[wasm2js_i32$0 + 31 | 0] = wasm2js_i32$1;
  }
  global$0 = $3_1 + 32 | 0;
  return HEAP8[$3_1 + 31 | 0] & 1;
 }
 
 function $96($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 88 >> 2] = $0_1;
  HEAP32[$3_1 + 84 >> 2] = $1_1;
  HEAP32[$3_1 + 80 >> 2] = $2_1;
  $0_1 = HEAP32[$3_1 + 88 >> 2];
  label$1 : {
   if ($85(HEAP32[$3_1 + 84 >> 2], 4448, 0) & 1) {
    HEAP32[HEAP32[$3_1 + 80 >> 2] >> 2] = 0;
    HEAP8[$3_1 + 95 | 0] = 1;
    break label$1;
   }
   if ($95($0_1, HEAP32[$3_1 + 84 >> 2], HEAP32[$3_1 + 80 >> 2]) & 1) {
    if (HEAP32[HEAP32[$3_1 + 80 >> 2] >> 2]) {
     HEAP32[HEAP32[$3_1 + 80 >> 2] >> 2] = HEAP32[HEAP32[HEAP32[$3_1 + 80 >> 2] >> 2] >> 2]
    }
    HEAP8[$3_1 + 95 | 0] = 1;
    break label$1;
   }
   $2_1 = $3_1;
   $1_1 = HEAP32[$3_1 + 84 >> 2];
   label$5 : {
    if ($1_1) {
     $1_1 = $89($1_1, 4004, 4148, 0);
     break label$5;
    }
    $1_1 = 0;
   }
   HEAP32[$2_1 + 76 >> 2] = $1_1;
   if (!HEAP32[$3_1 + 76 >> 2]) {
    HEAP8[$3_1 + 95 | 0] = 0;
    break label$1;
   }
   if (HEAP32[HEAP32[$3_1 + 80 >> 2] >> 2]) {
    HEAP32[HEAP32[$3_1 + 80 >> 2] >> 2] = HEAP32[HEAP32[HEAP32[$3_1 + 80 >> 2] >> 2] >> 2]
   }
   if (HEAP32[HEAP32[$3_1 + 76 >> 2] + 8 >> 2] & (HEAP32[$0_1 + 8 >> 2] ^ -1) & 7) {
    HEAP8[$3_1 + 95 | 0] = 0;
    break label$1;
   }
   if (HEAP32[$0_1 + 8 >> 2] & (HEAP32[HEAP32[$3_1 + 76 >> 2] + 8 >> 2] ^ -1) & 96) {
    HEAP8[$3_1 + 95 | 0] = 0;
    break label$1;
   }
   if ($85(HEAP32[$0_1 + 12 >> 2], HEAP32[HEAP32[$3_1 + 76 >> 2] + 12 >> 2], 0) & 1) {
    HEAP8[$3_1 + 95 | 0] = 1;
    break label$1;
   }
   if ($85(HEAP32[$0_1 + 12 >> 2], 4396, 0) & 1) {
    $1_1 = $3_1;
    $0_1 = HEAP32[HEAP32[$3_1 + 76 >> 2] + 12 >> 2];
    label$13 : {
     if ($0_1) {
      $0_1 = $89($0_1, 4004, 4200, 0);
      break label$13;
     }
     $0_1 = 0;
    }
    HEAP32[$1_1 + 72 >> 2] = $0_1;
    HEAP8[$3_1 + 95 | 0] = !HEAP32[$3_1 + 72 >> 2];
    break label$1;
   }
   $2_1 = $3_1;
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   label$15 : {
    if ($1_1) {
     $1_1 = $89($1_1, 4004, 4148, 0);
     break label$15;
    }
    $1_1 = 0;
   }
   HEAP32[$2_1 + 68 >> 2] = $1_1;
   if (HEAP32[$3_1 + 68 >> 2]) {
    if ((HEAP32[$0_1 + 8 >> 2] ^ -1) & 1) {
     HEAP8[$3_1 + 95 | 0] = 0;
     break label$1;
    }
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $97(HEAP32[$3_1 + 68 >> 2], HEAP32[HEAP32[$3_1 + 76 >> 2] + 12 >> 2]) & 1), HEAP8[wasm2js_i32$0 + 95 | 0] = wasm2js_i32$1;
    break label$1;
   }
   $2_1 = $3_1;
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   label$19 : {
    if ($1_1) {
     $1_1 = $89($1_1, 4004, 4260, 0);
     break label$19;
    }
    $1_1 = 0;
   }
   HEAP32[$2_1 + 64 >> 2] = $1_1;
   if (HEAP32[$3_1 + 64 >> 2]) {
    if ((HEAP32[$0_1 + 8 >> 2] ^ -1) & 1) {
     HEAP8[$3_1 + 95 | 0] = 0;
     break label$1;
    }
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $98(HEAP32[$3_1 + 64 >> 2], HEAP32[HEAP32[$3_1 + 76 >> 2] + 12 >> 2]) & 1), HEAP8[wasm2js_i32$0 + 95 | 0] = wasm2js_i32$1;
    break label$1;
   }
   $1_1 = $3_1;
   $0_1 = HEAP32[$0_1 + 12 >> 2];
   label$23 : {
    if ($0_1) {
     $0_1 = $89($0_1, 4004, 4052, 0);
     break label$23;
    }
    $0_1 = 0;
   }
   HEAP32[$1_1 + 60 >> 2] = $0_1;
   if (!HEAP32[$3_1 + 60 >> 2]) {
    HEAP8[$3_1 + 95 | 0] = 0;
    break label$1;
   }
   $1_1 = $3_1;
   $0_1 = HEAP32[HEAP32[$3_1 + 76 >> 2] + 12 >> 2];
   label$26 : {
    if ($0_1) {
     $0_1 = $89($0_1, 4004, 4052, 0);
     break label$26;
    }
    $0_1 = 0;
   }
   HEAP32[$1_1 + 56 >> 2] = $0_1;
   if (!HEAP32[$3_1 + 56 >> 2]) {
    HEAP8[$3_1 + 95 | 0] = 0;
    break label$1;
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 + 56 >> 2];
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 8 >> 2] = HEAP32[$3_1 + 60 >> 2];
   HEAP32[$3_1 + 12 >> 2] = -1;
   HEAP32[$3_1 + 16 >> 2] = 0;
   HEAP32[$3_1 + 20 >> 2] = 0;
   HEAP32[$3_1 + 24 >> 2] = 0;
   HEAP32[$3_1 + 28 >> 2] = 0;
   HEAP32[$3_1 + 32 >> 2] = 0;
   HEAP32[$3_1 + 36 >> 2] = 0;
   HEAP32[$3_1 + 40 >> 2] = 0;
   HEAP32[$3_1 + 44 >> 2] = 0;
   HEAP32[$3_1 + 48 >> 2] = 0;
   HEAP8[$3_1 + 52 | 0] = 0;
   HEAP8[$3_1 + 53 | 0] = 0;
   HEAP8[$3_1 + 54 | 0] = 0;
   HEAP32[$3_1 + 48 >> 2] = 1;
   $0_1 = HEAP32[$3_1 + 56 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $3_1, HEAP32[HEAP32[$3_1 + 80 >> 2] >> 2], 1);
   if (HEAP32[$3_1 + 24 >> 2] == 1) {
    if (HEAP32[HEAP32[$3_1 + 80 >> 2] >> 2]) {
     HEAP32[HEAP32[$3_1 + 80 >> 2] >> 2] = HEAP32[$3_1 + 16 >> 2]
    }
    HEAP8[$3_1 + 95 | 0] = 1;
    break label$1;
   }
   HEAP8[$3_1 + 95 | 0] = 0;
  }
  global$0 = $3_1 + 96 | 0;
  return HEAP8[$3_1 + 95 | 0] & 1;
 }
 
 function $97($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 24 >> 2] = $0_1;
  HEAP32[$2_1 + 20 >> 2] = $1_1;
  $0_1 = HEAP32[$2_1 + 24 >> 2];
  $3_1 = $2_1;
  $1_1 = HEAP32[$2_1 + 20 >> 2];
  label$1 : {
   if ($1_1) {
    $1_1 = $89($1_1, 4004, 4148, 0);
    break label$1;
   }
   $1_1 = 0;
  }
  HEAP32[$3_1 + 16 >> 2] = $1_1;
  label$3 : {
   if (!HEAP32[$2_1 + 16 >> 2]) {
    HEAP8[$2_1 + 31 | 0] = 0;
    break label$3;
   }
   if (HEAP32[HEAP32[$2_1 + 16 >> 2] + 8 >> 2] & (HEAP32[$0_1 + 8 >> 2] ^ -1)) {
    HEAP8[$2_1 + 31 | 0] = 0;
    break label$3;
   }
   if ($85(HEAP32[$0_1 + 12 >> 2], HEAP32[HEAP32[$2_1 + 16 >> 2] + 12 >> 2], 0) & 1) {
    HEAP8[$2_1 + 31 | 0] = 1;
    break label$3;
   }
   if ((HEAP32[$0_1 + 8 >> 2] ^ -1) & 1) {
    HEAP8[$2_1 + 31 | 0] = 0;
    break label$3;
   }
   $3_1 = $2_1;
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   label$8 : {
    if ($1_1) {
     $1_1 = $89($1_1, 4004, 4148, 0);
     break label$8;
    }
    $1_1 = 0;
   }
   HEAP32[$3_1 + 12 >> 2] = $1_1;
   if (HEAP32[$2_1 + 12 >> 2]) {
    (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $97(HEAP32[$2_1 + 12 >> 2], HEAP32[HEAP32[$2_1 + 16 >> 2] + 12 >> 2]) & 1), HEAP8[wasm2js_i32$0 + 31 | 0] = wasm2js_i32$1;
    break label$3;
   }
   $1_1 = $2_1;
   $0_1 = HEAP32[$0_1 + 12 >> 2];
   label$11 : {
    if ($0_1) {
     $0_1 = $89($0_1, 4004, 4260, 0);
     break label$11;
    }
    $0_1 = 0;
   }
   HEAP32[$1_1 + 8 >> 2] = $0_1;
   if (HEAP32[$2_1 + 8 >> 2]) {
    (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $98(HEAP32[$2_1 + 8 >> 2], HEAP32[HEAP32[$2_1 + 16 >> 2] + 12 >> 2]) & 1), HEAP8[wasm2js_i32$0 + 31 | 0] = wasm2js_i32$1;
    break label$3;
   }
   HEAP8[$2_1 + 31 | 0] = 0;
  }
  global$0 = $2_1 + 32 | 0;
  return HEAP8[$2_1 + 31 | 0] & 1;
 }
 
 function $98($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $0_1;
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $0_1 = HEAP32[$2_1 + 8 >> 2];
  $3_1 = $2_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  label$1 : {
   if ($1_1) {
    $1_1 = $89($1_1, 4004, 4260, 0);
    break label$1;
   }
   $1_1 = 0;
  }
  HEAP32[$3_1 >> 2] = $1_1;
  label$3 : {
   if (!HEAP32[$2_1 >> 2]) {
    HEAP8[$2_1 + 15 | 0] = 0;
    break label$3;
   }
   if (HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2] & (HEAP32[$0_1 + 8 >> 2] ^ -1)) {
    HEAP8[$2_1 + 15 | 0] = 0;
    break label$3;
   }
   if (!($85(HEAP32[$0_1 + 12 >> 2], HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2], 0) & 1)) {
    HEAP8[$2_1 + 15 | 0] = 0;
    break label$3;
   }
   if (!($85(HEAP32[$0_1 + 16 >> 2], HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2], 0) & 1)) {
    HEAP8[$2_1 + 15 | 0] = 0;
    break label$3;
   }
   HEAP8[$2_1 + 15 | 0] = 1;
  }
  global$0 = $2_1 + 16 | 0;
  return HEAP8[$2_1 + 15 | 0] & 1;
 }
 
 function $99($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 24 >> 2] = $0_1;
  HEAP32[$3_1 + 20 >> 2] = $1_1;
  HEAP32[$3_1 + 16 >> 2] = $2_1;
  $0_1 = HEAP32[$3_1 + 24 >> 2];
  label$1 : {
   if ($85(HEAP32[$3_1 + 20 >> 2], 4448, 0) & 1) {
    $0_1 = HEAP32[$0_1 + 12 >> 2];
    label$4 : {
     if ($0_1) {
      $0_1 = $89($0_1, 4004, 4200, 0);
      break label$4;
     }
     $0_1 = 0;
    }
    label$3 : {
     if ($0_1) {
      HEAP32[HEAP32[$3_1 + 16 >> 2] >> 2] = 4272;
      break label$3;
     }
     HEAP32[HEAP32[$3_1 + 16 >> 2] >> 2] = 4280;
    }
    HEAP8[$3_1 + 31 | 0] = 1;
    break label$1;
   }
   if ($95($0_1, HEAP32[$3_1 + 20 >> 2], HEAP32[$3_1 + 16 >> 2]) & 1) {
    HEAP8[$3_1 + 31 | 0] = 1;
    break label$1;
   }
   $2_1 = $3_1;
   $1_1 = HEAP32[$3_1 + 20 >> 2];
   label$8 : {
    if ($1_1) {
     $1_1 = $89($1_1, 4004, 4260, 0);
     break label$8;
    }
    $1_1 = 0;
   }
   HEAP32[$2_1 + 12 >> 2] = $1_1;
   if (!HEAP32[$3_1 + 12 >> 2]) {
    HEAP8[$3_1 + 31 | 0] = 0;
    break label$1;
   }
   if (HEAP32[HEAP32[$3_1 + 12 >> 2] + 8 >> 2] & (HEAP32[$0_1 + 8 >> 2] ^ -1) & 7) {
    HEAP8[$3_1 + 31 | 0] = 0;
    break label$1;
   }
   if (HEAP32[$0_1 + 8 >> 2] & (HEAP32[HEAP32[$3_1 + 12 >> 2] + 8 >> 2] ^ -1) & 96) {
    HEAP8[$3_1 + 31 | 0] = 0;
    break label$1;
   }
   if (!($85(HEAP32[$0_1 + 12 >> 2], HEAP32[HEAP32[$3_1 + 12 >> 2] + 12 >> 2], 0) & 1)) {
    HEAP8[$3_1 + 31 | 0] = 0;
    break label$1;
   }
   if ($85(HEAP32[$0_1 + 16 >> 2], HEAP32[HEAP32[$3_1 + 12 >> 2] + 16 >> 2], 0) & 1) {
    HEAP8[$3_1 + 31 | 0] = 1;
    break label$1;
   }
   HEAP8[$3_1 + 31 | 0] = 0;
  }
  global$0 = $3_1 + 32 | 0;
  return HEAP8[$3_1 + 31 | 0] & 1;
 }
 
 function $100($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[$5_1 + 28 >> 2] = $0_1;
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 16 >> 2] = $3_1;
  HEAP32[$5_1 + 12 >> 2] = $4_1;
  HEAP8[HEAP32[$5_1 + 24 >> 2] + 53 | 0] = 1;
  if (HEAP32[$5_1 + 16 >> 2] == HEAP32[HEAP32[$5_1 + 24 >> 2] + 4 >> 2]) {
   HEAP8[HEAP32[$5_1 + 24 >> 2] + 52 | 0] = 1;
   label$2 : {
    if (!HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2]) {
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2] = HEAP32[$5_1 + 20 >> 2];
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] = HEAP32[$5_1 + 12 >> 2];
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 36 >> 2] = 1;
     if (!(HEAP32[HEAP32[$5_1 + 24 >> 2] + 48 >> 2] != 1 | HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] != 1)) {
      HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1
     }
     break label$2;
    }
    label$5 : {
     if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2] == HEAP32[$5_1 + 20 >> 2]) {
      if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] == 2) {
       HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] = HEAP32[$5_1 + 12 >> 2]
      }
      if (!(HEAP32[HEAP32[$5_1 + 24 >> 2] + 48 >> 2] != 1 | HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] != 1)) {
       HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1
      }
      break label$5;
     }
     $0_1 = HEAP32[$5_1 + 24 >> 2];
     HEAP32[$0_1 + 36 >> 2] = HEAP32[$0_1 + 36 >> 2] + 1;
     HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1;
    }
   }
  }
 }
 
 function $101($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[$4_1 + 12 >> 2] = $0_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $3_1;
  if (HEAP32[$4_1 + 4 >> 2] == HEAP32[HEAP32[$4_1 + 8 >> 2] + 4 >> 2]) {
   if (HEAP32[HEAP32[$4_1 + 8 >> 2] + 28 >> 2] != 1) {
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 28 >> 2] = HEAP32[$4_1 >> 2]
   }
  }
 }
 
 function $102($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 44 >> 2] = $0_1;
  HEAP32[$5_1 + 40 >> 2] = $1_1;
  HEAP32[$5_1 + 36 >> 2] = $2_1;
  HEAP32[$5_1 + 32 >> 2] = $3_1;
  HEAP8[$5_1 + 31 | 0] = $4_1;
  $0_1 = HEAP32[$5_1 + 44 >> 2];
  label$1 : {
   if ($85($0_1, HEAP32[HEAP32[$5_1 + 40 >> 2] + 8 >> 2], HEAP8[$5_1 + 31 | 0] & 1) & 1) {
    $101($0_1, HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2]);
    break label$1;
   }
   label$3 : {
    if ($85($0_1, HEAP32[HEAP32[$5_1 + 40 >> 2] >> 2], HEAP8[$5_1 + 31 | 0] & 1) & 1) {
     if (!(HEAP32[$5_1 + 36 >> 2] != HEAP32[HEAP32[$5_1 + 40 >> 2] + 20 >> 2] ? HEAP32[$5_1 + 36 >> 2] != HEAP32[HEAP32[$5_1 + 40 >> 2] + 16 >> 2] : 0)) {
      if (HEAP32[$5_1 + 32 >> 2] == 1) {
       HEAP32[HEAP32[$5_1 + 40 >> 2] + 32 >> 2] = 1
      }
      break label$3;
     }
     HEAP32[HEAP32[$5_1 + 40 >> 2] + 32 >> 2] = HEAP32[$5_1 + 32 >> 2];
     HEAP8[$5_1 + 30 | 0] = 0;
     if (HEAP32[HEAP32[$5_1 + 40 >> 2] + 44 >> 2] != 4) {
      HEAP8[$5_1 + 29 | 0] = 0;
      HEAP32[$5_1 + 24 >> 2] = ($0_1 + 16 | 0) + (HEAP32[$0_1 + 12 >> 2] << 3);
      HEAP32[$5_1 + 20 >> 2] = $0_1 + 16;
      while (1) {
       label$10 : {
        if (HEAPU32[$5_1 + 20 >> 2] >= HEAPU32[$5_1 + 24 >> 2]) {
         break label$10
        }
        HEAP8[HEAP32[$5_1 + 40 >> 2] + 52 | 0] = 0;
        HEAP8[HEAP32[$5_1 + 40 >> 2] + 53 | 0] = 0;
        $103(HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 36 >> 2], 1, HEAP8[$5_1 + 31 | 0] & 1);
        if (HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] & 1) {
         break label$10
        }
        if (HEAP8[HEAP32[$5_1 + 40 >> 2] + 53 | 0] & 1) {
         HEAP8[$5_1 + 29 | 0] = 1;
         label$12 : {
          if (HEAP8[HEAP32[$5_1 + 40 >> 2] + 52 | 0] & 1) {
           HEAP8[$5_1 + 30 | 0] = 1;
           if (!(HEAP32[$0_1 + 8 >> 2] & 2) | HEAP32[HEAP32[$5_1 + 40 >> 2] + 24 >> 2] == 1) {
            break label$10
           }
           break label$12;
          }
          if (!(HEAP32[$0_1 + 8 >> 2] & 1)) {
           break label$10
          }
         }
        }
        HEAP32[$5_1 + 20 >> 2] = HEAP32[$5_1 + 20 >> 2] + 8;
        continue;
       }
       break;
      };
      label$14 : {
       if (HEAP8[$5_1 + 29 | 0] & 1) {
        HEAP32[HEAP32[$5_1 + 40 >> 2] + 44 >> 2] = 3;
        break label$14;
       }
       HEAP32[HEAP32[$5_1 + 40 >> 2] + 44 >> 2] = 4;
      }
     }
     if (!(HEAP8[$5_1 + 30 | 0] & 1)) {
      HEAP32[HEAP32[$5_1 + 40 >> 2] + 20 >> 2] = HEAP32[$5_1 + 36 >> 2];
      $0_1 = HEAP32[$5_1 + 40 >> 2];
      HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 1;
      if (!(HEAP32[HEAP32[$5_1 + 40 >> 2] + 36 >> 2] != 1 | HEAP32[HEAP32[$5_1 + 40 >> 2] + 24 >> 2] != 2)) {
       HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] = 1
      }
     }
     break label$3;
    }
    HEAP32[$5_1 + 16 >> 2] = ($0_1 + 16 | 0) + (HEAP32[$0_1 + 12 >> 2] << 3);
    HEAP32[$5_1 + 12 >> 2] = $0_1 + 16;
    $104(HEAP32[$5_1 + 12 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2], HEAP8[$5_1 + 31 | 0] & 1);
    $1_1 = HEAP32[$5_1 + 12 >> 2] + 8 | 0;
    HEAP32[$5_1 + 12 >> 2] = $1_1;
    if ($1_1 >>> 0 < HEAPU32[$5_1 + 16 >> 2]) {
     label$19 : {
      if (!(HEAP32[HEAP32[$5_1 + 40 >> 2] + 36 >> 2] != 1 ? !(HEAP32[$0_1 + 8 >> 2] & 2) : 0)) {
       while (1) {
        if (!(HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] & 1)) {
         $104(HEAP32[$5_1 + 12 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2], HEAP8[$5_1 + 31 | 0] & 1);
         $0_1 = HEAP32[$5_1 + 12 >> 2] + 8 | 0;
         HEAP32[$5_1 + 12 >> 2] = $0_1;
         if ($0_1 >>> 0 < HEAPU32[$5_1 + 16 >> 2]) {
          continue
         }
        }
        break;
       };
       break label$19;
      }
      label$24 : {
       if (HEAP32[$0_1 + 8 >> 2] & 1) {
        while (1) {
         if (!(!(HEAP32[HEAP32[$5_1 + 40 >> 2] + 36 >> 2] != 1 | HEAP32[HEAP32[$5_1 + 40 >> 2] + 24 >> 2] != 1) | HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] & 1)) {
          $104(HEAP32[$5_1 + 12 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2], HEAP8[$5_1 + 31 | 0] & 1);
          $0_1 = HEAP32[$5_1 + 12 >> 2] + 8 | 0;
          HEAP32[$5_1 + 12 >> 2] = $0_1;
          if ($0_1 >>> 0 < HEAPU32[$5_1 + 16 >> 2]) {
           continue
          }
         }
         break;
        };
        break label$24;
       }
       while (1) {
        if (!(HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] & 1 | HEAP32[HEAP32[$5_1 + 40 >> 2] + 36 >> 2] == 1)) {
         $104(HEAP32[$5_1 + 12 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2], HEAP8[$5_1 + 31 | 0] & 1);
         $0_1 = HEAP32[$5_1 + 12 >> 2] + 8 | 0;
         HEAP32[$5_1 + 12 >> 2] = $0_1;
         if ($0_1 >>> 0 < HEAPU32[$5_1 + 16 >> 2]) {
          continue
         }
        }
        break;
       };
      }
     }
    }
   }
  }
  global$0 = $5_1 + 48 | 0;
 }
 
 function $103($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $0_1;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = $3_1;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP8[$6_1 + 11 | 0] = $5_1;
  $0_1 = HEAP32[$6_1 + 28 >> 2];
  HEAP32[$6_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] >> 8;
  if (HEAP32[$0_1 + 4 >> 2] & 1) {
   HEAP32[$6_1 >> 2] = HEAP32[HEAP32[$6_1 + 16 >> 2] >> 2];
   HEAP32[$6_1 + 4 >> 2] = HEAP32[HEAP32[$6_1 >> 2] + HEAP32[$6_1 + 4 >> 2] >> 2];
  }
  $1_1 = HEAP32[$0_1 >> 2];
  $2_1 = $1_1;
  $3_1 = HEAP32[$6_1 + 24 >> 2];
  $4_1 = HEAP32[$6_1 + 20 >> 2];
  $5_1 = HEAP32[$6_1 + 16 >> 2] + HEAP32[$6_1 + 4 >> 2] | 0;
  if (HEAP32[$0_1 + 4 >> 2] & 2) {
   $0_1 = HEAP32[$6_1 + 12 >> 2]
  } else {
   $0_1 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($2_1, $3_1, $4_1, $5_1, $0_1, HEAP8[$6_1 + 11 | 0] & 1);
  global$0 = $6_1 + 32 | 0;
 }
 
 function $104($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 28 >> 2] = $0_1;
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 16 >> 2] = $3_1;
  HEAP8[$5_1 + 15 | 0] = $4_1;
  $0_1 = HEAP32[$5_1 + 28 >> 2];
  HEAP32[$5_1 + 8 >> 2] = HEAP32[$0_1 + 4 >> 2] >> 8;
  if (HEAP32[$0_1 + 4 >> 2] & 1) {
   HEAP32[$5_1 + 4 >> 2] = HEAP32[HEAP32[$5_1 + 20 >> 2] >> 2];
   HEAP32[$5_1 + 8 >> 2] = HEAP32[HEAP32[$5_1 + 4 >> 2] + HEAP32[$5_1 + 8 >> 2] >> 2];
  }
  $1_1 = HEAP32[$0_1 >> 2];
  $2_1 = $1_1;
  $3_1 = HEAP32[$5_1 + 24 >> 2];
  $4_1 = HEAP32[$5_1 + 20 >> 2] + HEAP32[$5_1 + 8 >> 2] | 0;
  if (HEAP32[$0_1 + 4 >> 2] & 2) {
   $0_1 = HEAP32[$5_1 + 16 >> 2]
  } else {
   $0_1 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($2_1, $3_1, $4_1, $0_1, HEAP8[$5_1 + 15 | 0] & 1);
  global$0 = $5_1 + 32 | 0;
 }
 
 function $105($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 28 >> 2] = $0_1;
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 16 >> 2] = $3_1;
  HEAP8[$5_1 + 15 | 0] = $4_1;
  $0_1 = HEAP32[$5_1 + 28 >> 2];
  label$1 : {
   if ($85($0_1, HEAP32[HEAP32[$5_1 + 24 >> 2] + 8 >> 2], HEAP8[$5_1 + 15 | 0] & 1) & 1) {
    $101($0_1, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 16 >> 2]);
    break label$1;
   }
   label$3 : {
    if ($85($0_1, HEAP32[HEAP32[$5_1 + 24 >> 2] >> 2], HEAP8[$5_1 + 15 | 0] & 1) & 1) {
     if (!(HEAP32[$5_1 + 20 >> 2] != HEAP32[HEAP32[$5_1 + 24 >> 2] + 20 >> 2] ? HEAP32[$5_1 + 20 >> 2] != HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2] : 0)) {
      if (HEAP32[$5_1 + 16 >> 2] == 1) {
       HEAP32[HEAP32[$5_1 + 24 >> 2] + 32 >> 2] = 1
      }
      break label$3;
     }
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 32 >> 2] = HEAP32[$5_1 + 16 >> 2];
     HEAP8[$5_1 + 14 | 0] = 0;
     if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 44 >> 2] != 4) {
      HEAP8[$5_1 + 13 | 0] = 0;
      HEAP8[HEAP32[$5_1 + 24 >> 2] + 52 | 0] = 0;
      HEAP8[HEAP32[$5_1 + 24 >> 2] + 53 | 0] = 0;
      $0_1 = HEAP32[$0_1 + 8 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 20 >> 2], 1, HEAP8[$5_1 + 15 | 0] & 1);
      if (HEAP8[HEAP32[$5_1 + 24 >> 2] + 53 | 0] & 1) {
       HEAP8[$5_1 + 13 | 0] = 1;
       if (HEAP8[HEAP32[$5_1 + 24 >> 2] + 52 | 0] & 1) {
        HEAP8[$5_1 + 14 | 0] = 1
       }
      }
      label$11 : {
       if (HEAP8[$5_1 + 13 | 0] & 1) {
        HEAP32[HEAP32[$5_1 + 24 >> 2] + 44 >> 2] = 3;
        break label$11;
       }
       HEAP32[HEAP32[$5_1 + 24 >> 2] + 44 >> 2] = 4;
      }
     }
     if (!(HEAP8[$5_1 + 14 | 0] & 1)) {
      HEAP32[HEAP32[$5_1 + 24 >> 2] + 20 >> 2] = HEAP32[$5_1 + 20 >> 2];
      $0_1 = HEAP32[$5_1 + 24 >> 2];
      HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 1;
      if (!(HEAP32[HEAP32[$5_1 + 24 >> 2] + 36 >> 2] != 1 | HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] != 2)) {
       HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1
      }
     }
     break label$3;
    }
    $0_1 = HEAP32[$0_1 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 16 >> 2], HEAP8[$5_1 + 15 | 0] & 1);
   }
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $106($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 28 >> 2] = $0_1;
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 16 >> 2] = $3_1;
  HEAP8[$5_1 + 15 | 0] = $4_1;
  $0_1 = HEAP32[$5_1 + 28 >> 2];
  label$1 : {
   if ($85($0_1, HEAP32[HEAP32[$5_1 + 24 >> 2] + 8 >> 2], HEAP8[$5_1 + 15 | 0] & 1) & 1) {
    $101($0_1, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 16 >> 2]);
    break label$1;
   }
   if ($85($0_1, HEAP32[HEAP32[$5_1 + 24 >> 2] >> 2], HEAP8[$5_1 + 15 | 0] & 1) & 1) {
    label$4 : {
     if (!(HEAP32[$5_1 + 20 >> 2] != HEAP32[HEAP32[$5_1 + 24 >> 2] + 20 >> 2] ? HEAP32[$5_1 + 20 >> 2] != HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2] : 0)) {
      if (HEAP32[$5_1 + 16 >> 2] == 1) {
       HEAP32[HEAP32[$5_1 + 24 >> 2] + 32 >> 2] = 1
      }
      break label$4;
     }
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 32 >> 2] = HEAP32[$5_1 + 16 >> 2];
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 20 >> 2] = HEAP32[$5_1 + 20 >> 2];
     $0_1 = HEAP32[$5_1 + 24 >> 2];
     HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 1;
     if (!(HEAP32[HEAP32[$5_1 + 24 >> 2] + 36 >> 2] != 1 | HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] != 2)) {
      HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1
     }
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 44 >> 2] = 4;
    }
   }
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $107($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $0_1;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = $3_1;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP8[$6_1 + 11 | 0] = $5_1;
  $0_1 = HEAP32[$6_1 + 28 >> 2];
  label$1 : {
   if ($85($0_1, HEAP32[HEAP32[$6_1 + 24 >> 2] + 8 >> 2], HEAP8[$6_1 + 11 | 0] & 1) & 1) {
    $100($0_1, HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2]);
    break label$1;
   }
   HEAP8[$6_1 + 10 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] & 1;
   HEAP8[$6_1 + 9 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] & 1;
   HEAP32[$6_1 + 4 >> 2] = ($0_1 + 16 | 0) + (HEAP32[$0_1 + 12 >> 2] << 3);
   HEAP32[$6_1 >> 2] = $0_1 + 16;
   HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] = 0;
   HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] = 0;
   $103(HEAP32[$6_1 >> 2], HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2], HEAP8[$6_1 + 11 | 0] & 1);
   HEAP8[$6_1 + 10 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] & 1 | HEAP8[$6_1 + 10 | 0] & 1;
   HEAP8[$6_1 + 9 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] & 1 | HEAP8[$6_1 + 9 | 0] & 1;
   $1_1 = HEAP32[$6_1 >> 2] + 8 | 0;
   HEAP32[$6_1 >> 2] = $1_1;
   if ($1_1 >>> 0 < HEAPU32[$6_1 + 4 >> 2]) {
    while (1) {
     label$5 : {
      if (HEAP8[HEAP32[$6_1 + 24 >> 2] + 54 | 0] & 1) {
       break label$5
      }
      label$6 : {
       if (HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] & 1) {
        if (!(HEAP32[$0_1 + 8 >> 2] & 2) | HEAP32[HEAP32[$6_1 + 24 >> 2] + 24 >> 2] == 1) {
         break label$5
        }
        break label$6;
       }
       if (HEAP32[$0_1 + 8 >> 2] & 1 ? 0 : HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] & 1) {
        break label$5
       }
      }
      HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] = 0;
      HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] = 0;
      $103(HEAP32[$6_1 >> 2], HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2], HEAP8[$6_1 + 11 | 0] & 1);
      HEAP8[$6_1 + 10 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] & 1 | HEAP8[$6_1 + 10 | 0] & 1;
      HEAP8[$6_1 + 9 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] & 1 | HEAP8[$6_1 + 9 | 0] & 1;
      $1_1 = HEAP32[$6_1 >> 2] + 8 | 0;
      HEAP32[$6_1 >> 2] = $1_1;
      if ($1_1 >>> 0 < HEAPU32[$6_1 + 4 >> 2]) {
       continue
      }
     }
     break;
    }
   }
   HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] = HEAP8[$6_1 + 10 | 0] & 1;
   HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] = HEAP8[$6_1 + 9 | 0] & 1;
  }
  global$0 = $6_1 + 32 | 0;
 }
 
 function $108($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $0_1;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = $3_1;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP8[$6_1 + 11 | 0] = $5_1;
  $0_1 = HEAP32[$6_1 + 28 >> 2];
  label$1 : {
   if ($85($0_1, HEAP32[HEAP32[$6_1 + 24 >> 2] + 8 >> 2], HEAP8[$6_1 + 11 | 0] & 1) & 1) {
    $100($0_1, HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2]);
    break label$1;
   }
   $0_1 = HEAP32[$0_1 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2], HEAP8[$6_1 + 11 | 0] & 1);
  }
  global$0 = $6_1 + 32 | 0;
 }
 
 function $109($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $0_1;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = $3_1;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP8[$6_1 + 11 | 0] = $5_1;
  $0_1 = HEAP32[$6_1 + 28 >> 2];
  if ($85($0_1, HEAP32[HEAP32[$6_1 + 24 >> 2] + 8 >> 2], HEAP8[$6_1 + 11 | 0] & 1) & 1) {
   $100($0_1, HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2])
  }
  global$0 = $6_1 + 32 | 0;
 }
 
 function $110($0_1) {
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $1_1 = $4_1 & 2147483647;
  label$1 : {
   if ($1_1 >>> 0 >= 1283457024) {
    if ($0_1 != $0_1) {
     break label$1
    }
    return ($4_1 | 0) < 0 ? Math_fround(-1.570796251296997) : Math_fround(1.570796251296997);
   }
   label$3 : {
    if ($1_1 >>> 0 <= 1054867455) {
     $3_1 = -1;
     if ($1_1 >>> 0 >= 964689920) {
      break label$3
     }
     break label$1;
    }
    $0_1 = Math_fround(Math_abs($0_1));
    if ($1_1 >>> 0 <= 1066926079) {
     if ($1_1 >>> 0 <= 1060110335) {
      $0_1 = Math_fround(Math_fround(Math_fround($0_1 + $0_1) + Math_fround(-1.0)) / Math_fround($0_1 + Math_fround(2.0)));
      $3_1 = 0;
      break label$3;
     }
     $0_1 = Math_fround(Math_fround($0_1 + Math_fround(-1.0)) / Math_fround($0_1 + Math_fround(1.0)));
     $3_1 = 1;
     break label$3;
    }
    if ($1_1 >>> 0 <= 1075576831) {
     $0_1 = Math_fround(Math_fround($0_1 + Math_fround(-1.5)) / Math_fround(Math_fround($0_1 * Math_fround(1.5)) + Math_fround(1.0)));
     $3_1 = 2;
     break label$3;
    }
    $0_1 = Math_fround(Math_fround(-1.0) / $0_1);
    $3_1 = 3;
   }
   $1_1 = $3_1;
   $5_1 = Math_fround($0_1 * $0_1);
   $2_1 = Math_fround($5_1 * $5_1);
   $6_1 = Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
   $2_1 = Math_fround($5_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
   if (($1_1 | 0) <= -1) {
    return Math_fround($0_1 - Math_fround($0_1 * Math_fround($6_1 + $2_1)))
   }
   $1_1 = $1_1 << 2;
   $0_1 = Math_fround(HEAPF32[$1_1 + 6208 >> 2] - Math_fround(Math_fround(Math_fround($0_1 * Math_fround($6_1 + $2_1)) - HEAPF32[$1_1 + 6224 >> 2]) - $0_1));
   $0_1 = ($4_1 | 0) < 0 ? Math_fround(-$0_1) : $0_1;
  }
  return $0_1;
 }
 
 function $111($0_1) {
  var $1_1 = 0.0;
  $0_1 = $0_1 * $0_1;
  $1_1 = $0_1 * $0_1;
  return Math_fround($0_1 * -.499999997251031 + 1.0 + $1_1 * .04166662332373906 + $0_1 * $1_1 * ($0_1 * 2.439044879627741e-05 + -.001388676377460993));
 }
 
 function $112($0_1) {
  var $1_1 = 0.0, $2_1 = 0.0;
  $1_1 = $0_1 * $0_1;
  $2_1 = $1_1 * $0_1;
  return Math_fround($2_1 * ($1_1 * $1_1) * ($1_1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2_1 * ($1_1 * .008333329385889463 + -.16666666641626524) + $0_1));
 }
 
 function $113($0_1, $1_1) {
  label$1 : {
   if (($1_1 | 0) >= 1024) {
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    if (($1_1 | 0) < 2047) {
     $1_1 = $1_1 - 1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < 3069 ? $1_1 : 3069) - 2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > -1023) {
    break label$1
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   if (($1_1 | 0) > -1992) {
    $1_1 = $1_1 + 969 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   $1_1 = (($1_1 | 0) > -2960 ? $1_1 : -2960) + 1938 | 0;
  }
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $1_1 + 1023 << 20);
  return $0_1 * +wasm2js_scratch_load_f64();
 }
 
 function $114($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0.0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0.0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0.0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0;
  $16_1 = global$0 - 16 | 0;
  global$0 = $16_1;
  $20_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $2_1 = $20_1 & 2147483647;
  label$1 : {
   if ($2_1 >>> 0 <= 1305022426) {
    $12_1 = +$0_1;
    $3_1 = $12_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    HEAPF64[$1_1 >> 3] = $12_1 + $3_1 * -1.5707963109016418 + $3_1 * -1.5893254773528196e-08;
    if (Math_abs($3_1) < 2147483648.0) {
     $4_1 = ~~$3_1;
     break label$1;
    }
    $4_1 = -2147483648;
    break label$1;
   }
   if ($2_1 >>> 0 >= 2139095040) {
    HEAPF64[$1_1 >> 3] = Math_fround($0_1 - $0_1);
    break label$1;
   }
   $6_1 = $2_1;
   $2_1 = ($2_1 >>> 23 | 0) - 150 | 0;
   HEAPF64[$16_1 + 8 >> 3] = (wasm2js_scratch_store_i32(2, $6_1 - ($2_1 << 23) | 0), wasm2js_scratch_load_f32());
   $17_1 = $16_1 + 8 | 0;
   $7_1 = global$0 - 560 | 0;
   global$0 = $7_1;
   $6_1 = ($2_1 - 3 | 0) / 24 | 0;
   $18_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
   $13_1 = $2_1 + Math_imul($18_1, -24) | 0;
   $15_1 = HEAP32[1568];
   if (($15_1 | 0) >= 0) {
    $6_1 = $15_1 + 1 | 0;
    $2_1 = $18_1;
    $8_1 = ($2_1 << 2) + 6288 | 0;
    $5_1 = $7_1 + 320 | 0;
    while (1) {
     HEAPF64[$5_1 >> 3] = ($2_1 | 0) < 0 ? 0.0 : +HEAP32[$8_1 >> 2];
     $5_1 = $5_1 + 8 | 0;
     $8_1 = $8_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     $6_1 = $6_1 - 1 | 0;
     if ($6_1) {
      continue
     }
     break;
    };
   }
   $9_1 = $13_1 - 24 | 0;
   $6_1 = $7_1 + 320 | 0;
   while (1) {
    $3_1 = 0.0;
    $2_1 = $17_1;
    $8_1 = 1;
    $5_1 = $6_1;
    while (1) {
     $3_1 = $3_1 + HEAPF64[$2_1 >> 3] * HEAPF64[$5_1 >> 3];
     $2_1 = $2_1 + 8 | 0;
     $5_1 = $5_1 - 8 | 0;
     $8_1 = $8_1 - 1 | 0;
     if ($8_1) {
      continue
     }
     break;
    };
    HEAPF64[($4_1 << 3) + $7_1 >> 3] = $3_1;
    $6_1 = $6_1 + 8 | 0;
    $2_1 = ($4_1 | 0) < ($15_1 | 0);
    $4_1 = $4_1 + 1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
   $23_1 = 23 - $9_1 | 0;
   $21_1 = 24 - $9_1 | 0;
   $24_1 = (($15_1 << 2) + $7_1 | 0) + 476 | 0;
   $25_1 = $7_1 + 476 | 0;
   $26_1 = $7_1 - 8 | 0;
   $4_1 = $15_1;
   label$11 : {
    while (1) {
     $2_1 = $4_1 << 3;
     $3_1 = HEAPF64[$2_1 + $7_1 >> 3];
     $11_1 = ($4_1 | 0) < 1;
     if (!$11_1) {
      $8_1 = $4_1 + 1 | 0;
      $2_1 = $2_1 + $26_1 | 0;
      $5_1 = $7_1 + 480 | 0;
      while (1) {
       $6_1 = $5_1;
       $19_1 = $3_1;
       $12_1 = $3_1 * 5.960464477539063e-08;
       label$16 : {
        if (Math_abs($12_1) < 2147483648.0) {
         $10_1 = ~~$12_1;
         break label$16;
        }
        $10_1 = -2147483648;
       }
       $3_1 = +($10_1 | 0);
       $12_1 = $19_1 + $3_1 * -16777216.0;
       label$15 : {
        if (Math_abs($12_1) < 2147483648.0) {
         $10_1 = ~~$12_1;
         break label$15;
        }
        $10_1 = -2147483648;
       }
       HEAP32[$6_1 >> 2] = $10_1;
       $5_1 = $5_1 + 4 | 0;
       $3_1 = HEAPF64[$2_1 >> 3] + $3_1;
       $2_1 = $2_1 - 8 | 0;
       $8_1 = $8_1 - 1 | 0;
       if (($8_1 | 0) > 1) {
        continue
       }
       break;
      };
     }
     $3_1 = $113($3_1, $9_1);
     $3_1 = $3_1 + Math_floor($3_1 * .125) * -8.0;
     label$19 : {
      if (Math_abs($3_1) < 2147483648.0) {
       $10_1 = ~~$3_1;
       break label$19;
      }
      $10_1 = -2147483648;
     }
     $3_1 = $3_1 - +($10_1 | 0);
     label$21 : {
      label$22 : {
       label$23 : {
        $8_1 = ($9_1 | 0) < 1;
        label$24 : {
         if (!$8_1) {
          $6_1 = (($4_1 << 2) + $7_1 | 0) + 476 | 0;
          $5_1 = HEAP32[$6_1 >> 2];
          $2_1 = $5_1 >> $21_1;
          $14_1 = $6_1;
          $6_1 = $5_1 - ($2_1 << $21_1) | 0;
          HEAP32[$14_1 >> 2] = $6_1;
          $10_1 = $2_1 + $10_1 | 0;
          $14_1 = $6_1 >> $23_1;
          break label$24;
         }
         if ($9_1) {
          break label$23
         }
         $14_1 = HEAP32[(($4_1 << 2) + $7_1 | 0) + 476 >> 2] >> 23;
        }
        if (($14_1 | 0) < 1) {
         break label$21
        }
        break label$22;
       }
       $14_1 = 2;
       if ($3_1 >= .5) {
        break label$22
       }
       $14_1 = 0;
       break label$21;
      }
      label$26 : {
       if ($11_1) {
        $11_1 = 0;
        break label$26;
       }
       $11_1 = 0;
       $2_1 = $7_1 + 480 | 0;
       $6_1 = $4_1;
       while (1) {
        $5_1 = HEAP32[$2_1 >> 2];
        label$29 : {
         label$30 : {
          $27_1 = $2_1;
          if ($11_1) {
           $22_1 = 16777215
          } else {
           if (!$5_1) {
            break label$30
           }
           $11_1 = 1;
           $22_1 = 16777216;
          }
          HEAP32[$27_1 >> 2] = $22_1 - $5_1;
          break label$29;
         }
         $11_1 = 0;
        }
        $2_1 = $2_1 + 4 | 0;
        $6_1 = $6_1 - 1 | 0;
        if ($6_1) {
         continue
        }
        break;
       };
      }
      label$33 : {
       if ($8_1) {
        break label$33
       }
       $2_1 = $9_1 - 1 | 0;
       if ($2_1 >>> 0 > 1) {
        break label$33
       }
       if (($2_1 | 0) != 1) {
        $2_1 = (($4_1 << 2) + $7_1 | 0) + 476 | 0;
        HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] & 8388607;
        break label$33;
       }
       $2_1 = (($4_1 << 2) + $7_1 | 0) + 476 | 0;
       HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] & 4194303;
      }
      $10_1 = $10_1 + 1 | 0;
      if (($14_1 | 0) != 2) {
       break label$21
      }
      $3_1 = 1.0 - $3_1;
      $14_1 = 2;
      if (!$11_1) {
       break label$21
      }
      $3_1 = $3_1 - $113(1.0, $9_1);
     }
     if ($3_1 == 0.0) {
      label$36 : {
       if (($4_1 | 0) <= ($15_1 | 0)) {
        break label$36
       }
       $2_1 = ($4_1 << 2) + $25_1 | 0;
       $5_1 = 0;
       $8_1 = $4_1;
       while (1) {
        $5_1 = HEAP32[$2_1 >> 2] | $5_1;
        $2_1 = $2_1 - 4 | 0;
        $8_1 = $8_1 - 1 | 0;
        if (($15_1 | 0) < ($8_1 | 0)) {
         continue
        }
        break;
       };
       if (!$5_1) {
        break label$36
       }
       $2_1 = (($4_1 << 2) + $7_1 | 0) + 476 | 0;
       $13_1 = $9_1;
       while (1) {
        $4_1 = $4_1 - 1 | 0;
        $13_1 = $13_1 - 24 | 0;
        $6_1 = HEAP32[$2_1 >> 2];
        $2_1 = $2_1 - 4 | 0;
        if (!$6_1) {
         continue
        }
        break;
       };
       break label$11;
      }
      $2_1 = $24_1;
      $6_1 = $4_1;
      while (1) {
       $6_1 = $6_1 + 1 | 0;
       $5_1 = HEAP32[$2_1 >> 2];
       $2_1 = $2_1 - 4 | 0;
       if (!$5_1) {
        continue
       }
       break;
      };
      $11_1 = (($4_1 << 3) + $7_1 | 0) + 328 | 0;
      while (1) {
       $2_1 = (($4_1 << 3) + $7_1 | 0) + 328 | 0;
       $4_1 = $4_1 + 1 | 0;
       HEAPF64[$2_1 >> 3] = HEAP32[($18_1 + $4_1 << 2) + 6288 >> 2];
       $3_1 = 0.0;
       $2_1 = $17_1;
       $5_1 = $11_1;
       $8_1 = 1;
       while (1) {
        $3_1 = $3_1 + HEAPF64[$2_1 >> 3] * HEAPF64[$5_1 >> 3];
        $2_1 = $2_1 + 8 | 0;
        $5_1 = $5_1 - 8 | 0;
        $8_1 = $8_1 - 1 | 0;
        if ($8_1) {
         continue
        }
        break;
       };
       HEAPF64[($4_1 << 3) + $7_1 >> 3] = $3_1;
       $11_1 = $11_1 + 8 | 0;
       if (($4_1 | 0) < ($6_1 | 0)) {
        continue
       }
       break;
      };
      $4_1 = $6_1;
      continue;
     }
     break;
    };
    $3_1 = $113($3_1, 0 - $9_1 | 0);
    label$42 : {
     if ($3_1 >= 16777216.0) {
      $5_1 = ($7_1 + 480 | 0) + ($4_1 << 2) | 0;
      $19_1 = $3_1;
      $12_1 = $3_1 * 5.960464477539063e-08;
      label$45 : {
       if (Math_abs($12_1) < 2147483648.0) {
        $2_1 = ~~$12_1;
        break label$45;
       }
       $2_1 = -2147483648;
      }
      $3_1 = $19_1 + +($2_1 | 0) * -16777216.0;
      label$44 : {
       if (Math_abs($3_1) < 2147483648.0) {
        $6_1 = ~~$3_1;
        break label$44;
       }
       $6_1 = -2147483648;
      }
      HEAP32[$5_1 >> 2] = $6_1;
      $4_1 = $4_1 + 1 | 0;
      break label$42;
     }
     if (Math_abs($3_1) < 2147483648.0) {
      $2_1 = ~~$3_1
     } else {
      $2_1 = -2147483648
     }
     $13_1 = $9_1;
    }
    HEAP32[($7_1 + 480 | 0) + ($4_1 << 2) >> 2] = $2_1;
   }
   label$50 : {
    if (($4_1 | 0) < 0) {
     break label$50
    }
    $8_1 = $4_1 + 1 | 0;
    $3_1 = $113(1.0, $13_1);
    $2_1 = ($7_1 + 480 | 0) + ($4_1 << 2) | 0;
    $5_1 = ($4_1 << 3) + $7_1 | 0;
    while (1) {
     HEAPF64[$5_1 >> 3] = $3_1 * +HEAP32[$2_1 >> 2];
     $2_1 = $2_1 - 4 | 0;
     $5_1 = $5_1 - 8 | 0;
     $3_1 = $3_1 * 5.960464477539063e-08;
     $8_1 = $8_1 - 1 | 0;
     if (($8_1 | 0) > 0) {
      continue
     }
     break;
    };
    if (($4_1 | 0) < 0) {
     break label$50
    }
    $6_1 = ($4_1 << 3) + $7_1 | 0;
    $2_1 = $4_1;
    while (1) {
     $9_1 = $2_1;
     $13_1 = $4_1 - $2_1 | 0;
     $3_1 = 0.0;
     $2_1 = 0;
     $5_1 = 0;
     while (1) {
      label$54 : {
       $3_1 = $3_1 + HEAPF64[$2_1 + 9056 >> 3] * HEAPF64[$2_1 + $6_1 >> 3];
       if (($5_1 | 0) >= ($15_1 | 0)) {
        break label$54
       }
       $2_1 = $2_1 + 8 | 0;
       $17_1 = $5_1 >>> 0 < $13_1 >>> 0;
       $5_1 = $5_1 + 1 | 0;
       if ($17_1) {
        continue
       }
      }
      break;
     };
     HEAPF64[($7_1 + 160 | 0) + ($13_1 << 3) >> 3] = $3_1;
     $6_1 = $6_1 - 8 | 0;
     $2_1 = $9_1 - 1 | 0;
     if (($9_1 | 0) > 0) {
      continue
     }
     break;
    };
   }
   label$55 : {
    if (($4_1 | 0) < 0) {
     $3_1 = 0.0;
     break label$55;
    }
    $5_1 = $4_1 + 1 | 0;
    $2_1 = ($7_1 + 160 | 0) + ($4_1 << 3) | 0;
    $3_1 = 0.0;
    while (1) {
     $3_1 = $3_1 + HEAPF64[$2_1 >> 3];
     $2_1 = $2_1 - 8 | 0;
     $5_1 = $5_1 - 1 | 0;
     if (($5_1 | 0) > 0) {
      continue
     }
     break;
    };
   }
   HEAPF64[$16_1 >> 3] = $14_1 ? -$3_1 : $3_1;
   global$0 = $7_1 + 560 | 0;
   $4_1 = $10_1 & 7;
   $3_1 = HEAPF64[$16_1 >> 3];
   if (($20_1 | 0) <= -1) {
    HEAPF64[$1_1 >> 3] = -$3_1;
    $4_1 = 0 - $4_1 | 0;
    break label$1;
   }
   HEAPF64[$1_1 >> 3] = $3_1;
  }
  global$0 = $16_1 + 16 | 0;
  return $4_1;
 }
 
 function $115($0_1) {
  var $1_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $2_1 = $4_1 & 2147483647;
  label$1 : {
   if ($2_1 >>> 0 <= 1061752794) {
    $1_1 = Math_fround(1.0);
    if ($2_1 >>> 0 < 964689920) {
     break label$1
    }
    $1_1 = $111(+$0_1);
    break label$1;
   }
   if ($2_1 >>> 0 <= 1081824209) {
    $5_1 = +$0_1;
    if ($2_1 >>> 0 >= 1075235812) {
     $1_1 = Math_fround(-$111((($4_1 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $5_1));
     break label$1;
    }
    if (($4_1 | 0) <= -1) {
     $1_1 = $112($5_1 + 1.5707963267948966);
     break label$1;
    }
    $1_1 = $112(1.5707963267948966 - $5_1);
    break label$1;
   }
   if ($2_1 >>> 0 <= 1088565717) {
    if ($2_1 >>> 0 >= 1085271520) {
     $1_1 = $111((($4_1 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0_1);
     break label$1;
    }
    if (($4_1 | 0) <= -1) {
     $1_1 = $112(-4.71238898038469 - +$0_1);
     break label$1;
    }
    $1_1 = $112(+$0_1 + -4.71238898038469);
    break label$1;
   }
   $1_1 = Math_fround($0_1 - $0_1);
   if ($2_1 >>> 0 >= 2139095040) {
    break label$1
   }
   $2_1 = $114($0_1, $3_1 + 8 | 0) & 3;
   if ($2_1 >>> 0 <= 2) {
    label$10 : {
     switch ($2_1 - 1 | 0) {
     default:
      $1_1 = $111(HEAPF64[$3_1 + 8 >> 3]);
      break label$1;
     case 0:
      $1_1 = $112(-HEAPF64[$3_1 + 8 >> 3]);
      break label$1;
     case 1:
      break label$10;
     };
    }
    $1_1 = Math_fround(-$111(HEAPF64[$3_1 + 8 >> 3]));
    break label$1;
   }
   $1_1 = $112(HEAPF64[$3_1 + 8 >> 3]);
  }
  $0_1 = $1_1;
  global$0 = $3_1 + 16 | 0;
  return $0_1;
 }
 
 function $116($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0.0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $1_1 = $4_1 & 2147483647;
  label$1 : {
   if ($1_1 >>> 0 <= 1061752794) {
    if ($1_1 >>> 0 < 964689920) {
     break label$1
    }
    $0_1 = $112(+$0_1);
    break label$1;
   }
   if ($1_1 >>> 0 <= 1081824209) {
    $3_1 = +$0_1;
    if ($1_1 >>> 0 <= 1075235811) {
     if (($4_1 | 0) <= -1) {
      $0_1 = Math_fround(-$111($3_1 + 1.5707963267948966));
      break label$1;
     }
     $0_1 = $111($3_1 + -1.5707963267948966);
     break label$1;
    }
    $0_1 = $112(-((($4_1 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $3_1));
    break label$1;
   }
   if ($1_1 >>> 0 <= 1088565717) {
    $3_1 = +$0_1;
    if ($1_1 >>> 0 <= 1085271519) {
     if (($4_1 | 0) <= -1) {
      $0_1 = $111($3_1 + 4.71238898038469);
      break label$1;
     }
     $0_1 = Math_fround(-$111($3_1 + -4.71238898038469));
     break label$1;
    }
    $0_1 = $112((($4_1 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + $3_1);
    break label$1;
   }
   if ($1_1 >>> 0 >= 2139095040) {
    $0_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   $1_1 = $114($0_1, $2_1 + 8 | 0) & 3;
   if ($1_1 >>> 0 <= 2) {
    label$11 : {
     switch ($1_1 - 1 | 0) {
     default:
      $0_1 = $112(HEAPF64[$2_1 + 8 >> 3]);
      break label$1;
     case 0:
      $0_1 = $111(HEAPF64[$2_1 + 8 >> 3]);
      break label$1;
     case 1:
      break label$11;
     };
    }
    $0_1 = $112(-HEAPF64[$2_1 + 8 >> 3]);
    break label$1;
   }
   $0_1 = Math_fround(-$111(HEAPF64[$2_1 + 8 >> 3]));
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1;
 }
 
 function $117($0_1, $1_1) {
  return Math_fround(($0_1 ? Math_fround(-$1_1) : $1_1) * $1_1);
 }
 
 function $118($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0.0, $5_1 = 0, $6_1 = 0, $7_1 = 0.0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0.0;
  $5_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
  $8_1 = $5_1 << 1;
  $3_1 = $8_1 - 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $6_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
      label$5 : {
       if ($6_1 - 8388608 >>> 0 <= 2130706431) {
        if ($3_1 >>> 0 > 4278190078) {
         break label$5
        }
        break label$3;
       }
       if ($3_1 >>> 0 < 4278190079) {
        break label$4
       }
      }
      $9_1 = Math_fround(1.0);
      if (!$8_1 | ($6_1 | 0) == 1065353216) {
       break label$2
      }
      $2_1 = $6_1 << 1;
      if (!($8_1 >>> 0 < 4278190081 ? $2_1 >>> 0 <= 4278190080 : 0)) {
       return Math_fround($0_1 + $1_1)
      }
      if (($2_1 | 0) == 2130706432) {
       break label$2
      }
      return (($5_1 ^ -1) >>> 31 | 0) == ($2_1 >>> 0 < 2130706432 | 0) ? Math_fround(0.0) : Math_fround($1_1 * $1_1);
     }
     if (($6_1 << 1) - 1 >>> 0 >= 4278190079) {
      $9_1 = Math_fround($0_1 * $0_1);
      label$9 : {
       if (($6_1 | 0) > -1) {
        break label$9
       }
       $2_1 = $5_1 >>> 23 & 255;
       if ($2_1 - 127 >>> 0 > 23) {
        break label$9
       }
       $2_1 = 1 << 150 - $2_1;
       $9_1 = $2_1 & $5_1 ? ($5_1 & $2_1 - 1 ? $9_1 : Math_fround(-$9_1)) : $9_1;
      }
      if (($5_1 | 0) > -1) {
       break label$2
      }
      return Math_fround(Math_fround(1.0) / $9_1);
     }
     if (($6_1 | 0) <= -1) {
      $2_1 = $5_1 >>> 23 & 255;
      if ($2_1 >>> 0 < 127) {
       break label$1
      }
      label$11 : {
       if ($2_1 >>> 0 <= 150) {
        $3_1 = 1 << 150 - $2_1;
        if ($5_1 & $3_1 - 1) {
         break label$1
        }
        $2_1 = 65536;
        if ($3_1 & $5_1) {
         break label$11
        }
       }
       $2_1 = 0;
      }
      $6_1 = $6_1 & 2147483647;
     }
     if ($6_1 >>> 0 > 8388607) {
      break label$3
     }
     $6_1 = ((wasm2js_scratch_store_f32(Math_fround($0_1 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(2)) & 2147483647) - 192937984 | 0;
    }
    $8_1 = $6_1 - 1060306944 | 0;
    $3_1 = $8_1 >>> 15 & 240;
    $4_1 = HEAPF64[$3_1 + 9120 >> 3] * +(wasm2js_scratch_store_i32(2, $6_1 - ($8_1 & -8388608) | 0), wasm2js_scratch_load_f32()) + -1.0;
    $7_1 = $4_1 * $4_1;
    $7_1 = ((HEAPF64[1173] + HEAPF64[1172] * $4_1) * ($7_1 * $7_1) + ($7_1 * (HEAPF64[1175] + HEAPF64[1174] * $4_1) + (HEAPF64[$3_1 + 9128 >> 3] + +($8_1 >> 23) + $4_1 * HEAPF64[1176]))) * +$1_1;
    wasm2js_scratch_store_f64(+$7_1);
    $3_1 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    label$13 : {
     $3_1 = $3_1 & 2147450880;
     if (($3_1 | 0) == 1079967744 | $3_1 >>> 0 < 1079967744) {
      break label$13
     }
     if ($7_1 > 127.99999995700433) {
      return $117($2_1, Math_fround(1584563250285286751870879.0e5))
     }
     if (!($7_1 <= -150.0)) {
      break label$13
     }
     return $117($2_1, Math_fround(2.524354896707238e-29));
    }
    $10_1 = $7_1;
    $4_1 = HEAPF64[1209];
    $7_1 = $7_1 + $4_1;
    $4_1 = $10_1 - ($7_1 - $4_1);
    $10_1 = $4_1 * $4_1 * (HEAPF64[1211] + HEAPF64[1210] * $4_1) + ($4_1 * HEAPF64[1212] + 1.0);
    wasm2js_scratch_store_f64(+$7_1);
    wasm2js_scratch_load_i32(1) | 0;
    $5_1 = wasm2js_scratch_load_i32(0) | 0;
    $8_1 = $2_1 + $5_1 | 0;
    $8_1 = $8_1 << 15;
    $3_1 = (($5_1 & 31) << 3) + 9416 | 0;
    $2_1 = HEAP32[$3_1 >> 2];
    $3_1 = HEAP32[$3_1 + 4 >> 2] + $8_1 | 0;
    wasm2js_scratch_store_i32(0, $2_1 | 0);
    wasm2js_scratch_store_i32(1, ($2_1 >>> 0 > $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1) | 0);
    $9_1 = Math_fround($10_1 * +wasm2js_scratch_load_f64());
   }
   return $9_1;
  }
  $0_1 = Math_fround($0_1 - $0_1);
  return Math_fround($0_1 / $0_1);
 }
 
 function $119($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $5_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $2_1 = $5_1 >>> 23 & 255;
  if (($2_1 | 0) == 255) {
   $0_1 = Math_fround($0_1 * Math_fround(6.2831854820251465));
   return Math_fround($0_1 / $0_1);
  }
  $1_1 = $5_1 << 1;
  if ($1_1 >>> 0 > 2173837238) {
   label$3 : {
    if (!$2_1) {
     $2_1 = 0;
     $1_1 = $5_1 << 9;
     if (($1_1 | 0) >= 0) {
      while (1) {
       $2_1 = $2_1 - 1 | 0;
       $1_1 = $1_1 << 1;
       if (($1_1 | 0) > -1) {
        continue
       }
       break;
      }
     }
     $1_1 = $5_1 << 1 - $2_1;
     break label$3;
    }
    $1_1 = $5_1 & 8388607 | 8388608;
   }
   $4_1 = $1_1 - 13176795 | 0;
   $3_1 = ($4_1 | 0) > -1;
   if (($2_1 | 0) > 129) {
    while (1) {
     label$9 : {
      if (!($3_1 & 1)) {
       break label$9
      }
      $1_1 = $4_1;
      if ($1_1) {
       break label$9
      }
      return Math_fround($0_1 * Math_fround(0.0));
     }
     $1_1 = $1_1 << 1;
     $4_1 = $1_1 - 13176795 | 0;
     $3_1 = ($4_1 | 0) > -1;
     $2_1 = $2_1 - 1 | 0;
     if (($2_1 | 0) > 129) {
      continue
     }
     break;
    };
    $2_1 = 129;
   }
   label$10 : {
    if (!$3_1) {
     break label$10
    }
    $1_1 = $4_1;
    if ($1_1) {
     break label$10
    }
    return Math_fround($0_1 * Math_fround(0.0));
   }
   label$11 : {
    if ($1_1 >>> 0 > 8388607) {
     $3_1 = $1_1;
     break label$11;
    }
    while (1) {
     $2_1 = $2_1 - 1 | 0;
     $4_1 = $1_1 >>> 0 < 4194304;
     $3_1 = $1_1 << 1;
     $1_1 = $3_1;
     if ($4_1) {
      continue
     }
     break;
    };
   }
   return wasm2js_scratch_store_i32(2, $5_1 & -2147483648 | (($2_1 | 0) >= 1 ? $3_1 - 8388608 | $2_1 << 23 : $3_1 >>> 1 - $2_1 | 0)), wasm2js_scratch_load_f32();
  }
  return ($1_1 | 0) == -2121130058 ? Math_fround($0_1 * Math_fround(0.0)) : $0_1;
 }
 
 function $120($0_1) {
  var $1_1 = 0;
  $0_1 = $4($0_1 + 19 | 0);
  if (!$0_1) {
   return 0
  }
  $1_1 = $0_1 + 19 & -16;
  HEAP32[$1_1 - 4 >> 2] = $0_1;
  return $1_1;
 }
 
 function $121($0_1) {
  if ($0_1) {
   $5(HEAP32[$0_1 - 4 >> 2])
  }
 }
 
 function $122($0_1) {
  var $1_1 = 0;
  HEAP32[$0_1 + 132 >> 2] = 0;
  HEAP32[$0_1 + 136 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 9752;
  HEAP32[$0_1 + 188 >> 2] = 0;
  HEAP32[$0_1 + 192 >> 2] = 0;
  HEAP32[$0_1 + 180 >> 2] = 0;
  HEAP32[$0_1 + 184 >> 2] = 1566444395;
  HEAP32[$0_1 + 164 >> 2] = 1065353216;
  HEAP32[$0_1 + 168 >> 2] = 1065353216;
  HEAP32[$0_1 + 284 >> 2] = 0;
  HEAP32[$0_1 + 276 >> 2] = 0;
  HEAP32[$0_1 + 280 >> 2] = 0;
  HEAP32[$0_1 + 268 >> 2] = -1;
  HEAP32[$0_1 + 272 >> 2] = 1065353216;
  HEAP32[$0_1 + 260 >> 2] = -1;
  HEAP32[$0_1 + 264 >> 2] = -1;
  HEAP32[$0_1 + 252 >> 2] = 1;
  HEAP32[$0_1 + 256 >> 2] = 0;
  HEAP32[$0_1 + 244 >> 2] = 1036831949;
  HEAP32[$0_1 + 248 >> 2] = 1566444395;
  HEAP32[$0_1 + 236 >> 2] = 0;
  HEAP32[$0_1 + 240 >> 2] = 0;
  HEAP32[$0_1 + 228 >> 2] = 1056964608;
  HEAP32[$0_1 + 232 >> 2] = 0;
  HEAP32[$0_1 + 220 >> 2] = 1;
  HEAP32[$0_1 + 224 >> 2] = 0;
  HEAP32[$0_1 + 212 >> 2] = -1;
  HEAP32[$0_1 + 216 >> 2] = -1;
  HEAP32[$0_1 + 204 >> 2] = 1;
  HEAP32[$0_1 + 208 >> 2] = -1;
  $1_1 = $0_1 + 140 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 148 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 156 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 172 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 196 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0_1 + 304 | 0] = 1;
  HEAP32[$0_1 + 308 >> 2] = 0;
  HEAP32[$0_1 + 300 >> 2] = 0;
  $1_1 = $0_1 + 292 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 16 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = 1065353216;
  $1_1 = $0_1 + 28 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 36 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 44 >> 2] = 1065353216;
  $1_1 = $0_1 + 48 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 56 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 - -64 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 72 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 80 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 88 >> 2] = 1065353216;
  $1_1 = $0_1 + 92 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 100 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 112 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 108 >> 2] = 1065353216;
  $1_1 = $0_1 + 120 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 128 >> 2] = 0;
  return $0_1;
 }
 
 function $123($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 9752;
  $124($0_1 + 288 | 0);
  return $0_1 | 0;
 }
 
 function $124($0_1) {
  $163($0_1);
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP8[$0_1 + 16 | 0] = 1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
 }
 
 function $125($0_1) {
  $0_1 = $0_1 | 0;
  $121($123($0_1));
 }
 
 function $126($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 200 >> 2] = $1_1;
  HEAP32[$0_1 + 192 >> 2] = $1_1;
  HEAP32[$0_1 + 308 >> 2] = HEAP32[$0_1 + 308 >> 2] + 1;
 }
 
 function $127($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 292 >> 2];
  return ($2_1 | 0) <= ($128($2_1, HEAP32[$0_1 + 300 >> 2], $1_1) | 0) | 0;
 }
 
 function $128($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $4_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
  while (1) {
   label$2 : {
    if (($3_1 | 0) != ($4_1 | 0)) {
     if (HEAP32[$1_1 >> 2] != ($2_1 | 0)) {
      break label$2
     }
     $0_1 = $3_1;
    }
    return $0_1;
   }
   $1_1 = $1_1 + 4 | 0;
   $3_1 = $3_1 + 1 | 0;
   continue;
  };
 }
 
 function $129($0_1) {
  $0_1 = $0_1 | 0;
  return 272;
 }
 
 function $130($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $131($0_1 + 4 | 0, $1_1 + 16 | 0);
  $131($0_1 + 68 | 0, $1_1 + 80 | 0);
  $132($0_1 + 132 | 0, $1_1 + 144 | 0);
  $132($0_1 + 148 | 0, $1_1 + 160 | 0);
  $132($0_1 + 164 | 0, $1_1 + 176 | 0);
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 232 >> 2] = HEAP32[$0_1 + 180 >> 2];
  HEAPF32[$1_1 + 192 >> 2] = HEAPF32[$0_1 + 184 >> 2];
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0_1 + 192 >> 2]) | 0;
  $3_1 = HEAP32[$0_1 + 228 >> 2];
  HEAP32[$1_1 + 196 >> 2] = HEAP32[$0_1 + 224 >> 2];
  HEAP32[$1_1 + 200 >> 2] = $3_1;
  $3_1 = HEAP32[$0_1 + 212 >> 2];
  HEAP32[$1_1 + 240 >> 2] = HEAP32[$0_1 + 208 >> 2];
  HEAP32[$1_1 + 244 >> 2] = $3_1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  HEAP32[$1_1 + 236 >> 2] = HEAP32[$0_1 + 204 >> 2];
  HEAP32[$1_1 + 248 >> 2] = HEAP32[$0_1 + 220 >> 2];
  HEAPF32[$1_1 + 204 >> 2] = HEAPF32[$0_1 + 236 >> 2];
  HEAPF32[$1_1 + 208 >> 2] = HEAPF32[$0_1 + 244 >> 2];
  HEAPF32[$1_1 + 212 >> 2] = HEAPF32[$0_1 + 248 >> 2];
  HEAPF32[$1_1 + 216 >> 2] = HEAPF32[$0_1 + 232 >> 2];
  HEAP32[$1_1 + 252 >> 2] = HEAP32[$0_1 + 252 >> 2];
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 40 >> 2]]($2_1, $0_1) | 0;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $4_1) | 0;
  HEAP32[$1_1 + 12 >> 2] = $3_1;
  if ($3_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1, $4_1)
  }
  HEAPF32[$1_1 + 220 >> 2] = HEAPF32[$0_1 + 272 >> 2];
  $2_1 = HEAP32[$0_1 + 280 >> 2];
  HEAP32[$1_1 + 224 >> 2] = HEAP32[$0_1 + 276 >> 2];
  HEAP32[$1_1 + 228 >> 2] = $2_1;
  HEAP32[$1_1 + 256 >> 2] = HEAP32[$0_1 + 284 >> 2];
  $3_1 = $1_1;
  $0_1 = HEAP32[$0_1 + 188 >> 2];
  label$2 : {
   if ($0_1) {
    $2_1 = HEAP32[$0_1 + 8 >> 2];
    HEAP32[$1_1 + 260 >> 2] = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$1_1 + 264 >> 2] = $2_1;
    $0_1 = HEAP32[$0_1 + 12 >> 2];
    break label$2;
   }
   HEAP32[$1_1 + 260 >> 2] = 0;
   HEAP32[$1_1 + 264 >> 2] = 0;
   $0_1 = -1;
  }
  HEAP32[$3_1 + 268 >> 2] = $0_1;
  return 9788;
 }
 
 function $131($0_1, $1_1) {
  $134($0_1, $1_1);
  $132($0_1 + 48 | 0, $1_1 + 48 | 0);
 }
 
 function $132($0_1, $1_1) {
  var $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 16) {
    HEAPF32[$1_1 + $2_1 >> 2] = HEAPF32[$0_1 + $2_1 >> 2];
    $2_1 = $2_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $133($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1245859651), wasm2js_i32$5 = $0_1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function $134($0_1, $1_1) {
  var $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 48) {
    $132($0_1 + $2_1 | 0, $1_1 + $2_1 | 0);
    $2_1 = $2_1 + 16 | 0;
    continue;
   }
   break;
  };
 }
 
 function $135($0_1, $1_1) {
  if (!(HEAPU8[$0_1 + 204 | 0] & 3 ? !$1_1 : 0)) {
   if ((HEAP32[$0_1 + 220 >> 2] & -2) != 4) {
    HEAP32[$0_1 + 220 >> 2] = 1
   }
   HEAP32[$0_1 + 224 >> 2] = 0;
  }
 }
 
 function $136($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 44 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 1065353216;
  $4_1 = $3_1 - -64 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 76 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = 1065353216;
  $4_1 = $3_1 + 84 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 1065353216;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  $5_1 = HEAPF32[$3_1 >> 2];
  $6_1 = HEAPF32[$3_1 + 16 >> 2];
  $7_1 = HEAPF32[$3_1 + 4 >> 2];
  $8_1 = HEAPF32[$3_1 + 20 >> 2];
  $9_1 = HEAPF32[$3_1 + 8 >> 2];
  $10_1 = HEAPF32[$3_1 + 24 >> 2];
  (wasm2js_i32$0 = $2_1, wasm2js_f32$0 = Math_fround($137(Math_fround($5_1 - $6_1), Math_fround($7_1 - $8_1), Math_fround($9_1 - $10_1)) * Math_fround(.5))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAPF32[$1_1 + 8 >> 2] = Math_fround($10_1 + $9_1) * Math_fround(.5);
  HEAPF32[$1_1 + 4 >> 2] = Math_fround($8_1 + $7_1) * Math_fround(.5);
  HEAPF32[$1_1 >> 2] = Math_fround($6_1 + $5_1) * Math_fround(.5);
  global$0 = $3_1 + 96 | 0;
 }
 
 function $137($0_1, $1_1, $2_1) {
  return Math_fround(Math_sqrt($149($0_1, $1_1, $2_1)));
 }
 
 function $138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  return Math_fround(Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1)) * $1_1));
 }
 
 function $139($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0);
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, $1_1 + 16 | 0, $1_1 + 12 | 0);
  $2_1 = $137(HEAPF32[$1_1 + 16 >> 2], HEAPF32[$1_1 + 20 >> 2], HEAPF32[$1_1 + 24 >> 2]);
  global$0 = $1_1 + 32 | 0;
  return Math_fround(Math_fround($2_1 + HEAPF32[$1_1 + 12 >> 2]));
 }
 
 function $140($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 40 >> 2]]($2_1, $0_1) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0;
  HEAP32[$1_1 >> 2] = $4_1;
  if ($4_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1, $3_1)
  }
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = $0_1;
  return 9835;
 }
 
 function $141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 52 >> 2]]($0_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1346455635), wasm2js_i32$5 = $0_1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $143($0_1) {
  $0_1 = $0_1 | 0;
  return 12;
 }
 
 function $144($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  $8_1 = $2_1 + 4 | 0;
  $9_1 = $2_1 + 8 | 0;
  $145($7_1 - -64 | 0, HEAPF32[$2_1 >> 2], HEAPF32[$8_1 >> 2], HEAPF32[$9_1 >> 2], $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($7_1 + 32 | 0, $0_1, $7_1 - -64 | 0);
  $146($7_1 + 48 | 0, $1_1, HEAPF32[$7_1 + 32 >> 2], HEAPF32[$7_1 + 36 >> 2], HEAPF32[$7_1 + 40 >> 2]);
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAPF32[$7_1 + 8 >> 2] = -HEAPF32[$7_1 + 72 >> 2];
  HEAPF32[$7_1 + 4 >> 2] = -HEAPF32[$7_1 + 68 >> 2];
  HEAPF32[$7_1 >> 2] = -HEAPF32[$7_1 + 64 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($7_1 + 16 | 0, $0_1, $7_1);
  $146($7_1 + 32 | 0, $1_1, HEAPF32[$7_1 + 16 >> 2], HEAPF32[$7_1 + 20 >> 2], HEAPF32[$7_1 + 24 >> 2]);
  $0_1 = $7_1 + 56 | 0;
  HEAPF32[$3_1 >> 2] = Math_fround(Math_fround(HEAPF32[$7_1 + 48 >> 2] * HEAPF32[$2_1 >> 2]) + Math_fround(HEAPF32[$7_1 + 52 >> 2] * HEAPF32[$8_1 >> 2])) + Math_fround(HEAPF32[$0_1 >> 2] * HEAPF32[$9_1 >> 2]);
  $1_1 = $7_1 + 40 | 0;
  HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAPF32[$7_1 + 32 >> 2] * HEAPF32[$2_1 >> 2]) + Math_fround(HEAPF32[$7_1 + 36 >> 2] * HEAPF32[$8_1 >> 2])) + Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$9_1 >> 2]);
  $9_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $6_1 + 8 | 0;
  $8_1 = $2_1;
  HEAP32[$8_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $8_1 = HEAP32[$7_1 + 36 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$7_1 + 32 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $8_1;
  $9_1 = HEAP32[$0_1 + 4 >> 2];
  $8_1 = $5_1 + 8 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $9_1 = HEAP32[$7_1 + 52 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$7_1 + 48 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $9_1;
  $10_1 = HEAPF32[$3_1 >> 2];
  $11_1 = HEAPF32[$4_1 >> 2];
  if ($10_1 > $11_1) {
   HEAPF32[$3_1 >> 2] = $11_1;
   HEAPF32[$4_1 >> 2] = $10_1;
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $0_1 = HEAP32[$7_1 + 52 >> 2];
   HEAP32[$6_1 >> 2] = HEAP32[$7_1 + 48 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$7_1 + 36 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 + 32 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$8_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $0_1;
  }
  global$0 = $7_1 + 80 | 0;
 }
 
 function $145($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5_1 = $160(HEAPF32[$4_1 >> 2], HEAPF32[$4_1 + 16 >> 2], HEAPF32[$4_1 + 32 >> 2], $1_1, $2_1, $3_1);
  $6_1 = $160(HEAPF32[$4_1 + 4 >> 2], HEAPF32[$4_1 + 20 >> 2], HEAPF32[$4_1 + 36 >> 2], $1_1, $2_1, $3_1);
  $7_1 = HEAPF32[$4_1 + 40 >> 2];
  $8_1 = HEAPF32[$4_1 + 24 >> 2];
  $9_1 = HEAPF32[$4_1 + 8 >> 2];
  HEAP32[$0_1 + 12 >> 2] = 0;
  (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = $160($9_1, $8_1, $7_1, $1_1, $2_1, $3_1)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
  HEAPF32[$0_1 + 4 >> 2] = $6_1;
  HEAPF32[$0_1 >> 2] = $5_1;
 }
 
 function $146($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $148($5_1, $2_1, $3_1, $4_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2], HEAPF32[$1_1 + 16 >> 2], HEAPF32[$1_1 + 20 >> 2], HEAPF32[$1_1 + 24 >> 2], HEAPF32[$1_1 + 32 >> 2], HEAPF32[$1_1 + 36 >> 2], HEAPF32[$1_1 + 40 >> 2]);
  $698($0_1, HEAPF32[$5_1 >> 2], HEAPF32[$5_1 + 4 >> 2], HEAPF32[$5_1 + 8 >> 2], HEAPF32[$1_1 + 48 >> 2], HEAPF32[$1_1 + 52 >> 2], HEAPF32[$1_1 + 56 >> 2]);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $147($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0);
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    switch (HEAP32[$1_1 + 4 >> 2]) {
    case 8:
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     $0_1 = $0_1 + 8 | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     break label$1;
    case 0:
     HEAP32[$0_1 + 12 >> 2] = 0;
     $4_1 = HEAPF32[$1_1 + 32 >> 2];
     HEAPF32[$0_1 >> 2] = HEAPF32[$2_1 >> 2] >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
     $4_1 = HEAPF32[$1_1 + 40 >> 2];
     HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$2_1 + 8 >> 2] >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
     $4_1 = HEAPF32[$1_1 + 36 >> 2];
     HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$2_1 + 4 >> 2] >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
     break label$1;
    case 1:
     $5_1 = HEAPF32[$2_1 >> 2];
     $4_1 = HEAPF32[$2_1 + 4 >> 2];
     $6_1 = HEAPF32[$2_1 + 8 >> 2];
     $2_1 = $1_1 + 60 | 0;
     $148($3_1 + 32 | 0, $5_1, $4_1, $6_1, HEAPF32[$2_1 >> 2], HEAPF32[$1_1 - -64 >> 2], HEAPF32[$1_1 + 68 >> 2], HEAPF32[$1_1 + 76 >> 2], HEAPF32[$1_1 + 80 >> 2], HEAPF32[$1_1 + 84 >> 2], HEAPF32[$1_1 + 92 >> 2], HEAPF32[$1_1 + 96 >> 2], HEAPF32[$1_1 + 100 >> 2]);
     HEAP32[$0_1 + 12 >> 2] = 0;
     $4_1 = HEAPF32[$3_1 + 32 >> 2];
     $6_1 = HEAPF32[$3_1 + 36 >> 2];
     $1_1 = $4_1 < $6_1;
     $1_1 = $2_1 + ((HEAPF32[$3_1 + 40 >> 2] > ($1_1 ? $6_1 : $4_1) ? 2 : $1_1) << 4) | 0;
     HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$1_1 + 8 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     break label$1;
    case 13:
     $13_1 = $1_1 + 40 | 0;
     $18_1 = HEAP32[$13_1 + 4 >> 2];
     $8_1 = $3_1 + 40 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $18_1;
     $8_1 = HEAP32[$1_1 + 36 >> 2];
     HEAP32[$3_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2];
     HEAP32[$3_1 + 36 >> 2] = $8_1;
     HEAP32[$3_1 + 28 >> 2] = 0;
     HEAPF32[$3_1 + 16 >> 2] = HEAPF32[$2_1 >> 2];
     $5_1 = HEAPF32[$2_1 + 4 >> 2];
     HEAPF32[$3_1 + 20 >> 2] = $5_1;
     $4_1 = HEAPF32[$2_1 + 8 >> 2];
     HEAPF32[$3_1 + 24 >> 2] = $4_1;
     $2_1 = 1;
     $8_1 = 2;
     label$10 : {
      label$11 : {
       label$12 : {
        $1_1 = HEAP32[$1_1 + 56 >> 2];
        switch ($1_1 - 1 | 0) {
        case 1:
         break label$11;
        case 0:
         break label$12;
        default:
         break label$10;
        };
       }
       $2_1 = 0;
       $11_1 = 1;
       break label$10;
      }
      $2_1 = 0;
      $11_1 = 2;
      $8_1 = 1;
      $4_1 = $5_1;
     }
     $5_1 = HEAPF32[($3_1 + 32 | 0) + ($1_1 << 2) >> 2];
     $1_1 = $2_1 << 2;
     $9_1 = HEAPF32[($1_1 | $3_1 + 32) >> 2];
     $7_1 = HEAPF32[($1_1 | $3_1 + 16) >> 2];
     $10_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($4_1 * $4_1))));
     label$13 : {
      if ($10_1 != Math_fround(0.0)) {
       $6_1 = Math_fround($9_1 / $10_1);
       HEAPF32[($2_1 << 2 | $3_1) >> 2] = $7_1 * $6_1;
       $1_1 = $11_1 << 2;
       HEAPF32[$1_1 + $3_1 >> 2] = HEAPF32[$1_1 + ($3_1 + 16 | 0) >> 2] < Math_fround(0.0) ? Math_fround(-$5_1) : $5_1;
       $6_1 = Math_fround($4_1 * $6_1);
       break label$13;
      }
      HEAPF32[($2_1 << 2 | $3_1) >> 2] = $9_1;
      $1_1 = $11_1 << 2;
      HEAPF32[$1_1 + $3_1 >> 2] = HEAPF32[$1_1 + ($3_1 + 16 | 0) >> 2] < Math_fround(0.0) ? Math_fround(-$5_1) : $5_1;
     }
     $4_1 = HEAPF32[$3_1 >> 2];
     HEAPF32[($8_1 << 2) + $3_1 >> 2] = $6_1;
     HEAP32[$0_1 + 12 >> 2] = 0;
     HEAPF32[$0_1 >> 2] = $4_1;
     $1_1 = HEAP32[$3_1 + 8 >> 2];
     HEAP32[$0_1 + 4 >> 2] = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$0_1 + 8 >> 2] = $1_1;
     break label$1;
    case 10:
     $11_1 = HEAP32[$1_1 + 56 >> 2];
     $8_1 = $11_1 << 2;
     $14_1 = HEAPF32[($8_1 + $1_1 | 0) + 32 >> 2];
     $4_1 = Math_fround(1.0);
     $6_1 = HEAPF32[$2_1 >> 2];
     $5_1 = HEAPF32[$2_1 + 4 >> 2];
     $9_1 = HEAPF32[$2_1 + 8 >> 2];
     $7_1 = $149($6_1, $5_1, $9_1);
     if (!($7_1 < Math_fround(1.4210854715202004e-14))) {
      $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($7_1)));
      $15_1 = Math_fround($4_1 * $9_1);
      $16_1 = Math_fround($4_1 * $5_1);
      $4_1 = Math_fround($4_1 * $6_1);
     }
     $1_1 = $3_1 + 40 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$3_1 + 32 >> 2] = 0;
     HEAP32[$3_1 + 36 >> 2] = 0;
     HEAPF32[$8_1 + ($3_1 + 32 | 0) >> 2] = $14_1;
     $6_1 = Math_fround(-999999984306749440.0);
     $5_1 = Math_fround(0.0);
     $9_1 = Math_fround(0.0);
     $7_1 = HEAPF32[$3_1 + 32 >> 2];
     $10_1 = HEAPF32[$3_1 + 36 >> 2];
     $12_1 = HEAPF32[$1_1 >> 2];
     $17_1 = Math_fround(Math_fround(Math_fround($7_1 * $4_1) + Math_fround($10_1 * $16_1)) + Math_fround($12_1 * $15_1));
     if ($17_1 > Math_fround(-999999984306749440.0)) {
      $5_1 = $10_1;
      $9_1 = $12_1;
      $19_1 = $7_1;
      $6_1 = $17_1;
     }
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$3_1 + 32 >> 2] = 0;
     HEAP32[$3_1 + 36 >> 2] = 0;
     HEAPF32[($3_1 + 32 | 0) + ($11_1 << 2) >> 2] = -$14_1;
     $7_1 = HEAPF32[$1_1 >> 2];
     $10_1 = HEAPF32[$3_1 + 32 >> 2];
     $12_1 = HEAPF32[$3_1 + 36 >> 2];
     HEAP32[$0_1 + 12 >> 2] = 0;
     $1_1 = Math_fround(Math_fround(Math_fround($4_1 * $10_1) + Math_fround($16_1 * $12_1)) + Math_fround($15_1 * $7_1)) > $6_1;
     HEAPF32[$0_1 + 8 >> 2] = $1_1 ? $7_1 : $9_1;
     HEAPF32[$0_1 + 4 >> 2] = $1_1 ? $12_1 : $5_1;
     HEAPF32[$0_1 >> 2] = $1_1 ? $10_1 : $19_1;
     break label$1;
    case 5:
     $150($0_1, HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], HEAP32[$1_1 + 96 >> 2], HEAP32[$1_1 + 100 >> 2], $1_1 + 16 | 0);
     break label$1;
    case 4:
     $150($0_1, HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], HEAP32[$1_1 + 108 >> 2], HEAP32[$1_1 + 100 >> 2], $1_1 + 16 | 0);
     break label$1;
    default:
     break label$2;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($0_1, $1_1, $2_1);
  }
  global$0 = $3_1 + 48 | 0;
 }
 
 function $148($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1) {
  var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $4_1 = $160($1_1, $2_1, $3_1, $4_1, $5_1, $6_1);
  $5_1 = $160($1_1, $2_1, $3_1, $7_1, $8_1, $9_1);
  HEAP32[$0_1 + 12 >> 2] = 0;
  (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = $160($1_1, $2_1, $3_1, $10_1, $11_1, $12_1)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
  HEAPF32[$0_1 + 4 >> 2] = $5_1;
  HEAPF32[$0_1 >> 2] = $4_1;
 }
 
 function $149($0_1, $1_1, $2_1) {
  return $160($0_1, $1_1, $2_1, $0_1, $1_1, $2_1);
 }
 
 function $150($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[$7_1 + 28 >> 2] = 0;
  HEAPF32[$7_1 + 24 >> 2] = HEAPF32[$6_1 + 8 >> 2] * $3_1;
  HEAPF32[$7_1 + 20 >> 2] = HEAPF32[$6_1 + 4 >> 2] * $2_1;
  HEAPF32[$7_1 + 16 >> 2] = HEAPF32[$6_1 >> 2] * $1_1;
  $5_1 = $151($7_1 + 16 | 0, $4_1, $5_1, $7_1 + 12 | 0);
  HEAP32[$0_1 + 12 >> 2] = 0;
  $4_1 = ((($5_1 | 0) > 0 ? $5_1 : 0) << 4) + $4_1 | 0;
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$4_1 + 8 >> 2] * HEAPF32[$6_1 + 8 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$4_1 + 4 >> 2] * HEAPF32[$6_1 + 4 >> 2];
  HEAPF32[$0_1 >> 2] = HEAPF32[$4_1 >> 2] * HEAPF32[$6_1 >> 2];
  global$0 = $7_1 + 32 | 0;
 }
 
 function $151($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0;
  $8_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $4_1 = Math_fround(-3402823466385288598117041.0e14);
  $2_1 = -1;
  while (1) {
   if (($5_1 | 0) != ($8_1 | 0)) {
    $6_1 = $160(HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2], HEAPF32[$0_1 >> 2], HEAPF32[$0_1 + 4 >> 2], HEAPF32[$0_1 + 8 >> 2]);
    $7_1 = $6_1 > $4_1;
    $4_1 = $7_1 ? $6_1 : $4_1;
    $2_1 = $7_1 ? $5_1 : $2_1;
    $1_1 = $1_1 + 16 | 0;
    $5_1 = $5_1 + 1 | 0;
    continue;
   }
   break;
  };
  HEAPF32[$3_1 >> 2] = $4_1;
  return $2_1;
 }
 
 function $152($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $6_1 = $2_1 + 8 | 0;
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  $7_1 = $3_1 + 24 | 0;
  $5_1 = $7_1;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $8_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 20 >> 2] = $5_1;
  if ($149(HEAPF32[$3_1 + 16 >> 2], HEAPF32[$3_1 + 20 >> 2], HEAPF32[$7_1 >> 2]) < Math_fround(1.4210854715202004e-14)) {
   HEAP32[$3_1 + 24 >> 2] = -1082130432;
   HEAP32[$3_1 + 28 >> 2] = 0;
   HEAP32[$3_1 + 16 >> 2] = -1082130432;
   HEAP32[$3_1 + 20 >> 2] = -1082130432;
  }
  $147($3_1, $1_1, $153($3_1 + 16 | 0));
  label$2 : {
   label$3 : {
    switch (HEAP32[$1_1 + 4 >> 2]) {
    case 8:
     $4_1 = Math_fround(HEAPF32[$1_1 + 32 >> 2] * HEAPF32[$1_1 + 16 >> 2]);
     break label$2;
    case 0:
    case 1:
    case 4:
    case 5:
    case 10:
    case 11:
    case 13:
     $4_1 = HEAPF32[$1_1 + 48 >> 2];
     break label$2;
    default:
     break label$3;
    };
   }
   $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  }
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = Math_fround($4_1 * HEAPF32[$3_1 + 24 >> 2]) + HEAPF32[$3_1 + 8 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = Math_fround($4_1 * HEAPF32[$3_1 + 20 >> 2]) + HEAPF32[$3_1 + 4 >> 2];
  HEAPF32[$0_1 >> 2] = Math_fround($4_1 * HEAPF32[$3_1 + 16 >> 2]) + HEAPF32[$3_1 >> 2];
  global$0 = $3_1 + 32 | 0;
 }
 
 function $153($0_1) {
  return $167($0_1, $137(HEAPF32[$0_1 >> 2], HEAPF32[$0_1 + 4 >> 2], HEAPF32[$0_1 + 8 >> 2]));
 }
 
 function $154($0_1) {
  var $1_1 = 0;
  HEAP32[$0_1 + 12 >> 2] = -1;
  HEAP32[$0_1 + 4 >> 2] = 35;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 48 >> 2] = 1025758986;
  HEAP32[$0_1 + 16 >> 2] = 1065353216;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  HEAP32[$0_1 >> 2] = 9920;
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0_1;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  $2_1 = HEAPF32[$1_1 >> 2];
  $3_1 = HEAPF32[$1_1 + 4 >> 2];
  $4_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAPF32[$0_1 + 24 >> 2] = Math_abs($4_1);
  HEAPF32[$0_1 + 20 >> 2] = Math_abs($3_1);
  HEAPF32[$0_1 + 16 >> 2] = Math_abs($2_1);
 }
 
 function $157($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($0_1, $1_1, $2_1);
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1)) != Math_fround(0.0)) {
   $6_1 = $2_1 + 8 | 0;
   $8_1 = HEAP32[$6_1 + 4 >> 2];
   $7_1 = $3_1 + 24 | 0;
   $4_1 = $7_1;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $8_1;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $4_1;
   if ($149(HEAPF32[$3_1 + 16 >> 2], HEAPF32[$3_1 + 20 >> 2], HEAPF32[$7_1 >> 2]) < Math_fround(1.4210854715202004e-14)) {
    HEAP32[$3_1 + 24 >> 2] = -1082130432;
    HEAP32[$3_1 + 28 >> 2] = 0;
    HEAP32[$3_1 + 16 >> 2] = -1082130432;
    HEAP32[$3_1 + 20 >> 2] = -1082130432;
   }
   $153($3_1 + 16 | 0);
   $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
   HEAP32[$3_1 + 12 >> 2] = 0;
   HEAPF32[$3_1 + 8 >> 2] = $5_1 * HEAPF32[$3_1 + 24 >> 2];
   HEAPF32[$3_1 + 4 >> 2] = $5_1 * HEAPF32[$3_1 + 20 >> 2];
   HEAPF32[$3_1 >> 2] = $5_1 * HEAPF32[$3_1 + 16 >> 2];
   $158($0_1, $3_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $158($0_1, $1_1) {
  HEAPF32[$0_1 >> 2] = HEAPF32[$1_1 >> 2] + HEAPF32[$0_1 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$1_1 + 4 >> 2] + HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$1_1 + 8 >> 2] + HEAPF32[$0_1 + 8 >> 2];
  return $0_1;
 }
 
 function $159($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $7_1 = $4_1 + 72 | 0;
  while (1) {
   if (($5_1 | 0) == 12) {
    global$0 = $4_1 + 80 | 0
   } else {
    HEAP32[$7_1 >> 2] = 0;
    HEAP32[$7_1 + 4 >> 2] = 0;
    HEAP32[$4_1 + 64 >> 2] = 0;
    HEAP32[$4_1 + 68 >> 2] = 0;
    $6_1 = ($4_1 - -64 | 0) + $5_1 | 0;
    HEAP32[$6_1 >> 2] = 1065353216;
    $145($4_1 + 32 | 0, HEAPF32[$4_1 + 64 >> 2], HEAPF32[$4_1 + 68 >> 2], HEAPF32[$7_1 >> 2], $1_1);
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($4_1 + 48 | 0, $0_1, $4_1 + 32 | 0);
    $146($4_1 + 32 | 0, $1_1, HEAPF32[$4_1 + 48 >> 2], HEAPF32[$4_1 + 52 >> 2], HEAPF32[$4_1 + 56 >> 2]);
    HEAP32[$6_1 >> 2] = -1082130432;
    $6_1 = ($4_1 + 32 | 0) + $5_1 | 0;
    HEAPF32[$3_1 + $5_1 >> 2] = $8_1 + HEAPF32[$6_1 >> 2];
    $145($4_1, HEAPF32[$4_1 + 64 >> 2], HEAPF32[$4_1 + 68 >> 2], HEAPF32[$7_1 >> 2], $1_1);
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($4_1 + 16 | 0, $0_1, $4_1);
    $146($4_1 + 32 | 0, $1_1, HEAPF32[$4_1 + 16 >> 2], HEAPF32[$4_1 + 20 >> 2], HEAPF32[$4_1 + 24 >> 2]);
    HEAPF32[$2_1 + $5_1 >> 2] = HEAPF32[$6_1 >> 2] - $8_1;
    $5_1 = $5_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $160($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  return Math_fround(Math_fround(Math_fround($0_1 * $3_1) + Math_fround($1_1 * $4_1)) + Math_fround($2_1 * $5_1));
 }
 
 function $161($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 10056;
  $124($0_1 + 44 | 0);
  $2_1 = $0_1 + 24 | 0;
  $1_1 = $0_1 + 28 | 0;
  $162($2_1, HEAP32[$1_1 >> 2]);
  $163($2_1);
  HEAP32[$0_1 + 36 >> 2] = 0;
  HEAP8[$0_1 + 40 | 0] = 1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $124($0_1 + 4 | 0);
  return $0_1 | 0;
 }
 
 function $162($0_1, $1_1) {
  var $2_1 = 0;
  $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
  while (1) {
   if ($1_1) {
    $124(HEAP32[$0_1 + 12 >> 2] + $2_1 | 0);
    $1_1 = $1_1 - 1 | 0;
    $2_1 = $2_1 + 36 | 0;
    continue;
   }
   break;
  };
 }
 
 function $163($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 12 >> 2];
  if ($1_1) {
   if (HEAPU8[$0_1 + 16 | 0]) {
    $121($1_1)
   }
   HEAP32[$0_1 + 12 >> 2] = 0;
  }
 }
 
 function $164($0_1) {
  $0_1 = $0_1 | 0;
  $121($161($0_1));
 }
 
 function $165($0_1) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = HEAP32[$0_1 + 28 >> 2];
  $8_1 = (($4_1 | 0) > 0 ? $4_1 : 0) + 1 | 0;
  label$1 : {
   while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       switch ($5_1 | 0) {
       case 0:
        $1_1 = Math_fround(HEAPF32[$0_1 + 88 >> 2] + HEAPF32[$0_1 + 72 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 84 >> 2] + HEAPF32[$0_1 + 68 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 80 >> 2] + HEAPF32[$0_1 + 64 >> 2]);
        break label$4;
       case 1:
        $1_1 = Math_fround(HEAPF32[$0_1 + 72 >> 2] - HEAPF32[$0_1 + 88 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 84 >> 2] + HEAPF32[$0_1 + 68 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 80 >> 2] + HEAPF32[$0_1 + 64 >> 2]);
        break label$4;
       case 2:
        $1_1 = Math_fround(HEAPF32[$0_1 + 88 >> 2] + HEAPF32[$0_1 + 72 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 68 >> 2] - HEAPF32[$0_1 + 84 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 80 >> 2] + HEAPF32[$0_1 + 64 >> 2]);
        break label$4;
       case 3:
        $1_1 = Math_fround(HEAPF32[$0_1 + 72 >> 2] - HEAPF32[$0_1 + 88 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 68 >> 2] - HEAPF32[$0_1 + 84 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 80 >> 2] + HEAPF32[$0_1 + 64 >> 2]);
        break label$4;
       case 4:
        $1_1 = Math_fround(HEAPF32[$0_1 + 88 >> 2] + HEAPF32[$0_1 + 72 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 84 >> 2] + HEAPF32[$0_1 + 68 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 64 >> 2] - HEAPF32[$0_1 + 80 >> 2]);
        break label$4;
       case 5:
        $1_1 = Math_fround(HEAPF32[$0_1 + 72 >> 2] - HEAPF32[$0_1 + 88 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 84 >> 2] + HEAPF32[$0_1 + 68 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 64 >> 2] - HEAPF32[$0_1 + 80 >> 2]);
        break label$4;
       case 6:
        $1_1 = Math_fround(HEAPF32[$0_1 + 88 >> 2] + HEAPF32[$0_1 + 72 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 68 >> 2] - HEAPF32[$0_1 + 84 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 64 >> 2] - HEAPF32[$0_1 + 80 >> 2]);
        break label$4;
       case 8:
        break label$3;
       case 7:
        break label$5;
       default:
        break label$4;
       };
      }
      $1_1 = Math_fround(HEAPF32[$0_1 + 72 >> 2] - HEAPF32[$0_1 + 88 >> 2]);
      $2_1 = Math_fround(HEAPF32[$0_1 + 68 >> 2] - HEAPF32[$0_1 + 84 >> 2]);
      $3_1 = Math_fround(HEAPF32[$0_1 + 64 >> 2] - HEAPF32[$0_1 + 80 >> 2]);
     }
     $7_1 = 20;
     $4_1 = $8_1;
     while (1) {
      $4_1 = $4_1 - 1 | 0;
      if ($4_1) {
       $6_1 = HEAP32[$0_1 + 36 >> 2] + $7_1 | 0;
       $7_1 = $7_1 + 36 | 0;
       if (!(Math_fround(HEAPF32[$6_1 + 12 >> 2] + Math_fround(Math_fround(Math_fround($3_1 * HEAPF32[$6_1 >> 2]) + Math_fround($2_1 * HEAPF32[$6_1 + 4 >> 2])) + Math_fround($1_1 * HEAPF32[$6_1 + 8 >> 2]))) > Math_fround(0.0))) {
        continue
       }
       break label$1;
      }
      break;
     };
     $5_1 = $5_1 + 1 | 0;
     continue;
    }
    break;
   };
   $5_1 = 8;
  }
  return $5_1 >>> 0 > 7;
 }
 
 function $166($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = Math_fround(0), $31_1 = Math_fround(0);
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP32[$0_1 + 64 >> 2] = 0;
  HEAP32[$0_1 + 68 >> 2] = 0;
  $1_1 = $0_1 + 72 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $19_1 = $0_1 - -64 | 0;
  label$1 : while (1) {
   if (HEAP32[$0_1 + 28 >> 2] <= ($5_1 | 0)) {
    $167($19_1, $6_1);
    HEAP32[$0_1 + 96 >> 2] = 2139095039;
    $1_1 = HEAP32[$0_1 + 28 >> 2];
    $2_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
    $6_1 = Math_fround(3402823466385288598117041.0e14);
    $1_1 = 20;
    while (1) {
     if ($2_1) {
      $5_1 = HEAP32[$0_1 + 36 >> 2] + $1_1 | 0;
      $3_1 = Math_fround(Math_abs(Math_fround(HEAPF32[$5_1 + 12 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$5_1 >> 2] * HEAPF32[$0_1 + 64 >> 2]) + Math_fround(HEAPF32[$5_1 + 4 >> 2] * HEAPF32[$0_1 + 68 >> 2])) + Math_fround(HEAPF32[$5_1 + 8 >> 2] * HEAPF32[$0_1 + 72 >> 2])))));
      if ($3_1 < $6_1) {
       HEAPF32[$0_1 + 96 >> 2] = $3_1;
       $6_1 = $3_1;
      }
      $2_1 = $2_1 - 1 | 0;
      $1_1 = $1_1 + 36 | 0;
      continue;
     } else {
      $2_1 = 0;
      $1_1 = HEAP32[$0_1 + 8 >> 2];
      $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
      $7_1 = Math_fround(-3402823466385288598117041.0e14);
      $9_1 = Math_fround(-3402823466385288598117041.0e14);
      $8_1 = Math_fround(-3402823466385288598117041.0e14);
      $10_1 = Math_fround(3402823466385288598117041.0e14);
      $11_1 = Math_fround(3402823466385288598117041.0e14);
      $3_1 = Math_fround(3402823466385288598117041.0e14);
     }
     break;
    };
    while (1) {
     if ($1_1) {
      $5_1 = HEAP32[$0_1 + 16 >> 2] + $2_1 | 0;
      $4_1 = HEAPF32[$5_1 >> 2];
      $8_1 = $4_1 > $8_1 ? $4_1 : $8_1;
      $11_1 = $4_1 < $11_1 ? $4_1 : $11_1;
      $4_1 = HEAPF32[$5_1 + 8 >> 2];
      $7_1 = $4_1 > $7_1 ? $4_1 : $7_1;
      $3_1 = $3_1 > $4_1 ? $4_1 : $3_1;
      $4_1 = HEAPF32[$5_1 + 4 >> 2];
      $9_1 = $4_1 > $9_1 ? $4_1 : $9_1;
      $10_1 = $4_1 < $10_1 ? $4_1 : $10_1;
      $1_1 = $1_1 - 1 | 0;
      $2_1 = $2_1 + 16 | 0;
      continue;
     }
     break;
    };
    HEAP32[$0_1 + 128 >> 2] = 0;
    $16_1 = Math_fround($7_1 - $3_1);
    HEAPF32[$0_1 + 124 >> 2] = $16_1;
    $4_1 = Math_fround($9_1 - $10_1);
    HEAPF32[$0_1 + 120 >> 2] = $4_1;
    $13_1 = Math_fround($8_1 - $11_1);
    HEAPF32[$0_1 + 116 >> 2] = $13_1;
    $6_1 = Math_fround($6_1 / Math_fround(1.7320507764816284));
    HEAPF32[$0_1 + 88 >> 2] = $6_1;
    HEAP32[$0_1 + 112 >> 2] = 0;
    HEAPF32[$0_1 + 108 >> 2] = $7_1 + $3_1;
    HEAPF32[$0_1 + 104 >> 2] = $9_1 + $10_1;
    HEAPF32[$0_1 + 100 >> 2] = $8_1 + $11_1;
    HEAPF32[$0_1 + 84 >> 2] = $6_1;
    HEAPF32[$0_1 + 80 >> 2] = $6_1;
    $1_1 = $4_1 > $13_1;
    $2_1 = $16_1 > ($1_1 ? $4_1 : $13_1) ? 2 : $1_1;
    $1_1 = $2_1 << 2;
    $5_1 = $1_1 + ($0_1 + 80 | 0) | 0;
    $3_1 = Math_fround(HEAPF32[$1_1 + ($0_1 + 116 | 0) >> 2] * Math_fround(.5));
    HEAPF32[$5_1 >> 2] = $3_1;
    $7_1 = Math_fround(Math_fround($3_1 - $6_1) * Math_fround(.0009765625));
    $1_1 = 1024;
    label$9 : {
     label$10 : {
      while (1) {
       if ($1_1) {
        if ($165($0_1)) {
         break label$10
        }
        $3_1 = Math_fround($3_1 - $7_1);
        HEAPF32[$5_1 >> 2] = $3_1;
        $1_1 = $1_1 - 1 | 0;
        continue;
       }
       break;
      };
      HEAPF32[$0_1 + 84 >> 2] = $6_1;
      HEAPF32[$0_1 + 88 >> 2] = $6_1;
      HEAPF32[$0_1 + 80 >> 2] = $6_1;
      break label$9;
     }
     $1_1 = 1 << $2_1 & 3;
     $2_1 = $0_1 + 80 | 0;
     $5_1 = ($1_1 << 2) + $2_1 | 0;
     $1_1 = $2_1 + ((1 << $1_1 & 3) << 2) | 0;
     $6_1 = Math_fround(Math_fround(HEAPF32[$0_1 + 96 >> 2] - $6_1) * Math_fround(.0009765625));
     $2_1 = 1025;
     while (1) {
      $2_1 = $2_1 - 1 | 0;
      if (!$2_1) {
       break label$9
      }
      $3_1 = HEAPF32[$1_1 >> 2];
      $7_1 = HEAPF32[$5_1 >> 2];
      HEAPF32[$5_1 >> 2] = $6_1 + $7_1;
      HEAPF32[$1_1 >> 2] = $6_1 + HEAPF32[$1_1 >> 2];
      if ($165($0_1)) {
       continue
      }
      break;
     };
     HEAPF32[$5_1 >> 2] = $7_1;
     HEAPF32[$1_1 >> 2] = $3_1;
    }
    global$0 = $12_1 + 16 | 0;
    return;
   }
   $1_1 = 0;
   $20_1 = Math_imul($5_1, 36);
   $14_1 = $20_1 + HEAP32[$0_1 + 36 >> 2] | 0;
   $21_1 = HEAP32[$14_1 + 4 >> 2];
   $2_1 = $21_1 - 2 | 0;
   $27_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = 4;
   $14_1 = HEAP32[$0_1 + 16 >> 2] + (HEAP32[HEAP32[$14_1 + 12 >> 2] >> 2] << 4) | 0;
   $28_1 = $14_1 + 8 | 0;
   $29_1 = $14_1 + 4 | 0;
   while (1) if (($1_1 | 0) == ($27_1 | 0)) {
    $5_1 = $5_1 + 1 | 0;
    continue label$1;
   } else {
    $22_1 = HEAP32[$0_1 + 16 >> 2];
    $15_1 = HEAP32[(HEAP32[$0_1 + 36 >> 2] + $20_1 | 0) + 12 >> 2];
    $18_1 = $22_1 + (HEAP32[$15_1 + (($1_1 + 2 | 0) % ($21_1 | 0) << 2) >> 2] << 4) | 0;
    $10_1 = HEAPF32[$18_1 >> 2];
    $3_1 = HEAPF32[$14_1 >> 2];
    $15_1 = $22_1 + (HEAP32[$2_1 + $15_1 >> 2] << 4) | 0;
    $11_1 = HEAPF32[$15_1 + 4 >> 2];
    $7_1 = HEAPF32[$29_1 >> 2];
    $4_1 = HEAPF32[$18_1 + 4 >> 2];
    $13_1 = HEAPF32[$15_1 >> 2];
    $16_1 = HEAPF32[$18_1 + 8 >> 2];
    $9_1 = HEAPF32[$28_1 >> 2];
    $23_1 = HEAPF32[$15_1 + 8 >> 2];
    HEAP32[$12_1 + 12 >> 2] = 0;
    $8_1 = Math_fround($7_1 - $11_1);
    $24_1 = Math_fround($9_1 - $16_1);
    $17_1 = Math_fround($9_1 - $23_1);
    $25_1 = Math_fround($7_1 - $4_1);
    $30_1 = Math_fround(Math_fround($8_1 * $24_1) - Math_fround($17_1 * $25_1));
    $31_1 = $17_1;
    $17_1 = Math_fround($3_1 - $10_1);
    $26_1 = Math_fround($3_1 - $13_1);
    $8_1 = Math_fround($137($30_1, Math_fround(Math_fround($31_1 * $17_1) - Math_fround($26_1 * $24_1)), Math_fround(Math_fround($26_1 * $25_1) - Math_fround($8_1 * $17_1))) * Math_fround(.5));
    HEAPF32[$12_1 + 8 >> 2] = $8_1 * Math_fround(Math_fround($16_1 + Math_fround($9_1 + $23_1)) * Math_fround(.3333333432674408));
    HEAPF32[$12_1 + 4 >> 2] = $8_1 * Math_fround(Math_fround($4_1 + Math_fround($7_1 + $11_1)) * Math_fround(.3333333432674408));
    HEAPF32[$12_1 >> 2] = $8_1 * Math_fround(Math_fround($10_1 + Math_fround($3_1 + $13_1)) * Math_fround(.3333333432674408));
    $158($19_1, $12_1);
    $6_1 = Math_fround($8_1 + $6_1);
    $2_1 = $2_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   };
  };
 }
 
 function $167($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAPF32[$2_1 + 12 >> 2] = Math_fround(1.0) / $1_1;
  $0_1 = $218($0_1, $2_1 + 12 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1;
 }
 
 function $168($0_1, $1_1, $2_1) {
  return !(+Math_fround(Math_abs($0_1)) > 1.0e-06 | +Math_fround(Math_abs($1_1)) > 1.0e-06 | +Math_fround(Math_abs($2_1)) > 1.0e-06);
 }
 
 function $169($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = -1;
  label$1 : {
   $3_1 = ($2_1 << 16) + ($1_1 << 16 >> 16) & HEAP32[$0_1 + 48 >> 2] - 1;
   if ($3_1 >>> 0 >= HEAPU32[$0_1 + 4 >> 2]) {
    break label$1
   }
   $3_1 = HEAP32[$0_1 + 12 >> 2] + ($3_1 << 2) | 0;
   $6_1 = $1_1 & 65535;
   while (1) {
    $4_1 = -1;
    $1_1 = HEAP32[$3_1 >> 2];
    if (($1_1 | 0) == -1) {
     break label$1
    }
    $3_1 = $1_1 << 2;
    $5_1 = $3_1 + HEAP32[$0_1 + 72 >> 2] | 0;
    if (HEAPU16[$5_1 >> 1] == ($6_1 | 0)) {
     $4_1 = $1_1;
     if (HEAPU16[$5_1 + 2 >> 1] == ($2_1 & 65535)) {
      break label$1
     }
    }
    $3_1 = $3_1 + HEAP32[$0_1 + 32 >> 2] | 0;
    continue;
   };
  }
  return $4_1;
 }
 
 function $170($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[$3_1 >> 2] = 2139095039;
  HEAP32[$4_1 >> 2] = -8388609;
  $9_1 = HEAP32[$0_1 + 8 >> 2];
  $9_1 = ($9_1 | 0) > 0 ? $9_1 : 0;
  while (1) {
   if (!$9_1) {
    $10_1 = HEAPF32[$4_1 >> 2];
    $13_1 = HEAPF32[$3_1 >> 2];
    if ($10_1 < $13_1) {
     HEAPF32[$3_1 >> 2] = $10_1;
     HEAPF32[$4_1 >> 2] = $13_1;
     $0_1 = $5_1 + 8 | 0;
     $2_1 = HEAP32[$0_1 >> 2];
     $3_1 = HEAP32[$0_1 + 4 >> 2];
     $1_1 = $6_1 + 8 | 0;
     $4_1 = $1_1;
     $9_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $9_1;
     $0_1 = HEAP32[$5_1 >> 2];
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     $9_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $9_1;
     HEAP32[$6_1 >> 2] = $0_1;
     HEAP32[$6_1 + 4 >> 2] = $4_1;
     HEAP32[$1_1 >> 2] = $2_1;
     HEAP32[$1_1 + 4 >> 2] = $3_1;
    }
    global$0 = $8_1 + 32 | 0;
    return;
   }
   $7_1 = HEAP32[$0_1 + 16 >> 2] + $14_1 | 0;
   $146($8_1, $1_1, HEAPF32[$7_1 >> 2], HEAPF32[$7_1 + 4 >> 2], HEAPF32[$7_1 + 8 >> 2]);
   $10_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$8_1 >> 2] * HEAPF32[$2_1 >> 2]) + Math_fround(HEAPF32[$8_1 + 4 >> 2] * HEAPF32[$2_1 + 4 >> 2])) + Math_fround(HEAPF32[$8_1 + 8 >> 2] * HEAPF32[$2_1 + 8 >> 2]));
   if ($10_1 < HEAPF32[$3_1 >> 2]) {
    HEAPF32[$3_1 >> 2] = $10_1;
    $7_1 = HEAP32[$8_1 + 4 >> 2];
    HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $7_1;
    $11_1 = $8_1 + 8 | 0;
    $12_1 = HEAP32[$11_1 + 4 >> 2];
    $7_1 = $5_1 + 8 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $12_1;
   }
   if ($10_1 > HEAPF32[$4_1 >> 2]) {
    HEAPF32[$4_1 >> 2] = $10_1;
    $7_1 = HEAP32[$8_1 + 4 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $7_1;
    $11_1 = $8_1 + 8 | 0;
    $12_1 = HEAP32[$11_1 + 4 >> 2];
    $7_1 = $6_1 + 8 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $12_1;
   }
   $9_1 = $9_1 - 1 | 0;
   $14_1 = $14_1 + 16 | 0;
   continue;
  };
 }
 
 function $171($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $9_1 = $4_1;
  $7_1 = __wasm_i64_mul($4_1, 0, $1_1, 0);
  $10_1 = i64toi32_i32$HIGH_BITS;
  $5_1 = $3_1;
  $11_1 = $2_1;
  $4_1 = 0;
  $6_1 = __wasm_i64_mul($5_1, 0, $2_1, $4_1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $4_1 = __wasm_i64_mul($5_1, 0, $1_1, 0);
  $8_1 = 0 + $4_1 | 0;
  $1_1 = $6_1 + $7_1 | 0;
  $2_1 = $6_1 >>> 0 > $1_1 >>> 0;
  $5_1 = $1_1 + i64toi32_i32$HIGH_BITS | 0;
  $5_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  $4_1 = $8_1;
  HEAP32[$0_1 >> 2] = $4_1;
  HEAP32[$0_1 + 4 >> 2] = $5_1;
  $5_1 = $1_1 >>> 0 > $5_1 >>> 0;
  $1_1 = $10_1;
  $7_1 = __wasm_i64_mul($11_1, 0, $9_1, 0) + $1_1 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $4_1 = $1_1 >>> 0 > $7_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $6_1 = $3_1 + $7_1 | 0;
  $1_1 = $4_1;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $2_1 + $6_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $5_1 + $3_1 | 0;
  HEAP32[$0_1 + 8 >> 2] = $3_1;
  HEAP32[$0_1 + 12 >> 2] = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
 }
 
 function $172($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $6_1 = HEAP32[$0_1 + 16 >> 2];
  $2_1 = HEAP32[$1_1 + 16 >> 2];
  label$1 : {
   if (($6_1 | 0) != ($2_1 | 0)) {
    $2_1 = $6_1 - $2_1 | 0;
    break label$1;
   }
   $2_1 = 0;
   if (!$6_1) {
    break label$1
   }
   $171($3_1 + 16 | 0, HEAP32[$0_1 >> 2], HEAP32[$0_1 + 4 >> 2], HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 12 >> 2]);
   $171($3_1, HEAP32[$0_1 + 8 >> 2], HEAP32[$0_1 + 12 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
   $1_1 = HEAP32[$3_1 + 28 >> 2];
   $2_1 = HEAP32[$3_1 + 12 >> 2];
   $5_1 = HEAP32[$3_1 + 24 >> 2];
   $0_1 = HEAP32[$3_1 + 8 >> 2];
   $4_1 = -1;
   label$3 : {
    if (($1_1 | 0) == ($2_1 | 0) & $5_1 >>> 0 < $0_1 >>> 0 | $1_1 >>> 0 < $2_1 >>> 0) {
     break label$3
    }
    $4_1 = 1;
    if (($1_1 | 0) == ($2_1 | 0) & $5_1 >>> 0 > $0_1 >>> 0 | $1_1 >>> 0 > $2_1 >>> 0) {
     break label$3
    }
    $1_1 = HEAP32[$3_1 + 20 >> 2];
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = HEAP32[$3_1 + 16 >> 2];
    $0_1 = HEAP32[$3_1 >> 2];
    $4_1 = -1;
    if (($1_1 | 0) == ($2_1 | 0) & $5_1 >>> 0 < $0_1 >>> 0 | $1_1 >>> 0 < $2_1 >>> 0) {
     break label$3
    }
    $4_1 = ($1_1 | 0) == ($2_1 | 0) & $5_1 >>> 0 > $0_1 >>> 0 | $1_1 >>> 0 > $2_1 >>> 0;
   }
   $2_1 = Math_imul($6_1, $4_1);
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1;
 }
 
 function $173($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $0_1 + 48 | 0;
  $4_1 = $174($3_1);
  $3_1 = $174($3_1);
  HEAP32[$4_1 + 8 >> 2] = $3_1;
  HEAP32[$4_1 + 12 >> 2] = $2_1;
  HEAP32[$4_1 + 16 >> 2] = 0;
  $2_1 = HEAP32[$0_1 + 100 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $2_1;
  HEAP32[$3_1 + 8 >> 2] = $4_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  HEAP32[$3_1 + 16 >> 2] = 0;
  HEAP32[$3_1 + 20 >> 2] = $2_1;
  $1_1 = HEAP32[$0_1 + 116 >> 2];
  $2_1 = $1_1 + 1 | 0;
  HEAP32[$0_1 + 116 >> 2] = $2_1;
  if (($1_1 | 0) >= HEAP32[$0_1 + 120 >> 2]) {
   HEAP32[$0_1 + 120 >> 2] = $2_1
  }
  return $4_1;
 }
 
 function $174($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 + 8 >> 2];
   if ($2_1) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   label$2 : {
    if ($1_1) {
     HEAP32[$0_1 + 4 >> 2] = HEAP32[$1_1 + 8 >> 2];
     break label$2;
    }
    $1_1 = $120(12);
    HEAP32[$1_1 + 8 >> 2] = 0;
    $2_1 = HEAP32[$0_1 + 12 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $120(Math_imul($2_1, 24))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $2_1 = HEAP32[$0_1 >> 2];
    HEAP32[$0_1 >> 2] = $1_1;
    HEAP32[$1_1 + 8 >> 2] = $2_1;
   }
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   $5_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
   $2_1 = HEAP32[$1_1 >> 2];
   $3_1 = $2_1;
   $1_1 = 0;
   while (1) {
    if (($1_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    $6_1 = $3_1;
    $3_1 = $3_1 + 24 | 0;
    $1_1 = $1_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = ($4_1 | 0) > ($1_1 | 0) ? $3_1 : 0;
    continue;
   };
  }
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$2_1 >> 2];
  $0_1 = $2_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 16 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  return $2_1;
 }
 
 function $175($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0;
  $7_1 = global$0 - 144 | 0;
  global$0 = $7_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $4_1 = $2_1 - $1_1 | 0;
       switch ($4_1 | 0) {
       case 1:
        break label$3;
       case 2:
        break label$4;
       case 0:
        break label$5;
       default:
        break label$2;
       };
      }
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = 0;
      $0_1 = $3_1 + 8 | 0;
      HEAP32[$0_1 >> 2] = 0;
      HEAP32[$0_1 + 4 >> 2] = 0;
      break label$1;
     }
     $4_1 = HEAP32[HEAP32[$0_1 + 92 >> 2] + ($1_1 << 2) >> 2];
     $6_1 = HEAP32[$4_1 + 204 >> 2];
     label$6 : {
      $5_1 = HEAP32[$4_1 + 88 >> 2];
      $2_1 = HEAP32[$4_1 + 200 >> 2];
      $1_1 = HEAP32[$4_1 + 92 >> 2];
      if (!(($5_1 | 0) != ($2_1 | 0) | ($1_1 | 0) != ($6_1 | 0))) {
       $6_1 = $1_1;
       if (HEAP32[$4_1 + 96 >> 2] == HEAP32[$4_1 + 208 >> 2]) {
        break label$6
       }
      }
      $9_1 = $4_1 + 112 | 0;
      $10_1 = $1_1 - $6_1 | 0;
      $1_1 = $5_1 - $2_1 | 0;
      label$8 : {
       if (!($10_1 | $1_1)) {
        $1_1 = HEAP32[$4_1 + 96 >> 2] > HEAP32[$4_1 + 208 >> 2];
        $6_1 = $1_1 ? $9_1 : $4_1;
        HEAP32[$3_1 + 8 >> 2] = $6_1;
        HEAP32[$3_1 + 4 >> 2] = $6_1;
        HEAP32[$3_1 >> 2] = $6_1;
        HEAP32[$6_1 + 4 >> 2] = $6_1;
        HEAP32[$6_1 >> 2] = $6_1;
        $9_1 = $1_1 ? $4_1 : $9_1;
        $4_1 = $6_1;
        break label$8;
       }
       HEAP32[$4_1 + 4 >> 2] = $9_1;
       HEAP32[$4_1 >> 2] = $9_1;
       HEAP32[$4_1 + 116 >> 2] = $4_1;
       HEAP32[$4_1 + 112 >> 2] = $4_1;
       $2_1 = ($1_1 | 0) < 0;
       $6_1 = ($10_1 | 0) < 0;
       $1_1 = $2_1 | $6_1 & !$1_1;
       HEAP32[$3_1 + 4 >> 2] = $1_1 ? $9_1 : $4_1;
       HEAP32[$3_1 >> 2] = $1_1 ? $4_1 : $9_1;
       if (!($2_1 & !$10_1 ? 0 : !$6_1)) {
        HEAP32[$3_1 + 8 >> 2] = $4_1;
        $6_1 = $9_1;
        break label$8;
       }
       HEAP32[$3_1 + 8 >> 2] = $9_1;
       $6_1 = $4_1;
      }
      HEAP32[$3_1 + 12 >> 2] = $6_1;
      $1_1 = $173($0_1, $4_1, $9_1);
      HEAP32[$4_1 + 8 >> 2] = $1_1;
      $0_1 = HEAP32[$1_1 + 8 >> 2];
      HEAP32[$9_1 + 8 >> 2] = $0_1;
      HEAP32[$1_1 + 4 >> 2] = $1_1;
      HEAP32[$1_1 >> 2] = $1_1;
      HEAP32[$0_1 + 4 >> 2] = $0_1;
      HEAP32[$0_1 >> 2] = $0_1;
      break label$1;
     }
     HEAP32[$4_1 + 8 >> 2] = 0;
     HEAP32[$3_1 + 12 >> 2] = $4_1;
     HEAP32[$3_1 + 8 >> 2] = $4_1;
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     HEAP32[$3_1 >> 2] = $4_1;
     HEAP32[$4_1 + 4 >> 2] = $4_1;
     HEAP32[$4_1 >> 2] = $4_1;
     break label$1;
    }
    $0_1 = HEAP32[HEAP32[$0_1 + 92 >> 2] + ($1_1 << 2) >> 2];
    HEAP32[$0_1 + 8 >> 2] = 0;
    HEAP32[$3_1 + 12 >> 2] = $0_1;
    HEAP32[$3_1 + 8 >> 2] = $0_1;
    HEAP32[$3_1 + 4 >> 2] = $0_1;
    HEAP32[$3_1 >> 2] = $0_1;
    HEAP32[$0_1 + 4 >> 2] = $0_1;
    HEAP32[$0_1 >> 2] = $0_1;
    break label$1;
   }
   $6_1 = (($4_1 | 0) / 2 | 0) + $1_1 | 0;
   $8_1 = ($2_1 | 0) > ($6_1 | 0) ? $2_1 : $6_1;
   $9_1 = HEAP32[$0_1 + 92 >> 2] + ($6_1 << 2) | 0;
   $4_1 = HEAP32[$9_1 - 4 >> 2];
   $12_1 = HEAP32[$4_1 + 88 >> 2];
   $10_1 = HEAP32[$4_1 + 96 >> 2];
   $5_1 = HEAP32[$4_1 + 92 >> 2];
   $4_1 = $6_1;
   label$11 : {
    while (1) {
     if (($4_1 | 0) == ($8_1 | 0)) {
      break label$11
     }
     $11_1 = HEAP32[$9_1 >> 2];
     if (!(($12_1 | 0) != HEAP32[$11_1 + 88 >> 2] | ($5_1 | 0) != HEAP32[$11_1 + 92 >> 2] | ($10_1 | 0) != HEAP32[$11_1 + 96 >> 2])) {
      $9_1 = $9_1 + 4 | 0;
      $4_1 = $4_1 + 1 | 0;
      continue;
     }
     break;
    };
    $8_1 = $4_1;
   }
   $175($0_1, $1_1, $6_1, $3_1);
   $1_1 = $7_1 + 16 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$7_1 + 8 >> 2] = 0;
   HEAP32[$7_1 + 12 >> 2] = 0;
   $175($0_1, $8_1, $2_1, $7_1 + 8 | 0);
   $10_1 = HEAP32[$7_1 + 12 >> 2];
   if (!$10_1) {
    break label$1
   }
   $17_1 = HEAP32[$3_1 + 4 >> 2];
   if (!$17_1) {
    $0_1 = HEAP32[$7_1 + 12 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$7_1 + 8 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $0_1;
    $1_1 = $7_1 + 16 | 0;
    $0_1 = HEAP32[$1_1 + 4 >> 2];
    $2_1 = $3_1 + 8 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $0_1;
    break label$1;
   }
   HEAP32[$0_1 + 100 >> 2] = HEAP32[$0_1 + 100 >> 2] - 1;
   $19_1 = HEAP32[$3_1 + 12 >> 2];
   $1_1 = HEAP32[$19_1 + 88 >> 2];
   $12_1 = HEAP32[$7_1 + 16 >> 2];
   label$15 : {
    label$16 : {
     if (($1_1 | 0) != HEAP32[$12_1 + 88 >> 2]) {
      break label$16
     }
     $32_1 = HEAP32[$19_1 + 92 >> 2];
     if (($32_1 | 0) != HEAP32[$12_1 + 92 >> 2]) {
      break label$16
     }
     $2_1 = HEAP32[$12_1 + 4 >> 2];
     if (($2_1 | 0) == ($12_1 | 0)) {
      $2_1 = HEAP32[$12_1 + 8 >> 2];
      if ($2_1) {
       $12_1 = HEAP32[$2_1 + 12 >> 2];
       $32_1 = HEAP32[$12_1 + 92 >> 2];
       $1_1 = HEAP32[$12_1 + 88 >> 2];
      }
      $33_1 = $1_1 + 1 | 0;
      $1_1 = HEAP32[$12_1 + 96 >> 2];
      break label$15;
     }
     $1_1 = HEAP32[$12_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $2_1;
     HEAP32[$2_1 >> 2] = $1_1;
     if (HEAP32[$7_1 + 8 >> 2] == ($12_1 | 0)) {
      $5_1 = $7_1;
      $6_1 = $1_1;
      $9_1 = HEAP32[$1_1 + 88 >> 2];
      $4_1 = HEAP32[$2_1 + 88 >> 2];
      if (!(($9_1 | 0) < ($4_1 | 0) | (HEAP32[$1_1 + 92 >> 2] < HEAP32[$2_1 + 92 >> 2] ? ($4_1 | 0) == ($9_1 | 0) : 0))) {
       $6_1 = $2_1
      }
      HEAP32[$5_1 + 8 >> 2] = $6_1;
     }
     if (($10_1 | 0) != ($12_1 | 0)) {
      break label$16
     }
     $6_1 = HEAP32[$1_1 + 88 >> 2];
     $4_1 = HEAP32[$2_1 + 88 >> 2];
     if (!(($4_1 | 0) != ($6_1 | 0) | HEAP32[$1_1 + 92 >> 2] <= HEAP32[$2_1 + 92 >> 2] ? ($6_1 | 0) <= ($4_1 | 0) : 0)) {
      HEAP32[$7_1 + 12 >> 2] = $1_1;
      $10_1 = $1_1;
      break label$16;
     }
     HEAP32[$7_1 + 12 >> 2] = $2_1;
     $10_1 = $2_1;
    }
    $14_1 = HEAP32[$3_1 >> 2];
    $18_1 = HEAP32[$7_1 + 8 >> 2];
    $1_1 = 1;
    $12_1 = 0;
    $19_1 = 0;
    $9_1 = $10_1;
    $4_1 = $17_1;
    while (1) {
     if (($16_1 | 0) == 2) {
      HEAP32[$9_1 >> 2] = $4_1;
      HEAP32[$4_1 + 4 >> 2] = $9_1;
      HEAP32[$19_1 >> 2] = $12_1;
      HEAP32[$12_1 + 4 >> 2] = $19_1;
      if (HEAP32[$18_1 + 88 >> 2] < HEAP32[$14_1 + 88 >> 2]) {
       HEAP32[$3_1 >> 2] = $18_1
      }
      if (HEAP32[$10_1 + 88 >> 2] >= HEAP32[$17_1 + 88 >> 2]) {
       HEAP32[$3_1 + 4 >> 2] = $10_1
      }
      HEAP32[$3_1 + 12 >> 2] = HEAP32[$7_1 + 20 >> 2];
      $6_1 = 0;
      $2_1 = HEAP32[$12_1 + 88 >> 2] - HEAP32[$19_1 + 88 >> 2] | 0;
      $9_1 = HEAP32[$12_1 + 92 >> 2] - HEAP32[$19_1 + 92 >> 2] | 0;
      $3_1 = HEAP32[$12_1 + 96 >> 2] - HEAP32[$19_1 + 96 >> 2] | 0;
      $176($7_1 + 120 | 0, 0, 0, -1, $2_1, $9_1, $3_1);
      $4_1 = HEAP32[$19_1 + 8 >> 2];
      $23_1 = HEAP32[$7_1 + 120 >> 2];
      $27_1 = HEAP32[$7_1 + 124 >> 2];
      $28_1 = HEAP32[$7_1 + 136 >> 2];
      $29_1 = HEAP32[$7_1 + 140 >> 2];
      $30_1 = HEAP32[$7_1 + 128 >> 2];
      $31_1 = HEAP32[$7_1 + 132 >> 2];
      HEAP32[$7_1 + 80 >> 2] = 0;
      $15_1 = $9_1 >> 31;
      $1_1 = __wasm_i64_mul($28_1, $29_1, $9_1, $15_1);
      $10_1 = i64toi32_i32$HIGH_BITS;
      $11_1 = $3_1 >> 31;
      $5_1 = __wasm_i64_mul($30_1, $31_1, $3_1, $11_1);
      $24_1 = $1_1 - $5_1 | 0;
      $25_1 = $10_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $5_1 >>> 0) | 0) | 0;
      $8_1 = $2_1 >> 31;
      $1_1 = __wasm_i64_mul($30_1, $31_1, $2_1, $8_1);
      $10_1 = i64toi32_i32$HIGH_BITS;
      $5_1 = __wasm_i64_mul($23_1, $27_1, $9_1, $15_1);
      $26_1 = $1_1 - $5_1 | 0;
      $21_1 = $10_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $5_1 >>> 0) | 0) | 0;
      $1_1 = __wasm_i64_mul($23_1, $27_1, $3_1, $11_1);
      $10_1 = i64toi32_i32$HIGH_BITS;
      $5_1 = __wasm_i64_mul($28_1, $29_1, $2_1, $8_1);
      $18_1 = $1_1 - $5_1 | 0;
      $17_1 = $10_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $5_1 >>> 0) | 0) | 0;
      $1_1 = 0;
      if ($4_1) {
       while (1) {
        $11_1 = HEAP32[$4_1 + 12 >> 2];
        $5_1 = HEAP32[$11_1 + 92 >> 2] - HEAP32[$19_1 + 92 >> 2] | 0;
        $16_1 = $5_1;
        $14_1 = $5_1 >> 31;
        $5_1 = __wasm_i64_mul($30_1, $31_1, $5_1, $14_1);
        $10_1 = i64toi32_i32$HIGH_BITS;
        $8_1 = $5_1;
        $5_1 = HEAP32[$11_1 + 88 >> 2] - HEAP32[$19_1 + 88 >> 2] | 0;
        $20_1 = $5_1;
        $13_1 = $5_1 >> 31;
        $5_1 = __wasm_i64_mul($23_1, $27_1, $5_1, $13_1);
        $8_1 = $8_1 + $5_1 | 0;
        $10_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
        $10_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
        $5_1 = HEAP32[$11_1 + 96 >> 2] - HEAP32[$19_1 + 96 >> 2] | 0;
        $15_1 = $5_1;
        $11_1 = $5_1 >> 31;
        $5_1 = __wasm_i64_mul($28_1, $29_1, $5_1, $11_1);
        $8_1 = (0 - $5_1 | 0) != ($8_1 | 0) | (0 - (i64toi32_i32$HIGH_BITS + (($5_1 | 0) != 0) | 0) | 0) != ($10_1 | 0);
        $5_1 = __wasm_i64_mul($16_1, $14_1, $18_1, $17_1);
        $10_1 = i64toi32_i32$HIGH_BITS;
        $14_1 = $8_1;
        $8_1 = $5_1;
        $5_1 = __wasm_i64_mul($24_1, $25_1, $20_1, $13_1);
        $8_1 = $8_1 + $5_1 | 0;
        $13_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
        $13_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $13_1 + 1 | 0 : $13_1;
        $5_1 = __wasm_i64_mul($26_1, $21_1, $15_1, $11_1);
        $10_1 = $5_1 + $8_1 | 0;
        $13_1 = i64toi32_i32$HIGH_BITS + $13_1 | 0;
        $13_1 = $5_1 >>> 0 > $10_1 >>> 0 ? $13_1 + 1 | 0 : $13_1;
        label$31 : {
         if ($14_1 | (($13_1 | 0) < 0 ? 1 : ($13_1 | 0) <= 0 ? $10_1 >>> 0 < 1 : 0)) {
          break label$31
         }
         if ($1_1) {
          if (($177($1_1, $4_1, $2_1, $9_1, $3_1, 0, 0, -1) | 0) != 1) {
           break label$31
          }
         }
         $1_1 = $4_1;
        }
        $4_1 = HEAP32[$4_1 >> 2];
        if (($4_1 | 0) != HEAP32[$19_1 + 8 >> 2]) {
         continue
        }
        break;
       };
       HEAP32[$7_1 + 80 >> 2] = $1_1;
      }
      $4_1 = HEAP32[$12_1 + 8 >> 2];
      HEAP32[$7_1 + 56 >> 2] = 0;
      if ($4_1) {
       while (1) {
        $11_1 = HEAP32[$4_1 + 12 >> 2];
        $5_1 = HEAP32[$11_1 + 92 >> 2] - HEAP32[$12_1 + 92 >> 2] | 0;
        $16_1 = $5_1;
        $14_1 = $5_1 >> 31;
        $5_1 = __wasm_i64_mul($30_1, $31_1, $5_1, $14_1);
        $10_1 = i64toi32_i32$HIGH_BITS;
        $8_1 = $5_1;
        $5_1 = HEAP32[$11_1 + 88 >> 2] - HEAP32[$12_1 + 88 >> 2] | 0;
        $20_1 = $5_1;
        $13_1 = $5_1 >> 31;
        $5_1 = __wasm_i64_mul($23_1, $27_1, $5_1, $13_1);
        $8_1 = $8_1 + $5_1 | 0;
        $10_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
        $10_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
        $5_1 = HEAP32[$11_1 + 96 >> 2] - HEAP32[$12_1 + 96 >> 2] | 0;
        $15_1 = $5_1;
        $11_1 = $5_1 >> 31;
        $5_1 = __wasm_i64_mul($28_1, $29_1, $5_1, $11_1);
        $8_1 = (0 - $5_1 | 0) != ($8_1 | 0) | (0 - (i64toi32_i32$HIGH_BITS + (($5_1 | 0) != 0) | 0) | 0) != ($10_1 | 0);
        $5_1 = __wasm_i64_mul($16_1, $14_1, $18_1, $17_1);
        $10_1 = i64toi32_i32$HIGH_BITS;
        $14_1 = $8_1;
        $8_1 = $5_1;
        $5_1 = __wasm_i64_mul($24_1, $25_1, $20_1, $13_1);
        $8_1 = $8_1 + $5_1 | 0;
        $13_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
        $13_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $13_1 + 1 | 0 : $13_1;
        $5_1 = __wasm_i64_mul($26_1, $21_1, $15_1, $11_1);
        $10_1 = $5_1 + $8_1 | 0;
        $8_1 = i64toi32_i32$HIGH_BITS + $13_1 | 0;
        $8_1 = $5_1 >>> 0 > $10_1 >>> 0 ? $8_1 + 1 | 0 : $8_1;
        label$35 : {
         if ($14_1 | (($8_1 | 0) < 0 ? 1 : ($8_1 | 0) <= 0 ? $10_1 >>> 0 < 1 : 0)) {
          break label$35
         }
         if ($6_1) {
          if (($177($6_1, $4_1, $2_1, $9_1, $3_1, 0, 0, -1) | 0) != 2) {
           break label$35
          }
         }
         $6_1 = $4_1;
        }
        $4_1 = HEAP32[$4_1 >> 2];
        if (($4_1 | 0) != HEAP32[$12_1 + 8 >> 2]) {
         continue
        }
        break;
       };
       HEAP32[$7_1 + 56 >> 2] = $6_1;
      }
      label$37 : {
       if (!($1_1 | $6_1)) {
        break label$37
       }
       $178($0_1, $19_1, $12_1, $7_1 + 80 | 0, $7_1 + 56 | 0);
       $1_1 = HEAP32[$7_1 + 80 >> 2];
       if ($1_1) {
        $19_1 = HEAP32[$1_1 + 12 >> 2]
       }
       $1_1 = HEAP32[$7_1 + 56 >> 2];
       if (!$1_1) {
        break label$37
       }
       $12_1 = HEAP32[$1_1 + 12 >> 2];
      }
      $32_1 = HEAP32[$12_1 + 92 >> 2];
      $33_1 = HEAP32[$12_1 + 88 >> 2];
      $1_1 = HEAP32[$12_1 + 96 >> 2] + 1 | 0;
     } else {
      $5_1 = HEAP32[$9_1 + 88 >> 2];
      $11_1 = HEAP32[$4_1 + 88 >> 2];
      $2_1 = Math_imul($5_1 - $11_1 | 0, $1_1);
      label$40 : {
       if (($2_1 | 0) >= 1) {
        $11_1 = HEAP32[$9_1 + 92 >> 2];
        while (1) {
         $5_1 = $9_1;
         $6_1 = HEAP32[$4_1 + 92 >> 2];
         $13_1 = $2_1;
         while (1) {
          label$44 : {
           $21_1 = $11_1 - $6_1 | 0;
           $15_1 = !$16_1 << 2;
           $9_1 = HEAP32[$15_1 + $4_1 >> 2];
           if (($9_1 | 0) == ($4_1 | 0)) {
            break label$44
           }
           $2_1 = HEAP32[$9_1 + 92 >> 2];
           $8_1 = $2_1 - $6_1 | 0;
           if (($8_1 | 0) > 0) {
            break label$44
           }
           $6_1 = HEAP32[$9_1 + 88 >> 2];
           $20_1 = Math_imul($6_1 - HEAP32[$4_1 + 88 >> 2] | 0, $1_1);
           if (($20_1 | 0) > -1 | (Math_imul($8_1, $13_1) | 0) > (Math_imul($20_1, $21_1) | 0) ? $20_1 : 0) {
            break label$44
           }
           $13_1 = Math_imul(HEAP32[$5_1 + 88 >> 2] - $6_1 | 0, $1_1);
           $6_1 = $2_1;
           $4_1 = $9_1;
           continue;
          }
          break;
         };
         $9_1 = HEAP32[$5_1 + $15_1 >> 2];
         if (($5_1 | 0) == ($9_1 | 0)) {
          break label$40
         }
         $6_1 = HEAP32[$9_1 + 92 >> 2];
         $15_1 = $6_1 - $11_1 | 0;
         if (($15_1 | 0) > -1) {
          break label$40
         }
         $8_1 = HEAP32[$9_1 + 88 >> 2];
         $2_1 = Math_imul($8_1 - HEAP32[$4_1 + 88 >> 2] | 0, $1_1);
         if (($2_1 | 0) < 1) {
          break label$40
         }
         $11_1 = $6_1;
         $6_1 = Math_imul($8_1 - HEAP32[$5_1 + 88 >> 2] | 0, $1_1);
         if (!$6_1) {
          continue
         }
         if (($6_1 | 0) > -1) {
          break label$40
         }
         if ((Math_imul($13_1, $15_1) | 0) < (Math_imul($6_1, $21_1) | 0)) {
          continue
         }
         break;
        };
        break label$40;
       }
       label$45 : {
        if (($2_1 | 0) <= -1) {
         $8_1 = HEAP32[$4_1 + 92 >> 2];
         $11_1 = HEAP32[$9_1 + 92 >> 2];
         label$47 : while (1) {
          $25_1 = (($16_1 | 0) != 0) << 2;
          $13_1 = HEAP32[$25_1 + $9_1 >> 2];
          while (1) {
           $6_1 = $4_1;
           $20_1 = $2_1;
           $24_1 = $11_1 - $8_1 | 0;
           label$49 : {
            if (($9_1 | 0) == ($13_1 | 0)) {
             break label$49
            }
            $4_1 = HEAP32[$13_1 + 92 >> 2];
            $2_1 = $4_1 - $11_1 | 0;
            if (($2_1 | 0) < 0) {
             break label$49
            }
            $15_1 = HEAP32[$13_1 + 88 >> 2];
            $5_1 = Math_imul($15_1 - $5_1 | 0, $1_1);
            if (($5_1 | 0) > -1 | (Math_imul($2_1, $20_1) | 0) > (Math_imul($5_1, $24_1) | 0) ? $5_1 : 0) {
             break label$49
            }
            $2_1 = Math_imul($15_1 - HEAP32[$6_1 + 88 >> 2] | 0, $1_1);
            $5_1 = $15_1;
            $11_1 = $4_1;
            $9_1 = $13_1;
            $4_1 = $6_1;
            continue label$47;
           }
           $4_1 = HEAP32[$6_1 + $25_1 >> 2];
           if (($6_1 | 0) == ($4_1 | 0)) {
            break label$45
           }
           $15_1 = HEAP32[$4_1 + 92 >> 2];
           $26_1 = $15_1 - $8_1 | 0;
           if (($26_1 | 0) < 1) {
            break label$45
           }
           $5_1 = HEAP32[$9_1 + 88 >> 2];
           $21_1 = HEAP32[$4_1 + 88 >> 2];
           $2_1 = Math_imul($5_1 - $21_1 | 0, $1_1);
           if (($2_1 | 0) > -1) {
            break label$45
           }
           $8_1 = $15_1;
           $15_1 = Math_imul($21_1 - HEAP32[$6_1 + 88 >> 2] | 0, $1_1);
           if (!$15_1) {
            continue
           }
           if (($15_1 | 0) > -1) {
            break label$45
           }
           if ((Math_imul($20_1, $26_1) | 0) < (Math_imul($15_1, $24_1) | 0)) {
            continue
           }
           break;
          };
          break;
         };
         break label$45;
        }
        $2_1 = HEAP32[$4_1 + 92 >> 2];
        $6_1 = $4_1;
        while (1) {
         $8_1 = $6_1;
         $6_1 = HEAP32[$6_1 + (!$16_1 << 2) >> 2];
         if (!(($6_1 | 0) == ($4_1 | 0) | ($11_1 | 0) != HEAP32[$6_1 + 88 >> 2])) {
          $5_1 = $2_1;
          $2_1 = HEAP32[$6_1 + 92 >> 2];
          if (($5_1 | 0) >= ($2_1 | 0)) {
           continue
          }
         }
         break;
        };
        $6_1 = HEAP32[$9_1 + 92 >> 2];
        $4_1 = $9_1;
        while (1) {
         $5_1 = $4_1;
         $4_1 = HEAP32[$4_1 + ((($16_1 | 0) != 0) << 2) >> 2];
         if (!(($9_1 | 0) == ($4_1 | 0) | ($11_1 | 0) != HEAP32[$4_1 + 88 >> 2])) {
          $2_1 = $6_1;
          $6_1 = HEAP32[$4_1 + 92 >> 2];
          if (($2_1 | 0) <= ($6_1 | 0)) {
           continue
          }
         }
         break;
        };
        $4_1 = $8_1;
        break label$40;
       }
       $5_1 = $9_1;
       $4_1 = $6_1;
      }
      if ($16_1) {
       $9_1 = $5_1
      } else {
       $1_1 = -1;
       $12_1 = $5_1;
       $19_1 = $4_1;
       $4_1 = $14_1;
       $9_1 = $18_1;
      }
      $16_1 = $16_1 + 1 | 0;
      continue;
     }
     break;
    };
   }
   $23_1 = $1_1;
   $2_1 = $19_1;
   $8_1 = $12_1;
   $5_1 = 0;
   $9_1 = 0;
   $20_1 = 0;
   $27_1 = 1;
   $16_1 = 0;
   $15_1 = 0;
   $13_1 = 0;
   $3_1 = 0;
   while (1) {
    HEAP32[$7_1 + 116 >> 2] = -1;
    $14_1 = HEAP32[$2_1 + 88 >> 2];
    $10_1 = HEAP32[$8_1 + 88 >> 2] - $14_1 | 0;
    HEAP32[$7_1 + 104 >> 2] = $10_1;
    $28_1 = $8_1 + 96 | 0;
    $29_1 = $2_1 + 96 | 0;
    $11_1 = HEAP32[$29_1 >> 2];
    $4_1 = HEAP32[$28_1 >> 2] - $11_1 | 0;
    HEAP32[$7_1 + 112 >> 2] = $4_1;
    $30_1 = $8_1 + 92 | 0;
    $31_1 = $2_1 + 92 | 0;
    $1_1 = HEAP32[$31_1 >> 2];
    $6_1 = HEAP32[$30_1 >> 2] - $1_1 | 0;
    HEAP32[$7_1 + 108 >> 2] = $6_1;
    $176($7_1 + 120 | 0, $33_1 - $14_1 | 0, $32_1 - $1_1 | 0, $23_1 - $11_1 | 0, $10_1, $6_1, $4_1);
    $24_1 = HEAP32[$7_1 + 128 >> 2];
    $25_1 = HEAP32[$7_1 + 132 >> 2];
    $26_1 = $10_1 >> 31;
    $1_1 = __wasm_i64_mul($24_1, $25_1, $10_1, $26_1);
    $18_1 = i64toi32_i32$HIGH_BITS;
    $17_1 = HEAP32[$7_1 + 120 >> 2];
    $14_1 = HEAP32[$7_1 + 124 >> 2];
    $21_1 = $6_1 >> 31;
    $11_1 = __wasm_i64_mul($17_1, $14_1, $6_1, $21_1);
    HEAP32[$7_1 + 96 >> 2] = $1_1 - $11_1;
    HEAP32[$7_1 + 100 >> 2] = $18_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $11_1 >>> 0) | 0);
    $18_1 = $4_1 >> 31;
    $1_1 = __wasm_i64_mul($17_1, $14_1, $4_1, $18_1);
    $17_1 = i64toi32_i32$HIGH_BITS;
    $14_1 = HEAP32[$7_1 + 136 >> 2];
    $11_1 = HEAP32[$7_1 + 140 >> 2];
    $10_1 = __wasm_i64_mul($10_1, $26_1, $14_1, $11_1);
    HEAP32[$7_1 + 88 >> 2] = $1_1 - $10_1;
    HEAP32[$7_1 + 92 >> 2] = $17_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $10_1 >>> 0) | 0);
    $1_1 = __wasm_i64_mul($14_1, $11_1, $6_1, $21_1);
    $6_1 = i64toi32_i32$HIGH_BITS;
    $4_1 = __wasm_i64_mul($24_1, $25_1, $4_1, $18_1);
    HEAP32[$7_1 + 80 >> 2] = $1_1 - $4_1;
    HEAP32[$7_1 + 84 >> 2] = $6_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $4_1 >>> 0) | 0);
    HEAP32[$7_1 + 72 >> 2] = 0;
    $1_1 = $7_1 - -64 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$7_1 + 56 >> 2] = 0;
    HEAP32[$7_1 + 60 >> 2] = 0;
    $17_1 = $179($0_1, 0, $2_1, $7_1 + 104 | 0, $7_1 + 120 | 0, $7_1 + 80 | 0, $7_1 + 56 | 0);
    HEAP32[$7_1 + 48 >> 2] = 0;
    $1_1 = $7_1 + 40 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$7_1 + 32 >> 2] = 0;
    HEAP32[$7_1 + 36 >> 2] = 0;
    $1_1 = $179($0_1, 1, $8_1, $7_1 + 104 | 0, $7_1 + 120 | 0, $7_1 + 80 | 0, $7_1 + 32 | 0);
    label$57 : {
     if (!($1_1 | $17_1)) {
      $4_1 = $173($0_1, $2_1, $8_1);
      HEAP32[$2_1 + 8 >> 2] = $4_1;
      $1_1 = HEAP32[$4_1 + 8 >> 2];
      HEAP32[$8_1 + 8 >> 2] = $1_1;
      HEAP32[$4_1 + 4 >> 2] = $4_1;
      HEAP32[$4_1 >> 2] = $4_1;
      HEAP32[$1_1 + 4 >> 2] = $1_1;
      HEAP32[$1_1 >> 2] = $1_1;
      $4_1 = 0;
      break label$57;
     }
     $18_1 = $17_1 ? -1 : 1;
     if (!(!$17_1 | !$1_1)) {
      $18_1 = $172($7_1 + 56 | 0, $7_1 + 32 | 0)
     }
     label$60 : {
      label$61 : {
       if ($27_1) {
        break label$61
       }
       label$62 : {
        if (($18_1 | 0) >= 0) {
         if (HEAP32[$7_1 + 48 >> 2] > -1) {
          break label$61
         }
         if (!(HEAP32[$7_1 + 40 >> 2] | HEAP32[$7_1 + 44 >> 2])) {
          break label$62
         }
         break label$61;
        }
        if (HEAP32[$7_1 + 64 >> 2] | HEAP32[$7_1 + 68 >> 2] | HEAP32[$7_1 + 72 >> 2] > -1) {
         break label$61
        }
       }
       $14_1 = $5_1;
       $6_1 = $9_1;
       $11_1 = $16_1;
       $10_1 = $15_1;
       break label$60;
      }
      $11_1 = $173($0_1, $2_1, $8_1);
      $10_1 = $11_1;
      if ($16_1) {
       HEAP32[$16_1 + 4 >> 2] = $11_1;
       $10_1 = $15_1;
      }
      HEAP32[$11_1 >> 2] = $16_1;
      $14_1 = HEAP32[$11_1 + 8 >> 2];
      $6_1 = $14_1;
      if ($5_1) {
       HEAP32[$5_1 >> 2] = $14_1;
       $6_1 = $9_1;
      }
      HEAP32[$14_1 + 4 >> 2] = $5_1;
     }
     HEAP32[$7_1 + 28 >> 2] = $17_1;
     HEAP32[$7_1 + 24 >> 2] = $1_1;
     $5_1 = $1_1;
     if (!$18_1) {
      $178($0_1, $2_1, $8_1, $7_1 + 28 | 0, $7_1 + 24 | 0);
      $5_1 = HEAP32[$7_1 + 24 >> 2];
     }
     label$66 : {
      if (!(!$5_1 | ($18_1 | 0) < 0)) {
       label$69 : {
        label$70 : {
         if ($22_1) {
          $4_1 = HEAP32[$22_1 >> 2];
          while (1) {
           if (($1_1 | 0) != ($4_1 | 0)) {
            $9_1 = HEAP32[$4_1 >> 2];
            $180($0_1, $4_1);
            $4_1 = $9_1;
            continue;
           }
           break;
          };
          if ($14_1) {
           break label$70
          }
          break label$69;
         }
         if (!$14_1) {
          $20_1 = $1_1;
          break label$69;
         }
         $22_1 = HEAP32[$1_1 + 4 >> 2];
         $20_1 = $6_1;
        }
        HEAP32[$22_1 >> 2] = $6_1;
        HEAP32[$6_1 + 4 >> 2] = $22_1;
        HEAP32[$14_1 >> 2] = $1_1;
        HEAP32[$1_1 + 4 >> 2] = $14_1;
        $5_1 = HEAP32[$7_1 + 24 >> 2];
        $6_1 = 0;
       }
       $23_1 = HEAP32[$28_1 >> 2];
       $32_1 = HEAP32[$30_1 >> 2];
       $22_1 = HEAP32[$5_1 + 8 >> 2];
       $1_1 = HEAP32[$5_1 + 12 >> 2];
       $33_1 = HEAP32[$8_1 + 88 >> 2];
       $5_1 = 0;
       break label$66;
      }
      $1_1 = $8_1;
      $5_1 = $14_1;
     }
     $9_1 = $6_1;
     label$75 : {
      label$76 : {
       if (($18_1 | 0) > 0) {
        break label$76
       }
       $8_1 = HEAP32[$7_1 + 28 >> 2];
       if (!$8_1) {
        break label$76
       }
       label$77 : {
        label$78 : {
         label$79 : {
          label$80 : {
           if ($3_1) {
            $18_1 = $3_1 + 4 | 0;
            $4_1 = HEAP32[$3_1 + 4 >> 2];
            while (1) {
             if (($4_1 | 0) != ($17_1 | 0)) {
              $6_1 = HEAP32[$4_1 + 4 >> 2];
              $180($0_1, $4_1);
              $4_1 = $6_1;
              continue;
             }
             break;
            };
            if ($11_1) {
             break label$80
            }
            break label$77;
           }
           if ($11_1) {
            break label$79
           }
           $13_1 = $17_1;
           break label$77;
          }
          HEAP32[$10_1 >> 2] = $3_1;
          break label$78;
         }
         $3_1 = HEAP32[$17_1 >> 2];
         HEAP32[$10_1 >> 2] = $3_1;
         $18_1 = $3_1 + 4 | 0;
         $13_1 = $10_1;
        }
        HEAP32[$18_1 >> 2] = $10_1;
        HEAP32[$17_1 >> 2] = $11_1;
        HEAP32[$11_1 + 4 >> 2] = $17_1;
        $8_1 = HEAP32[$7_1 + 28 >> 2];
        $10_1 = 0;
       }
       $23_1 = HEAP32[$29_1 >> 2];
       $32_1 = HEAP32[$31_1 >> 2];
       $3_1 = HEAP32[$8_1 + 8 >> 2];
       $33_1 = HEAP32[$2_1 + 88 >> 2];
       $16_1 = 0;
       $2_1 = HEAP32[$8_1 + 12 >> 2];
       break label$75;
      }
      $16_1 = $11_1;
     }
     $15_1 = $10_1;
     $4_1 = 1;
     if (!(($2_1 | 0) != ($19_1 | 0) | ($1_1 | 0) != ($12_1 | 0))) {
      label$85 : {
       if (!$3_1) {
        HEAP32[$16_1 + 4 >> 2] = $15_1;
        HEAP32[$15_1 >> 2] = $16_1;
        HEAP32[$2_1 + 8 >> 2] = $16_1;
        break label$85;
       }
       $4_1 = HEAP32[$3_1 + 4 >> 2];
       while (1) {
        if (($4_1 | 0) == ($13_1 | 0)) {
         if (!$16_1) {
          break label$85
         }
         HEAP32[$3_1 + 4 >> 2] = $15_1;
         HEAP32[$15_1 >> 2] = $3_1;
         HEAP32[$16_1 + 4 >> 2] = $13_1;
         HEAP32[$13_1 >> 2] = $16_1;
        } else {
         $1_1 = HEAP32[$4_1 + 4 >> 2];
         $180($0_1, $4_1);
         $4_1 = $1_1;
         continue;
        }
        break;
       };
      }
      if (!$22_1) {
       HEAP32[$9_1 + 4 >> 2] = $5_1;
       HEAP32[$5_1 >> 2] = $9_1;
       HEAP32[$12_1 + 8 >> 2] = $5_1;
       $22_1 = 0;
       $8_1 = $12_1;
       $4_1 = 0;
       break label$57;
      }
      $4_1 = HEAP32[$22_1 >> 2];
      while (1) {
       if (($4_1 | 0) == ($20_1 | 0)) {
        label$93 : {
         $4_1 = 0;
         if ($5_1) {
          break label$93
         }
         $8_1 = $12_1;
         $5_1 = 0;
         break label$57;
        }
       } else {
        $1_1 = HEAP32[$4_1 >> 2];
        $180($0_1, $4_1);
        $4_1 = $1_1;
        continue;
       }
       break;
      };
      HEAP32[$9_1 + 4 >> 2] = $22_1;
      HEAP32[$22_1 >> 2] = $9_1;
      HEAP32[$20_1 + 4 >> 2] = $5_1;
      HEAP32[$5_1 >> 2] = $20_1;
      $8_1 = $12_1;
      break label$57;
     }
     $8_1 = $1_1;
     $27_1 = 0;
    }
    if ($4_1) {
     continue
    }
    break;
   };
  }
  global$0 = $7_1 + 144 | 0;
 }
 
 function $176($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0;
  $7_1 = Math_imul($1_1, $5_1) - Math_imul($2_1, $4_1) | 0;
  HEAP32[$0_1 + 16 >> 2] = $7_1;
  HEAP32[$0_1 + 20 >> 2] = $7_1 >> 31;
  $1_1 = Math_imul($3_1, $4_1) - Math_imul($1_1, $6_1) | 0;
  HEAP32[$0_1 + 8 >> 2] = $1_1;
  HEAP32[$0_1 + 12 >> 2] = $1_1 >> 31;
  $1_1 = Math_imul($2_1, $6_1) - Math_imul($3_1, $5_1) | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31;
 }
 
 function $177($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 48 | 0;
  global$0 = $8_1;
  $9_1 = HEAP32[$0_1 + 4 >> 2];
  if (HEAP32[$0_1 >> 2] == ($1_1 | 0)) {
   $10_1 = 2;
   if (($1_1 | 0) == ($9_1 | 0)) {
    $176($8_1 + 24 | 0, $5_1, $6_1, $7_1, $2_1, $3_1, $4_1);
    $0_1 = HEAP32[$0_1 + 12 >> 2];
    $2_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] + 12 >> 2];
    $3_1 = HEAP32[$2_1 + 88 >> 2];
    $5_1 = HEAP32[$0_1 + 88 >> 2] - $3_1 | 0;
    $4_1 = HEAP32[$2_1 + 92 >> 2];
    $6_1 = HEAP32[$0_1 + 92 >> 2] - $4_1 | 0;
    $2_1 = HEAP32[$2_1 + 96 >> 2];
    $7_1 = HEAP32[$0_1 + 96 >> 2] - $2_1 | 0;
    $0_1 = HEAP32[$1_1 + 12 >> 2];
    $176($8_1, $5_1, $6_1, $7_1, HEAP32[$0_1 + 88 >> 2] - $3_1 | 0, HEAP32[$0_1 + 92 >> 2] - $4_1 | 0, HEAP32[$0_1 + 96 >> 2] - $2_1 | 0);
    $0_1 = __wasm_i64_mul(HEAP32[$8_1 + 8 >> 2], HEAP32[$8_1 + 12 >> 2], HEAP32[$8_1 + 32 >> 2], HEAP32[$8_1 + 36 >> 2]);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $3_1 = __wasm_i64_mul(HEAP32[$8_1 >> 2], HEAP32[$8_1 + 4 >> 2], HEAP32[$8_1 + 24 >> 2], HEAP32[$8_1 + 28 >> 2]);
    $1_1 = $3_1 + $0_1 | 0;
    $0_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $0_1 = $1_1 >>> 0 < $3_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $2_1 = __wasm_i64_mul(HEAP32[$8_1 + 16 >> 2], HEAP32[$8_1 + 20 >> 2], HEAP32[$8_1 + 40 >> 2], HEAP32[$8_1 + 44 >> 2]);
    $1_1 = $2_1 + $1_1 | 0;
    $0_1 = i64toi32_i32$HIGH_BITS + $0_1 | 0;
    $0_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $10_1 = (($0_1 | 0) > 0 ? 1 : ($0_1 | 0) >= 0 ? $1_1 : 0) ? 2 : 1;
   }
   global$0 = $8_1 + 48 | 0;
   return $10_1;
  }
  global$0 = $8_1 + 48 | 0;
  return ($1_1 | 0) == ($9_1 | 0);
 }
 
 function $178($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0;
  $16_1 = global$0 - 80 | 0;
  global$0 = $16_1;
  $45_1 = HEAP32[$4_1 >> 2];
  $12_1 = $1_1;
  $31_1 = HEAP32[$3_1 >> 2];
  if ($31_1) {
   $12_1 = HEAP32[$31_1 + 12 >> 2]
  }
  $20_1 = HEAP32[$12_1 + 96 >> 2];
  $21_1 = HEAP32[$12_1 + 92 >> 2];
  $22_1 = HEAP32[$12_1 + 88 >> 2];
  $15_1 = $45_1 ? HEAP32[$45_1 + 12 >> 2] : $2_1;
  $12_1 = HEAP32[$15_1 + 96 >> 2];
  $23_1 = HEAP32[$15_1 + 92 >> 2];
  $15_1 = HEAP32[$15_1 + 88 >> 2];
  $10_1 = HEAP32[$1_1 + 88 >> 2];
  $32_1 = HEAP32[$2_1 + 88 >> 2] - $10_1 | 0;
  $14_1 = $1_1 + 92 | 0;
  $8_1 = HEAP32[$14_1 >> 2];
  $33_1 = HEAP32[$2_1 + 92 >> 2] - $8_1 | 0;
  $5_1 = HEAP32[$2_1 + 96 >> 2];
  $11_1 = $1_1 + 96 | 0;
  $2_1 = HEAP32[$11_1 >> 2];
  $34_1 = $5_1 - $2_1 | 0;
  $5_1 = HEAP32[($31_1 ? $31_1 : $45_1) + 12 >> 2];
  $176($16_1 + 56 | 0, HEAP32[$5_1 + 88 >> 2] - $10_1 | 0, HEAP32[$5_1 + 92 >> 2] - $8_1 | 0, HEAP32[$5_1 + 96 >> 2] - $2_1 | 0, $32_1, $33_1, $34_1);
  $37_1 = HEAP32[$16_1 + 56 >> 2];
  $38_1 = HEAP32[$16_1 + 60 >> 2];
  $9_1 = $34_1 >> 31;
  $2_1 = __wasm_i64_mul($37_1, $38_1, $34_1, $9_1);
  $10_1 = i64toi32_i32$HIGH_BITS;
  $39_1 = HEAP32[$16_1 + 72 >> 2];
  $40_1 = HEAP32[$16_1 + 76 >> 2];
  $7_1 = $32_1 >> 31;
  $8_1 = __wasm_i64_mul($39_1, $40_1, $32_1, $7_1);
  $24_1 = $2_1 - $8_1 | 0;
  $25_1 = $10_1 - (i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 < $8_1 >>> 0) | 0) | 0;
  $8_1 = __wasm_i64_mul($24_1, $25_1, $21_1, $21_1 >> 31);
  $5_1 = i64toi32_i32$HIGH_BITS;
  $6_1 = $33_1 >> 31;
  $2_1 = __wasm_i64_mul($39_1, $40_1, $33_1, $6_1);
  $10_1 = i64toi32_i32$HIGH_BITS;
  $13_1 = $8_1;
  $41_1 = HEAP32[$16_1 + 64 >> 2];
  $42_1 = HEAP32[$16_1 + 68 >> 2];
  $8_1 = __wasm_i64_mul($41_1, $42_1, $34_1, $9_1);
  $26_1 = $2_1 - $8_1 | 0;
  $27_1 = $10_1 - (i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 < $8_1 >>> 0) | 0) | 0;
  $8_1 = __wasm_i64_mul($26_1, $27_1, $22_1, $22_1 >> 31);
  $10_1 = $13_1 + $8_1 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
  $2_1 = $8_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $8_1 = __wasm_i64_mul($32_1, $7_1, $41_1, $42_1);
  $5_1 = i64toi32_i32$HIGH_BITS;
  $7_1 = $10_1;
  $10_1 = __wasm_i64_mul($33_1, $6_1, $37_1, $38_1);
  $28_1 = $8_1 - $10_1 | 0;
  $29_1 = $5_1 - (i64toi32_i32$HIGH_BITS + ($8_1 >>> 0 < $10_1 >>> 0) | 0) | 0;
  $8_1 = __wasm_i64_mul($28_1, $29_1, $20_1, $20_1 >> 31);
  $10_1 = $7_1 + $8_1 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
  $2_1 = $8_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $8_1 = $2_1;
  $2_1 = HEAP32[$14_1 >> 2];
  $5_1 = __wasm_i64_mul($41_1, $42_1, $2_1, $2_1 >> 31);
  $2_1 = i64toi32_i32$HIGH_BITS;
  $1_1 = HEAP32[$1_1 + 88 >> 2];
  $1_1 = __wasm_i64_mul($37_1, $38_1, $1_1, $1_1 >> 31);
  $5_1 = $1_1 + $5_1 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
  $2_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $1_1 = HEAP32[$11_1 >> 2];
  $1_1 = __wasm_i64_mul($39_1, $40_1, $1_1, $1_1 >> 31);
  $5_1 = $1_1 + $5_1 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
  $36_1 = $5_1;
  $14_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  label$3 : {
   $1_1 = HEAP32[$3_1 >> 2];
   if (!$1_1) {
    break label$3
   }
   $2_1 = HEAP32[$1_1 + 12 >> 2];
   while (1) {
    if (!$2_1) {
     break label$3
    }
    $1_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] + 4 >> 2];
    $18_1 = HEAP32[$1_1 + 12 >> 2];
    $2_1 = HEAP32[$18_1 + 92 >> 2];
    $17_1 = $2_1;
    $13_1 = $2_1 >> 31;
    $2_1 = __wasm_i64_mul($41_1, $42_1, $2_1, $13_1);
    $6_1 = i64toi32_i32$HIGH_BITS;
    $7_1 = $2_1;
    $2_1 = HEAP32[$18_1 + 88 >> 2];
    $11_1 = $2_1;
    $9_1 = $2_1 >> 31;
    $5_1 = __wasm_i64_mul($37_1, $38_1, $2_1, $9_1);
    $7_1 = $7_1 + $5_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $6_1 | 0;
    $2_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $19_1 = $7_1;
    $5_1 = HEAP32[$18_1 + 96 >> 2];
    $7_1 = $5_1;
    $6_1 = $5_1 >> 31;
    $5_1 = __wasm_i64_mul($39_1, $40_1, $5_1, $6_1);
    $18_1 = $19_1 + $5_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $5_1 >>> 0 > $18_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    if ((($2_1 | 0) < ($14_1 | 0) ? 1 : ($14_1 | 0) >= ($2_1 | 0) ? $18_1 >>> 0 < $36_1 >>> 0 : 0) | HEAP32[$1_1 + 20 >> 2] == HEAP32[$0_1 + 100 >> 2]) {
     break label$3
    }
    $5_1 = __wasm_i64_mul($17_1, $13_1, $24_1, $25_1);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $13_1 = $5_1;
    $5_1 = __wasm_i64_mul($11_1, $9_1, $26_1, $27_1);
    $9_1 = $13_1 + $5_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $5_1 = __wasm_i64_mul($28_1, $29_1, $7_1, $6_1);
    $6_1 = $5_1 + $9_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $5_1 = $2_1;
    if (($2_1 | 0) < ($8_1 | 0) ? 1 : ($8_1 | 0) >= ($2_1 | 0) ? $10_1 >>> 0 >= $6_1 >>> 0 : 0) {
     break label$3
    }
    HEAP32[$3_1 >> 2] = $1_1;
    $2_1 = HEAP32[$1_1 + 12 >> 2];
    $20_1 = HEAP32[$2_1 + 96 >> 2];
    $21_1 = HEAP32[$2_1 + 92 >> 2];
    $22_1 = HEAP32[$2_1 + 88 >> 2];
    $10_1 = $6_1;
    $8_1 = $5_1;
    continue;
   };
  }
  $1_1 = __wasm_i64_mul($24_1, $25_1, $23_1, $23_1 >> 31);
  $2_1 = i64toi32_i32$HIGH_BITS;
  $5_1 = $1_1;
  $1_1 = __wasm_i64_mul($26_1, $27_1, $15_1, $15_1 >> 31);
  $5_1 = $5_1 + $1_1 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
  $2_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $1_1 = __wasm_i64_mul($28_1, $29_1, $12_1, $12_1 >> 31);
  $6_1 = $1_1 + $5_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
  $5_1 = $1_1 >>> 0 > $6_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  $7_1 = $5_1;
  label$5 : {
   $1_1 = HEAP32[$4_1 >> 2];
   if (!$1_1) {
    $1_1 = 0;
    break label$5;
   }
   $2_1 = HEAP32[$1_1 + 12 >> 2];
   while (1) {
    if (!$2_1) {
     break label$5
    }
    $11_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] >> 2];
    $30_1 = HEAP32[$11_1 + 12 >> 2];
    $2_1 = HEAP32[$30_1 + 92 >> 2];
    $19_1 = $2_1;
    $43_1 = $2_1 >> 31;
    $2_1 = __wasm_i64_mul($41_1, $42_1, $2_1, $43_1);
    $9_1 = i64toi32_i32$HIGH_BITS;
    $13_1 = $2_1;
    $2_1 = HEAP32[$30_1 + 88 >> 2];
    $18_1 = $2_1;
    $17_1 = $2_1 >> 31;
    $5_1 = __wasm_i64_mul($37_1, $38_1, $2_1, $17_1);
    $13_1 = $13_1 + $5_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
    $2_1 = $5_1 >>> 0 > $13_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $35_1 = $13_1;
    $5_1 = HEAP32[$30_1 + 96 >> 2];
    $13_1 = $5_1;
    $9_1 = $5_1 >> 31;
    $5_1 = __wasm_i64_mul($39_1, $40_1, $5_1, $9_1);
    $30_1 = $35_1 + $5_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $5_1 >>> 0 > $30_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    if ((($2_1 | 0) < ($14_1 | 0) ? 1 : ($14_1 | 0) >= ($2_1 | 0) ? $30_1 >>> 0 < $36_1 >>> 0 : 0) | HEAP32[$11_1 + 20 >> 2] == HEAP32[$0_1 + 100 >> 2]) {
     break label$5
    }
    $5_1 = __wasm_i64_mul($19_1, $43_1, $24_1, $25_1);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $19_1 = $5_1;
    $5_1 = __wasm_i64_mul($26_1, $27_1, $18_1, $17_1);
    $17_1 = $19_1 + $5_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $5_1 >>> 0 > $17_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $5_1 = __wasm_i64_mul($28_1, $29_1, $13_1, $9_1);
    $9_1 = $5_1 + $17_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $5_1 = $2_1;
    if (($2_1 | 0) < ($7_1 | 0) ? 1 : ($7_1 | 0) >= ($2_1 | 0) ? $6_1 >>> 0 >= $9_1 >>> 0 : 0) {
     break label$5
    }
    HEAP32[$4_1 >> 2] = $11_1;
    $2_1 = HEAP32[$11_1 + 12 >> 2];
    $12_1 = HEAP32[$2_1 + 96 >> 2];
    $23_1 = HEAP32[$2_1 + 92 >> 2];
    $15_1 = HEAP32[$2_1 + 88 >> 2];
    $1_1 = $11_1;
    $6_1 = $9_1;
    $7_1 = $5_1;
    continue;
   };
  }
  label$8 : {
   $8_1 = $7_1 - (($6_1 >>> 0 < $10_1 >>> 0) + $8_1 | 0) | 0;
   $10_1 = $6_1 - $10_1 | 0;
   if (($8_1 | 0) > 0 ? 1 : ($8_1 | 0) >= 0 ? $10_1 >>> 0 >= 1 : 0) {
    while (1) {
     $1_1 = (Math_imul($33_1, $23_1 - $21_1 | 0) + Math_imul($32_1, $15_1 - $22_1 | 0) | 0) + Math_imul($34_1, $12_1 - $20_1 | 0) | 0;
     $36_1 = $1_1;
     $30_1 = $1_1 >> 31;
     label$11 : {
      $1_1 = HEAP32[$3_1 >> 2];
      if (!$1_1 | !HEAP32[$1_1 + 12 >> 2]) {
       break label$11
      }
      $11_1 = HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2];
      if (HEAP32[$11_1 + 20 >> 2] <= HEAP32[$0_1 + 100 >> 2]) {
       break label$11
      }
      $1_1 = HEAP32[$11_1 + 12 >> 2];
      $2_1 = HEAP32[$1_1 + 92 >> 2] - $21_1 | 0;
      $6_1 = HEAP32[$1_1 + 88 >> 2] - $22_1 | 0;
      $9_1 = HEAP32[$1_1 + 96 >> 2] - $20_1 | 0;
      $7_1 = (Math_imul($2_1, $33_1) + Math_imul($6_1, $32_1) | 0) + Math_imul($9_1, $34_1) | 0;
      $1_1 = $7_1 >>> 31 | 0;
      $5_1 = __wasm_i64_mul($24_1, $25_1, $2_1, $2_1 >> 31);
      $2_1 = i64toi32_i32$HIGH_BITS;
      $13_1 = $5_1;
      $5_1 = __wasm_i64_mul($26_1, $27_1, $6_1, $6_1 >> 31);
      $6_1 = $13_1 + $5_1 | 0;
      $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
      $2_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
      $5_1 = __wasm_i64_mul($28_1, $29_1, $9_1, $9_1 >> 31);
      $6_1 = $5_1 + $6_1 | 0;
      $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
      $2_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
      $5_1 = $6_1;
      if ($2_1 | $5_1) {
       if (($2_1 | 0) > -1) {
        break label$11
       }
       $1_1 = ($172($181($16_1 + 32 | 0, $7_1, $7_1 >> 31, $5_1, $2_1), $181($16_1 + 8 | 0, $36_1, $30_1, $10_1, $8_1)) | 0) > -1;
      }
      if (!$1_1) {
       break label$11
      }
      $1_1 = HEAP32[$11_1 + 12 >> 2];
      $20_1 = HEAP32[$1_1 + 96 >> 2];
      $21_1 = HEAP32[$1_1 + 92 >> 2];
      $22_1 = HEAP32[$1_1 + 88 >> 2];
      HEAP32[$3_1 >> 2] = ($31_1 | 0) == HEAP32[$3_1 >> 2] ? 0 : $11_1;
      $1_1 = $23_1 - $21_1 | 0;
      $1_1 = __wasm_i64_mul($24_1, $25_1, $1_1, $1_1 >> 31);
      $2_1 = i64toi32_i32$HIGH_BITS;
      $5_1 = $1_1;
      $1_1 = $15_1 - $22_1 | 0;
      $1_1 = __wasm_i64_mul($26_1, $27_1, $1_1, $1_1 >> 31);
      $8_1 = $5_1 + $1_1 | 0;
      $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
      $2_1 = $1_1 >>> 0 > $8_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
      $1_1 = $12_1 - $20_1 | 0;
      $1_1 = __wasm_i64_mul($28_1, $29_1, $1_1, $1_1 >> 31);
      $8_1 = $1_1 + $8_1 | 0;
      $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
      $10_1 = $8_1;
      $8_1 = $1_1 >>> 0 > $8_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
      continue;
     }
     $1_1 = HEAP32[$4_1 >> 2];
     if (!$1_1 | !HEAP32[$1_1 + 12 >> 2]) {
      break label$8
     }
     $35_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] >> 2];
     if (HEAP32[$35_1 + 20 >> 2] <= HEAP32[$0_1 + 100 >> 2]) {
      break label$8
     }
     $6_1 = HEAP32[$35_1 + 12 >> 2];
     $19_1 = HEAP32[$6_1 + 92 >> 2];
     $43_1 = $19_1 - $23_1 | 0;
     $1_1 = $43_1;
     $18_1 = $1_1;
     $17_1 = $1_1 >> 31;
     $1_1 = __wasm_i64_mul($41_1, $42_1, $1_1, $17_1);
     $2_1 = i64toi32_i32$HIGH_BITS;
     $5_1 = $1_1;
     $13_1 = HEAP32[$6_1 + 88 >> 2];
     $7_1 = $13_1 - $15_1 | 0;
     $1_1 = $7_1;
     $15_1 = $1_1;
     $14_1 = $1_1 >> 31;
     $1_1 = __wasm_i64_mul($37_1, $38_1, $1_1, $14_1);
     $5_1 = $5_1 + $1_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
     $2_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $44_1 = $5_1;
     $6_1 = HEAP32[$6_1 + 96 >> 2];
     $5_1 = $6_1 - $12_1 | 0;
     $1_1 = $5_1;
     $11_1 = $1_1;
     $9_1 = $1_1 >> 31;
     $1_1 = __wasm_i64_mul($39_1, $40_1, $1_1, $9_1);
     if (($44_1 | 0) != (0 - $1_1 | 0) | (0 - (i64toi32_i32$HIGH_BITS + (($1_1 | 0) != 0) | 0) | 0) != ($2_1 | 0)) {
      break label$8
     }
     $1_1 = $19_1 - $21_1 | 0;
     $1_1 = __wasm_i64_mul($24_1, $25_1, $1_1, $1_1 >> 31);
     $2_1 = i64toi32_i32$HIGH_BITS;
     $19_1 = $1_1;
     $1_1 = $13_1 - $22_1 | 0;
     $1_1 = __wasm_i64_mul($26_1, $27_1, $1_1, $1_1 >> 31);
     $12_1 = $19_1 + $1_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
     $2_1 = $1_1 >>> 0 > $12_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $1_1 = $6_1 - $20_1 | 0;
     $1_1 = __wasm_i64_mul($28_1, $29_1, $1_1, $1_1 >> 31);
     $6_1 = $1_1 + $12_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
     $2_1 = $1_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $1_1 = $2_1;
     if (($2_1 | 0) < 0 ? 1 : ($2_1 | 0) <= 0 ? $6_1 >>> 0 < 1 : 0) {
      break label$8
     }
     $12_1 = (Math_imul($33_1, $43_1) + Math_imul($7_1, $32_1) | 0) + Math_imul($5_1, $34_1) | 0;
     $7_1 = $12_1 >>> 31 | 0;
     $2_1 = __wasm_i64_mul($18_1, $17_1, $24_1, $25_1);
     $5_1 = i64toi32_i32$HIGH_BITS;
     $13_1 = $2_1;
     $2_1 = __wasm_i64_mul($26_1, $27_1, $15_1, $14_1);
     $14_1 = $13_1 + $2_1 | 0;
     $5_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
     $9_1 = __wasm_i64_mul($28_1, $29_1, $11_1, $9_1);
     $11_1 = $9_1 + $14_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 > $14_1 >>> 0 ? $5_1 + 1 | 0 : $5_1) | 0;
     $5_1 = $11_1;
     $2_1 = $9_1 >>> 0 > $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     if ($5_1 | $2_1) {
      if (($2_1 | 0) > -1) {
       break label$8
      }
      $7_1 = ($172($181($16_1 + 32 | 0, $12_1, $12_1 >> 31, $5_1, $2_1), $181($16_1 + 8 | 0, $36_1, $30_1, $10_1, $8_1)) | 0) > 0;
     }
     if (!$7_1) {
      break label$8
     }
     HEAP32[$4_1 >> 2] = $35_1;
     $2_1 = HEAP32[$35_1 + 12 >> 2];
     $12_1 = HEAP32[$2_1 + 96 >> 2];
     $23_1 = HEAP32[$2_1 + 92 >> 2];
     $15_1 = HEAP32[$2_1 + 88 >> 2];
     $10_1 = $6_1;
     $8_1 = $1_1;
     continue;
    }
   }
   if (($8_1 | 0) > -1) {
    break label$8
   }
   while (1) {
    $2_1 = (Math_imul($33_1, $23_1 - $21_1 | 0) + Math_imul($32_1, $15_1 - $22_1 | 0) | 0) + Math_imul($34_1, $12_1 - $20_1 | 0) | 0;
    $35_1 = $2_1;
    $36_1 = $2_1 >> 31;
    label$15 : {
     if (!$1_1 | !HEAP32[$1_1 + 12 >> 2]) {
      break label$15
     }
     $11_1 = HEAP32[HEAP32[$1_1 + 4 >> 2] + 8 >> 2];
     if (HEAP32[$11_1 + 20 >> 2] <= HEAP32[$0_1 + 100 >> 2]) {
      break label$15
     }
     $1_1 = HEAP32[$11_1 + 12 >> 2];
     $2_1 = HEAP32[$1_1 + 92 >> 2] - $23_1 | 0;
     $6_1 = HEAP32[$1_1 + 88 >> 2] - $15_1 | 0;
     $9_1 = HEAP32[$1_1 + 96 >> 2] - $12_1 | 0;
     $7_1 = (Math_imul($2_1, $33_1) + Math_imul($6_1, $32_1) | 0) + Math_imul($9_1, $34_1) | 0;
     $1_1 = ($7_1 | 0) > 0;
     $5_1 = __wasm_i64_mul($24_1, $25_1, $2_1, $2_1 >> 31);
     $2_1 = i64toi32_i32$HIGH_BITS;
     $13_1 = $5_1;
     $5_1 = __wasm_i64_mul($26_1, $27_1, $6_1, $6_1 >> 31);
     $6_1 = $13_1 + $5_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
     $2_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $5_1 = __wasm_i64_mul($28_1, $29_1, $9_1, $9_1 >> 31);
     $6_1 = $5_1 + $6_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
     $2_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $5_1 = $6_1;
     if ($2_1 | $5_1) {
      if (($2_1 | 0) > -1) {
       break label$15
      }
      $1_1 = ($172($181($16_1 + 32 | 0, $7_1, $7_1 >> 31, $5_1, $2_1), $181($16_1 + 8 | 0, $35_1, $36_1, $10_1, $8_1)) | 0) < 1;
     }
     if (!$1_1) {
      break label$15
     }
     $1_1 = HEAP32[$11_1 + 12 >> 2];
     $12_1 = HEAP32[$1_1 + 96 >> 2];
     $23_1 = HEAP32[$1_1 + 92 >> 2];
     $15_1 = HEAP32[$1_1 + 88 >> 2];
     $1_1 = ($45_1 | 0) == HEAP32[$4_1 >> 2] ? 0 : $11_1;
     HEAP32[$4_1 >> 2] = $1_1;
     $2_1 = $23_1 - $21_1 | 0;
     $2_1 = __wasm_i64_mul($24_1, $25_1, $2_1, $2_1 >> 31);
     $8_1 = i64toi32_i32$HIGH_BITS;
     $5_1 = $2_1;
     $2_1 = $15_1 - $22_1 | 0;
     $2_1 = __wasm_i64_mul($26_1, $27_1, $2_1, $2_1 >> 31);
     $10_1 = $5_1 + $2_1 | 0;
     $5_1 = i64toi32_i32$HIGH_BITS + $8_1 | 0;
     $5_1 = $2_1 >>> 0 > $10_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
     $2_1 = $12_1 - $20_1 | 0;
     $8_1 = __wasm_i64_mul($28_1, $29_1, $2_1, $2_1 >> 31);
     $10_1 = $8_1 + $10_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
     $2_1 = $8_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $8_1 = $2_1;
     continue;
    }
    $1_1 = HEAP32[$3_1 >> 2];
    if (!$1_1 | !HEAP32[$1_1 + 12 >> 2]) {
     break label$8
    }
    $31_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] + 4 >> 2];
    if (HEAP32[$31_1 + 20 >> 2] <= HEAP32[$0_1 + 100 >> 2]) {
     break label$8
    }
    $7_1 = HEAP32[$31_1 + 12 >> 2];
    $30_1 = HEAP32[$7_1 + 92 >> 2];
    $19_1 = $30_1 - $21_1 | 0;
    $1_1 = $19_1;
    $43_1 = $1_1;
    $18_1 = $1_1 >> 31;
    $1_1 = __wasm_i64_mul($41_1, $42_1, $1_1, $18_1);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $5_1 = $1_1;
    $6_1 = HEAP32[$7_1 + 88 >> 2];
    $17_1 = $6_1 - $22_1 | 0;
    $1_1 = $17_1;
    $13_1 = $1_1;
    $14_1 = $1_1 >> 31;
    $1_1 = __wasm_i64_mul($37_1, $38_1, $1_1, $14_1);
    $5_1 = $5_1 + $1_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $44_1 = $5_1;
    $5_1 = HEAP32[$7_1 + 96 >> 2];
    $7_1 = $5_1 - $20_1 | 0;
    $1_1 = $7_1;
    $11_1 = $1_1;
    $9_1 = $1_1 >> 31;
    $1_1 = __wasm_i64_mul($39_1, $40_1, $1_1, $9_1);
    if (($44_1 | 0) != (0 - $1_1 | 0) | (0 - (i64toi32_i32$HIGH_BITS + (($1_1 | 0) != 0) | 0) | 0) != ($2_1 | 0)) {
     break label$8
    }
    $1_1 = $23_1 - $30_1 | 0;
    $1_1 = __wasm_i64_mul($24_1, $25_1, $1_1, $1_1 >> 31);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $44_1 = $1_1;
    $1_1 = $15_1 - $6_1 | 0;
    $1_1 = __wasm_i64_mul($26_1, $27_1, $1_1, $1_1 >> 31);
    $6_1 = $44_1 + $1_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $1_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $1_1 = $12_1 - $5_1 | 0;
    $1_1 = __wasm_i64_mul($28_1, $29_1, $1_1, $1_1 >> 31);
    $6_1 = $1_1 + $6_1 | 0;
    $5_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $5_1 = $1_1 >>> 0 > $6_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
    if (($5_1 | 0) > -1) {
     break label$8
    }
    $17_1 = (Math_imul($33_1, $19_1) + Math_imul($17_1, $32_1) | 0) + Math_imul($7_1, $34_1) | 0;
    $1_1 = ($17_1 | 0) > 0;
    $7_1 = __wasm_i64_mul($43_1, $18_1, $24_1, $25_1);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $18_1 = $7_1;
    $7_1 = __wasm_i64_mul($26_1, $27_1, $13_1, $14_1);
    $14_1 = $18_1 + $7_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $7_1 >>> 0 > $14_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $7_1 = __wasm_i64_mul($28_1, $29_1, $11_1, $9_1);
    $9_1 = $7_1 + $14_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $7_1 >>> 0 > $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $7_1 = $9_1;
    if ($2_1 | $7_1) {
     if (($2_1 | 0) > -1) {
      break label$8
     }
     $1_1 = $172($181($16_1 + 32 | 0, $17_1, $17_1 >> 31, $7_1, $2_1), $181($16_1 + 8 | 0, $35_1, $36_1, $10_1, $8_1)) >>> 31 | 0;
    }
    if (!$1_1) {
     break label$8
    }
    HEAP32[$3_1 >> 2] = $31_1;
    $2_1 = HEAP32[$31_1 + 12 >> 2];
    $20_1 = HEAP32[$2_1 + 96 >> 2];
    $21_1 = HEAP32[$2_1 + 92 >> 2];
    $1_1 = HEAP32[$4_1 >> 2];
    $22_1 = HEAP32[$2_1 + 88 >> 2];
    $10_1 = $6_1;
    $8_1 = $5_1;
    continue;
   };
  }
  global$0 = $16_1 + 80 | 0;
 }
 
 function $179($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0;
  $10_1 = global$0 - 32 | 0;
  global$0 = $10_1;
  $7_1 = HEAP32[$2_1 + 8 >> 2];
  if ($7_1) {
   $21_1 = $3_1 + 4 | 0;
   $11_1 = $7_1;
   while (1) {
    if (HEAP32[$11_1 + 20 >> 2] > HEAP32[$0_1 + 100 >> 2]) {
     $13_1 = $10_1 + 8 | 0;
     $8_1 = HEAP32[$11_1 + 12 >> 2];
     $18_1 = HEAP32[$8_1 + 92 >> 2] - HEAP32[$2_1 + 92 >> 2] | 0;
     $7_1 = $18_1;
     $16_1 = $7_1 >> 31;
     $7_1 = __wasm_i64_mul($7_1, $16_1, HEAP32[$5_1 + 8 >> 2], HEAP32[$5_1 + 12 >> 2]);
     $14_1 = i64toi32_i32$HIGH_BITS;
     $12_1 = $7_1;
     $19_1 = HEAP32[$8_1 + 88 >> 2] - HEAP32[$2_1 + 88 >> 2] | 0;
     $7_1 = $19_1;
     $20_1 = $7_1 >> 31;
     $15_1 = __wasm_i64_mul($7_1, $20_1, HEAP32[$5_1 >> 2], HEAP32[$5_1 + 4 >> 2]);
     $12_1 = $12_1 + $15_1 | 0;
     $7_1 = i64toi32_i32$HIGH_BITS + $14_1 | 0;
     $7_1 = $12_1 >>> 0 < $15_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
     $14_1 = $12_1;
     $12_1 = HEAP32[$8_1 + 96 >> 2] - HEAP32[$2_1 + 96 >> 2] | 0;
     $8_1 = $12_1;
     $15_1 = $8_1 >> 31;
     $17_1 = __wasm_i64_mul($8_1, $15_1, HEAP32[$5_1 + 16 >> 2], HEAP32[$5_1 + 20 >> 2]);
     $8_1 = $14_1 + $17_1 | 0;
     $7_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
     $7_1 = $8_1 >>> 0 < $17_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
     $14_1 = __wasm_i64_mul(HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 12 >> 2], $18_1, $16_1);
     $16_1 = i64toi32_i32$HIGH_BITS;
     $17_1 = $13_1;
     $22_1 = $8_1;
     $23_1 = $7_1;
     $13_1 = __wasm_i64_mul(HEAP32[$4_1 >> 2], HEAP32[$4_1 + 4 >> 2], $19_1, $20_1);
     $8_1 = $13_1 + $14_1 | 0;
     $7_1 = i64toi32_i32$HIGH_BITS + $16_1 | 0;
     $7_1 = $8_1 >>> 0 < $13_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
     $13_1 = __wasm_i64_mul(HEAP32[$4_1 + 16 >> 2], HEAP32[$4_1 + 20 >> 2], $12_1, $15_1);
     $8_1 = $13_1 + $8_1 | 0;
     $7_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
     $7_1 = $181($17_1, $22_1, $23_1, $8_1, $8_1 >>> 0 < $13_1 >>> 0 ? $7_1 + 1 | 0 : $7_1);
     label$5 : {
      if (HEAP32[$10_1 + 16 >> 2] | HEAP32[$10_1 + 20 >> 2] ? 0 : !HEAP32[$10_1 + 24 >> 2]) {
       break label$5
      }
      if (!$9_1) {
       $9_1 = HEAP32[$10_1 + 12 >> 2];
       HEAP32[$6_1 >> 2] = HEAP32[$10_1 + 8 >> 2];
       HEAP32[$6_1 + 4 >> 2] = $9_1;
       HEAP32[$6_1 + 16 >> 2] = HEAP32[$10_1 + 24 >> 2];
       $7_1 = $10_1 + 16 | 0;
       $8_1 = HEAP32[$7_1 + 4 >> 2];
       $9_1 = $6_1 + 8 | 0;
       HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$9_1 + 4 >> 2] = $8_1;
       $9_1 = $11_1;
       break label$5;
      }
      $7_1 = $172($7_1, $6_1);
      if (($7_1 | 0) <= -1) {
       $9_1 = HEAP32[$10_1 + 12 >> 2];
       HEAP32[$6_1 >> 2] = HEAP32[$10_1 + 8 >> 2];
       HEAP32[$6_1 + 4 >> 2] = $9_1;
       HEAP32[$6_1 + 16 >> 2] = HEAP32[$10_1 + 24 >> 2];
       $7_1 = $10_1 + 16 | 0;
       $8_1 = HEAP32[$7_1 + 4 >> 2];
       $9_1 = $6_1 + 8 | 0;
       HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$9_1 + 4 >> 2] = $8_1;
       $9_1 = $11_1;
       break label$5;
      }
      if ($7_1) {
       break label$5
      }
      $9_1 = ($177($9_1, $11_1, HEAP32[$3_1 >> 2], HEAP32[$21_1 >> 2], HEAP32[$3_1 + 8 >> 2], $19_1, $18_1, $12_1) | 0) != 2 ^ $1_1 ? $11_1 : $9_1;
     }
     $7_1 = HEAP32[$2_1 + 8 >> 2];
    }
    $11_1 = HEAP32[$11_1 >> 2];
    if (($11_1 | 0) != ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $10_1 + 32 | 0;
  return $9_1;
 }
 
 function $180($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[$1_1 + 8 >> 2];
  $2_1 = HEAP32[$1_1 >> 2];
  if (($2_1 | 0) != ($1_1 | 0)) {
   HEAP32[$2_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
   HEAP32[HEAP32[$1_1 + 4 >> 2] >> 2] = $2_1;
   $4_1 = $2_1;
  }
  HEAP32[HEAP32[$3_1 + 12 >> 2] + 8 >> 2] = $4_1;
  $2_1 = HEAP32[$3_1 >> 2];
  if (($2_1 | 0) != ($3_1 | 0)) {
   HEAP32[$2_1 + 4 >> 2] = HEAP32[$3_1 + 4 >> 2];
   HEAP32[HEAP32[$3_1 + 4 >> 2] >> 2] = $2_1;
   $5_1 = $2_1;
  }
  HEAP32[HEAP32[$1_1 + 12 >> 2] + 8 >> 2] = $5_1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 16 >> 2] = 0;
  $2_1 = $1_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 56 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[$3_1 + 16 >> 2] = 0;
  $1_1 = $3_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$2_1 >> 2] = $3_1;
  HEAP32[$0_1 + 116 >> 2] = HEAP32[$0_1 + 116 >> 2] - 1;
 }
 
 function $181($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  label$1 : {
   if (($2_1 | 0) > 0 ? 1 : ($2_1 | 0) >= 0 ? $1_1 >>> 0 >= 1 : 0) {
    HEAP32[$0_1 + 16 >> 2] = 1;
    $5_1 = -1;
    break label$1;
   }
   if (($2_1 | 0) < -1 ? 1 : ($2_1 | 0) <= -1) {
    HEAP32[$0_1 + 16 >> 2] = -1;
    $5_1 = $1_1;
    $1_1 = 0 - $1_1 | 0;
    $2_1 = 0 - ((($5_1 | 0) != 0) + $2_1 | 0) | 0;
    $5_1 = 1;
    break label$1;
   }
   HEAP32[$0_1 + 16 >> 2] = 0;
   $1_1 = 0;
   $2_1 = 0;
   $5_1 = 0;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $1_1 = 0;
  $2_1 = 0;
  label$4 : {
   if (($4_1 | 0) > 0 ? 1 : ($4_1 | 0) >= 0 ? $3_1 : 0) {
    $1_1 = $3_1;
    $2_1 = $4_1;
    break label$4;
   }
   if (($4_1 | 0) > -1) {
    break label$4
   }
   HEAP32[$0_1 + 16 >> 2] = $5_1;
   $1_1 = 0 - $3_1 | 0;
   $2_1 = 0 - ((($3_1 | 0) != 0) + $4_1 | 0) | 0;
  }
  HEAP32[$0_1 + 8 >> 2] = $1_1;
  HEAP32[$0_1 + 12 >> 2] = $2_1;
  return $0_1;
 }
 
 function $182($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $4_1 = $120($1_1 << 2)
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     HEAP32[$4_1 + $3_1 >> 2] = HEAP32[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 2];
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 + 4 | 0;
     continue;
    }
    break;
   };
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $183($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $10_1 = HEAP32[$0_1 + 12 >> 2];
  $3_1 = $10_1 + (($1_1 + $2_1 | 0) / 2 << 4) | 0;
  $8_1 = $3_1 + 8 | 0;
  $6_1 = HEAP32[$8_1 + 4 >> 2];
  $4_1 = $5_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $6_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  $8_1 = $1_1;
  $6_1 = $2_1;
  while (1) {
   $3_1 = ($8_1 << 4) + $10_1 | 0;
   while (1) {
    $8_1 = $8_1 + 1 | 0;
    $4_1 = $184($3_1, $5_1);
    $9_1 = $3_1 + 16 | 0;
    $3_1 = $9_1;
    if ($4_1) {
     continue
    }
    break;
   };
   $4_1 = $8_1 - 1 | 0;
   $3_1 = ($6_1 << 4) + 16 | 0;
   while (1) {
    $6_1 = $6_1 - 1 | 0;
    $7_1 = $3_1 + $10_1 | 0;
    $12_1 = $3_1 - 16 | 0;
    $3_1 = $12_1;
    if ($184($5_1, $7_1 - 16 | 0)) {
     continue
    }
    break;
   };
   $3_1 = $6_1 + 1 | 0;
   if (($3_1 | 0) >= ($4_1 | 0)) {
    $4_1 = $9_1 - 16 | 0;
    $9_1 = $4_1 + 8 | 0;
    $7_1 = $9_1;
    $3_1 = HEAP32[$7_1 + 4 >> 2];
    $11_1 = $5_1 + 24 | 0;
    HEAP32[$11_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $3_1;
    $3_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$5_1 + 16 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$5_1 + 20 >> 2] = $3_1;
    $7_1 = $10_1 + $12_1 | 0;
    $3_1 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $3_1 = $7_1 + 8 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$9_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$9_1 + 4 >> 2] = $4_1;
    $4_1 = HEAP32[$5_1 + 20 >> 2];
    $7_1 = HEAP32[$0_1 + 12 >> 2] + $12_1 | 0;
    $3_1 = $7_1;
    HEAP32[$3_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $4_1 = HEAP32[$11_1 + 4 >> 2];
    $3_1 = $3_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $3_1 = $6_1;
    $4_1 = $8_1;
   }
   if (($3_1 | 0) >= ($4_1 | 0)) {
    $10_1 = HEAP32[$0_1 + 12 >> 2];
    $8_1 = $4_1;
    $6_1 = $3_1;
    continue;
   }
   break;
  };
  if (($1_1 | 0) < ($3_1 | 0)) {
   $183($0_1, $1_1, $3_1)
  }
  if (($2_1 | 0) > ($4_1 | 0)) {
   $183($0_1, $4_1, $2_1)
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $184($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $4_1 = 1;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  label$1 : {
   if (($2_1 | 0) < ($3_1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) != ($3_1 | 0)) {
    return 0
   }
   $2_1 = HEAP32[$0_1 >> 2];
   $3_1 = HEAP32[$1_1 >> 2];
   if (($2_1 | 0) < ($3_1 | 0)) {
    break label$1
   }
   $4_1 = 0;
   if (($2_1 | 0) != ($3_1 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[$0_1 + 8 >> 2] < HEAP32[$1_1 + 8 >> 2];
  }
  return $4_1;
 }
 
 function $185($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $5_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $2_1 + 8 | 0;
  $3_1 = $4_1;
  HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $153($2_1);
  $3_1 = HEAP32[$4_1 + 4 >> 2];
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $186($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  $1_1 = HEAP32[$0_1 + 12 >> 2];
  $5_1 = $1_1;
  $4_1 = Math_fround(Math_fround(Math_fround(+($3_1 >>> 0) + +($1_1 >>> 0) * 4294967296.0) * Math_fround(18446744073709551615.0)) + Math_fround(+HEAPU32[$0_1 >> 2] + +HEAPU32[$0_1 + 4 >> 2] * 4294967296.0));
  label$1 : {
   if (($1_1 | 0) > 0 ? 1 : ($1_1 | 0) >= 0) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   $0_1 = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 >> 2] = 0 - $0_1;
   HEAP32[$2_1 + 4 >> 2] = 0 - ($1_1 + (($0_1 | 0) != 0) | 0);
   $0_1 = !($0_1 | $1_1);
   $1_1 = $3_1 ^ -1;
   $3_1 = $0_1 + $1_1 | 0;
   $0_1 = $5_1 ^ -1;
   HEAP32[$2_1 + 8 >> 2] = $3_1;
   HEAP32[$2_1 + 12 >> 2] = $1_1 >>> 0 > $3_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
   $4_1 = Math_fround(-$186($2_1));
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1;
 }
 
 function $187($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$0_1 + 104 >> 2];
  if (($2_1 | 0) <= -1) {
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$0_1 + 104 >> 2] = $2_1;
   $3_1 = $2_1;
   if (HEAP32[$1_1 + 8 >> 2] == ($2_1 | 0)) {
    $182($1_1, $2_1 ? $2_1 << 1 : 1);
    $3_1 = HEAP32[$1_1 + 4 >> 2];
   }
   HEAP32[$1_1 + 4 >> 2] = $3_1 + 1;
   HEAP32[HEAP32[$1_1 + 12 >> 2] + ($3_1 << 2) >> 2] = $0_1;
  }
  return $2_1;
 }
 
 function $188($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $189($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 12 >> 2] + Math_imul($2_1, 12) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
 }
 
 function $189($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $6_1 = $120(Math_imul($1_1, 12))
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     $4_1 = HEAP32[$0_1 + 12 >> 2] + $3_1 | 0;
     $7_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $6_1 + $3_1 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $7_1;
     HEAP32[$5_1 + 8 >> 2] = HEAP32[$4_1 + 8 >> 2];
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 + 12 | 0;
     continue;
    }
    break;
   };
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $6_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $190($0_1) {
  $154($0_1);
  HEAP32[$0_1 + 56 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 10104;
 }
 
 function $191($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 10104;
  $1_1 = HEAP32[$0_1 + 56 >> 2];
  if ($1_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $121(HEAP32[$0_1 + 56 >> 2]);
  }
  return $0_1 | 0;
 }
 
 function $192($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 80 >> 2]]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $193($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $4_1 = $3_1 + 44 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 1065353216;
  $4_1 = $3_1 - -64 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 76 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = 1065353216;
  $4_1 = $3_1 + 84 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 1065353216;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $1_1 = Math_fround($1_1 * Math_fround(.0833333283662796));
  $6_1 = Math_fround($5_1 + Math_fround(Math_fround(HEAPF32[$3_1 >> 2] - HEAPF32[$3_1 + 16 >> 2]) * Math_fround(.5)));
  $6_1 = Math_fround($6_1 + $6_1);
  $6_1 = Math_fround($6_1 * $6_1);
  $7_1 = Math_fround($5_1 + Math_fround(Math_fround(HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$3_1 + 20 >> 2]) * Math_fround(.5)));
  $7_1 = Math_fround($7_1 + $7_1);
  $7_1 = Math_fround($7_1 * $7_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($6_1 + $7_1);
  $5_1 = Math_fround($5_1 + Math_fround(Math_fround(HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$3_1 + 24 >> 2]) * Math_fround(.5)));
  $5_1 = Math_fround($5_1 + $5_1);
  $5_1 = Math_fround($5_1 * $5_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($6_1 + $5_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($7_1 + $5_1);
  global$0 = $3_1 + 96 | 0;
 }
 
 function $194($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 48 >> 2] = $1_1;
 }
 
 function $195($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $3_1 = global$0 - 2080 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $4_1 = $0_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $8_1 = $2_1 + 8 | 0;
  $9_1 = HEAP32[$8_1 + 4 >> 2];
  $4_1 = $3_1 + 2072 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3_1 + 2064 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 2068 >> 2] = $6_1;
  $7_1 = HEAPF32[$3_1 + 2064 >> 2];
  $11_1 = HEAPF32[$3_1 + 2068 >> 2];
  $12_1 = HEAPF32[$4_1 >> 2];
  $5_1 = $149($7_1, $11_1, $12_1);
  label$1 : {
   if ($5_1 < Math_fround(9.999999747378752e-05)) {
    HEAP32[$3_1 + 2072 >> 2] = 0;
    HEAP32[$3_1 + 2076 >> 2] = 0;
    HEAP32[$3_1 + 2064 >> 2] = 1065353216;
    HEAP32[$3_1 + 2068 >> 2] = 0;
    break label$1;
   }
   $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($5_1)));
   HEAPF32[$3_1 + 2072 >> 2] = $5_1 * $12_1;
   HEAPF32[$3_1 + 2068 >> 2] = $5_1 * $11_1;
   HEAPF32[$3_1 + 2064 >> 2] = $5_1 * $7_1;
  }
  $5_1 = Math_fround(-999999984306749440.0);
  $9_1 = $0_1 + 8 | 0;
  while (1) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 100 >> 2]]($1_1) | 0) > ($10_1 | 0)) {
    $4_1 = 128;
    label$5 : {
     label$6 : {
      if (((FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 100 >> 2]]($1_1) | 0) - $10_1 | 0) > 127) {
       break label$6
      }
      $4_1 = (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 100 >> 2]]($1_1) | 0) - $10_1 | 0;
      if (($4_1 | 0) >= 1) {
       break label$6
      }
      $2_1 = 0;
      break label$5;
     }
     $2_1 = $4_1;
    }
    $8_1 = $2_1;
    $2_1 = 0;
    $6_1 = $3_1;
    while (1) {
     if (($2_1 | 0) != ($8_1 | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 112 >> 2]]($1_1, $2_1, $6_1);
      $6_1 = $6_1 + 16 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue;
     }
     break;
    };
    $2_1 = $151($3_1 + 2064 | 0, $3_1, $4_1, $3_1 + 2060 | 0);
    $7_1 = HEAPF32[$3_1 + 2060 >> 2];
    if ($7_1 > $5_1) {
     $2_1 = ($2_1 << 4) + $3_1 | 0;
     $4_1 = HEAP32[$2_1 + 12 >> 2];
     HEAP32[$9_1 >> 2] = HEAP32[$2_1 + 8 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $4_1;
     $5_1 = $7_1;
    }
    $10_1 = $10_1 + 128 | 0;
    continue;
   }
   break;
  };
  global$0 = $3_1 + 2080 | 0;
 }
 
 function $196($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 2064 | 0;
  global$0 = $5_1;
  $4_1 = $2_1 + 12 | 0;
  $10_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  $3_1 = $10_1;
  while (1) {
   if ($3_1) {
    HEAP32[$4_1 >> 2] = -581039253;
    $3_1 = $3_1 - 1 | 0;
    $4_1 = $4_1 + 16 | 0;
    continue;
   } else {
    label$5 : while (1) {
     if (($9_1 | 0) != ($10_1 | 0)) {
      $3_1 = $9_1 << 4;
      $13_1 = $3_1 + $1_1 | 0;
      $8_1 = $2_1 + $3_1 | 0;
      $11_1 = $8_1 + 12 | 0;
      $7_1 = 0;
      while (1) {
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 100 >> 2]]($0_1) | 0) <= ($7_1 | 0)) {
        $9_1 = $9_1 + 1 | 0;
        continue label$5;
       }
       $6_1 = 128;
       label$8 : {
        label$9 : {
         if (((FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 100 >> 2]]($0_1) | 0) - $7_1 | 0) > 127) {
          break label$9
         }
         $6_1 = (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 100 >> 2]]($0_1) | 0) - $7_1 | 0;
         if (($6_1 | 0) >= 1) {
          break label$9
         }
         $3_1 = 0;
         break label$8;
        }
        $3_1 = $6_1;
       }
       $14_1 = $3_1;
       $3_1 = 0;
       $4_1 = $5_1;
       while (1) {
        if (($3_1 | 0) != ($14_1 | 0)) {
         FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 112 >> 2]]($0_1, $3_1, $4_1);
         $4_1 = $4_1 + 16 | 0;
         $3_1 = $3_1 + 1 | 0;
         continue;
        }
        break;
       };
       $3_1 = $151($13_1, $5_1, $6_1, $5_1 + 2060 | 0);
       $12_1 = HEAPF32[$5_1 + 2060 >> 2];
       if ($12_1 > HEAPF32[$11_1 >> 2]) {
        $3_1 = ($3_1 << 4) + $5_1 | 0;
        $6_1 = HEAP32[$3_1 + 12 >> 2];
        $4_1 = $8_1 + 8 | 0;
        HEAP32[$4_1 >> 2] = HEAP32[$3_1 + 8 >> 2];
        HEAP32[$4_1 + 4 >> 2] = $6_1;
        $4_1 = HEAP32[$3_1 + 4 >> 2];
        HEAP32[$8_1 >> 2] = HEAP32[$3_1 >> 2];
        HEAP32[$8_1 + 4 >> 2] = $4_1;
        HEAPF32[$11_1 >> 2] = $12_1;
       }
       $7_1 = $7_1 + 128 | 0;
       continue;
      };
     }
     break;
    }
   }
   break;
  };
  global$0 = $5_1 + 2064 | 0;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  return 0;
 }
 
 function $198($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25_1 = 0, $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = 0;
  $2_1 = global$0 - 256 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0_1 + 56 >> 2];
  if ($3_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] >> 2]]($3_1) | 0;
   $121(HEAP32[$0_1 + 56 >> 2]);
  }
  $3_1 = $120(132);
  HEAP32[$3_1 >> 2] = 10056;
  HEAP8[$3_1 + 20 | 0] = 1;
  HEAP32[$3_1 + 16 >> 2] = 0;
  HEAP8[$3_1 + 40 | 0] = 1;
  $4_1 = $3_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP8[$3_1 + 60 | 0] = 1;
  $4_1 = $3_1 + 28 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 56 >> 2] = 0;
  $4_1 = $3_1 + 48 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 56 >> 2] = $3_1;
  HEAP32[$2_1 + 148 >> 2] = 0;
  HEAP8[$2_1 + 152 | 0] = 1;
  HEAP32[$2_1 + 140 >> 2] = 0;
  HEAP32[$2_1 + 144 >> 2] = 0;
  $3_1 = 0;
  while (1) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 100 >> 2]]($0_1) | 0) <= ($3_1 | 0)) {
    HEAP8[$2_1 + 108 | 0] = 1;
    HEAP32[$2_1 + 104 >> 2] = 0;
    HEAP8[$2_1 + 128 | 0] = 1;
    $3_1 = $2_1 + 96 | 0;
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[$3_1 + 4 >> 2] = 0;
    HEAP32[$2_1 + 124 >> 2] = 0;
    $3_1 = $2_1 + 116 | 0;
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[$3_1 + 4 >> 2] = 0;
    HEAP32[$2_1 + 84 >> 2] = 0;
    HEAP8[$2_1 + 88 | 0] = 1;
    HEAP32[$2_1 + 76 >> 2] = 0;
    HEAP32[$2_1 + 80 >> 2] = 0;
    label$4 : {
     if ($1_1) {
      HEAP32[$2_1 + 188 >> 2] = 0;
      HEAP8[$2_1 + 192 | 0] = 1;
      HEAP32[$2_1 + 180 >> 2] = 0;
      HEAP32[$2_1 + 184 >> 2] = 0;
      $20_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
      $3_1 = 0;
      label$6 : while (1) {
       if (($3_1 | 0) != ($20_1 | 0)) {
        $11_1 = ($3_1 << 4) + $12_1 | 0;
        $21_1 = $11_1 + 8 | 0;
        $25_1 = $11_1 + 4 | 0;
        $1_1 = $3_1 + 1 | 0;
        $3_1 = $1_1;
        label$8 : while (1) {
         if (($3_1 | 0) == ($5_1 | 0)) {
          $3_1 = $1_1;
          continue label$6;
         }
         $23_1 = ($3_1 << 4) + $12_1 | 0;
         $28_1 = $23_1 + 8 | 0;
         $27_1 = $23_1 + 4 | 0;
         $7_1 = $3_1 + 1 | 0;
         $14_1 = $7_1;
         label$10 : while (1) {
          if (($5_1 | 0) <= ($14_1 | 0)) {
           $3_1 = $7_1;
           continue label$8;
          }
          $6_1 = HEAPF32[$11_1 >> 2];
          $8_1 = Math_fround(HEAPF32[$23_1 >> 2] - $6_1);
          $3_1 = ($14_1 << 4) + $12_1 | 0;
          $9_1 = HEAPF32[$25_1 >> 2];
          $13_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] - $9_1);
          $9_1 = Math_fround(HEAPF32[$27_1 >> 2] - $9_1);
          $6_1 = Math_fround(HEAPF32[$3_1 >> 2] - $6_1);
          $16_1 = Math_fround(Math_fround($8_1 * $13_1) - Math_fround($9_1 * $6_1));
          $17_1 = HEAPF32[$21_1 >> 2];
          $24_1 = Math_fround(HEAPF32[$28_1 >> 2] - $17_1);
          $26_1 = Math_fround($24_1 * $6_1);
          $6_1 = Math_fround(HEAPF32[$3_1 + 8 >> 2] - $17_1);
          $17_1 = Math_fround($26_1 - Math_fround($8_1 * $6_1));
          $13_1 = Math_fround(Math_fround($9_1 * $6_1) - Math_fround($24_1 * $13_1));
          $15_1 = 0;
          $6_1 = Math_fround(1.0);
          while (1) if (($15_1 | 0) == 2) {
           $14_1 = $14_1 + 1 | 0;
           continue label$10;
          } else {
           HEAP32[$2_1 + 20 >> 2] = 0;
           $8_1 = Math_fround($16_1 * $6_1);
           HEAPF32[$2_1 + 16 >> 2] = $8_1;
           $9_1 = Math_fround($17_1 * $6_1);
           HEAPF32[$2_1 + 12 >> 2] = $9_1;
           $6_1 = Math_fround($13_1 * $6_1);
           HEAPF32[$2_1 + 8 >> 2] = $6_1;
           label$15 : {
            if (!($149($6_1, $9_1, $8_1) > Math_fround(9.999999747378752e-05))) {
             break label$15
            }
            $4_1 = 0;
            $29_1 = $153($2_1 + 8 | 0);
            $19_1 = HEAP32[$2_1 + 180 >> 2];
            $22_1 = ($19_1 | 0) > 0 ? $19_1 : 0;
            $6_1 = HEAPF32[$2_1 + 16 >> 2];
            $8_1 = HEAPF32[$2_1 + 12 >> 2];
            $9_1 = HEAPF32[$2_1 + 8 >> 2];
            $3_1 = HEAP32[$2_1 + 188 >> 2];
            label$16 : {
             while (1) {
              $10_1 = $4_1;
              if (($22_1 | 0) == ($4_1 | 0)) {
               break label$16
              }
              $24_1 = HEAPF32[$3_1 >> 2];
              $18_1 = $3_1 + 4 | 0;
              $36_1 = $3_1 + 8 | 0;
              $3_1 = $3_1 + 16 | 0;
              $4_1 = $10_1 + 1 | 0;
              if (!(Math_fround(Math_fround(Math_fround($9_1 * $24_1) + Math_fround($8_1 * HEAPF32[$18_1 >> 2])) + Math_fround($6_1 * HEAPF32[$36_1 >> 2])) > Math_fround(.9990000128746033))) {
               continue
              }
              break;
             };
             if (($10_1 | 0) < ($19_1 | 0)) {
              break label$15
             }
            }
            $24_1 = Math_fround(Math_fround(Math_fround($9_1 * HEAPF32[$11_1 >> 2]) + Math_fround($8_1 * HEAPF32[$25_1 >> 2])) + Math_fround($6_1 * HEAPF32[$21_1 >> 2]));
            HEAPF32[$2_1 + 20 >> 2] = -$24_1;
            $4_1 = 0;
            $3_1 = $12_1;
            label$18 : {
             while (1) {
              $10_1 = $4_1;
              if (($20_1 | 0) == ($4_1 | 0)) {
               break label$18
              }
              $30_1 = HEAPF32[$3_1 >> 2];
              $19_1 = $3_1 + 4 | 0;
              $22_1 = $3_1 + 8 | 0;
              $3_1 = $3_1 + 16 | 0;
              $4_1 = $10_1 + 1 | 0;
              if (!(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $30_1) + Math_fround($8_1 * HEAPF32[$19_1 >> 2])) + Math_fround($6_1 * HEAPF32[$22_1 >> 2])) - $24_1) + Math_fround(-.009999999776482582)) > Math_fround(0.0))) {
               continue
              }
              break;
             };
             if (($5_1 | 0) > ($10_1 | 0)) {
              break label$15
             }
            }
            $200($2_1 + 176 | 0, $29_1);
           }
           $15_1 = $15_1 + 1 | 0;
           $6_1 = Math_fround(-1.0);
           continue;
          };
         };
        };
       }
       break;
      };
      HEAP8[$2_1 + 24 | 0] = 1;
      HEAP32[$2_1 + 12 >> 2] = 0;
      HEAP32[$2_1 + 16 >> 2] = 0;
      HEAP32[$2_1 + 20 >> 2] = 0;
      $1_1 = HEAP32[$2_1 + 180 >> 2];
      $4_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
      $3_1 = HEAP32[$2_1 + 188 >> 2];
      while (1) if ($4_1) {
       $5_1 = $3_1 + 8 | 0;
       $7_1 = HEAP32[$5_1 + 4 >> 2];
       $1_1 = $2_1 + 56 | 0;
       HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$1_1 + 4 >> 2] = $7_1;
       $1_1 = HEAP32[$3_1 + 4 >> 2];
       HEAP32[$2_1 + 48 >> 2] = HEAP32[$3_1 >> 2];
       HEAP32[$2_1 + 52 >> 2] = $1_1;
       $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
       HEAPF32[$2_1 + 60 >> 2] = HEAPF32[$2_1 + 60 >> 2] - $6_1;
       $3_1 = $3_1 + 16 | 0;
       $4_1 = $4_1 - 1 | 0;
       $200($2_1 + 8 | 0, $2_1 + 48 | 0);
       continue;
      } else {
       $3_1 = 0;
       HEAP32[$2_1 + 60 >> 2] = 0;
       HEAP8[$2_1 + 64 | 0] = 1;
       HEAP32[$2_1 + 52 >> 2] = 0;
       HEAP32[$2_1 + 56 >> 2] = 0;
       $11_1 = HEAP32[$2_1 + 12 >> 2];
       $25_1 = ($11_1 | 0) > 0 ? $11_1 : 0;
       $12_1 = HEAP32[$2_1 + 20 >> 2];
       label$23 : while (1) {
        if (($3_1 | 0) != ($25_1 | 0)) {
         $14_1 = $12_1 + ($3_1 << 4) | 0;
         $28_1 = $14_1 + 12 | 0;
         $20_1 = $14_1 + 8 | 0;
         $21_1 = $14_1 + 4 | 0;
         $5_1 = $3_1 + 1 | 0;
         $3_1 = $5_1;
         label$25 : while (1) {
          if (($3_1 | 0) == ($11_1 | 0)) {
           $3_1 = $5_1;
           continue label$23;
          }
          $15_1 = $12_1 + ($3_1 << 4) | 0;
          $23_1 = $15_1 + 8 | 0;
          $19_1 = $15_1 + 4 | 0;
          $27_1 = $15_1 + 12 | 0;
          $7_1 = $3_1 + 1 | 0;
          $4_1 = $7_1;
          while (1) if (($4_1 | 0) >= ($11_1 | 0)) {
           $3_1 = $7_1;
           continue label$25;
          } else {
           $1_1 = $12_1 + ($4_1 << 4) | 0;
           $3_1 = $1_1 + 4 | 0;
           $10_1 = $1_1 + 8 | 0;
           $201($2_1 + 160 | 0, HEAPF32[$15_1 >> 2], HEAPF32[$19_1 >> 2], HEAPF32[$23_1 >> 2], HEAPF32[$1_1 >> 2], HEAPF32[$3_1 >> 2], HEAPF32[$10_1 >> 2]);
           $26_1 = HEAPF32[$2_1 + 172 >> 2];
           $6_1 = HEAPF32[$2_1 + 168 >> 2];
           $8_1 = HEAPF32[$2_1 + 164 >> 2];
           $9_1 = HEAPF32[$2_1 + 160 >> 2];
           $201($2_1 + 160 | 0, HEAPF32[$1_1 >> 2], HEAPF32[$3_1 >> 2], HEAPF32[$10_1 >> 2], HEAPF32[$14_1 >> 2], HEAPF32[$21_1 >> 2], HEAPF32[$20_1 >> 2]);
           $24_1 = HEAPF32[$2_1 + 168 >> 2];
           $30_1 = HEAPF32[$2_1 + 164 >> 2];
           $31_1 = HEAPF32[$2_1 + 160 >> 2];
           $201($2_1 + 160 | 0, HEAPF32[$14_1 >> 2], HEAPF32[$21_1 >> 2], HEAPF32[$20_1 >> 2], HEAPF32[$15_1 >> 2], HEAPF32[$19_1 >> 2], HEAPF32[$23_1 >> 2]);
           $32_1 = HEAPF32[$2_1 + 168 >> 2];
           $33_1 = HEAPF32[$2_1 + 164 >> 2];
           $34_1 = HEAPF32[$2_1 + 160 >> 2];
           label$30 : {
            if (!($149($9_1, $8_1, $6_1) > Math_fround(9.999999747378752e-05))) {
             break label$30
            }
            if (!($149($31_1, $30_1, $24_1) > Math_fround(9.999999747378752e-05))) {
             break label$30
            }
            if (!($149($34_1, $33_1, $32_1) > Math_fround(9.999999747378752e-05))) {
             break label$30
            }
            $35_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$14_1 >> 2] * $9_1) + Math_fround(HEAPF32[$21_1 >> 2] * $8_1)) + Math_fround(HEAPF32[$20_1 >> 2] * $6_1));
            if (!(Math_fround(Math_abs($35_1)) > Math_fround(9.999999974752427e-07))) {
             break label$30
            }
            $13_1 = HEAPF32[$1_1 + 12 >> 2];
            $16_1 = HEAPF32[$27_1 >> 2];
            $17_1 = HEAPF32[$28_1 >> 2];
            HEAPF32[$2_1 + 172 >> 2] = $26_1;
            $26_1 = Math_fround(Math_fround(-1.0) / $35_1);
            $6_1 = Math_fround($26_1 * Math_fround(Math_fround($13_1 * $32_1) + Math_fround(Math_fround($16_1 * $24_1) + Math_fround($6_1 * $17_1))));
            HEAPF32[$2_1 + 168 >> 2] = $6_1;
            $8_1 = Math_fround($26_1 * Math_fround(Math_fround($13_1 * $33_1) + Math_fround(Math_fround($16_1 * $30_1) + Math_fround($8_1 * $17_1))));
            HEAPF32[$2_1 + 164 >> 2] = $8_1;
            $9_1 = Math_fround($26_1 * Math_fround(Math_fround($13_1 * $34_1) + Math_fround(Math_fround($16_1 * $31_1) + Math_fround($9_1 * $17_1))));
            HEAPF32[$2_1 + 160 >> 2] = $9_1;
            $1_1 = 0;
            $3_1 = $12_1;
            label$31 : {
             while (1) {
              $10_1 = $1_1;
              if (($25_1 | 0) == ($1_1 | 0)) {
               break label$31
              }
              $13_1 = HEAPF32[$3_1 >> 2];
              $29_1 = $3_1 + 4 | 0;
              $22_1 = $3_1 + 8 | 0;
              $18_1 = $3_1 + 12 | 0;
              $3_1 = $3_1 + 16 | 0;
              $1_1 = $10_1 + 1 | 0;
              if (!(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $9_1) + Math_fround(HEAPF32[$29_1 >> 2] * $8_1)) + Math_fround(HEAPF32[$22_1 >> 2] * $6_1)) + HEAPF32[$18_1 >> 2]) + Math_fround(-.009999999776482582)) > Math_fround(0.0))) {
               continue
              }
              break;
             };
             if (($11_1 | 0) > ($10_1 | 0)) {
              break label$30
             }
            }
            $200($2_1 + 48 | 0, $2_1 + 160 | 0);
           }
           $4_1 = $4_1 + 1 | 0;
           continue;
          };
         };
        }
        break;
       };
       $202($2_1 + 72 | 0, HEAP32[$2_1 + 60 >> 2], HEAP32[$2_1 + 52 >> 2]);
       $124($2_1 + 48 | 0);
       $124($2_1 + 8 | 0);
       $124($2_1 + 176 | 0);
       break label$4;
      };
     }
     $202($2_1 + 72 | 0, $12_1, $5_1);
    }
    $1_1 = HEAP32[$2_1 + 76 >> 2];
    $203(HEAP32[$0_1 + 56 >> 2] + 4 | 0, $1_1, $2_1 + 176 | 0);
    $3_1 = 0;
    $4_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
    $14_1 = HEAP32[$2_1 + 84 >> 2];
    while (1) {
     if ($4_1) {
      $5_1 = $3_1 + $14_1 | 0;
      $7_1 = HEAP32[$5_1 + 4 >> 2];
      $1_1 = HEAP32[HEAP32[$0_1 + 56 >> 2] + 16 >> 2] + $3_1 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $5_1 = $5_1 + 8 | 0;
      $7_1 = HEAP32[$5_1 + 4 >> 2];
      $1_1 = $1_1 + 8 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $4_1 = $4_1 - 1 | 0;
      $3_1 = $3_1 + 16 | 0;
      continue;
     } else {
      label$36 : {
       $1_1 = HEAP32[$2_1 + 116 >> 2];
       $15_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
       $20_1 = HEAP32[$2_1 + 104 >> 2];
       $21_1 = HEAP32[$2_1 + 124 >> 2];
       $11_1 = $2_1 + 56 | 0;
       $10_1 = 0;
       label$37 : while (1) {
        if (($10_1 | 0) == ($15_1 | 0)) {
         $12_1 = HEAP32[$0_1 + 56 >> 2];
         HEAP8[$2_1 + 212 | 0] = 1;
         HEAP32[$2_1 + 208 >> 2] = 0;
         HEAP8[$2_1 + 232 | 0] = 1;
         $0_1 = $2_1 + 200 | 0;
         HEAP32[$0_1 >> 2] = 0;
         HEAP32[$0_1 + 4 >> 2] = 0;
         HEAP32[$2_1 + 228 >> 2] = 0;
         HEAP8[$2_1 + 252 | 0] = 1;
         $0_1 = $2_1 + 220 | 0;
         HEAP32[$0_1 >> 2] = 0;
         HEAP32[$0_1 + 4 >> 2] = 0;
         HEAP32[$2_1 + 248 >> 2] = 0;
         $0_1 = $2_1 + 240 | 0;
         HEAP32[$0_1 >> 2] = 0;
         HEAP32[$0_1 + 4 >> 2] = 0;
         HEAP32[$2_1 + 188 >> 2] = 0;
         HEAP8[$2_1 + 192 | 0] = 1;
         HEAP32[$2_1 + 180 >> 2] = 0;
         HEAP32[$2_1 + 184 >> 2] = 0;
         $28_1 = $12_1 + 44 | 0;
         $20_1 = $2_1 + 196 | 0;
         $21_1 = $2_1 + 236 | 0;
         $25_1 = $2_1 + 216 | 0;
         $10_1 = 0;
         label$39 : while (1) {
          if (HEAP32[$12_1 + 28 >> 2] <= ($10_1 | 0)) {
           break label$36
          }
          $7_1 = 0;
          $27_1 = Math_imul($10_1, 36);
          $23_1 = HEAP32[($27_1 + HEAP32[$12_1 + 36 >> 2] | 0) + 4 >> 2];
          $29_1 = ($23_1 | 0) > 0 ? $23_1 : 0;
          $14_1 = $10_1 | -65536;
          while (1) {
           if (($7_1 | 0) == ($29_1 | 0)) {
            $10_1 = $10_1 + 1 | 0;
            continue label$39;
           }
           $0_1 = $7_1 << 2;
           $3_1 = HEAP32[($27_1 + HEAP32[$12_1 + 36 >> 2] | 0) + 12 >> 2];
           $7_1 = $7_1 + 1 | 0;
           $1_1 = HEAP16[$3_1 + (($7_1 | 0) % ($23_1 | 0) << 2) >> 1];
           $3_1 = HEAP16[$0_1 + $3_1 >> 1];
           $4_1 = ($1_1 | 0) > ($3_1 | 0);
           $0_1 = $4_1 ? $1_1 : $3_1;
           $15_1 = $4_1 ? $3_1 : $1_1;
           $1_1 = $169($2_1 + 176 | 0, $0_1, $15_1);
           $5_1 = HEAP32[$2_1 + 228 >> 2];
           $4_1 = HEAP32[$12_1 + 16 >> 2];
           $3_1 = $4_1 + ($15_1 << 4) | 0;
           $4_1 = $4_1 + ($0_1 << 4) | 0;
           HEAPF32[$2_1 + 16 >> 2] = HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$4_1 + 8 >> 2];
           HEAPF32[$2_1 + 12 >> 2] = HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$4_1 + 4 >> 2];
           HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$3_1 >> 2] - HEAPF32[$4_1 >> 2];
           HEAP32[$2_1 + 20 >> 2] = 0;
           $1_1 = ($1_1 | 0) == -1 ? 0 : $5_1 + ($1_1 << 2) | 0;
           $11_1 = $153($2_1 + 8 | 0);
           $3_1 = HEAP32[$12_1 + 48 >> 2];
           $5_1 = (($3_1 | 0) > 0 ? $3_1 : 0) + 1 | 0;
           $3_1 = 8;
           $6_1 = HEAPF32[$2_1 + 16 >> 2];
           $8_1 = HEAPF32[$2_1 + 12 >> 2];
           $9_1 = HEAPF32[$2_1 + 8 >> 2];
           label$42 : {
            while (1) {
             $5_1 = $5_1 - 1 | 0;
             if ($5_1) {
              $4_1 = HEAP32[$12_1 + 56 >> 2] + $3_1 | 0;
              $13_1 = HEAPF32[$4_1 - 8 >> 2];
              $16_1 = HEAPF32[$4_1 - 4 >> 2];
              $17_1 = HEAPF32[$4_1 >> 2];
              if ($168(Math_fround($13_1 - $9_1), Math_fround($16_1 - $8_1), Math_fround($17_1 - $6_1))) {
               break label$42
              }
              $3_1 = $3_1 + 16 | 0;
              if (!$168(Math_fround($13_1 + $9_1), Math_fround($16_1 + $8_1), Math_fround($17_1 + $6_1))) {
               continue
              }
              break label$42;
             }
             break;
            };
            $200($28_1, $11_1);
           }
           if ($1_1) {
            HEAP16[$1_1 + 2 >> 1] = $10_1;
            continue;
           }
           $1_1 = $169($2_1 + 176 | 0, $0_1, $15_1);
           if (($1_1 | 0) != -1) {
            $0_1 = HEAP32[$2_1 + 228 >> 2] + ($1_1 << 2) | 0;
            HEAP16[$0_1 >> 1] = $14_1;
            HEAP16[$0_1 + 2 >> 1] = $14_1 >>> 16;
           } else {
            $1_1 = HEAP32[$2_1 + 224 >> 2];
            $19_1 = HEAP32[$2_1 + 220 >> 2];
            $3_1 = $19_1;
            label$48 : {
             if (($1_1 | 0) != ($3_1 | 0)) {
              break label$48
             }
             $3_1 = $1_1;
             $11_1 = $3_1 ? $3_1 << 1 : 1;
             if (($3_1 | 0) >= ($11_1 | 0)) {
              break label$48
             }
             $3_1 = 0;
             $4_1 = $1_1;
             $5_1 = 0;
             if ($11_1) {
              $5_1 = $120($11_1 << 2);
              $4_1 = HEAP32[$2_1 + 220 >> 2];
             }
             $4_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
             while (1) {
              if ($4_1) {
               $22_1 = $3_1 + $5_1 | 0;
               $18_1 = HEAP32[$2_1 + 228 >> 2] + $3_1 | 0;
               $18_1 = HEAPU16[$18_1 >> 1] | HEAPU16[$18_1 + 2 >> 1] << 16;
               HEAP16[$22_1 >> 1] = $18_1;
               HEAP16[$22_1 + 2 >> 1] = $18_1 >>> 16;
               $4_1 = $4_1 - 1 | 0;
               $3_1 = $3_1 + 4 | 0;
               continue;
              }
              break;
             };
             $163($25_1);
             HEAP32[$2_1 + 228 >> 2] = $5_1;
             HEAP8[$2_1 + 232 | 0] = 1;
             HEAP32[$2_1 + 224 >> 2] = $11_1;
             $3_1 = HEAP32[$2_1 + 220 >> 2];
            }
            $15_1 = $15_1 << 16;
            $3_1 = HEAP32[$2_1 + 228 >> 2] + ($3_1 << 2) | 0;
            HEAP16[$3_1 >> 1] = $14_1;
            HEAP16[$3_1 + 2 >> 1] = $14_1 >>> 16;
            HEAP32[$2_1 + 220 >> 2] = HEAP32[$2_1 + 220 >> 2] + 1;
            $4_1 = HEAP32[$2_1 + 240 >> 2];
            label$52 : {
             if (($4_1 | 0) != HEAP32[$2_1 + 244 >> 2]) {
              break label$52
             }
             $11_1 = $4_1 ? $4_1 << 1 : 1;
             if (($11_1 | 0) <= ($4_1 | 0)) {
              break label$52
             }
             $3_1 = 0;
             $5_1 = 0;
             if ($11_1) {
              $5_1 = $120($11_1 << 2);
              $4_1 = HEAP32[$2_1 + 240 >> 2];
             }
             $4_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
             while (1) {
              if ($4_1) {
               $22_1 = $3_1 + $5_1 | 0;
               $18_1 = HEAP32[$2_1 + 248 >> 2] + $3_1 | 0;
               $18_1 = HEAPU16[$18_1 >> 1] | HEAPU16[$18_1 + 2 >> 1] << 16;
               HEAP16[$22_1 >> 1] = $18_1;
               HEAP16[$22_1 + 2 >> 1] = $18_1 >>> 16;
               $4_1 = $4_1 - 1 | 0;
               $3_1 = $3_1 + 4 | 0;
               continue;
              }
              break;
             };
             $163($21_1);
             HEAP32[$2_1 + 248 >> 2] = $5_1;
             HEAP8[$2_1 + 252 | 0] = 1;
             HEAP32[$2_1 + 244 >> 2] = $11_1;
             $4_1 = HEAP32[$2_1 + 240 >> 2];
            }
            $11_1 = $0_1 + $15_1 | 0;
            $3_1 = HEAP32[$2_1 + 248 >> 2] + ($4_1 << 2) | 0;
            $0_1 = $15_1 | $0_1 & 65535;
            HEAP16[$3_1 >> 1] = $0_1;
            HEAP16[$3_1 + 2 >> 1] = $0_1 >>> 16;
            HEAP32[$2_1 + 240 >> 2] = HEAP32[$2_1 + 240 >> 2] + 1;
            $0_1 = HEAP32[$2_1 + 224 >> 2];
            label$56 : {
             if (($0_1 | 0) <= ($1_1 | 0)) {
              break label$56
             }
             $1_1 = HEAP32[$2_1 + 180 >> 2];
             if (($1_1 | 0) >= ($0_1 | 0)) {
              $1_1 = $0_1;
              break label$56;
             }
             HEAP32[$2_1 + 48 >> 2] = 0;
             $204($2_1 + 176 | 0, $0_1, $2_1 + 48 | 0);
             HEAP32[$2_1 + 48 >> 2] = 0;
             $204($20_1, $0_1, $2_1 + 48 | 0);
             $5_1 = HEAP32[$2_1 + 188 >> 2];
             $3_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
             $4_1 = $3_1;
             while (1) {
              if ($4_1) {
               HEAP32[$5_1 >> 2] = -1;
               $4_1 = $4_1 - 1 | 0;
               $5_1 = $5_1 + 4 | 0;
               continue;
              } else {
               $4_1 = HEAP32[$2_1 + 208 >> 2];
               while (1) {
                if ($3_1) {
                 HEAP32[$4_1 >> 2] = -1;
                 $3_1 = $3_1 - 1 | 0;
                 $4_1 = $4_1 + 4 | 0;
                 continue;
                } else {
                 $3_1 = 0;
                 $0_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
                 $5_1 = HEAP32[$2_1 + 208 >> 2];
                 $1_1 = HEAP32[$2_1 + 188 >> 2];
                 $4_1 = HEAP32[$2_1 + 248 >> 2];
                 while (1) {
                  if (($0_1 | 0) != ($3_1 | 0)) {
                   $15_1 = $1_1 + ((HEAP16[$4_1 >> 1] + (HEAPU16[$4_1 + 2 >> 1] << 16) & HEAP32[$2_1 + 224 >> 2] - 1) << 2) | 0;
                   HEAP32[$5_1 >> 2] = HEAP32[$15_1 >> 2];
                   HEAP32[$15_1 >> 2] = $3_1;
                   $4_1 = $4_1 + 4 | 0;
                   $5_1 = $5_1 + 4 | 0;
                   $3_1 = $3_1 + 1 | 0;
                   continue;
                  }
                  break;
                 };
                 $1_1 = HEAP32[$2_1 + 224 >> 2];
                }
                break;
               };
              }
              break;
             };
            }
            $0_1 = HEAP32[$2_1 + 188 >> 2] + (($11_1 & $1_1 - 1) << 2) | 0;
            HEAP32[HEAP32[$2_1 + 208 >> 2] + ($19_1 << 2) >> 2] = HEAP32[$0_1 >> 2];
            HEAP32[$0_1 >> 2] = $19_1;
           }
           continue;
          };
         };
        }
        $5_1 = 0;
        HEAP32[$2_1 + 20 >> 2] = 0;
        HEAP8[$2_1 + 24 | 0] = 1;
        HEAP32[$2_1 + 12 >> 2] = 0;
        HEAP32[$2_1 + 16 >> 2] = 0;
        $3_1 = $20_1 + Math_imul(HEAP32[$21_1 + ($10_1 << 2) >> 2], 12) | 0;
        $12_1 = HEAP32[($3_1 + Math_imul(HEAP32[$3_1 + 4 >> 2], 12) | 0) + 8 >> 2];
        HEAP32[$2_1 + 160 >> 2] = $12_1;
        $205($2_1 + 8 | 0, $2_1 + 160 | 0);
        $7_1 = HEAP32[$3_1 + 8 >> 2];
        HEAP32[$2_1 + 44 >> 2] = $7_1;
        $1_1 = $12_1;
        while (1) {
         $4_1 = $7_1;
         if (($4_1 | 0) != ($12_1 | 0)) {
          $7_1 = $14_1 + ($4_1 << 4) | 0;
          $6_1 = HEAPF32[$7_1 >> 2];
          $1_1 = $14_1 + ($1_1 << 4) | 0;
          $8_1 = HEAPF32[$1_1 >> 2];
          $9_1 = HEAPF32[$7_1 + 4 >> 2];
          $13_1 = HEAPF32[$1_1 + 4 >> 2];
          $16_1 = HEAPF32[$7_1 + 8 >> 2];
          $17_1 = HEAPF32[$1_1 + 8 >> 2];
          HEAP32[$2_1 + 60 >> 2] = 0;
          HEAPF32[$2_1 + 56 >> 2] = $16_1 - $17_1;
          HEAPF32[$2_1 + 52 >> 2] = $9_1 - $13_1;
          HEAPF32[$2_1 + 48 >> 2] = $6_1 - $8_1;
          $153($2_1 + 48 | 0);
          $1_1 = 2;
          if (($5_1 | 0) <= 1) {
           $7_1 = HEAP32[$11_1 + 4 >> 2];
           $1_1 = ($2_1 + 176 | 0) + ($5_1 << 4) | 0;
           HEAP32[$1_1 + 8 >> 2] = HEAP32[$11_1 >> 2];
           HEAP32[$1_1 + 12 >> 2] = $7_1;
           $7_1 = HEAP32[$2_1 + 52 >> 2];
           HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 48 >> 2];
           HEAP32[$1_1 + 4 >> 2] = $7_1;
           $1_1 = $5_1 + 1 | 0;
          }
          $205($2_1 + 8 | 0, $2_1 + 44 | 0);
          $3_1 = Math_imul(HEAP32[$3_1 + 4 >> 2], 12) + $3_1 | 0;
          $3_1 = Math_imul(HEAP32[$3_1 >> 2], 12) + $3_1 | 0;
          $7_1 = HEAP32[$3_1 + 8 >> 2];
          HEAP32[$2_1 + 44 >> 2] = $7_1;
          $5_1 = $1_1;
          $1_1 = $4_1;
          continue;
         }
         break;
        };
        $6_1 = HEAPF32[$2_1 + 196 >> 2];
        $8_1 = HEAPF32[$2_1 + 176 >> 2];
        $9_1 = HEAPF32[$2_1 + 180 >> 2];
        $13_1 = HEAPF32[$2_1 + 192 >> 2];
        HEAPF32[$2_1 + 56 >> 2] = Math_fround($6_1 * $8_1) - Math_fround($9_1 * $13_1);
        $16_1 = $13_1;
        $13_1 = HEAPF32[$2_1 + 184 >> 2];
        $17_1 = $8_1;
        $8_1 = HEAPF32[$2_1 + 200 >> 2];
        HEAPF32[$2_1 + 52 >> 2] = Math_fround($16_1 * $13_1) - Math_fround($17_1 * $8_1);
        HEAPF32[$2_1 + 48 >> 2] = Math_fround($9_1 * $8_1) - Math_fround($13_1 * $6_1);
        HEAP32[$2_1 + 60 >> 2] = 0;
        $153($2_1 + 48 | 0);
        $1_1 = HEAP32[$2_1 + 12 >> 2];
        $3_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
        $6_1 = Math_fround(1000000015047466219876688.0e6);
        $8_1 = HEAPF32[$2_1 + 56 >> 2];
        $9_1 = HEAPF32[$2_1 + 52 >> 2];
        $13_1 = HEAPF32[$2_1 + 48 >> 2];
        $4_1 = HEAP32[$2_1 + 20 >> 2];
        while (1) if ($3_1) {
         $1_1 = HEAP32[HEAP32[$0_1 + 56 >> 2] + 16 >> 2] + (HEAP32[$4_1 >> 2] << 4) | 0;
         $16_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $13_1) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * $9_1)) + Math_fround(HEAPF32[$1_1 + 8 >> 2] * $8_1));
         $6_1 = $6_1 > $16_1 ? $16_1 : $6_1;
         $3_1 = $3_1 - 1 | 0;
         $4_1 = $4_1 + 4 | 0;
         continue;
        } else {
         HEAPF32[$2_1 + 36 >> 2] = $8_1;
         HEAPF32[$2_1 + 32 >> 2] = $9_1;
         HEAPF32[$2_1 + 28 >> 2] = $13_1;
         HEAPF32[$2_1 + 40 >> 2] = -$6_1;
         $206(HEAP32[$0_1 + 56 >> 2] + 24 | 0, $2_1 + 8 | 0);
         $10_1 = $10_1 + 1 | 0;
         $124($2_1 + 8 | 0);
         continue label$37;
        };
       };
      }
     }
     break;
    };
    $166($12_1);
    $163($21_1);
    HEAP32[$2_1 + 248 >> 2] = 0;
    HEAP8[$2_1 + 252 | 0] = 1;
    HEAP32[$2_1 + 240 >> 2] = 0;
    HEAP32[$2_1 + 244 >> 2] = 0;
    $163($25_1);
    HEAP32[$2_1 + 228 >> 2] = 0;
    HEAP8[$2_1 + 232 | 0] = 1;
    HEAP32[$2_1 + 220 >> 2] = 0;
    HEAP32[$2_1 + 224 >> 2] = 0;
    $124($20_1);
    $124($2_1 + 176 | 0);
    $124($2_1 + 112 | 0);
    $124($2_1 + 92 | 0);
    $124($2_1 + 72 | 0);
    $124($2_1 + 136 | 0);
    global$0 = $2_1 + 256 | 0;
   } else {
    $10_1 = $2_1;
    $4_1 = $5_1;
    if (($4_1 | 0) == HEAP32[$2_1 + 144 >> 2]) {
     $207($2_1 + 136 | 0, $4_1 ? $4_1 << 1 : 1);
     $12_1 = HEAP32[$2_1 + 148 >> 2];
     $7_1 = HEAP32[$2_1 + 140 >> 2];
    } else {
     $7_1 = $4_1
    }
    $5_1 = $7_1 + 1 | 0;
    HEAP32[$10_1 + 140 >> 2] = $5_1;
    $7_1 = HEAP32[$2_1 + 180 >> 2];
    $4_1 = ($4_1 << 4) + $12_1 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 + 176 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    $10_1 = $2_1 + 184 | 0;
    $14_1 = HEAP32[$10_1 + 4 >> 2];
    $7_1 = $4_1 + 8 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$10_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $14_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 112 >> 2]]($0_1, $3_1, $4_1);
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
  return 1;
 }
 
 function $200($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $207($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 12 >> 2] + ($2_1 << 4) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $2_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
 }
 
 function $201($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = Math_fround($5_1 * $1_1) - Math_fround($2_1 * $4_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround($3_1 * $4_1) - Math_fround($6_1 * $1_1);
  HEAPF32[$0_1 >> 2] = Math_fround($2_1 * $6_1) - Math_fround($3_1 * $5_1);
 }
 
 function $202($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 192 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($2_1 | 0) <= 0) {
    $124($0_1);
    $124($0_1 + 20 | 0);
    $124($0_1 + 40 | 0);
    break label$1;
   }
   HEAP8[$3_1 + 104 | 0] = 1;
   $4_1 = $3_1 + 80 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 256;
   $4_1 = $3_1 - -64 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 256;
   $4_1 = $3_1 + 48 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 256;
   HEAP32[$3_1 + 100 >> 2] = 0;
   $4_1 = $3_1 + 92 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 72 >> 2] = 0;
   HEAP32[$3_1 + 76 >> 2] = 0;
   HEAP32[$3_1 + 56 >> 2] = 0;
   HEAP32[$3_1 + 60 >> 2] = 0;
   HEAP32[$3_1 + 40 >> 2] = 0;
   HEAP32[$3_1 + 44 >> 2] = 0;
   $14_1 = Math_fround(1000000015047466219876688.0e6);
   $18_1 = Math_fround(-1000000015047466219876688.0e6);
   $5_1 = $2_1;
   $15_1 = Math_fround(-1000000015047466219876688.0e6);
   $16_1 = Math_fround(-1000000015047466219876688.0e6);
   $19_1 = Math_fround(1000000015047466219876688.0e6);
   $20_1 = Math_fround(1000000015047466219876688.0e6);
   $4_1 = $1_1;
   while (1) {
    if ($5_1) {
     $9_1 = HEAPF32[$4_1 + 8 >> 2];
     $16_1 = $9_1 > $16_1 ? $9_1 : $16_1;
     $8_1 = HEAPF32[$4_1 + 4 >> 2];
     $15_1 = $8_1 > $15_1 ? $8_1 : $15_1;
     $20_1 = $9_1 < $20_1 ? $9_1 : $20_1;
     $19_1 = $8_1 < $19_1 ? $8_1 : $19_1;
     $8_1 = HEAPF32[$4_1 >> 2];
     $18_1 = $8_1 > $18_1 ? $8_1 : $18_1;
     $14_1 = $8_1 < $14_1 ? $8_1 : $14_1;
     $4_1 = $4_1 + 16 | 0;
     $5_1 = $5_1 - 1 | 0;
     continue;
    }
    break;
   };
   $5_1 = 0;
   HEAP32[$3_1 + 188 >> 2] = 0;
   $12_1 = Math_fround($16_1 - $20_1);
   HEAPF32[$3_1 + 184 >> 2] = $12_1;
   $8_1 = Math_fround($15_1 - $19_1);
   HEAPF32[$3_1 + 180 >> 2] = $8_1;
   $9_1 = Math_fround($18_1 - $14_1);
   HEAPF32[$3_1 + 176 >> 2] = $9_1;
   label$5 : {
    if ($9_1 < $8_1) {
     $4_1 = $8_1 < $12_1 ? 2 : 1;
     HEAP32[$3_1 + 120 >> 2] = $4_1;
     break label$5;
    }
    $4_1 = ($9_1 < $12_1) << 1;
    HEAP32[$3_1 + 120 >> 2] = $4_1;
    $9_1 = $8_1;
    $5_1 = 1;
   }
   $5_1 = $9_1 < $12_1 ? $5_1 : 2;
   if (($5_1 | 0) == ($4_1 | 0)) {
    $5_1 = ($4_1 + 1 >>> 0) % 3 | 0
   }
   HEAP32[$3_1 + 112 >> 2] = $5_1;
   HEAP32[$3_1 + 116 >> 2] = ($4_1 ^ 3) - $5_1;
   $167($3_1 + 176 | 0, Math_fround(10216.0));
   $17_1 = HEAPF32[$3_1 + 176 >> 2];
   $6_1 = HEAP32[$3_1 + 120 >> 2];
   $5_1 = HEAP32[$3_1 + 116 >> 2];
   if (($6_1 | 0) != (($5_1 + 1 | 0) % 3 | 0)) {
    $17_1 = Math_fround(-$17_1);
    HEAPF32[$3_1 + 176 >> 2] = $17_1;
    HEAPF32[$3_1 + 180 >> 2] = -HEAPF32[$3_1 + 180 >> 2];
    HEAPF32[$3_1 + 184 >> 2] = -HEAPF32[$3_1 + 184 >> 2];
   }
   $7_1 = $3_1 + 184 | 0;
   $4_1 = HEAP32[$7_1 + 4 >> 2];
   $10_1 = $3_1 + 16 | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $4_1;
   $4_1 = HEAP32[$3_1 + 180 >> 2];
   HEAP32[$3_1 + 8 >> 2] = HEAP32[$3_1 + 176 >> 2];
   HEAP32[$3_1 + 12 >> 2] = $4_1;
   if ($17_1 != Math_fround(0.0)) {
    $17_1 = Math_fround(Math_fround(1.0) / $17_1);
    HEAPF32[$3_1 + 176 >> 2] = $17_1;
   }
   $12_1 = HEAPF32[$3_1 + 180 >> 2];
   if ($12_1 != Math_fround(0.0)) {
    $12_1 = Math_fround(Math_fround(1.0) / $12_1);
    HEAPF32[$3_1 + 180 >> 2] = $12_1;
   }
   $9_1 = HEAPF32[$3_1 + 184 >> 2];
   if ($9_1 != Math_fround(0.0)) {
    $9_1 = Math_fround(Math_fround(1.0) / $9_1);
    HEAPF32[$3_1 + 184 >> 2] = $9_1;
   }
   HEAP32[$3_1 + 36 >> 2] = 0;
   $16_1 = Math_fround(Math_fround($16_1 + $20_1) * Math_fround(.5));
   HEAPF32[$3_1 + 32 >> 2] = $16_1;
   $15_1 = Math_fround(Math_fround($15_1 + $19_1) * Math_fround(.5));
   HEAPF32[$3_1 + 28 >> 2] = $15_1;
   $14_1 = Math_fround(Math_fround($18_1 + $14_1) * Math_fround(.5));
   HEAPF32[$3_1 + 24 >> 2] = $14_1;
   HEAP32[$3_1 + 164 >> 2] = 0;
   HEAP8[$3_1 + 168 | 0] = 1;
   HEAP32[$3_1 + 156 >> 2] = 0;
   HEAP32[$3_1 + 160 >> 2] = 0;
   $4_1 = 0;
   if (($2_1 | 0) >= 0) {
    $11_1 = $120($2_1 << 4);
    $5_1 = HEAP32[$3_1 + 156 >> 2];
    $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
    while (1) {
     if ($5_1) {
      $13_1 = HEAP32[$3_1 + 164 >> 2] + $4_1 | 0;
      $7_1 = HEAP32[$13_1 + 4 >> 2];
      $6_1 = $4_1 + $11_1 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$13_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $7_1;
      $10_1 = $13_1 + 8 | 0;
      $7_1 = HEAP32[$10_1 + 4 >> 2];
      $6_1 = $6_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$10_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $7_1;
      $5_1 = $5_1 - 1 | 0;
      $4_1 = $4_1 + 16 | 0;
      continue;
     }
     break;
    };
    $163($3_1 + 152 | 0);
    HEAP32[$3_1 + 164 >> 2] = $11_1;
    HEAP8[$3_1 + 168 | 0] = 1;
    HEAP32[$3_1 + 160 >> 2] = $2_1;
    $5_1 = 0;
    $4_1 = $2_1;
    while (1) {
     if ($4_1) {
      $7_1 = HEAP32[$3_1 + 140 >> 2];
      $6_1 = HEAP32[$3_1 + 164 >> 2] + $5_1 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$3_1 + 136 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $7_1;
      $10_1 = $3_1 + 144 | 0;
      $7_1 = HEAP32[$10_1 + 4 >> 2];
      $6_1 = $6_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$10_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $7_1;
      $4_1 = $4_1 - 1 | 0;
      $5_1 = $5_1 + 16 | 0;
      continue;
     }
     break;
    };
    $6_1 = HEAP32[$3_1 + 120 >> 2];
    $5_1 = HEAP32[$3_1 + 116 >> 2];
    $16_1 = HEAPF32[$3_1 + 32 >> 2];
    $15_1 = HEAPF32[$3_1 + 28 >> 2];
    $14_1 = HEAPF32[$3_1 + 24 >> 2];
    $9_1 = HEAPF32[$3_1 + 184 >> 2];
    $12_1 = HEAPF32[$3_1 + 180 >> 2];
    $17_1 = HEAPF32[$3_1 + 176 >> 2];
    $4_1 = HEAP32[$3_1 + 164 >> 2];
   }
   HEAP32[$3_1 + 156 >> 2] = $2_1;
   $13_1 = ($3_1 + 136 | 0) + (HEAP32[$3_1 + 112 >> 2] << 2) | 0;
   $6_1 = ($3_1 + 136 | 0) + ($6_1 << 2) | 0;
   $10_1 = ($3_1 + 136 | 0) + ($5_1 << 2) | 0;
   $5_1 = 0;
   while (1) {
    if (($2_1 | 0) != ($5_1 | 0)) {
     HEAP32[$3_1 + 148 >> 2] = 0;
     HEAPF32[$3_1 + 136 >> 2] = Math_fround(HEAPF32[$1_1 >> 2] - $14_1) * $17_1;
     HEAPF32[$3_1 + 144 >> 2] = Math_fround(HEAPF32[$1_1 + 8 >> 2] - $16_1) * $9_1;
     HEAPF32[$3_1 + 140 >> 2] = Math_fround(HEAPF32[$1_1 + 4 >> 2] - $15_1) * $12_1;
     HEAP32[$4_1 + 12 >> 2] = $5_1;
     $11_1 = $4_1 + 8 | 0;
     $8_1 = HEAPF32[$13_1 >> 2];
     label$19 : {
      if (Math_fround(Math_abs($8_1)) < Math_fround(2147483648.0)) {
       $7_1 = ~~$8_1;
       break label$19;
      }
      $7_1 = -2147483648;
     }
     HEAP32[$11_1 >> 2] = $7_1;
     $11_1 = $4_1 + 4 | 0;
     $8_1 = HEAPF32[$6_1 >> 2];
     label$21 : {
      if (Math_fround(Math_abs($8_1)) < Math_fround(2147483648.0)) {
       $7_1 = ~~$8_1;
       break label$21;
      }
      $7_1 = -2147483648;
     }
     HEAP32[$11_1 >> 2] = $7_1;
     $7_1 = $4_1;
     $8_1 = HEAPF32[$10_1 >> 2];
     label$23 : {
      if (Math_fround(Math_abs($8_1)) < Math_fround(2147483648.0)) {
       $11_1 = ~~$8_1;
       break label$23;
      }
      $11_1 = -2147483648;
     }
     HEAP32[$7_1 >> 2] = $11_1;
     $1_1 = $1_1 + 16 | 0;
     $4_1 = $4_1 + 16 | 0;
     $5_1 = $5_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($2_1 | 0) >= 2) {
    $183($3_1 + 152 | 0, 0, $2_1 - 1 | 0)
   }
   HEAP32[$3_1 + 48 >> 2] = 0;
   HEAP32[$3_1 + 44 >> 2] = HEAP32[$3_1 + 40 >> 2];
   HEAP32[$3_1 + 52 >> 2] = $2_1;
   $11_1 = $3_1 + 88 | 0;
   label$26 : {
    $1_1 = HEAP32[$3_1 + 92 >> 2];
    if (($1_1 | 0) > ($2_1 | 0)) {
     break label$26
    }
    if (($1_1 | 0) < ($2_1 | 0)) {
     $182($11_1, $2_1)
    }
    $4_1 = $2_1 - $1_1 | 0;
    $1_1 = $1_1 << 2;
    while (1) {
     if (!$4_1) {
      break label$26
     }
     HEAP32[HEAP32[$3_1 + 100 >> 2] + $1_1 >> 2] = 0;
     $4_1 = $4_1 - 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue;
    };
   }
   HEAP32[$3_1 + 92 >> 2] = $2_1;
   $10_1 = 0;
   while (1) {
    if (($2_1 | 0) != ($10_1 | 0)) {
     label$31 : {
      $6_1 = HEAP32[$3_1 + 48 >> 2];
      if ($6_1) {
       break label$31
      }
      $1_1 = HEAP32[$3_1 + 44 >> 2];
      label$32 : {
       if ($1_1) {
        HEAP32[$3_1 + 44 >> 2] = HEAP32[$1_1 + 8 >> 2];
        break label$32;
       }
       $1_1 = $120(12);
       HEAP32[$1_1 + 8 >> 2] = 0;
       $4_1 = HEAP32[$3_1 + 52 >> 2];
       HEAP32[$1_1 + 4 >> 2] = $4_1;
       (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $120(Math_imul($4_1, 112))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       HEAP32[$1_1 + 8 >> 2] = HEAP32[$3_1 + 40 >> 2];
       HEAP32[$3_1 + 40 >> 2] = $1_1;
      }
      $4_1 = 0;
      $7_1 = HEAP32[$1_1 + 4 >> 2];
      $5_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
      $6_1 = HEAP32[$1_1 >> 2];
      $1_1 = $6_1;
      while (1) {
       if (($4_1 | 0) == ($5_1 | 0)) {
        break label$31
       }
       $13_1 = $1_1;
       $1_1 = $1_1 + 112 | 0;
       $4_1 = $4_1 + 1 | 0;
       HEAP32[$13_1 >> 2] = ($7_1 | 0) > ($4_1 | 0) ? $1_1 : 0;
       continue;
      };
     }
     HEAP32[$3_1 + 48 >> 2] = HEAP32[$6_1 >> 2];
     $1_1 = $6_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$6_1 + 16 >> 2] = 0;
     HEAP32[$6_1 >> 2] = 0;
     HEAP32[$6_1 + 4 >> 2] = 0;
     HEAP32[$6_1 + 104 >> 2] = -1;
     HEAP32[$1_1 >> 2] = 0;
     $4_1 = HEAP32[$3_1 + 164 >> 2] + ($10_1 << 4) | 0;
     $1_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$6_1 + 88 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$6_1 + 92 >> 2] = $1_1;
     $4_1 = $4_1 + 8 | 0;
     $1_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $6_1 + 96 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $1_1;
     HEAP32[$6_1 + 104 >> 2] = -1;
     HEAP32[HEAP32[$3_1 + 100 >> 2] + ($10_1 << 2) >> 2] = $6_1;
     $10_1 = $10_1 + 1 | 0;
     continue;
    }
    break;
   };
   $124($3_1 + 152 | 0);
   HEAP32[$3_1 + 124 >> 2] = 0;
   HEAP32[$3_1 + 128 >> 2] = 0;
   HEAP32[$3_1 + 64 >> 2] = 0;
   HEAP32[$3_1 + 108 >> 2] = -3;
   HEAP32[$3_1 + 68 >> 2] = Math_imul($2_1, 6);
   HEAP32[$3_1 + 60 >> 2] = HEAP32[$3_1 + 56 >> 2];
   $1_1 = $3_1 + 144 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 136 >> 2] = 0;
   HEAP32[$3_1 + 140 >> 2] = 0;
   $175($3_1 + 8 | 0, 0, $2_1, $3_1 + 136 | 0);
   HEAP32[$3_1 + 132 >> 2] = HEAP32[$3_1 + 136 >> 2];
   $124($3_1 + 152 | 0);
   $203($0_1, 0, $3_1 + 152 | 0);
   HEAP32[$3_1 + 160 >> 2] = 0;
   HEAP32[$3_1 + 152 >> 2] = 0;
   HEAP32[$3_1 + 156 >> 2] = 0;
   $21_1 = $0_1 + 20 | 0;
   label$35 : {
    $4_1 = HEAP32[$0_1 + 24 >> 2];
    if (($4_1 | 0) > 0) {
     break label$35
    }
    if (($4_1 | 0) <= -1) {
     $189($21_1, 0)
    }
    $1_1 = Math_imul($4_1, 12);
    while (1) {
     if (!$4_1) {
      break label$35
     }
     $2_1 = HEAP32[$3_1 + 156 >> 2];
     $5_1 = HEAP32[$0_1 + 32 >> 2] + $1_1 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$3_1 + 152 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $2_1;
     HEAP32[$5_1 + 8 >> 2] = HEAP32[$3_1 + 160 >> 2];
     $1_1 = $1_1 + 12 | 0;
     $4_1 = $4_1 + 1 | 0;
     continue;
    };
   }
   HEAP32[$0_1 + 24 >> 2] = 0;
   HEAP32[$3_1 + 152 >> 2] = 0;
   $13_1 = $0_1 + 40 | 0;
   $204($13_1, 0, $3_1 + 152 | 0);
   HEAP32[$3_1 + 164 >> 2] = 0;
   HEAP8[$3_1 + 168 | 0] = 1;
   HEAP32[$3_1 + 156 >> 2] = 0;
   HEAP32[$3_1 + 160 >> 2] = 0;
   $187(HEAP32[$3_1 + 132 >> 2], $3_1 + 152 | 0);
   $2_1 = 0;
   while (1) {
    $5_1 = HEAP32[$3_1 + 164 >> 2];
    if (HEAP32[$3_1 + 156 >> 2] <= ($2_1 | 0)) {
     $6_1 = 0;
     while (1) {
      label$41 : {
       if (($2_1 | 0) == ($6_1 | 0)) {
        $124($3_1 + 152 | 0);
        $124($11_1);
        while (1) {
         $0_1 = HEAP32[$3_1 + 72 >> 2];
         if (!$0_1) {
          break label$41
         }
         HEAP32[$3_1 + 72 >> 2] = HEAP32[$0_1 + 8 >> 2];
         $121(HEAP32[$0_1 >> 2]);
         $121($0_1);
         continue;
        };
       }
       $0_1 = HEAP32[HEAP32[$5_1 + ($6_1 << 2) >> 2] + 8 >> 2];
       if ($0_1) {
        $1_1 = $0_1;
        while (1) {
         if (HEAP32[$1_1 + 20 >> 2] >= 0) {
          $205($13_1, $1_1 + 20 | 0);
          $4_1 = $1_1;
          while (1) {
           HEAP32[$4_1 + 20 >> 2] = -1;
           $4_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 4 >> 2];
           if (($4_1 | 0) != ($1_1 | 0)) {
            continue
           }
           break;
          };
         }
         $1_1 = HEAP32[$1_1 >> 2];
         if (($0_1 | 0) != ($1_1 | 0)) {
          continue
         }
         break;
        };
       }
       $6_1 = $6_1 + 1 | 0;
       continue;
      }
      break;
     };
     while (1) {
      $0_1 = HEAP32[$3_1 + 56 >> 2];
      if ($0_1) {
       HEAP32[$3_1 + 56 >> 2] = HEAP32[$0_1 + 8 >> 2];
       $121(HEAP32[$0_1 >> 2]);
       $121($0_1);
       continue;
      }
      break;
     };
     while (1) {
      $0_1 = HEAP32[$3_1 + 40 >> 2];
      if (!$0_1) {
       break label$1
      }
      HEAP32[$3_1 + 40 >> 2] = HEAP32[$0_1 + 8 >> 2];
      $121(HEAP32[$0_1 >> 2]);
      $121($0_1);
      continue;
     };
    }
    $4_1 = HEAP32[$5_1 + ($2_1 << 2) >> 2];
    $1_1 = HEAP32[$4_1 + 100 >> 2];
    label$51 : {
     if (($1_1 | 0) >= 0) {
      $9_1 = Math_fround(HEAP32[$4_1 + 88 >> 2]);
      break label$51;
     }
     $9_1 = Math_fround($186($4_1 + 24 | 0) / $186($4_1 + 72 | 0));
     $1_1 = HEAP32[$4_1 + 100 >> 2];
    }
    HEAPF32[($3_1 + 176 | 0) + (HEAP32[$3_1 + 116 >> 2] << 2) >> 2] = $9_1;
    label$53 : {
     if (($1_1 | 0) >= 0) {
      $9_1 = Math_fround(HEAP32[$4_1 + 92 >> 2]);
      break label$53;
     }
     $9_1 = Math_fround($186($4_1 + 40 | 0) / $186($4_1 + 72 | 0));
     $1_1 = HEAP32[$4_1 + 100 >> 2];
    }
    HEAPF32[($3_1 + 176 | 0) + (HEAP32[$3_1 + 120 >> 2] << 2) >> 2] = $9_1;
    if (($1_1 | 0) >= 0) {
     $8_1 = Math_fround(HEAP32[$4_1 + 96 >> 2])
    } else {
     $8_1 = Math_fround($186($4_1 + 56 | 0) / $186($4_1 + 72 | 0))
    }
    HEAPF32[($3_1 + 176 | 0) + (HEAP32[$3_1 + 112 >> 2] << 2) >> 2] = $8_1;
    HEAP32[$3_1 + 148 >> 2] = 0;
    HEAPF32[$3_1 + 144 >> 2] = Math_fround(HEAPF32[$3_1 + 184 >> 2] * HEAPF32[$3_1 + 16 >> 2]) + HEAPF32[$3_1 + 32 >> 2];
    HEAPF32[$3_1 + 140 >> 2] = Math_fround(HEAPF32[$3_1 + 180 >> 2] * HEAPF32[$3_1 + 12 >> 2]) + HEAPF32[$3_1 + 28 >> 2];
    HEAPF32[$3_1 + 136 >> 2] = Math_fround(HEAPF32[$3_1 + 176 >> 2] * HEAPF32[$3_1 + 8 >> 2]) + HEAPF32[$3_1 + 24 >> 2];
    $200($0_1, $3_1 + 136 | 0);
    $10_1 = HEAP32[$4_1 + 8 >> 2];
    if ($10_1) {
     $6_1 = -1;
     $1_1 = $10_1;
     $7_1 = -1;
     while (1) {
      $4_1 = HEAP32[$1_1 + 20 >> 2];
      if (($4_1 | 0) <= -1) {
       $5_1 = HEAP32[$0_1 + 24 >> 2];
       $4_1 = $3_1 + 184 | 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$3_1 + 176 >> 2] = 0;
       HEAP32[$3_1 + 180 >> 2] = 0;
       $188($21_1, $3_1 + 176 | 0);
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$3_1 + 176 >> 2] = 0;
       HEAP32[$3_1 + 180 >> 2] = 0;
       $188($21_1, $3_1 + 176 | 0);
       HEAP32[$1_1 + 20 >> 2] = $5_1;
       HEAP32[HEAP32[$1_1 + 8 >> 2] + 20 >> 2] = $5_1 + 1;
       $5_1 = HEAP32[$0_1 + 32 >> 2] + Math_imul($5_1, 12) | 0;
       HEAP32[$5_1 + 4 >> 2] = 1;
       HEAP32[$5_1 + 16 >> 2] = -1;
       $4_1 = $187(HEAP32[$1_1 + 12 >> 2], $3_1 + 152 | 0);
       HEAP32[$5_1 + 20 >> 2] = $2_1;
       HEAP32[$5_1 + 8 >> 2] = $4_1;
       $4_1 = HEAP32[$1_1 + 20 >> 2];
      }
      $5_1 = $4_1;
      if (($6_1 | 0) >= 0) {
       HEAP32[HEAP32[$0_1 + 32 >> 2] + Math_imul($4_1, 12) >> 2] = $6_1 - $4_1;
       $5_1 = $7_1;
      }
      $6_1 = $4_1;
      $7_1 = $5_1;
      $1_1 = HEAP32[$1_1 >> 2];
      if (($10_1 | 0) != ($1_1 | 0)) {
       continue
      }
      break;
     };
     HEAP32[HEAP32[$0_1 + 32 >> 2] + Math_imul($7_1, 12) >> 2] = $6_1 - $7_1;
    }
    $2_1 = $2_1 + 1 | 0;
    continue;
   };
  }
  global$0 = $3_1 + 192 | 0;
 }
 
 function $203($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   if (($3_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) > ($3_1 | 0)) {
    $207($0_1, $1_1)
   }
   $5_1 = $1_1 - $3_1 | 0;
   $3_1 = $3_1 << 4;
   while (1) {
    if (!$5_1) {
     break label$1
    }
    $6_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = HEAP32[$0_1 + 12 >> 2] + $3_1 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $7_1 = $2_1 + 8 | 0;
    $6_1 = HEAP32[$7_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $5_1 = $5_1 - 1 | 0;
    $3_1 = $3_1 + 16 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $204($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   if (($3_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) > ($3_1 | 0)) {
    $217($0_1, $1_1)
   }
   $4_1 = $1_1 - $3_1 | 0;
   $3_1 = $3_1 << 2;
   while (1) {
    if (!$4_1) {
     break label$1
    }
    HEAP32[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 2] = HEAP32[$2_1 >> 2];
    $4_1 = $4_1 - 1 | 0;
    $3_1 = $3_1 + 4 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $205($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $217($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[HEAP32[$0_1 + 12 >> 2] + ($2_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
 }
 
 function $206($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $214($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  $215(HEAP32[$0_1 + 12 >> 2] + Math_imul($2_1, 36) | 0, $1_1);
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
 }
 
 function $207($0_1, $1_1) {
  var $2_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $2_1 = $120($1_1 << 4)
   } else {
    $2_1 = 0
   }
   $213($0_1, HEAP32[$0_1 + 4 >> 2], $2_1);
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $2_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  $2_1 = HEAP32[$0_1 + 56 >> 2];
  label$1 : {
   if ($2_1) {
    $209($2_1 + 4 | 0, $1_1 + 4 | 0);
    $0_1 = HEAP32[$1_1 + 28 >> 2];
    $2($3_1 + 8 | 0, 0, 36);
    HEAP32[$3_1 + 20 >> 2] = 0;
    HEAP8[$3_1 + 24 | 0] = 1;
    HEAP32[$3_1 + 12 >> 2] = 0;
    HEAP32[$3_1 + 16 >> 2] = 0;
    $210($2_1 + 24 | 0, $0_1, $3_1 + 8 | 0);
    $124($3_1 + 8 | 0);
    $211($1_1 + 24 | 0, $0_1, HEAP32[$2_1 + 36 >> 2]);
    $209($2_1 + 44 | 0, $1_1 + 44 | 0);
    $3($2_1 - -64 | 0, $1_1 - -64 | 0, 68);
    break label$1;
   }
   $2_1 = $120(132);
   HEAP32[$2_1 >> 2] = 10056;
   $212($2_1 + 4 | 0, $1_1 + 4 | 0);
   HEAP32[$2_1 + 28 >> 2] = 0;
   HEAP32[$2_1 + 32 >> 2] = 0;
   HEAP32[$2_1 + 36 >> 2] = 0;
   HEAP8[$2_1 + 40 | 0] = 1;
   $4_1 = HEAP32[$1_1 + 28 >> 2];
   $2($3_1 + 8 | 0, 0, 36);
   HEAP32[$3_1 + 20 >> 2] = 0;
   HEAP8[$3_1 + 24 | 0] = 1;
   HEAP32[$3_1 + 12 >> 2] = 0;
   HEAP32[$3_1 + 16 >> 2] = 0;
   $210($2_1 + 24 | 0, $4_1, $3_1 + 8 | 0);
   $124($3_1 + 8 | 0);
   $211($1_1 + 24 | 0, $4_1, HEAP32[$2_1 + 36 >> 2]);
   $212($2_1 + 44 | 0, $1_1 + 44 | 0);
   $3($2_1 - -64 | 0, $1_1 - -64 | 0, 68);
   HEAP32[$0_1 + 56 >> 2] = $2_1;
  }
  global$0 = $3_1 + 48 | 0;
 }
 
 function $209($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $203($0_1, $3_1, $2_1);
  $213($1_1, $3_1, HEAP32[$0_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $210($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   if (($3_1 | 0) > ($1_1 | 0)) {
    $4_1 = $3_1 - $1_1 | 0;
    $3_1 = Math_imul($1_1, 36);
    while (1) {
     if (!$4_1) {
      break label$1
     }
     $124(HEAP32[$0_1 + 12 >> 2] + $3_1 | 0);
     $4_1 = $4_1 - 1 | 0;
     $3_1 = $3_1 + 36 | 0;
     continue;
    };
   }
   if (($1_1 | 0) > ($3_1 | 0)) {
    $214($0_1, $1_1)
   }
   $4_1 = $1_1 - $3_1 | 0;
   $3_1 = Math_imul($3_1, 36);
   while (1) {
    if (!$4_1) {
     break label$1
    }
    $215(HEAP32[$0_1 + 12 >> 2] + $3_1 | 0, $2_1);
    $4_1 = $4_1 - 1 | 0;
    $3_1 = $3_1 + 36 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $211($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
  while (1) {
   if ($1_1) {
    $215($2_1 + $3_1 | 0, HEAP32[$0_1 + 12 >> 2] + $3_1 | 0);
    $1_1 = $1_1 - 1 | 0;
    $3_1 = $3_1 + 36 | 0;
    continue;
   }
   break;
  };
 }
 
 function $212($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP8[$0_1 + 16 | 0] = 1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $203($0_1, $3_1, $2_1);
  $213($1_1, $3_1, HEAP32[$0_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $213($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
  while (1) {
   if ($1_1) {
    $4_1 = HEAP32[$0_1 + 12 >> 2] + $5_1 | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $2_1 + $5_1 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $4_1 = $4_1 + 8 | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $3_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $1_1 = $1_1 - 1 | 0;
    $5_1 = $5_1 + 16 | 0;
    continue;
   }
   break;
  };
 }
 
 function $214($0_1, $1_1) {
  var $2_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $2_1 = $120(Math_imul($1_1, 36))
   } else {
    $2_1 = 0
   }
   $211($0_1, HEAP32[$0_1 + 4 >> 2], $2_1);
   $162($0_1, HEAP32[$0_1 + 4 >> 2]);
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $2_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $215($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP8[$0_1 + 16 | 0] = 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 12 >> 2] = 0;
  $204($0_1, $2_1, $3_1 + 12 | 0);
  $216($1_1, $2_1, HEAP32[$0_1 + 12 >> 2]);
  $4_1 = $1_1 + 28 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $0_1 + 28 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $2_1 = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$0_1 + 20 >> 2] = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$0_1 + 24 >> 2] = $2_1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $216($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
  while (1) {
   if ($1_1) {
    HEAP32[$2_1 + $3_1 >> 2] = HEAP32[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 2];
    $1_1 = $1_1 - 1 | 0;
    $3_1 = $3_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $217($0_1, $1_1) {
  var $2_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $2_1 = $120($1_1 << 2)
   } else {
    $2_1 = 0
   }
   $216($0_1, HEAP32[$0_1 + 4 >> 2], $2_1);
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $2_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $218($0_1, $1_1) {
  HEAPF32[$0_1 >> 2] = HEAPF32[$1_1 >> 2] * HEAPF32[$0_1 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$1_1 >> 2] * HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$1_1 >> 2] * HEAPF32[$0_1 + 8 >> 2];
  return $0_1;
 }
 
 function $219($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0;
  $2_1 = HEAPF32[$1_1 + 4 >> 2];
  $3_1 = HEAPF32[$1_1 >> 2];
  $4_1 = $2_1 > $3_1;
  $2_1 = Math_fround(HEAPF32[((HEAPF32[$1_1 + 8 >> 2] > ($4_1 ? $3_1 : $2_1) ? !$4_1 : 2) << 2) + $1_1 >> 2] * Math_fround(.10000000149011612));
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1)) > $2_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 44 >> 2]]($0_1, $2_1)
  }
 }
 
 function $220($0_1) {
  $0_1 = $0_1 | 0;
  $191($0_1);
  $121($0_1);
 }
 
 function $221($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $5_1 = HEAPF32[$0_1 + 32 >> 2];
  $6_1 = HEAPF32[$0_1 + 36 >> 2];
  $10_1 = HEAPF32[$0_1 + 40 >> 2];
  $0_1 = global$0 + -64 | 0;
  global$0 = $0_1;
  $243($0_1 + 16 | 0, $1_1);
  $7_1 = HEAPF32[$1_1 + 52 >> 2];
  $8_1 = HEAPF32[$1_1 + 56 >> 2];
  $9_1 = HEAPF32[$1_1 + 48 >> 2];
  $148($0_1, Math_fround($5_1 + $4_1), Math_fround($6_1 + $4_1), Math_fround($10_1 + $4_1), HEAPF32[$0_1 + 16 >> 2], HEAPF32[$0_1 + 20 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 32 >> 2], HEAPF32[$0_1 + 36 >> 2], HEAPF32[$0_1 + 40 >> 2], HEAPF32[$0_1 + 48 >> 2], HEAPF32[$0_1 + 52 >> 2], HEAPF32[$0_1 + 56 >> 2]);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $4_1 = HEAPF32[$0_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = $8_1 - $4_1;
  $5_1 = HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$2_1 + 4 >> 2] = $7_1 - $5_1;
  $6_1 = HEAPF32[$0_1 >> 2];
  HEAPF32[$2_1 >> 2] = $9_1 - $6_1;
  HEAPF32[$3_1 >> 2] = $9_1 + $6_1;
  HEAPF32[$3_1 + 4 >> 2] = $7_1 + $5_1;
  HEAPF32[$3_1 + 8 >> 2] = $8_1 + $4_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  global$0 = $0_1 - -64 | 0;
 }
 
 function $222($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $5_1 = $0_1 + 20 | 0;
  $9_1 = HEAPF32[$5_1 >> 2];
  $6_1 = $0_1 + 36 | 0;
  $10_1 = HEAPF32[$6_1 >> 2];
  $7_1 = $0_1 + 24 | 0;
  $11_1 = HEAPF32[$7_1 >> 2];
  $8_1 = $0_1 + 40 | 0;
  $12_1 = HEAPF32[$8_1 >> 2];
  $13_1 = HEAPF32[$0_1 + 16 >> 2];
  $14_1 = HEAPF32[$0_1 + 32 >> 2];
  $156($0_1, $1_1);
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$8_1 >> 2] = Math_fround(Math_fround(Math_fround($4_1 + $12_1) / $11_1) * HEAPF32[$7_1 >> 2]) - $4_1;
  HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(Math_fround($3_1 + $10_1) / $9_1) * HEAPF32[$5_1 >> 2]) - $3_1;
  HEAPF32[$0_1 + 32 >> 2] = Math_fround(Math_fround(Math_fround($2_1 + $14_1) / $13_1) * HEAPF32[$0_1 + 16 >> 2]) - $2_1;
 }
 
 function $223($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 16 | 0;
 }
 
 function $224($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $225($5_1, $0_1);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $1_1 = Math_fround($1_1 / Math_fround(12.0));
  $3_1 = HEAPF32[$5_1 >> 2];
  $3_1 = Math_fround($3_1 + $3_1);
  $3_1 = Math_fround($3_1 * $3_1);
  $4_1 = HEAPF32[$5_1 + 4 >> 2];
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($3_1 + $4_1);
  $6_1 = $3_1;
  $3_1 = HEAPF32[$5_1 + 8 >> 2];
  $3_1 = Math_fround($3_1 + $3_1);
  $3_1 = Math_fround($3_1 * $3_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($6_1 + $3_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($4_1 + $3_1);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $225($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  $4_1 = $1_1 + 40 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $0_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAPF32[$2_1 + 8 >> 2] = $8_1;
  HEAPF32[$2_1 + 4 >> 2] = $7_1;
  HEAPF32[$2_1 >> 2] = $6_1;
  $158($0_1, $2_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $226($0_1) {
  $0_1 = $0_1 | 0;
  return 10618;
 }
 
 function $227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 8 >> 2] = 1065353216;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 1065353216;
  HEAP32[$0_1 + 4 >> 2] = 1065353216;
 }
 
 function $228($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  HEAPF32[$0_1 + 48 >> 2] = $1_1;
  $2_1 = $0_1 + 40 | 0;
  $1_1 = HEAPF32[$2_1 >> 2];
  $3_1 = $0_1 + 36 | 0;
  $7_1 = HEAPF32[$3_1 >> 2];
  $8_1 = HEAPF32[$0_1 + 32 >> 2];
  $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$3_1 >> 2] = Math_fround($5_1 + $7_1) - $10_1;
  HEAPF32[$0_1 + 32 >> 2] = Math_fround($4_1 + $8_1) - $9_1;
  HEAPF32[$2_1 >> 2] = Math_fround($6_1 + $1_1) - $11_1;
 }
 
 function $229($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 48 >> 2]);
 }
 
 function $230($0_1) {
  $0_1 = $0_1 | 0;
  return 52;
 }
 
 function $231($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $140($0_1, $1_1, $2_1);
  $132($0_1 + 32 | 0, $1_1 + 28 | 0);
  $132($0_1 + 16 | 0, $1_1 + 12 | 0);
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAPF32[$1_1 + 44 >> 2] = HEAPF32[$0_1 + 48 >> 2];
  return 10592;
 }
 
 function $232($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = HEAPF32[$1_1 + 36 >> 2];
  $4_1 = HEAPF32[$1_1 + 40 >> 2];
  $5_1 = HEAPF32[$1_1 + 32 >> 2];
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  HEAP32[$0_1 + 12 >> 2] = 0;
  $4_1 = Math_fround($4_1 + $8_1);
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$2_1 + 8 >> 2] >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
  $3_1 = Math_fround($3_1 + $7_1);
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$2_1 + 4 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
  $3_1 = Math_fround($5_1 + $6_1);
  HEAPF32[$0_1 >> 2] = HEAPF32[$2_1 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
 }
 
 function $233($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0);
  HEAP32[$0_1 + 12 >> 2] = 0;
  $3_1 = HEAPF32[$1_1 + 32 >> 2];
  HEAPF32[$0_1 >> 2] = HEAPF32[$2_1 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
  $3_1 = HEAPF32[$1_1 + 40 >> 2];
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$2_1 + 8 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
  $3_1 = HEAPF32[$1_1 + 36 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$2_1 + 4 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
 }
 
 function $234($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $5_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  $3_1 = 0;
  while (1) {
   if ($5_1) {
    $4_1 = $1_1 + $3_1 | 0;
    $9_1 = HEAPF32[$4_1 + 4 >> 2];
    $10_1 = HEAPF32[$4_1 + 8 >> 2];
    $11_1 = HEAPF32[$4_1 >> 2];
    $6_1 = HEAPF32[$0_1 + 36 >> 2];
    $7_1 = HEAPF32[$0_1 + 40 >> 2];
    $8_1 = HEAPF32[$0_1 + 32 >> 2];
    $4_1 = $2_1 + $3_1 | 0;
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAPF32[$4_1 >> 2] = $11_1 >= Math_fround(0.0) ? $8_1 : Math_fround(-$8_1);
    HEAPF32[$4_1 + 8 >> 2] = $10_1 >= Math_fround(0.0) ? $7_1 : Math_fround(-$7_1);
    HEAPF32[$4_1 + 4 >> 2] = $9_1 >= Math_fround(0.0) ? $6_1 : Math_fround(-$6_1);
    $5_1 = $5_1 - 1 | 0;
    $3_1 = $3_1 + 16 | 0;
    continue;
   }
   break;
  };
 }
 
 function $235($0_1) {
  $0_1 = $0_1 | 0;
  return 6;
 }
 
 function $236($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  if ($1_1 >>> 0 <= 5) {
   HEAP32[$2_1 + 12 >> 2] = 0;
   $0_1 = $1_1 << 2;
   HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$0_1 + 10568 >> 2];
   HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$0_1 + 10544 >> 2];
   HEAPF32[$2_1 >> 2] = HEAPF32[$0_1 + 10520 >> 2];
  }
 }
 
 function $237($0_1) {
  $0_1 = $0_1 | 0;
  return 8;
 }
 
 function $238($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = $0_1;
  if ($1_1 >>> 0 <= 11) {
   $1_1 = $1_1 << 2;
   $5_1 = HEAP32[$1_1 + 10472 >> 2];
   $1_1 = HEAP32[$1_1 + 10424 >> 2];
  } else {
   $1_1 = 0
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 112 >> 2]]($4_1, $1_1, $2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 112 >> 2]]($0_1, $5_1, $3_1);
 }
 
 function $239($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $225($4_1, $0_1);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $3_1 = HEAPF32[$4_1 >> 2];
  $0_1 = $1_1 & 1;
  HEAPF32[$2_1 >> 2] = Math_fround($3_1 * Math_fround(!$0_1 | 0)) - Math_fround($3_1 * Math_fround($0_1 | 0));
  $3_1 = HEAPF32[$4_1 + 8 >> 2];
  $0_1 = $1_1 >>> 2 & 1;
  HEAPF32[$2_1 + 8 >> 2] = Math_fround($3_1 * Math_fround(!$0_1 | 0)) - Math_fround($3_1 * Math_fround($0_1 | 0));
  $3_1 = HEAPF32[$4_1 + 4 >> 2];
  $0_1 = $1_1 >>> 1 & 1;
  HEAPF32[$2_1 + 4 >> 2] = Math_fround($3_1 * Math_fround(!$0_1 | 0)) - Math_fround($3_1 * Math_fround($0_1 | 0));
  global$0 = $4_1 + 16 | 0;
 }
 
 function $240($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 128 >> 2]]($0_1, $4_1 + 32 | 0, $3_1);
  HEAP32[$1_1 + 12 >> 2] = 0;
  $5_1 = HEAPF32[$4_1 + 40 >> 2];
  HEAPF32[$1_1 + 8 >> 2] = $5_1;
  $6_1 = HEAPF32[$4_1 + 36 >> 2];
  HEAPF32[$1_1 + 4 >> 2] = $6_1;
  $7_1 = HEAPF32[$4_1 + 32 >> 2];
  HEAPF32[$1_1 >> 2] = $7_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = -$5_1;
  HEAPF32[$4_1 + 4 >> 2] = -$6_1;
  HEAPF32[$4_1 >> 2] = -$7_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($4_1 + 16 | 0, $0_1, $4_1);
  $1_1 = $4_1 + 24 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $2_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  $0_1 = HEAP32[$4_1 + 20 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $0_1;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $241($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0;
  $3_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$0_1 + 32 >> 2];
  label$1 : {
   if (!($3_1 <= Math_fround($4_1 + $2_1)) | !($3_1 >= Math_fround(Math_fround(-$4_1) - $2_1))) {
    break label$1
   }
   $3_1 = HEAPF32[$1_1 + 4 >> 2];
   $4_1 = HEAPF32[$0_1 + 36 >> 2];
   if (!($3_1 <= Math_fround($4_1 + $2_1)) | !($3_1 >= Math_fround(Math_fround(-$4_1) - $2_1))) {
    break label$1
   }
   $3_1 = HEAPF32[$1_1 + 8 >> 2];
   $4_1 = HEAPF32[$0_1 + 40 >> 2];
   if (!($3_1 <= Math_fround($4_1 + $2_1))) {
    break label$1
   }
   $5_1 = $3_1 >= Math_fround(Math_fround(-$4_1) - $2_1);
  }
  return $5_1 | 0;
 }
 
 function $242($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $6_1 = HEAPF32[$0_1 + 40 >> 2];
  $7_1 = HEAPF32[$0_1 + 36 >> 2];
  $3_1 = HEAPF32[$0_1 + 32 >> 2];
  $4_1 = Math_fround(1.0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       switch ($2_1 | 0) {
       case 1:
        $4_1 = Math_fround(-1.0);
        break label$2;
       case 2:
        $5_1 = Math_fround(1.0);
        break label$3;
       case 3:
        $5_1 = Math_fround(-1.0);
        break label$3;
       case 4:
        $3_1 = Math_fround(1.0);
        break label$4;
       case 0:
        break label$2;
       case 5:
        break label$5;
       default:
        break label$1;
       };
      }
      $3_1 = Math_fround(-1.0);
     }
     $8_1 = $3_1;
     $4_1 = Math_fround(0.0);
     $3_1 = $6_1;
     break label$2;
    }
    $4_1 = Math_fround(0.0);
    $3_1 = $7_1;
   }
   HEAPF32[$1_1 + 8 >> 2] = $8_1;
   HEAPF32[$1_1 + 4 >> 2] = $5_1;
   HEAPF32[$1_1 >> 2] = $4_1;
   HEAPF32[$1_1 + 12 >> 2] = -$3_1;
  }
 }
 
 function $243($0_1, $1_1) {
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAPF32[$0_1 + 32 >> 2] = Math_abs(HEAPF32[$1_1 + 32 >> 2]);
  HEAPF32[$0_1 + 16 >> 2] = Math_abs(HEAPF32[$1_1 + 16 >> 2]);
  HEAPF32[$0_1 + 8 >> 2] = Math_abs(HEAPF32[$1_1 + 8 >> 2]);
  HEAPF32[$0_1 + 4 >> 2] = Math_abs(HEAPF32[$1_1 + 4 >> 2]);
  HEAPF32[$0_1 >> 2] = Math_abs(HEAPF32[$1_1 >> 2]);
  HEAPF32[$0_1 + 40 >> 2] = Math_abs(HEAPF32[$1_1 + 40 >> 2]);
  HEAPF32[$0_1 + 36 >> 2] = Math_abs(HEAPF32[$1_1 + 36 >> 2]);
  HEAPF32[$0_1 + 24 >> 2] = Math_abs(HEAPF32[$1_1 + 24 >> 2]);
  HEAPF32[$0_1 + 20 >> 2] = Math_abs(HEAPF32[$1_1 + 20 >> 2]);
 }
 
 function $244($0_1) {
  $0_1 = $0_1 | 0;
  $121($0_1);
 }
 
 function $245($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $6_1 = $0_1 + 32 | 0;
  $0_1 = HEAP32[$0_1 + 56 >> 2];
  $5_1 = HEAPF32[$6_1 + (($0_1 + 2 | 0) % 3 << 2) >> 2];
  HEAPF32[$4_1 + 72 >> 2] = $5_1;
  HEAPF32[$4_1 + 68 >> 2] = $5_1;
  HEAPF32[$4_1 + 64 >> 2] = $5_1;
  $0_1 = $0_1 << 2;
  HEAPF32[$0_1 + ($4_1 - -64 | 0) >> 2] = $5_1 + HEAPF32[$0_1 + $6_1 >> 2];
  $243($4_1 + 16 | 0, $1_1);
  $5_1 = HEAPF32[$1_1 + 52 >> 2];
  $7_1 = HEAPF32[$1_1 + 56 >> 2];
  $8_1 = HEAPF32[$1_1 + 48 >> 2];
  $148($4_1, HEAPF32[$4_1 + 64 >> 2], HEAPF32[$4_1 + 68 >> 2], HEAPF32[$4_1 + 72 >> 2], HEAPF32[$4_1 + 16 >> 2], HEAPF32[$4_1 + 20 >> 2], HEAPF32[$4_1 + 24 >> 2], HEAPF32[$4_1 + 32 >> 2], HEAPF32[$4_1 + 36 >> 2], HEAPF32[$4_1 + 40 >> 2], HEAPF32[$4_1 + 48 >> 2], HEAPF32[$4_1 + 52 >> 2], HEAPF32[$4_1 + 56 >> 2]);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $9_1 = HEAPF32[$4_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = $7_1 - $9_1;
  $10_1 = HEAPF32[$4_1 + 4 >> 2];
  HEAPF32[$2_1 + 4 >> 2] = $5_1 - $10_1;
  $11_1 = HEAPF32[$4_1 >> 2];
  HEAPF32[$2_1 >> 2] = $8_1 - $11_1;
  HEAPF32[$3_1 >> 2] = $8_1 + $11_1;
  HEAPF32[$3_1 + 4 >> 2] = $5_1 + $10_1;
  HEAPF32[$3_1 + 8 >> 2] = $7_1 + $9_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  global$0 = $4_1 + 80 | 0;
 }
 
 function $246($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $4_1 = HEAPF32[$0_1 + 20 >> 2];
  $2_1 = $0_1 + 36 | 0;
  $5_1 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$0_1 + 24 >> 2];
  $3_1 = $0_1 + 40 | 0;
  $7_1 = HEAPF32[$3_1 >> 2];
  $8_1 = HEAPF32[$0_1 + 16 >> 2];
  $9_1 = HEAPF32[$0_1 + 32 >> 2];
  $156($0_1, $1_1);
  $10_1 = HEAPF32[$1_1 >> 2];
  $11_1 = HEAPF32[$1_1 + 4 >> 2];
  $12_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$3_1 >> 2] = $12_1 * Math_fround($7_1 / $6_1);
  HEAPF32[$2_1 >> 2] = $11_1 * Math_fround($5_1 / $4_1);
  HEAPF32[$0_1 + 32 >> 2] = $10_1 * Math_fround($9_1 / $8_1);
  HEAPF32[$0_1 + 48 >> 2] = HEAPF32[($0_1 + 32 | 0) + ((HEAP32[$0_1 + 56 >> 2] + 2 | 0) % 3 << 2) >> 2];
 }
 
 function $247($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0);
  $6_1 = $0_1 + 32 | 0;
  $5_1 = HEAP32[$0_1 + 56 >> 2];
  $3_1 = HEAPF32[$6_1 + (($5_1 + 2 | 0) % 3 << 2) >> 2];
  $0_1 = global$0 - 16 | 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = $3_1;
  HEAPF32[$0_1 + 4 >> 2] = $3_1;
  HEAPF32[$0_1 >> 2] = $3_1;
  $5_1 = $5_1 << 2;
  $7_1 = $5_1 + $0_1 | 0;
  HEAPF32[$7_1 >> 2] = HEAPF32[$5_1 + $6_1 >> 2] + HEAPF32[$7_1 >> 2];
  $1_1 = Math_fround($1_1 * Math_fround(.0833333283662796));
  $3_1 = HEAPF32[$0_1 >> 2];
  $3_1 = Math_fround($3_1 + $3_1);
  $3_1 = Math_fround($3_1 * $3_1);
  $4_1 = HEAPF32[$0_1 + 4 >> 2];
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($3_1 + $4_1);
  $8_1 = $3_1;
  $3_1 = HEAPF32[$0_1 + 8 >> 2];
  $3_1 = Math_fround($3_1 + $3_1);
  $3_1 = Math_fround($3_1 * $3_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($8_1 + $3_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($4_1 + $3_1);
 }
 
 function $248($0_1) {
  $0_1 = $0_1 | 0;
  return 10767;
 }
 
 function $249($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[(HEAP32[$1_1 + 56 >> 2] << 2) + $0_1 >> 2] = 1065353216;
 }
 
 function $250($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
 }
 
 function $251($0_1) {
  $0_1 = $0_1 | 0;
  return 60;
 }
 
 function $252($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $231($0_1, $1_1, $2_1);
  $0_1 = HEAP32[$0_1 + 56 >> 2];
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = $0_1;
  return 10748;
 }
 
 function $253($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $8_1 = $0_1 + 8 | 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  $5_1 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$2_1 + 4 >> 2];
  $7_1 = HEAPF32[$2_1 + 8 >> 2];
  $4_1 = $149($5_1, $6_1, $7_1);
  label$1 : {
   if ($4_1 < Math_fround(9.999999747378752e-05)) {
    $7_1 = Math_fround(0.0);
    $4_1 = Math_fround(1.0);
    break label$1;
   }
   $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($4_1)));
   $7_1 = Math_fround($4_1 * $7_1);
   $11_1 = Math_fround($4_1 * $6_1);
   $4_1 = Math_fround($4_1 * $5_1);
  }
  $2_1 = $3_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $8_1 = HEAP32[$1_1 + 56 >> 2] << 2;
  $12_1 = $8_1 + $3_1 | 0;
  $9_1 = HEAPF32[($1_1 + $8_1 | 0) + 32 >> 2];
  HEAPF32[$12_1 >> 2] = $9_1;
  $5_1 = Math_fround(-999999984306749440.0);
  $10_1 = HEAPF32[$3_1 >> 2];
  $13_1 = HEAPF32[$3_1 + 4 >> 2];
  $14_1 = HEAPF32[$2_1 >> 2];
  $6_1 = Math_fround(Math_fround(Math_fround($10_1 * $4_1) + Math_fround($13_1 * $11_1)) + Math_fround($14_1 * $7_1));
  if ($6_1 > Math_fround(-999999984306749440.0)) {
   HEAPF32[$0_1 + 12 >> 2] = HEAPF32[$3_1 + 12 >> 2];
   HEAPF32[$0_1 + 8 >> 2] = $14_1;
   HEAPF32[$0_1 + 4 >> 2] = $13_1;
   HEAPF32[$0_1 >> 2] = $10_1;
   $5_1 = $6_1;
  }
  $1_1 = $3_1 + 8 | 0;
  $2_1 = $1_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAPF32[$12_1 >> 2] = -$9_1;
  $9_1 = $5_1;
  $10_1 = $4_1;
  $4_1 = HEAPF32[$3_1 >> 2];
  $5_1 = HEAPF32[$3_1 + 4 >> 2];
  $6_1 = HEAPF32[$2_1 >> 2];
  if ($9_1 < Math_fround(Math_fround(Math_fround($10_1 * $4_1) + Math_fround($11_1 * $5_1)) + Math_fround($7_1 * $6_1))) {
   HEAPF32[$0_1 + 12 >> 2] = HEAPF32[$3_1 + 12 >> 2];
   HEAPF32[$0_1 + 8 >> 2] = $6_1;
   HEAPF32[$0_1 + 4 >> 2] = $5_1;
   HEAPF32[$0_1 >> 2] = $4_1;
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $254($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0;
  $4_1 = global$0 - 16 | 0;
  $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  while (1) {
   if ($3_1) {
    $5_1 = $4_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    $6_1 = HEAP32[$0_1 + 56 >> 2];
    $7_1 = $6_1 << 2;
    $8_1 = HEAPF32[($7_1 + $0_1 | 0) + 32 >> 2];
    HEAPF32[$4_1 + $7_1 >> 2] = $8_1;
    $9_1 = Math_fround(-999999984306749440.0);
    $11_1 = HEAPF32[$4_1 >> 2];
    $7_1 = $1_1 + $12_1 | 0;
    $13_1 = HEAPF32[$7_1 >> 2];
    $16_1 = HEAPF32[$4_1 + 4 >> 2];
    $17_1 = $7_1 + 4 | 0;
    $14_1 = HEAPF32[$17_1 >> 2];
    $18_1 = HEAPF32[$5_1 >> 2];
    $19_1 = $7_1 + 8 | 0;
    $15_1 = HEAPF32[$19_1 >> 2];
    $10_1 = Math_fround(Math_fround(Math_fround($11_1 * $13_1) + Math_fround($16_1 * $14_1)) + Math_fround($18_1 * $15_1));
    if ($10_1 > Math_fround(-999999984306749440.0)) {
     $6_1 = $2_1 + $12_1 | 0;
     HEAPF32[$6_1 >> 2] = $11_1;
     HEAPF32[$6_1 + 12 >> 2] = HEAPF32[$4_1 + 12 >> 2];
     HEAPF32[$6_1 + 8 >> 2] = $18_1;
     HEAPF32[$6_1 + 4 >> 2] = $16_1;
     $15_1 = HEAPF32[$19_1 >> 2];
     $14_1 = HEAPF32[$17_1 >> 2];
     $6_1 = HEAP32[$0_1 + 56 >> 2];
     $8_1 = HEAPF32[(($6_1 << 2) + $0_1 | 0) + 32 >> 2];
     $13_1 = HEAPF32[$7_1 >> 2];
     $9_1 = $10_1;
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    HEAPF32[($6_1 << 2) + $4_1 >> 2] = -$8_1;
    $11_1 = $9_1;
    $9_1 = HEAPF32[$4_1 >> 2];
    $10_1 = HEAPF32[$4_1 + 4 >> 2];
    $8_1 = HEAPF32[$5_1 >> 2];
    if ($11_1 < Math_fround(Math_fround(Math_fround($9_1 * $13_1) + Math_fround($10_1 * $14_1)) + Math_fround($8_1 * $15_1))) {
     $5_1 = $2_1 + $12_1 | 0;
     HEAPF32[$5_1 >> 2] = $9_1;
     HEAPF32[$5_1 + 12 >> 2] = HEAPF32[$4_1 + 12 >> 2];
     HEAPF32[$5_1 + 8 >> 2] = $8_1;
     HEAPF32[$5_1 + 4 >> 2] = $10_1;
    }
    $3_1 = $3_1 - 1 | 0;
    $12_1 = $12_1 + 16 | 0;
    continue;
   }
   break;
  };
 }
 
 function $255($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $225($4_1, $0_1);
  $3_1 = Math_fround($1_1 * Math_fround(.5));
  $5_1 = Math_fround($1_1 * Math_fround(.25));
  $1_1 = Math_fround($1_1 / Math_fround(12.0));
  $7_1 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $0_1 = HEAP32[$0_1 + 56 >> 2];
      switch ($0_1 | 0) {
      case 0:
       break label$1;
      case 2:
       break label$4;
      default:
       break label$3;
      };
     }
     $8_1 = 2;
     break label$2;
    }
    $8_1 = 1;
   }
   $7_1 = 0;
  }
  $6_1 = $3_1;
  $3_1 = HEAPF32[($7_1 << 2 | $4_1) >> 2];
  $9_1 = Math_fround($3_1 * $3_1);
  $6_1 = Math_fround($6_1 * $9_1);
  $3_1 = $6_1;
  $10_1 = $1_1;
  $1_1 = HEAPF32[($8_1 << 2) + $4_1 >> 2];
  $1_1 = Math_fround(Math_fround($5_1 * $9_1) + Math_fround($10_1 * Math_fround($1_1 * Math_fround($1_1 * Math_fround(4.0)))));
  $5_1 = $1_1;
  label$5 : {
   label$6 : {
    switch ($0_1 | 0) {
    case 2:
     $3_1 = $1_1;
     $5_1 = $1_1;
     $1_1 = $6_1;
     break label$5;
    case 0:
     break label$5;
    default:
     break label$6;
    };
   }
   $3_1 = $1_1;
   $5_1 = $6_1;
  }
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAPF32[$2_1 + 8 >> 2] = $1_1;
  HEAPF32[$2_1 + 4 >> 2] = $5_1;
  HEAPF32[$2_1 >> 2] = $3_1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  return 10936;
 }
 
 function $257($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $231($0_1, $1_1, $2_1);
  $0_1 = HEAP32[$0_1 + 56 >> 2];
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = $0_1;
  return 10916;
 }
 
 function $258($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($3_1 + 16 | 0, $1_1, $2_1);
  $5_1 = $3_1 + 24 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1)) != Math_fround(0.0)) {
   $4_1 = $2_1 + 8 | 0;
   $6_1 = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $6_1;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $4_1;
   if ($149(HEAPF32[$3_1 + 16 >> 2], HEAPF32[$3_1 + 20 >> 2], HEAPF32[$5_1 >> 2]) < Math_fround(1.4210854715202004e-14)) {
    HEAP32[$3_1 + 24 >> 2] = -1082130432;
    HEAP32[$3_1 + 28 >> 2] = 0;
    HEAP32[$3_1 + 16 >> 2] = -1082130432;
    HEAP32[$3_1 + 20 >> 2] = -1082130432;
   }
   $153($3_1 + 16 | 0);
   $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
   HEAP32[$3_1 + 12 >> 2] = 0;
   HEAPF32[$3_1 + 8 >> 2] = $7_1 * HEAPF32[$3_1 + 24 >> 2];
   HEAPF32[$3_1 + 4 >> 2] = $7_1 * HEAPF32[$3_1 + 20 >> 2];
   HEAPF32[$3_1 >> 2] = $7_1 * HEAPF32[$3_1 + 16 >> 2];
   $158($0_1, $3_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $259($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $260($0_1, HEAPF32[$1_1 + 32 >> 2], HEAPF32[$1_1 + 36 >> 2], $2_1);
 }
 
 function $260($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $4_1 = HEAPF32[$3_1 >> 2];
  $5_1 = HEAPF32[$3_1 + 8 >> 2];
  $6_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1))));
  label$1 : {
   if ($6_1 != Math_fround(0.0)) {
    $1_1 = Math_fround($1_1 / $6_1);
    $7_1 = Math_fround($5_1 * $1_1);
    $1_1 = Math_fround($4_1 * $1_1);
    $2_1 = HEAPF32[$3_1 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$2_1) : $2_1;
    break label$1;
   }
   $2_1 = HEAPF32[$3_1 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$2_1) : $2_1;
  }
  HEAPF32[$0_1 + 8 >> 2] = $7_1;
  HEAPF32[$0_1 + 4 >> 2] = $2_1;
  HEAPF32[$0_1 >> 2] = $1_1;
 }
 
 function $261($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  $7_1 = $0_1 + 36 | 0;
  while (1) {
   if ($3_1) {
    $260($4_1, HEAPF32[$0_1 + 32 >> 2], HEAPF32[$7_1 >> 2], $1_1);
    $6_1 = $4_1 + 8 | 0;
    $8_1 = HEAP32[$6_1 + 4 >> 2];
    $5_1 = $2_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $8_1;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    $3_1 = $3_1 - 1 | 0;
    $2_1 = $2_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    continue;
   } else {
    global$0 = $4_1 + 16 | 0
   }
   break;
  };
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $225($1_1, $0_1);
  global$0 = $1_1 + 16 | 0;
  return Math_fround(HEAPF32[$1_1 >> 2]);
 }
 
 function $263($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0);
  $4_1 = HEAP32[$0_1 + 72 >> 2] << 2;
  $2_1 = HEAPF32[$4_1 + $1_1 >> 2];
  $3_1 = $4_1;
  $4_1 = $0_1 + 16 | 0;
  $5_1 = Math_fround(HEAPF32[$0_1 + 64 >> 2] * Math_fround($2_1 / HEAPF32[$3_1 + $4_1 >> 2]));
  HEAPF32[$0_1 + 64 >> 2] = $5_1;
  $3_1 = HEAP32[$0_1 + 68 >> 2] << 2;
  $2_1 = Math_fround(HEAPF32[$3_1 + $1_1 >> 2] / HEAPF32[$4_1 + $3_1 >> 2]);
  $3_1 = HEAP32[$0_1 + 76 >> 2] << 2;
  $2_1 = Math_fround(HEAPF32[$0_1 + 60 >> 2] * Math_fround(Math_fround($2_1 + Math_fround(HEAPF32[$3_1 + $1_1 >> 2] / HEAPF32[$4_1 + $3_1 >> 2])) * Math_fround(.5)));
  HEAPF32[$0_1 + 60 >> 2] = $2_1;
  HEAPF32[$0_1 + 56 >> 2] = $2_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($2_1 * $2_1))));
  $156($0_1, $1_1);
 }
 
 function $264($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 44 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 1065353216;
  $4_1 = $3_1 - -64 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 76 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = 1065353216;
  $4_1 = $3_1 + 84 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 1065353216;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  $8_1 = HEAPF32[$3_1 + 24 >> 2];
  $9_1 = HEAPF32[$3_1 + 8 >> 2];
  $6_1 = HEAPF32[$3_1 + 16 >> 2];
  $7_1 = HEAPF32[$3_1 >> 2];
  $10_1 = HEAPF32[$3_1 + 20 >> 2];
  $11_1 = HEAPF32[$3_1 + 4 >> 2];
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  HEAP32[$2_1 + 12 >> 2] = 0;
  $1_1 = Math_fround($1_1 * Math_fround(.0833333283662796));
  $6_1 = Math_fround($5_1 + Math_fround(Math_fround($7_1 - $6_1) * Math_fround(.5)));
  $6_1 = Math_fround($6_1 + $6_1);
  $6_1 = Math_fround($6_1 * $6_1);
  $7_1 = Math_fround($5_1 + Math_fround(Math_fround($11_1 - $10_1) * Math_fround(.5)));
  $7_1 = Math_fround($7_1 + $7_1);
  $7_1 = Math_fround($7_1 * $7_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($6_1 + $7_1);
  $5_1 = Math_fround($5_1 + Math_fround(Math_fround($9_1 - $8_1) * Math_fround(.5)));
  $5_1 = Math_fround($5_1 + $5_1);
  $5_1 = Math_fround($5_1 * $5_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($6_1 + $5_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($7_1 + $5_1);
  global$0 = $3_1 + 96 | 0;
 }
 
 function $265($0_1) {
  $0_1 = $0_1 | 0;
  return 11092;
 }
 
 function $266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 1065353216;
 }
 
 function $267($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $231($0_1, $1_1, $2_1);
  $0_1 = HEAP32[$0_1 + 72 >> 2];
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = $0_1;
  return 11076;
 }
 
 function $268($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $269($0_1, $1_1, $2_1);
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1)) != Math_fround(0.0)) {
   $6_1 = $2_1 + 8 | 0;
   $8_1 = HEAP32[$6_1 + 4 >> 2];
   $7_1 = $3_1 + 24 | 0;
   $4_1 = $7_1;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $8_1;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $4_1;
   if ($149(HEAPF32[$3_1 + 16 >> 2], HEAPF32[$3_1 + 20 >> 2], HEAPF32[$7_1 >> 2]) < Math_fround(1.4210854715202004e-14)) {
    HEAP32[$3_1 + 24 >> 2] = -1082130432;
    HEAP32[$3_1 + 28 >> 2] = 0;
    HEAP32[$3_1 + 16 >> 2] = -1082130432;
    HEAP32[$3_1 + 20 >> 2] = -1082130432;
   }
   $153($3_1 + 16 | 0);
   $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
   HEAP32[$3_1 + 12 >> 2] = 0;
   HEAPF32[$3_1 + 8 >> 2] = $5_1 * HEAPF32[$3_1 + 24 >> 2];
   HEAPF32[$3_1 + 4 >> 2] = $5_1 * HEAPF32[$3_1 + 20 >> 2];
   HEAPF32[$3_1 >> 2] = $5_1 * HEAPF32[$3_1 + 16 >> 2];
   $158($0_1, $3_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $269($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $3_1 = Math_fround(HEAPF32[$1_1 + 64 >> 2] * Math_fround(.5));
  $5_1 = HEAP32[$1_1 + 68 >> 2];
  $7_1 = HEAP32[$1_1 + 72 >> 2];
  $6_1 = $7_1 << 2;
  label$1 : {
   label$2 : {
    if (HEAPF32[$6_1 + $2_1 >> 2] > Math_fround($137(HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2]) * HEAPF32[$1_1 + 56 >> 2])) {
     HEAP32[($5_1 << 2) + $0_1 >> 2] = 0;
     HEAPF32[$0_1 + $6_1 >> 2] = $3_1;
     $2_1 = HEAP32[$1_1 + 76 >> 2];
     break label$2;
    }
    $4_1 = HEAPF32[($5_1 << 2) + $2_1 >> 2];
    $6_1 = $2_1;
    $2_1 = HEAP32[$1_1 + 76 >> 2];
    $8_1 = HEAPF32[$6_1 + ($2_1 << 2) >> 2];
    $9_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($8_1 * $8_1))));
    if ($9_1 > Math_fround(1.1920928955078125e-07)) {
     $10_1 = $4_1;
     $4_1 = Math_fround(HEAPF32[$1_1 + 60 >> 2] / $9_1);
     HEAPF32[($5_1 << 2) + $0_1 >> 2] = $10_1 * $4_1;
     HEAPF32[($7_1 << 2) + $0_1 >> 2] = -$3_1;
     $3_1 = Math_fround($8_1 * $4_1);
     break label$1;
    }
    HEAP32[($5_1 << 2) + $0_1 >> 2] = 0;
    HEAPF32[($7_1 << 2) + $0_1 >> 2] = -$3_1;
   }
   $3_1 = Math_fround(0.0);
  }
  HEAPF32[($2_1 << 2) + $0_1 >> 2] = $3_1;
 }
 
 function $270($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $269($0_1, $1_1, $2_1);
 }
 
 function $271($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  while (1) {
   if ($3_1) {
    $269($4_1, $0_1, $1_1);
    $6_1 = $4_1 + 8 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $5_1 = $2_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $7_1;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    $3_1 = $3_1 - 1 | 0;
    $2_1 = $2_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    continue;
   } else {
    global$0 = $4_1 + 16 | 0
   }
   break;
  };
 }
 
 function $272($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP32[$2_1 + 8 >> 2] = -581039253;
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAP32[$2_1 >> 2] = -581039253;
  HEAP32[$2_1 + 4 >> 2] = -581039253;
  HEAP32[$3_1 + 8 >> 2] = 1566444395;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 1566444395;
  HEAP32[$3_1 + 4 >> 2] = 1566444395;
 }
 
 function $273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 72 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 76 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 80 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $274($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 72 | 0;
 }
 
 function $275($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
 }
 
 function $276($0_1) {
  $0_1 = $0_1 | 0;
  return 11255;
 }
 
 function $277($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 16 >> 2] = $1_1;
 }
 
 function $278($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 16 >> 2]);
 }
 
 function $279($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0);
  $140($0_1, $1_1, $2_1);
  $132($0_1 + 72 | 0, $1_1 + 12 | 0);
  $132($0_1 + 52 | 0, $1_1 + 28 | 0);
  $3_1 = HEAPF32[$0_1 + 68 >> 2];
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAPF32[$1_1 + 44 >> 2] = $3_1;
  return 11232;
 }
 
 function $280($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $5_1 = HEAPF32[$3_1 >> 2];
  $9_1 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$3_1 + 4 >> 2];
  $7_1 = HEAPF32[$2_1 + 4 >> 2];
  $10_1 = HEAPF32[$3_1 + 8 >> 2];
  $14_1 = HEAPF32[$2_1 + 8 >> 2];
  $8_1 = $137(Math_fround(Math_fround($5_1 - $9_1) * Math_fround(.5)), Math_fround(Math_fround($6_1 - $7_1) * Math_fround(.5)), Math_fround(Math_fround($10_1 - $14_1) * Math_fround(.5)));
  $281($0_1 + 52 | 0, $4_1 - -64 | 0, $4_1 + 48 | 0);
  $12_1 = HEAPF32[$0_1 + 56 >> 2];
  $13_1 = HEAPF32[$0_1 + 60 >> 2];
  $15_1 = HEAPF32[$0_1 + 68 >> 2];
  $11_1 = HEAPF32[$0_1 + 52 >> 2];
  $0_1 = $4_1 + 44 | 0;
  HEAP32[$0_1 >> 2] = 0;
  $2_1 = $4_1 + 28 | 0;
  HEAP32[$2_1 >> 2] = 0;
  $9_1 = Math_fround(Math_fround($5_1 + $9_1) * Math_fround(.5));
  $6_1 = Math_fround(Math_fround($6_1 + $7_1) * Math_fround(.5));
  $7_1 = Math_fround(Math_fround($10_1 + $14_1) * Math_fround(.5));
  $5_1 = Math_fround(Math_fround(Math_fround(Math_fround($11_1 * $9_1) + Math_fround($12_1 * $6_1)) + Math_fround($7_1 * $13_1)) - $15_1);
  $3_1 = $4_1 + 40 | 0;
  $7_1 = Math_fround($7_1 - Math_fround($13_1 * $5_1));
  $10_1 = Math_fround($8_1 * HEAPF32[$4_1 + 72 >> 2]);
  $14_1 = Math_fround($7_1 - $10_1);
  $13_1 = Math_fround($8_1 * HEAPF32[$4_1 + 56 >> 2]);
  $15_1 = Math_fround($14_1 - $13_1);
  HEAPF32[$3_1 >> 2] = $15_1;
  $16_1 = $4_1 + 36 | 0;
  $6_1 = Math_fround($6_1 - Math_fround($12_1 * $5_1));
  $17_1 = Math_fround($8_1 * HEAPF32[$4_1 + 68 >> 2]);
  $18_1 = Math_fround($6_1 - $17_1);
  $12_1 = Math_fround($8_1 * HEAPF32[$4_1 + 52 >> 2]);
  $19_1 = Math_fround($18_1 - $12_1);
  HEAPF32[$16_1 >> 2] = $19_1;
  $20_1 = $4_1 + 24 | 0;
  $7_1 = Math_fround($7_1 + $10_1);
  HEAPF32[$20_1 >> 2] = $7_1 - $13_1;
  $21_1 = $4_1 + 20 | 0;
  $6_1 = Math_fround($6_1 + $17_1);
  HEAPF32[$21_1 >> 2] = $6_1 - $12_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $5_1 = Math_fround($9_1 - Math_fround($11_1 * $5_1));
  $11_1 = Math_fround($8_1 * HEAPF32[$4_1 + 64 >> 2]);
  $9_1 = Math_fround($5_1 - $11_1);
  $8_1 = Math_fround($8_1 * HEAPF32[$4_1 + 48 >> 2]);
  $10_1 = Math_fround($9_1 - $8_1);
  HEAPF32[$4_1 + 32 >> 2] = $10_1;
  $5_1 = Math_fround($5_1 + $11_1);
  HEAPF32[$4_1 + 16 >> 2] = $5_1 - $8_1;
  $11_1 = Math_fround($7_1 + $13_1);
  HEAPF32[$4_1 + 8 >> 2] = $11_1;
  $6_1 = Math_fround($6_1 + $12_1);
  HEAPF32[$4_1 + 4 >> 2] = $6_1;
  $5_1 = Math_fround($5_1 + $8_1);
  HEAPF32[$4_1 >> 2] = $5_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $4_1, 0, 0);
  HEAP32[$0_1 >> 2] = 0;
  HEAPF32[$3_1 >> 2] = $11_1;
  HEAPF32[$16_1 >> 2] = $6_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAPF32[$20_1 >> 2] = $14_1 + $13_1;
  HEAPF32[$21_1 >> 2] = $18_1 + $12_1;
  HEAPF32[$4_1 + 32 >> 2] = $5_1;
  HEAPF32[$4_1 + 16 >> 2] = $9_1 + $8_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = $15_1;
  HEAPF32[$4_1 + 4 >> 2] = $19_1;
  HEAPF32[$4_1 >> 2] = $10_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $4_1, 0, 1);
  global$0 = $4_1 + 80 | 0;
 }
 
 function $281($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0;
  $6_1 = $2_1;
  $3_1 = HEAPF32[$0_1 + 8 >> 2];
  label$1 : {
   if (Math_fround(Math_abs($3_1)) > Math_fround(.7071067690849304)) {
    $4_1 = HEAPF32[$0_1 + 4 >> 2];
    HEAP32[$1_1 >> 2] = 0;
    $4_1 = Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1));
    $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($4_1)));
    HEAPF32[$1_1 + 4 >> 2] = $3_1 * Math_fround(-HEAPF32[$0_1 + 8 >> 2]);
    HEAPF32[$1_1 + 8 >> 2] = HEAPF32[$0_1 + 4 >> 2] * $3_1;
    HEAPF32[$2_1 >> 2] = $4_1 * $3_1;
    HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$1_1 + 8 >> 2] * Math_fround(-HEAPF32[$0_1 >> 2]);
    $3_1 = Math_fround(HEAPF32[$0_1 >> 2] * HEAPF32[$1_1 + 4 >> 2]);
    break label$1;
   }
   $3_1 = HEAPF32[$0_1 >> 2];
   $4_1 = Math_fround($3_1 * $3_1);
   $3_1 = HEAPF32[$0_1 + 4 >> 2];
   $5_1 = Math_fround($4_1 + Math_fround($3_1 * $3_1));
   $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($5_1)));
   HEAPF32[$1_1 >> 2] = $4_1 * Math_fround(-$3_1);
   $3_1 = HEAPF32[$0_1 >> 2];
   HEAP32[$1_1 + 8 >> 2] = 0;
   $3_1 = Math_fround($3_1 * $4_1);
   HEAPF32[$1_1 + 4 >> 2] = $3_1;
   HEAPF32[$2_1 >> 2] = $3_1 * Math_fround(-HEAPF32[$0_1 + 8 >> 2]);
   HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$0_1 + 8 >> 2] * HEAPF32[$1_1 >> 2];
   $3_1 = Math_fround($5_1 * $4_1);
  }
  HEAPF32[$6_1 + 8 >> 2] = $3_1;
 }
 
 function $282($0_1) {
  var $1_1 = 0;
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = -1;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP8[$0_1 + 36 | 0] = 1;
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0_1;
 }
 
 function $283($0_1) {
  $284($0_1);
  $124($0_1 + 20 | 0);
  return $0_1;
 }
 
 function $284($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2];
  if ($1_1) {
   $285($0_1, $1_1)
  }
  $121(HEAP32[$0_1 + 4 >> 2]);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = -1;
  $124($0_1 + 20 | 0);
  HEAP32[$0_1 + 16 >> 2] = 0;
 }
 
 function $285($0_1, $1_1) {
  if ($1_1) {
   if (HEAP32[$1_1 + 40 >> 2]) {
    $285($0_1, HEAP32[$1_1 + 36 >> 2]);
    $285($0_1, HEAP32[$1_1 + 40 >> 2]);
   }
   if (HEAP32[$0_1 >> 2] == ($1_1 | 0)) {
    HEAP32[$0_1 >> 2] = 0
   }
   $286($0_1, $1_1);
  }
 }
 
 function $286($0_1, $1_1) {
  $121(HEAP32[$0_1 + 4 >> 2]);
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $287($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $12_1 = global$0 - 32 | 0;
  global$0 = $12_1;
  $1_1 = ($1_1 | 0) <= -1 ? HEAP32[$0_1 + 12 >> 2] : $1_1;
  if (!(!HEAP32[$0_1 >> 2] | ($1_1 | 0) < 1)) {
   while (1) {
    $9_1 = 0;
    $2_1 = $0_1;
    while (1) {
     $2_1 = HEAP32[$2_1 >> 2];
     if (HEAP32[$2_1 + 40 >> 2]) {
      $4_1 = HEAP32[$2_1 + 32 >> 2];
      label$6 : {
       if ($2_1 >>> 0 >= $4_1 >>> 0) {
        $4_1 = $2_1;
        break label$6;
       }
       $3_1 = HEAP32[$4_1 + 40 >> 2];
       $5_1 = ($3_1 | 0) == ($2_1 | 0);
       $8_1 = (($2_1 | 0) != ($3_1 | 0)) << 2;
       $7_1 = HEAP32[($8_1 + $4_1 | 0) + 36 >> 2];
       $6_1 = HEAP32[$4_1 + 32 >> 2];
       $3_1 = $0_1;
       label$8 : {
        if (!$6_1) {
         break label$8
        }
        $3_1 = ($6_1 + ((HEAP32[$6_1 + 40 >> 2] == ($4_1 | 0)) << 2) | 0) + 36 | 0;
       }
       HEAP32[$3_1 >> 2] = $2_1;
       HEAP32[$7_1 + 32 >> 2] = $2_1;
       HEAP32[$4_1 + 32 >> 2] = $2_1;
       HEAP32[$2_1 + 32 >> 2] = $6_1;
       HEAP32[$4_1 + 36 >> 2] = HEAP32[$2_1 + 36 >> 2];
       HEAP32[$4_1 + 40 >> 2] = HEAP32[$2_1 + 40 >> 2];
       HEAP32[HEAP32[$2_1 + 36 >> 2] + 32 >> 2] = $4_1;
       HEAP32[HEAP32[$2_1 + 40 >> 2] + 32 >> 2] = $4_1;
       $3_1 = $2_1 + 36 | 0;
       HEAP32[$3_1 + ($5_1 << 2) >> 2] = $4_1;
       HEAP32[$3_1 + $8_1 >> 2] = $7_1;
       $3_1 = $4_1 + 24 | 0;
       $8_1 = HEAP32[$3_1 >> 2];
       $13_1 = HEAP32[$3_1 + 4 >> 2];
       $6_1 = $2_1 + 24 | 0;
       $5_1 = HEAP32[$6_1 + 4 >> 2];
       HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $5_1;
       $3_1 = $4_1 + 16 | 0;
       $14_1 = HEAP32[$3_1 >> 2];
       $15_1 = HEAP32[$3_1 + 4 >> 2];
       $7_1 = $2_1 + 16 | 0;
       $5_1 = $7_1;
       $10_1 = HEAP32[$5_1 + 4 >> 2];
       HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $10_1;
       $3_1 = $4_1 + 8 | 0;
       $10_1 = HEAP32[$3_1 >> 2];
       $16_1 = HEAP32[$3_1 + 4 >> 2];
       $5_1 = $2_1 + 8 | 0;
       $11_1 = HEAP32[$5_1 + 4 >> 2];
       HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $11_1;
       $3_1 = HEAP32[$4_1 >> 2];
       $17_1 = HEAP32[$4_1 + 4 >> 2];
       $11_1 = HEAP32[$2_1 + 4 >> 2];
       HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $11_1;
       HEAP32[$2_1 >> 2] = $3_1;
       HEAP32[$2_1 + 4 >> 2] = $17_1;
       HEAP32[$6_1 >> 2] = $8_1;
       HEAP32[$6_1 + 4 >> 2] = $13_1;
       HEAP32[$7_1 >> 2] = $14_1;
       HEAP32[$7_1 + 4 >> 2] = $15_1;
       HEAP32[$5_1 >> 2] = $10_1;
       HEAP32[$5_1 + 4 >> 2] = $16_1;
      }
      $2_1 = (((HEAP32[$0_1 + 16 >> 2] >>> $9_1 & 1) << 2) + $4_1 | 0) + 36 | 0;
      $9_1 = $9_1 + 1 & 31;
      continue;
     }
     break;
    };
    $7_1 = $0_1;
    $4_1 = 0;
    label$9 : {
     if (!$288($0_1, $2_1)) {
      break label$9
     }
     $4_1 = HEAP32[$0_1 >> 2];
    }
    $289($7_1, $4_1, $2_1);
    HEAP32[$0_1 + 16 >> 2] = HEAP32[$0_1 + 16 >> 2] + 1;
    $1_1 = $1_1 - 1 | 0;
    if ($1_1) {
     continue
    }
    break;
   }
  }
  global$0 = $12_1 + 32 | 0;
 }
 
 function $288($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0);
  if (HEAP32[$0_1 >> 2] == ($1_1 | 0)) {
   HEAP32[$0_1 >> 2] = 0;
   return 0;
  }
  $2_1 = HEAP32[$1_1 + 32 >> 2];
  $3_1 = HEAP32[($2_1 + ((HEAP32[$2_1 + 40 >> 2] != ($1_1 | 0)) << 2) | 0) + 36 >> 2];
  $1_1 = HEAP32[$2_1 + 32 >> 2];
  label$2 : {
   label$3 : {
    if ($1_1) {
     HEAP32[(((HEAP32[$1_1 + 40 >> 2] == ($2_1 | 0)) << 2) + $1_1 | 0) + 36 >> 2] = $3_1;
     HEAP32[$3_1 + 32 >> 2] = $1_1;
     $286($0_1, $2_1);
     while (1) {
      if (!$1_1) {
       break label$3
      }
      $4_1 = HEAPF32[$1_1 + 24 >> 2];
      $5_1 = HEAPF32[$1_1 + 20 >> 2];
      $6_1 = HEAPF32[$1_1 + 16 >> 2];
      $7_1 = HEAPF32[$1_1 + 8 >> 2];
      $8_1 = HEAPF32[$1_1 + 4 >> 2];
      $9_1 = HEAPF32[$1_1 >> 2];
      $290(HEAP32[$1_1 + 36 >> 2], HEAP32[$1_1 + 40 >> 2], $1_1);
      label$6 : {
       if (HEAPF32[$1_1 >> 2] != $9_1 | HEAPF32[$1_1 + 4 >> 2] != $8_1 | (HEAPF32[$1_1 + 8 >> 2] != $7_1 | HEAPF32[$1_1 + 16 >> 2] != $6_1)) {
        break label$6
       }
       if (HEAPF32[$1_1 + 20 >> 2] != $5_1) {
        break label$6
       }
       if (HEAPF32[$1_1 + 24 >> 2] == $4_1) {
        break label$2
       }
      }
      $1_1 = HEAP32[$1_1 + 32 >> 2];
      continue;
     };
    }
    HEAP32[$3_1 + 32 >> 2] = 0;
    HEAP32[$0_1 >> 2] = $3_1;
    $286($0_1, $2_1);
   }
   $1_1 = HEAP32[$0_1 >> 2];
  }
  return $1_1;
 }
 
 function $289($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  if (!HEAP32[$0_1 >> 2]) {
   HEAP32[$2_1 + 32 >> 2] = 0;
   HEAP32[$0_1 >> 2] = $2_1;
   return;
  }
  $3_1 = HEAP32[$1_1 + 40 >> 2];
  if ($3_1) {
   while (1) {
    $1_1 = HEAP32[($1_1 + 36 | 0) + (!($291($2_1, HEAP32[$1_1 + 36 >> 2]) < $291($2_1, $3_1)) << 2) >> 2];
    $3_1 = HEAP32[$1_1 + 40 >> 2];
    if ($3_1) {
     continue
    }
    break;
   }
  }
  $4_1 = HEAP32[$1_1 + 32 >> 2];
  $3_1 = $292($0_1, $4_1, 0);
  $290($2_1, $1_1, $3_1);
  label$4 : {
   if ($4_1) {
    HEAP32[(((HEAP32[HEAP32[$1_1 + 32 >> 2] + 40 >> 2] == ($1_1 | 0)) << 2) + $4_1 | 0) + 36 >> 2] = $3_1;
    HEAP32[$3_1 + 36 >> 2] = $1_1;
    HEAP32[$1_1 + 32 >> 2] = $3_1;
    HEAP32[$3_1 + 40 >> 2] = $2_1;
    HEAP32[$2_1 + 32 >> 2] = $3_1;
    while (1) {
     $0_1 = $4_1;
     if ($293($0_1, $3_1)) {
      break label$4
     }
     $290(HEAP32[$0_1 + 36 >> 2], HEAP32[$0_1 + 40 >> 2], $0_1);
     $3_1 = $0_1;
     $4_1 = HEAP32[$3_1 + 32 >> 2];
     if ($4_1) {
      continue
     }
     break;
    };
    break label$4;
   }
   HEAP32[$3_1 + 36 >> 2] = $1_1;
   HEAP32[$1_1 + 32 >> 2] = $3_1;
   HEAP32[$3_1 + 40 >> 2] = $2_1;
   HEAP32[$0_1 >> 2] = $3_1;
   HEAP32[$2_1 + 32 >> 2] = $3_1;
  }
 }
 
 function $290($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0;
  while (1) {
   if (($3_1 | 0) != 12) {
    $6_1 = $2_1 + $3_1 | 0;
    $7_1 = $0_1 + $3_1 | 0;
    $4_1 = HEAPF32[$7_1 >> 2];
    $8_1 = $1_1 + $3_1 | 0;
    $5_1 = HEAPF32[$8_1 >> 2];
    HEAPF32[$6_1 >> 2] = $4_1 < $5_1 ? $4_1 : $5_1;
    $4_1 = HEAPF32[$7_1 + 16 >> 2];
    $5_1 = HEAPF32[$8_1 + 16 >> 2];
    HEAPF32[$6_1 + 16 >> 2] = $4_1 > $5_1 ? $4_1 : $5_1;
    $3_1 = $3_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $291($0_1, $1_1) {
  return Math_fround(Math_fround(Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[$0_1 >> 2] + HEAPF32[$0_1 + 16 >> 2]) - Math_fround(HEAPF32[$1_1 >> 2] + HEAPF32[$1_1 + 16 >> 2])))) + Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[$0_1 + 4 >> 2] + HEAPF32[$0_1 + 20 >> 2]) - Math_fround(HEAPF32[$1_1 + 4 >> 2] + HEAPF32[$1_1 + 20 >> 2]))))) + Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[$0_1 + 8 >> 2] + HEAPF32[$0_1 + 24 >> 2]) - Math_fround(HEAPF32[$1_1 + 8 >> 2] + HEAPF32[$1_1 + 24 >> 2])))));
 }
 
 function $292($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if ($3_1) {
    HEAP32[$0_1 + 4 >> 2] = 0;
    break label$1;
   }
   $3_1 = $120(44);
   $2($3_1, 0, 44);
  }
  HEAP32[$3_1 + 36 >> 2] = $2_1;
  HEAP32[$3_1 + 32 >> 2] = $1_1;
  HEAP32[$3_1 + 40 >> 2] = 0;
  return $3_1;
 }
 
 function $293($0_1, $1_1) {
  var $2_1 = 0;
  label$1 : {
   if (!(HEAPF32[$0_1 >> 2] <= HEAPF32[$1_1 >> 2]) | !(HEAPF32[$0_1 + 4 >> 2] <= HEAPF32[$1_1 + 4 >> 2]) | (!(HEAPF32[$0_1 + 8 >> 2] <= HEAPF32[$1_1 + 8 >> 2]) | !(HEAPF32[$0_1 + 16 >> 2] >= HEAPF32[$1_1 + 16 >> 2]))) {
    break label$1
   }
   if (!(HEAPF32[$0_1 + 20 >> 2] >= HEAPF32[$1_1 + 20 >> 2])) {
    break label$1
   }
   $2_1 = HEAPF32[$0_1 + 24 >> 2] >= HEAPF32[$1_1 + 24 >> 2];
  }
  return $2_1;
 }
 
 function $294($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = $292($0_1, 0, $2_1);
  $3_1 = $2_1 + 24 | 0;
  $4_1 = $1_1 + 24 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $4_1 = $1_1 + 16 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $2_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $4_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $2_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $289($0_1, HEAP32[$0_1 >> 2], $2_1);
  HEAP32[$0_1 + 12 >> 2] = HEAP32[$0_1 + 12 >> 2] + 1;
  return $2_1;
 }
 
 function $295($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = $288($0_1, $1_1);
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $5_1 = HEAP32[$0_1 + 8 >> 2];
   if (($5_1 | 0) >= 0) {
    $4_1 = $5_1 + 1 | 0;
    while (1) {
     $5_1 = $3_1;
     $4_1 = $4_1 - 1 | 0;
     if (!$4_1) {
      break label$1
     }
     $3_1 = HEAP32[$5_1 + 32 >> 2];
     if ($3_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $5_1 = HEAP32[$0_1 >> 2];
  }
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $4_1 = $2_1 + 24 | 0;
  $3_1 = HEAP32[$4_1 + 4 >> 2];
  $6_1 = $1_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $3_1;
  $4_1 = $2_1 + 16 | 0;
  $3_1 = HEAP32[$4_1 + 4 >> 2];
  $6_1 = $1_1 + 16 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $3_1;
  $3_1 = $2_1 + 8 | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $1_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  $289($0_1, $5_1, $1_1);
 }
 
 function $296($0_1, $1_1) {
  $288($0_1, $1_1);
  $286($0_1, $1_1);
  HEAP32[$0_1 + 12 >> 2] = HEAP32[$0_1 + 12 >> 2] - 1;
 }
 
 function $297($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $217($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
  HEAP32[HEAP32[$0_1 + 12 >> 2] + ($2_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $298($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, $1_1);
 }
 
 function $299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 1;
 }
 
 function $300($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $11_1 = $120(Math_imul($1_1, 80))
   }
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   $9_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
   $8_1 = 64;
   while (1) {
    if ($9_1) {
     $6_1 = HEAP32[$0_1 + 12 >> 2] + $8_1 | 0;
     $2_1 = $6_1 + -64 | 0;
     $7_1 = HEAP32[$2_1 + 4 >> 2];
     $4_1 = $8_1 + $11_1 | 0;
     $3_1 = $4_1 + -64 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $7_1;
     $2_1 = $2_1 + 8 | 0;
     $5_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $3_1 = $6_1 - 48 | 0;
     $7_1 = $3_1 + 8 | 0;
     $10_1 = HEAP32[$7_1 + 4 >> 2];
     $2_1 = $4_1 - 48 | 0;
     $5_1 = $2_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $10_1;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $5_1;
     $3_1 = $6_1 - 32 | 0;
     $7_1 = $3_1 + 8 | 0;
     $10_1 = HEAP32[$7_1 + 4 >> 2];
     $2_1 = $4_1 - 32 | 0;
     $5_1 = $2_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $10_1;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $5_1;
     $2_1 = $6_1 - 16 | 0;
     $7_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = $4_1 - 16 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $7_1;
     $2_1 = $2_1 + 8 | 0;
     $5_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $2_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $2_1;
     $6_1 = $6_1 + 8 | 0;
     $2_1 = HEAP32[$6_1 + 4 >> 2];
     $4_1 = $4_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $2_1;
     $9_1 = $9_1 - 1 | 0;
     $8_1 = $8_1 + 80 | 0;
     continue;
    }
    break;
   };
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $11_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 11324;
  $1_1 = HEAP32[$0_1 + 68 >> 2];
  if ($1_1) {
   $283($1_1);
   $121(HEAP32[$0_1 + 68 >> 2]);
  }
  $124($0_1 + 136 | 0);
  $124($0_1 + 116 | 0);
  $124($0_1 + 96 | 0);
  $163($0_1 + 16 | 0);
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAP8[$0_1 + 32 | 0] = 1;
  $1_1 = $0_1 + 20 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $302($0_1) {
  $0_1 = $0_1 | 0;
  $121($301($0_1));
 }
 
 function $303($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   if (HEAP32[$0_1 + 20 >> 2]) {
    $5_1 = HEAPF32[$0_1 + 60 >> 2];
    $7_1 = HEAPF32[$0_1 + 44 >> 2];
    $9_1 = Math_fround(Math_fround($5_1 + $7_1) * Math_fround(.5));
    $8_1 = HEAPF32[$0_1 + 56 >> 2];
    $6_1 = HEAPF32[$0_1 + 40 >> 2];
    $10_1 = Math_fround(Math_fround($8_1 + $6_1) * Math_fround(.5));
    $7_1 = Math_fround(Math_fround($5_1 - $7_1) * Math_fround(.5));
    $8_1 = Math_fround(Math_fround($8_1 - $6_1) * Math_fround(.5));
    $5_1 = HEAPF32[$0_1 + 52 >> 2];
    $6_1 = HEAPF32[$0_1 + 36 >> 2];
    $11_1 = Math_fround(Math_fround($5_1 + $6_1) * Math_fround(.5));
    $5_1 = Math_fround(Math_fround($5_1 - $6_1) * Math_fround(.5));
    break label$1;
   }
   $5_1 = Math_fround(0.0);
  }
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $12_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $13_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $243($4_1 + 32 | 0, $1_1);
  $146($4_1 + 16 | 0, $1_1, $11_1, $10_1, $9_1);
  $148($4_1, Math_fround($6_1 + $5_1), Math_fround($12_1 + $8_1), Math_fround($13_1 + $7_1), HEAPF32[$4_1 + 32 >> 2], HEAPF32[$4_1 + 36 >> 2], HEAPF32[$4_1 + 40 >> 2], HEAPF32[$4_1 + 48 >> 2], HEAPF32[$4_1 + 52 >> 2], HEAPF32[$4_1 + 56 >> 2], HEAPF32[$4_1 + 64 >> 2], HEAPF32[$4_1 + 68 >> 2], HEAPF32[$4_1 + 72 >> 2]);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $5_1 = HEAPF32[$4_1 + 24 >> 2];
  $7_1 = HEAPF32[$4_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = $5_1 - $7_1;
  $9_1 = HEAPF32[$4_1 + 20 >> 2];
  $8_1 = HEAPF32[$4_1 + 4 >> 2];
  HEAPF32[$2_1 + 4 >> 2] = $9_1 - $8_1;
  $6_1 = HEAPF32[$4_1 + 16 >> 2];
  $10_1 = HEAPF32[$4_1 >> 2];
  HEAPF32[$2_1 >> 2] = $6_1 - $10_1;
  HEAPF32[$3_1 >> 2] = $6_1 + $10_1;
  HEAPF32[$3_1 + 4 >> 2] = $9_1 + $8_1;
  HEAPF32[$3_1 + 8 >> 2] = $5_1 + $7_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  global$0 = $4_1 + 80 | 0;
 }
 
 function $304($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $9_1 = $4_1 - -64 | 0;
  $10_1 = $4_1 + 48 | 0;
  $11_1 = $4_1 + 32 | 0;
  $8_1 = 64;
  while (1) {
   if (HEAP32[$0_1 + 20 >> 2] <= ($12_1 | 0)) {
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$0_1 + 80 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 84 >> 2] = $2_1;
    $2_1 = $1_1 + 8 | 0;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    $3_1 = $0_1 + 88 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $1_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1);
    global$0 = $4_1 + 80 | 0;
   } else {
    $7_1 = HEAP32[$0_1 + 28 >> 2] + $8_1 | 0;
    $6_1 = $7_1 + -64 | 0;
    $3_1 = $6_1 + 8 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $4_1 + 24 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$4_1 + 16 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 20 >> 2] = $2_1;
    $6_1 = $7_1 - 48 | 0;
    $3_1 = $6_1 + 8 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $11_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$11_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $2_1;
    $3_1 = $7_1 - 32 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$10_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $2_1;
    $3_1 = $3_1 + 8 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $10_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $2_1;
    $3_1 = $7_1 - 16 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$9_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$9_1 + 4 >> 2] = $2_1;
    $3_1 = $3_1 + 8 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $9_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$7_1 >> 2];
    $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1) | 0;
    $3_1 = $6_1 + 8 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $4_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $2_1;
    $3_1 = HEAP32[$6_1 + 4 >> 2];
    $2_1 = HEAP32[$6_1 >> 2];
    HEAPF32[$5_1 >> 2] = Math_fround(HEAPF32[$5_1 >> 2] * HEAPF32[$1_1 + 8 >> 2]) / HEAPF32[$0_1 + 88 >> 2];
    HEAP32[$4_1 >> 2] = $2_1;
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAPF32[$4_1 >> 2] = Math_fround(HEAPF32[$4_1 >> 2] * HEAPF32[$1_1 >> 2]) / HEAPF32[$0_1 + 80 >> 2];
    HEAPF32[$4_1 + 4 >> 2] = Math_fround(HEAPF32[$4_1 + 4 >> 2] * HEAPF32[$1_1 + 4 >> 2]) / HEAPF32[$0_1 + 84 >> 2];
    $2_1 = HEAP32[HEAP32[$0_1 + 28 >> 2] + $8_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, $4_1);
    HEAP32[$4_1 + 76 >> 2] = 0;
    HEAPF32[$4_1 + 72 >> 2] = Math_fround(HEAPF32[$4_1 + 72 >> 2] * HEAPF32[$1_1 + 8 >> 2]) / HEAPF32[$0_1 + 88 >> 2];
    HEAPF32[$4_1 + 68 >> 2] = Math_fround(HEAPF32[$4_1 + 68 >> 2] * HEAPF32[$1_1 + 4 >> 2]) / HEAPF32[$0_1 + 84 >> 2];
    HEAPF32[$4_1 + 64 >> 2] = Math_fround(HEAPF32[$4_1 + 64 >> 2] * HEAPF32[$1_1 >> 2]) / HEAPF32[$0_1 + 80 >> 2];
    $305($0_1, $12_1, $4_1 + 16 | 0, 0);
    $8_1 = $8_1 + 80 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $305($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = global$0 + -64 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  $8_1 = Math_imul($1_1, 80);
  $1_1 = $8_1 + HEAP32[$0_1 + 28 >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $6_1;
  $6_1 = $2_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $1_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = $2_1 + 24 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $1_1 + 24 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$1_1 + 20 >> 2] = $4_1;
  $6_1 = $2_1 + 40 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $1_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$2_1 + 36 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$1_1 + 36 >> 2] = $4_1;
  $6_1 = $2_1 + 56 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $1_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$2_1 + 52 >> 2];
  HEAP32[$1_1 + 48 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$1_1 + 52 >> 2] = $4_1;
  if (HEAP32[$0_1 + 68 >> 2]) {
   $1_1 = HEAP32[(HEAP32[$0_1 + 28 >> 2] + $8_1 | 0) + 64 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $5_1 + 48 | 0, $5_1 + 32 | 0);
   $2_1 = $5_1 + 56 | 0;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $5_1 + 8 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   $2_1 = $5_1 + 40 | 0;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $5_1 + 24 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   $1_1 = HEAP32[$5_1 + 52 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[$5_1 + 36 >> 2];
   HEAP32[$5_1 + 16 >> 2] = HEAP32[$5_1 + 32 >> 2];
   HEAP32[$5_1 + 20 >> 2] = $1_1;
   $295(HEAP32[$0_1 + 68 >> 2], HEAP32[(HEAP32[$0_1 + 28 >> 2] + $8_1 | 0) + 76 >> 2], $5_1);
  }
  if ($3_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1)
  }
  global$0 = $5_1 - -64 | 0;
 }
 
 function $306($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 80 | 0;
 }
 
 function $307($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $5_1 = $3_1 + 44 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 56 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 1065353216;
  $5_1 = $3_1 - -64 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 76 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = 1065353216;
  $5_1 = $3_1 + 84 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 1065353216;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  $1_1 = Math_fround($1_1 / Math_fround(12.0));
  $4_1 = Math_fround(Math_fround(HEAPF32[$3_1 >> 2] - HEAPF32[$3_1 + 16 >> 2]) * Math_fround(.5));
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  $6_1 = Math_fround(Math_fround(HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$3_1 + 20 >> 2]) * Math_fround(.5));
  $6_1 = Math_fround($6_1 + $6_1);
  $6_1 = Math_fround($6_1 * $6_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($4_1 + $6_1);
  $7_1 = $4_1;
  $4_1 = Math_fround(Math_fround(HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$3_1 + 24 >> 2]) * Math_fround(.5));
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($7_1 + $4_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($6_1 + $4_1);
  global$0 = $3_1 + 96 | 0;
 }
 
 function $308($0_1) {
  $0_1 = $0_1 | 0;
  return 11453;
 }
 
 function $309($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 76 >> 2] = $1_1;
 }
 
 function $310($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 76 >> 2]);
 }
 
 function $311($0_1) {
  $0_1 = $0_1 | 0;
  return 24;
 }
 
 function $312($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $140($0_1, $1_1, $2_1);
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAPF32[$1_1 + 20 >> 2] = HEAPF32[$0_1 + 76 >> 2];
  $3_1 = HEAP32[$0_1 + 20 >> 2];
  HEAP32[$1_1 + 16 >> 2] = $3_1;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 76, $3_1) | 0;
   $3_1 = HEAP32[$6_1 + 8 >> 2];
   (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   while (1) {
    if (HEAP32[$1_1 + 16 >> 2] <= ($7_1 | 0)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $6_1, 11408, 1497453121, HEAP32[$6_1 + 8 >> 2]);
     break label$1;
    }
    $4_1 = Math_imul($7_1, 80);
    $5_1 = $4_1 + HEAP32[$0_1 + 28 >> 2] | 0;
    HEAPF32[$3_1 + 72 >> 2] = HEAPF32[$5_1 + 72 >> 2];
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$5_1 + 64 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 64 >> 2] = wasm2js_i32$1;
    if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, HEAP32[($4_1 + HEAP32[$0_1 + 28 >> 2] | 0) + 64 >> 2]) | 0)) {
     $5_1 = HEAP32[($4_1 + HEAP32[$0_1 + 28 >> 2] | 0) + 64 >> 2];
     $5_1 = ((((wasm2js_i32$1 = $2_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 52 >> 2]]($5_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
     $8_1 = HEAP32[($4_1 + HEAP32[$0_1 + 28 >> 2] | 0) + 64 >> 2];
     (((((wasm2js_i32$3 = $2_1, wasm2js_i32$2 = $5_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 56 >> 2]]($8_1, HEAP32[$5_1 + 8 >> 2], $2_1) | 0), wasm2js_i32$4 = 1346455635), wasm2js_i32$5 = HEAP32[($4_1 + HEAP32[$0_1 + 28 >> 2] | 0) + 64 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
    }
    $5_1 = $4_1 + HEAP32[$0_1 + 28 >> 2] | 0;
    HEAP32[$3_1 + 68 >> 2] = HEAP32[$5_1 + 68 >> 2];
    $4_1 = 0;
    while (1) {
     if (($4_1 | 0) != 48) {
      $132($4_1 + $5_1 | 0, $4_1 + $3_1 | 0);
      $4_1 = $4_1 + 16 | 0;
      continue;
     }
     break;
    };
    $132($5_1 + 48 | 0, $3_1 + 48 | 0);
    $3_1 = $3_1 + 76 | 0;
    $7_1 = $7_1 + 1 | 0;
    continue;
   };
  }
  return 11433;
 }
 
 function $313($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  HEAP32[$0_1 + 72 >> 2] = HEAP32[$0_1 + 72 >> 2] + 1;
  $2_1 = HEAP32[$0_1 + 20 >> 2];
  $3_1 = Math_imul($2_1, 80) - 16 | 0;
  while (1) {
   label$2 : {
    if (($2_1 | 0) > 0) {
     $2_1 = $2_1 - 1 | 0;
     if (HEAP32[HEAP32[$0_1 + 28 >> 2] + $3_1 >> 2] != ($1_1 | 0)) {
      break label$2
     }
     $314($0_1, $2_1);
     break label$2;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1);
    return;
   }
   $3_1 = $3_1 - 80 | 0;
   continue;
  };
 }
 
 function $314($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0, $20_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAP32[$0_1 + 72 >> 2] = HEAP32[$0_1 + 72 >> 2] + 1;
  $2_1 = HEAP32[$0_1 + 68 >> 2];
  if ($2_1) {
   $296($2_1, HEAP32[(HEAP32[$0_1 + 28 >> 2] + Math_imul($1_1, 80) | 0) + 76 >> 2])
  }
  $3_1 = HEAP32[$0_1 + 20 >> 2];
  $19_1 = Math_imul($1_1, 80);
  $20_1 = $0_1 + 28 | 0;
  $12_1 = HEAP32[$20_1 >> 2];
  $2_1 = $19_1 + $12_1 | 0;
  $5_1 = $2_1 + 8 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $7_1 = $4_1 + 8 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $9_1 = $2_1 + 24 | 0;
  $14_1 = HEAP32[$9_1 + 4 >> 2];
  $15_1 = $4_1 + 24 | 0;
  $8_1 = $15_1;
  HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $14_1;
  $16_1 = $2_1 + 40 | 0;
  $10_1 = $16_1;
  $11_1 = HEAP32[$10_1 + 4 >> 2];
  $8_1 = $4_1 + 40 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $11_1;
  $10_1 = $2_1 + 56 | 0;
  $6_1 = HEAP32[$10_1 + 4 >> 2];
  $14_1 = $4_1 + 56 | 0;
  $11_1 = $14_1;
  HEAP32[$11_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$11_1 + 4 >> 2] = $6_1;
  $17_1 = $2_1 + 72 | 0;
  $13_1 = $17_1;
  $21_1 = HEAP32[$13_1 + 4 >> 2];
  $11_1 = $4_1 + 72 | 0;
  $6_1 = $11_1;
  HEAP32[$6_1 >> 2] = HEAP32[$13_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $21_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $6_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$4_1 + 16 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $6_1;
  $6_1 = HEAP32[$2_1 + 36 >> 2];
  HEAP32[$4_1 + 32 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$4_1 + 36 >> 2] = $6_1;
  $6_1 = HEAP32[$2_1 + 52 >> 2];
  HEAP32[$4_1 + 48 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$4_1 + 52 >> 2] = $6_1;
  $6_1 = HEAP32[$2_1 + 68 >> 2];
  HEAP32[$4_1 + 64 >> 2] = HEAP32[$2_1 + 64 >> 2];
  HEAP32[$4_1 + 68 >> 2] = $6_1;
  $6_1 = Math_imul($3_1, 80) - 80 | 0;
  $3_1 = $6_1 + $12_1 | 0;
  $13_1 = HEAP32[$3_1 + 68 >> 2];
  HEAP32[$2_1 + 64 >> 2] = HEAP32[$3_1 + 64 >> 2];
  HEAP32[$2_1 + 68 >> 2] = $13_1;
  $12_1 = $3_1 + 8 | 0;
  $13_1 = HEAP32[$12_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$12_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $13_1;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $5_1 = $3_1 + 24 | 0;
  $12_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $12_1;
  $5_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$2_1 + 16 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$2_1 + 20 >> 2] = $5_1;
  $5_1 = $3_1 + 40 | 0;
  $9_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$16_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$16_1 + 4 >> 2] = $9_1;
  $5_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$2_1 + 32 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$2_1 + 36 >> 2] = $5_1;
  $5_1 = $3_1 + 56 | 0;
  $9_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$10_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$10_1 + 4 >> 2] = $9_1;
  $5_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$2_1 + 48 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$2_1 + 52 >> 2] = $5_1;
  $2_1 = $3_1 + 72 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$17_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$17_1 + 4 >> 2] = $3_1;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $6_1 + HEAP32[$20_1 >> 2] | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $5_1 = HEAP32[$7_1 + 4 >> 2];
  $3_1 = $2_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $7_1 = HEAP32[$15_1 + 4 >> 2];
  $3_1 = $2_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$15_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $3_1 = HEAP32[$4_1 + 20 >> 2];
  HEAP32[$2_1 + 16 >> 2] = HEAP32[$4_1 + 16 >> 2];
  HEAP32[$2_1 + 20 >> 2] = $3_1;
  $7_1 = HEAP32[$8_1 + 4 >> 2];
  $3_1 = $2_1 + 40 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $3_1 = HEAP32[$4_1 + 36 >> 2];
  HEAP32[$2_1 + 32 >> 2] = HEAP32[$4_1 + 32 >> 2];
  HEAP32[$2_1 + 36 >> 2] = $3_1;
  $7_1 = HEAP32[$14_1 + 4 >> 2];
  $3_1 = $2_1 + 56 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$14_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $3_1 = HEAP32[$4_1 + 52 >> 2];
  HEAP32[$2_1 + 48 >> 2] = HEAP32[$4_1 + 48 >> 2];
  HEAP32[$2_1 + 52 >> 2] = $3_1;
  $7_1 = HEAP32[$11_1 + 4 >> 2];
  $3_1 = $2_1 + 72 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $3_1 = HEAP32[$4_1 + 68 >> 2];
  HEAP32[$2_1 + 64 >> 2] = HEAP32[$4_1 + 64 >> 2];
  HEAP32[$2_1 + 68 >> 2] = $3_1;
  if (HEAP32[$0_1 + 68 >> 2]) {
   HEAP32[HEAP32[(HEAP32[$0_1 + 28 >> 2] + $19_1 | 0) + 76 >> 2] + 36 >> 2] = $1_1
  }
  HEAP32[$0_1 + 20 >> 2] = HEAP32[$0_1 + 20 >> 2] - 1;
  $18_1 = Math_fround($1_1 | 0);
  $316($0_1 + 96 | 0, $18_1);
  $316($0_1 + 136 | 0, $18_1);
  $316($0_1 + 116 | 0, $18_1);
  global$0 = $4_1 + 80 | 0;
 }
 
 function $315($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 + 52 >> 2] = -581039253;
  HEAP32[$0_1 + 56 >> 2] = -581039253;
  HEAP32[$0_1 + 36 >> 2] = 1566444395;
  HEAP32[$0_1 + 40 >> 2] = 1566444395;
  $1_1 = $0_1 + 60 | 0;
  HEAP32[$1_1 >> 2] = -581039253;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 44 | 0;
  HEAP32[$1_1 >> 2] = 1566444395;
  HEAP32[$1_1 + 4 >> 2] = 0;
  label$1 : while (1) {
   if (HEAP32[$0_1 + 20 >> 2] > ($5_1 | 0)) {
    $1_1 = HEAP32[$0_1 + 28 >> 2] + Math_imul($5_1, 80) | 0;
    $2_1 = HEAP32[$1_1 + 64 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $1_1, $3_1 + 16 | 0, $3_1);
    $1_1 = 0;
    while (1) {
     if (($1_1 | 0) == 12) {
      $5_1 = $5_1 + 1 | 0;
      continue label$1;
     }
     $4_1 = HEAPF32[($3_1 + 16 | 0) + $1_1 >> 2];
     $2_1 = $0_1 + $1_1 | 0;
     $6_1 = $2_1 + 36 | 0;
     if ($4_1 < HEAPF32[$6_1 >> 2]) {
      HEAPF32[$6_1 >> 2] = $4_1
     }
     $4_1 = HEAPF32[$1_1 + $3_1 >> 2];
     $2_1 = $2_1 + 52 | 0;
     if ($4_1 > HEAPF32[$2_1 >> 2]) {
      HEAPF32[$2_1 >> 2] = $4_1
     }
     $1_1 = $1_1 + 4 | 0;
     continue;
    };
   }
   break;
  };
  global$0 = $3_1 + 32 | 0;
 }
 
 function $316($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  $5_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  label$1 : {
   while (1) {
    if (($2_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    if (HEAPF32[HEAP32[$0_1 + 12 >> 2] + $4_1 >> 2] != $1_1) {
     $4_1 = $4_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   $4_1 = $2_1 << 2;
   $2_1 = HEAP32[$0_1 + 12 >> 2];
   $4_1 = $4_1 + $2_1 | 0;
   $1_1 = HEAPF32[$4_1 >> 2];
   $3_1 = $3_1 - 1 | 0;
   $2_1 = $2_1 + ($3_1 << 2) | 0;
   HEAPF32[$4_1 >> 2] = HEAPF32[$2_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $3_1;
   HEAPF32[$2_1 >> 2] = $1_1;
  }
 }
 
 function $317($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0.0, $17_1 = 0.0, $18_1 = 0.0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
  $15_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  $8_1 = HEAPF32[$0_1 + 12 >> 2];
  $9_1 = HEAPF32[$0_1 + 8 >> 2];
  $10_1 = HEAPF32[$0_1 + 4 >> 2];
  while (1) {
   if (($14_1 | 0) != ($15_1 | 0)) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1, $2_1 + 76 | 0, $2_1 + 52 | 0, $2_1 - -64 | 0, $2_1 + 56 | 0, $2_1 + 72 | 0, $2_1 + 68 | 0, $2_1 + 48 | 0, $2_1 + 60 | 0, $14_1);
    label$3 : {
     label$4 : {
      switch (HEAP32[$2_1 + 64 >> 2]) {
      case 0:
       label$6 : {
        switch (HEAP32[$2_1 + 60 >> 2] - 2 | 0) {
        case 0:
         $3_1 = 0;
         while (1) {
          if (HEAP32[$2_1 + 48 >> 2] <= ($3_1 | 0)) {
           break label$3
          }
          $7_1 = HEAP32[$2_1 + 76 >> 2];
          $6_1 = HEAP32[$2_1 + 56 >> 2];
          $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
          $4_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 >> 2]) | 0;
          $11_1 = HEAPF32[$4_1 >> 2];
          $12_1 = HEAPF32[$4_1 + 4 >> 2];
          $13_1 = HEAPF32[$4_1 + 8 >> 2];
          HEAP32[$2_1 + 12 >> 2] = 0;
          HEAPF32[$2_1 + 8 >> 2] = $8_1 * $13_1;
          HEAPF32[$2_1 + 4 >> 2] = $9_1 * $12_1;
          HEAPF32[$2_1 >> 2] = $10_1 * $11_1;
          $4_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 + 4 >> 2]) | 0;
          $11_1 = HEAPF32[$4_1 >> 2];
          $12_1 = HEAPF32[$4_1 + 4 >> 2];
          $13_1 = HEAPF32[$4_1 + 8 >> 2];
          HEAP32[$2_1 + 28 >> 2] = 0;
          HEAPF32[$2_1 + 24 >> 2] = $8_1 * $13_1;
          HEAPF32[$2_1 + 20 >> 2] = $9_1 * $12_1;
          HEAPF32[$2_1 + 16 >> 2] = $10_1 * $11_1;
          $5_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 + 8 >> 2]) | 0;
          $11_1 = HEAPF32[$5_1 >> 2];
          $12_1 = HEAPF32[$5_1 + 4 >> 2];
          $13_1 = HEAPF32[$5_1 + 8 >> 2];
          HEAP32[$2_1 + 44 >> 2] = 0;
          HEAPF32[$2_1 + 40 >> 2] = $8_1 * $13_1;
          HEAPF32[$2_1 + 36 >> 2] = $9_1 * $12_1;
          HEAPF32[$2_1 + 32 >> 2] = $10_1 * $11_1;
          FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14_1, $3_1);
          $3_1 = $3_1 + 1 | 0;
          continue;
         };
        case 1:
         $3_1 = 0;
         while (1) {
          if (HEAP32[$2_1 + 48 >> 2] <= ($3_1 | 0)) {
           break label$3
          }
          $7_1 = HEAP32[$2_1 + 76 >> 2];
          $6_1 = HEAP32[$2_1 + 56 >> 2];
          $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
          $4_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 >> 1]) | 0;
          $11_1 = HEAPF32[$4_1 >> 2];
          $12_1 = HEAPF32[$4_1 + 4 >> 2];
          $13_1 = HEAPF32[$4_1 + 8 >> 2];
          HEAP32[$2_1 + 12 >> 2] = 0;
          HEAPF32[$2_1 + 8 >> 2] = $8_1 * $13_1;
          HEAPF32[$2_1 + 4 >> 2] = $9_1 * $12_1;
          HEAPF32[$2_1 >> 2] = $10_1 * $11_1;
          $4_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 + 2 >> 1]) | 0;
          $11_1 = HEAPF32[$4_1 >> 2];
          $12_1 = HEAPF32[$4_1 + 4 >> 2];
          $13_1 = HEAPF32[$4_1 + 8 >> 2];
          HEAP32[$2_1 + 28 >> 2] = 0;
          HEAPF32[$2_1 + 24 >> 2] = $8_1 * $13_1;
          HEAPF32[$2_1 + 20 >> 2] = $9_1 * $12_1;
          HEAPF32[$2_1 + 16 >> 2] = $10_1 * $11_1;
          $5_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 + 4 >> 1]) | 0;
          $11_1 = HEAPF32[$5_1 >> 2];
          $12_1 = HEAPF32[$5_1 + 4 >> 2];
          $13_1 = HEAPF32[$5_1 + 8 >> 2];
          HEAP32[$2_1 + 44 >> 2] = 0;
          HEAPF32[$2_1 + 40 >> 2] = $8_1 * $13_1;
          HEAPF32[$2_1 + 36 >> 2] = $9_1 * $12_1;
          HEAPF32[$2_1 + 32 >> 2] = $10_1 * $11_1;
          FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14_1, $3_1);
          $3_1 = $3_1 + 1 | 0;
          continue;
         };
        case 3:
         break label$6;
        default:
         break label$3;
        };
       }
       $3_1 = 0;
       while (1) {
        if (HEAP32[$2_1 + 48 >> 2] <= ($3_1 | 0)) {
         break label$3
        }
        $7_1 = HEAP32[$2_1 + 76 >> 2];
        $6_1 = HEAP32[$2_1 + 56 >> 2];
        $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
        $4_1 = $7_1 + Math_imul($6_1, HEAPU8[$5_1 | 0]) | 0;
        $11_1 = HEAPF32[$4_1 >> 2];
        $12_1 = HEAPF32[$4_1 + 4 >> 2];
        $13_1 = HEAPF32[$4_1 + 8 >> 2];
        HEAP32[$2_1 + 12 >> 2] = 0;
        HEAPF32[$2_1 + 8 >> 2] = $8_1 * $13_1;
        HEAPF32[$2_1 + 4 >> 2] = $9_1 * $12_1;
        HEAPF32[$2_1 >> 2] = $10_1 * $11_1;
        $4_1 = $7_1 + Math_imul($6_1, HEAPU8[$5_1 + 1 | 0]) | 0;
        $11_1 = HEAPF32[$4_1 >> 2];
        $12_1 = HEAPF32[$4_1 + 4 >> 2];
        $13_1 = HEAPF32[$4_1 + 8 >> 2];
        HEAP32[$2_1 + 28 >> 2] = 0;
        HEAPF32[$2_1 + 24 >> 2] = $8_1 * $13_1;
        HEAPF32[$2_1 + 20 >> 2] = $9_1 * $12_1;
        HEAPF32[$2_1 + 16 >> 2] = $10_1 * $11_1;
        $5_1 = $7_1 + Math_imul($6_1, HEAPU8[$5_1 + 2 | 0]) | 0;
        $11_1 = HEAPF32[$5_1 >> 2];
        $12_1 = HEAPF32[$5_1 + 4 >> 2];
        $13_1 = HEAPF32[$5_1 + 8 >> 2];
        HEAP32[$2_1 + 44 >> 2] = 0;
        HEAPF32[$2_1 + 40 >> 2] = $8_1 * $13_1;
        HEAPF32[$2_1 + 36 >> 2] = $9_1 * $12_1;
        HEAPF32[$2_1 + 32 >> 2] = $10_1 * $11_1;
        FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14_1, $3_1);
        $3_1 = $3_1 + 1 | 0;
        continue;
       };
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     label$12 : {
      switch (HEAP32[$2_1 + 60 >> 2] - 2 | 0) {
      case 0:
       $3_1 = 0;
       while (1) {
        if (HEAP32[$2_1 + 48 >> 2] <= ($3_1 | 0)) {
         break label$3
        }
        HEAP32[$2_1 + 12 >> 2] = 0;
        HEAP32[$2_1 + 28 >> 2] = 0;
        $7_1 = HEAP32[$2_1 + 76 >> 2];
        $6_1 = HEAP32[$2_1 + 56 >> 2];
        $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
        $4_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 >> 2]) | 0;
        HEAPF32[$2_1 + 8 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
        HEAPF32[$2_1 + 4 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
        HEAPF32[$2_1 >> 2] = $10_1 * Math_fround(HEAPF64[$4_1 >> 3]);
        $4_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 + 4 >> 2]) | 0;
        HEAPF32[$2_1 + 24 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
        HEAPF32[$2_1 + 20 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
        HEAPF32[$2_1 + 16 >> 2] = $10_1 * Math_fround(HEAPF64[$4_1 >> 3]);
        HEAP32[$2_1 + 44 >> 2] = 0;
        $5_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 + 8 >> 2]) | 0;
        HEAPF32[$2_1 + 32 >> 2] = $10_1 * Math_fround(HEAPF64[$5_1 >> 3]);
        HEAPF32[$2_1 + 40 >> 2] = $8_1 * Math_fround(HEAPF64[$5_1 + 16 >> 3]);
        HEAPF32[$2_1 + 36 >> 2] = $9_1 * Math_fround(HEAPF64[$5_1 + 8 >> 3]);
        FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14_1, $3_1);
        $3_1 = $3_1 + 1 | 0;
        continue;
       };
      case 1:
       $3_1 = 0;
       while (1) {
        if (HEAP32[$2_1 + 48 >> 2] <= ($3_1 | 0)) {
         break label$3
        }
        HEAP32[$2_1 + 12 >> 2] = 0;
        HEAP32[$2_1 + 28 >> 2] = 0;
        $7_1 = HEAP32[$2_1 + 76 >> 2];
        $6_1 = HEAP32[$2_1 + 56 >> 2];
        $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
        $4_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 >> 1]) | 0;
        HEAPF32[$2_1 + 8 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
        HEAPF32[$2_1 + 4 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
        HEAPF32[$2_1 >> 2] = $10_1 * Math_fround(HEAPF64[$4_1 >> 3]);
        $4_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 + 2 >> 1]) | 0;
        HEAPF32[$2_1 + 24 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
        HEAPF32[$2_1 + 20 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
        HEAPF32[$2_1 + 16 >> 2] = $10_1 * Math_fround(HEAPF64[$4_1 >> 3]);
        HEAP32[$2_1 + 44 >> 2] = 0;
        $5_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 + 4 >> 1]) | 0;
        HEAPF32[$2_1 + 32 >> 2] = $10_1 * Math_fround(HEAPF64[$5_1 >> 3]);
        HEAPF32[$2_1 + 40 >> 2] = $8_1 * Math_fround(HEAPF64[$5_1 + 16 >> 3]);
        HEAPF32[$2_1 + 36 >> 2] = $9_1 * Math_fround(HEAPF64[$5_1 + 8 >> 3]);
        FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14_1, $3_1);
        $3_1 = $3_1 + 1 | 0;
        continue;
       };
      case 3:
       break label$12;
      default:
       break label$3;
      };
     }
     $3_1 = 0;
     while (1) {
      if (HEAP32[$2_1 + 48 >> 2] <= ($3_1 | 0)) {
       break label$3
      }
      $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
      $6_1 = HEAPU8[$5_1 | 0];
      HEAP32[$2_1 + 12 >> 2] = 0;
      $7_1 = HEAP32[$2_1 + 76 >> 2];
      $4_1 = $6_1;
      $6_1 = HEAP32[$2_1 + 56 >> 2];
      $4_1 = $7_1 + Math_imul($4_1, $6_1) | 0;
      HEAPF32[$2_1 + 8 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
      HEAPF32[$2_1 + 4 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
      HEAPF32[$2_1 >> 2] = $10_1 * Math_fround(HEAPF64[$4_1 >> 3]);
      $4_1 = HEAPU8[$5_1 + 1 | 0];
      HEAP32[$2_1 + 28 >> 2] = 0;
      $4_1 = $7_1 + Math_imul($4_1, $6_1) | 0;
      HEAPF32[$2_1 + 24 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
      HEAPF32[$2_1 + 20 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
      HEAPF32[$2_1 + 16 >> 2] = $10_1 * Math_fround(HEAPF64[$4_1 >> 3]);
      $5_1 = $7_1 + Math_imul($6_1, HEAPU8[$5_1 + 2 | 0]) | 0;
      $16_1 = HEAPF64[$5_1 >> 3];
      $17_1 = HEAPF64[$5_1 + 8 >> 3];
      $18_1 = HEAPF64[$5_1 + 16 >> 3];
      HEAP32[$2_1 + 44 >> 2] = 0;
      HEAPF32[$2_1 + 40 >> 2] = $8_1 * Math_fround($18_1);
      HEAPF32[$2_1 + 36 >> 2] = $9_1 * Math_fround($17_1);
      HEAPF32[$2_1 + 32 >> 2] = $10_1 * Math_fround($16_1);
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14_1, $3_1);
      $3_1 = $3_1 + 1 | 0;
      continue;
     };
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $14_1);
    $14_1 = $14_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $2_1 + 80 | 0;
 }
 
 function $318($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 20 >> 2] = $3_1;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $11_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 32, $3_1) | 0;
   $8_1 = HEAP32[$11_1 + 8 >> 2];
   (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $8_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
   $12_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
   while (1) {
    label$3 : {
     if (($10_1 | 0) != ($12_1 | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1, $5_1 + 28 | 0, $5_1 + 4 | 0, $5_1 + 16 | 0, $5_1 + 8 | 0, $5_1 + 24 | 0, $5_1 + 20 | 0, $5_1, $5_1 + 12 | 0, $10_1);
      HEAP32[$8_1 >> 2] = 0;
      HEAP32[$8_1 + 4 >> 2] = 0;
      $3_1 = $8_1 + 8 | 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = 0;
      $3_1 = $8_1 + 16 | 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = 0;
      $3_1 = HEAP32[$5_1 >> 2];
      HEAP32[$8_1 + 24 >> 2] = $3_1;
      HEAP32[$8_1 + 28 >> 2] = HEAP32[$5_1 + 4 >> 2];
      label$5 : {
       label$6 : {
        switch (HEAP32[$5_1 + 12 >> 2] - 2 | 0) {
        case 0:
         if (!$3_1) {
          break label$5
         }
         $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 4, Math_imul($3_1, 3)) | 0;
         $3_1 = HEAP32[$7_1 + 8 >> 2];
         (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
         $4_1 = 0;
         $9_1 = HEAP32[$5_1 + 24 >> 2];
         while (1) {
          if (($4_1 | 0) < HEAP32[$5_1 >> 2]) {
           $6_1 = $9_1 + Math_imul(HEAP32[$5_1 + 20 >> 2], $4_1) | 0;
           HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
           HEAP32[$3_1 + 4 >> 2] = HEAP32[$6_1 + 4 >> 2];
           HEAP32[$3_1 + 8 >> 2] = HEAP32[$6_1 + 8 >> 2];
           $3_1 = $3_1 + 12 | 0;
           $4_1 = $4_1 + 1 | 0;
           continue;
          }
          break;
         };
         FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $7_1, 11556, 1497453121, HEAP32[$7_1 + 8 >> 2]);
         break label$5;
        case 1:
         if (!$3_1) {
          break label$5
         }
         $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 8, $3_1) | 0;
         $3_1 = HEAP32[$7_1 + 8 >> 2];
         (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
         $4_1 = 0;
         while (1) {
          if (($4_1 | 0) < HEAP32[$5_1 >> 2]) {
           $6_1 = HEAP32[$5_1 + 24 >> 2] + Math_imul(HEAP32[$5_1 + 20 >> 2], $4_1) | 0;
           HEAP16[$3_1 >> 1] = HEAPU16[$6_1 >> 1];
           HEAP16[$3_1 + 2 >> 1] = HEAPU16[$6_1 + 2 >> 1];
           HEAP16[$3_1 + 4 >> 1] = HEAPU16[$6_1 + 4 >> 1];
           HEAP16[$3_1 + 6 >> 1] = 0;
           $3_1 = $3_1 + 8 | 0;
           $4_1 = $4_1 + 1 | 0;
           continue;
          }
          break;
         };
         FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $7_1, 11571, 1497453121, HEAP32[$7_1 + 8 >> 2]);
         break label$5;
        case 3:
         break label$6;
        default:
         break label$5;
        };
       }
       if (!$3_1) {
        break label$5
       }
       $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 4, $3_1) | 0;
       $3_1 = HEAP32[$7_1 + 8 >> 2];
       (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
       $4_1 = 0;
       while (1) {
        if (($4_1 | 0) < HEAP32[$5_1 >> 2]) {
         $6_1 = HEAP32[$5_1 + 24 >> 2] + Math_imul(HEAP32[$5_1 + 20 >> 2], $4_1) | 0;
         HEAP8[$3_1 | 0] = HEAPU8[$6_1 | 0];
         HEAP8[$3_1 + 1 | 0] = HEAPU8[$6_1 + 1 | 0];
         $6_1 = HEAPU8[$6_1 + 2 | 0];
         HEAP8[$3_1 + 3 | 0] = 0;
         HEAP8[$3_1 + 2 | 0] = $6_1;
         $3_1 = $3_1 + 4 | 0;
         $4_1 = $4_1 + 1 | 0;
         continue;
        }
        break;
       };
       FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $7_1, 11598, 1497453121, HEAP32[$7_1 + 8 >> 2]);
      }
      label$15 : {
       switch (HEAP32[$5_1 + 16 >> 2]) {
       case 0:
        $3_1 = HEAP32[$5_1 + 4 >> 2];
        if (!$3_1) {
         break label$3
        }
        $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 16, $3_1) | 0;
        $3_1 = HEAP32[$6_1 + 8 >> 2];
        (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        $4_1 = HEAP32[$5_1 + 4 >> 2];
        $7_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
        $9_1 = HEAP32[$5_1 + 8 >> 2];
        $4_1 = HEAP32[$5_1 + 28 >> 2];
        while (1) if ($7_1) {
         HEAPF32[$3_1 >> 2] = HEAPF32[$4_1 >> 2];
         HEAPF32[$3_1 + 4 >> 2] = HEAPF32[$4_1 + 4 >> 2];
         HEAPF32[$3_1 + 8 >> 2] = HEAPF32[$4_1 + 8 >> 2];
         $7_1 = $7_1 - 1 | 0;
         $3_1 = $3_1 + 16 | 0;
         $4_1 = $4_1 + $9_1 | 0;
         continue;
        } else {
         FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $6_1, 11621, 1497453121, HEAP32[$6_1 + 8 >> 2]);
         break label$3;
        };
       case 1:
        break label$15;
       default:
        break label$3;
       };
      }
      $3_1 = HEAP32[$5_1 + 4 >> 2];
      if (!$3_1) {
       break label$3
      }
      $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 32, $3_1) | 0;
      $3_1 = HEAP32[$6_1 + 8 >> 2];
      (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
      $4_1 = HEAP32[$5_1 + 4 >> 2];
      $7_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
      $9_1 = HEAP32[$5_1 + 8 >> 2];
      $4_1 = HEAP32[$5_1 + 28 >> 2];
      while (1) if ($7_1) {
       HEAPF64[$3_1 >> 3] = HEAPF64[$4_1 >> 3];
       HEAPF64[$3_1 + 8 >> 3] = HEAPF64[$4_1 + 8 >> 3];
       HEAPF64[$3_1 + 16 >> 3] = HEAPF64[$4_1 + 16 >> 3];
       $7_1 = $7_1 - 1 | 0;
       $3_1 = $3_1 + 32 | 0;
       $4_1 = $4_1 + $9_1 | 0;
       continue;
      } else {
       FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $6_1, 11640, 1497453121, HEAP32[$6_1 + 8 >> 2]);
       break label$3;
      };
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $11_1, 11660, 1497453121, HEAP32[$11_1 + 8 >> 2]);
     break label$1;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $10_1);
    $8_1 = $8_1 + 32 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue;
   };
  }
  HEAP32[$1_1 + 24 >> 2] = 0;
  $132($0_1 + 4 | 0, $1_1 + 4 | 0);
  global$0 = $5_1 + 32 | 0;
  return 11675;
 }
 
 function $319($0_1, $1_1) {
  var $2_1 = Math_fround(0);
  $2_1 = HEAPF32[$1_1 >> 2];
  if ($2_1 < HEAPF32[$0_1 >> 2]) {
   HEAPF32[$0_1 >> 2] = $2_1
  }
  $2_1 = HEAPF32[$1_1 + 4 >> 2];
  if ($2_1 < HEAPF32[$0_1 + 4 >> 2]) {
   HEAPF32[$0_1 + 4 >> 2] = $2_1
  }
  $2_1 = HEAPF32[$1_1 + 8 >> 2];
  if ($2_1 < HEAPF32[$0_1 + 8 >> 2]) {
   HEAPF32[$0_1 + 8 >> 2] = $2_1
  }
  $2_1 = HEAPF32[$1_1 + 12 >> 2];
  if ($2_1 < HEAPF32[$0_1 + 12 >> 2]) {
   HEAPF32[$0_1 + 12 >> 2] = $2_1
  }
 }
 
 function $320($0_1, $1_1) {
  var $2_1 = Math_fround(0);
  $2_1 = HEAPF32[$1_1 >> 2];
  if ($2_1 > HEAPF32[$0_1 >> 2]) {
   HEAPF32[$0_1 >> 2] = $2_1
  }
  $2_1 = HEAPF32[$1_1 + 4 >> 2];
  if ($2_1 > HEAPF32[$0_1 + 4 >> 2]) {
   HEAPF32[$0_1 + 4 >> 2] = $2_1
  }
  $2_1 = HEAPF32[$1_1 + 8 >> 2];
  if ($2_1 > HEAPF32[$0_1 + 8 >> 2]) {
   HEAPF32[$0_1 + 8 >> 2] = $2_1
  }
  $2_1 = HEAPF32[$1_1 + 12 >> 2];
  if ($2_1 > HEAPF32[$0_1 + 12 >> 2]) {
   HEAPF32[$0_1 + 12 >> 2] = $2_1
  }
 }
 
 function $321($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 11748;
  $163($0_1 + 20 | 0);
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP8[$0_1 + 36 | 0] = 1;
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $322($0_1) {
  $0_1 = $0_1 | 0;
  $121($321($0_1));
 }
 
 function $323($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $0_1 = HEAP32[$0_1 + 32 >> 2] + ($9_1 << 5) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 + 12 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$0_1 + 20 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$0_1 + 16 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$0_1 + 28 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$8_1 >> 2] = HEAP32[$0_1 + 24 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$0_1 + 8 >> 2];
 }
 
 function $324($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 48 >> 2] == 1 | 0;
 }
 
 function $326($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 52 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 56 >> 2] = $3_1;
  $1_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $0_1 + 60 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 + 68 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 72 >> 2] = $1_1;
  $2_1 = $2_1 + 8 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 76 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 + 48 >> 2] = 1;
 }
 
 function $327($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[$0_1 + 56 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $3_1 = $0_1 + 60 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $1_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $3_1 = $0_1 + 76 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $2_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$0_1 + 72 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 + 68 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 11860;
  $163($0_1 + 144 | 0);
  HEAP32[$0_1 + 156 >> 2] = 0;
  HEAP8[$0_1 + 160 | 0] = 1;
  $1_1 = $0_1 + 148 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $163($0_1 + 124 | 0);
  HEAP32[$0_1 + 136 >> 2] = 0;
  HEAP8[$0_1 + 140 | 0] = 1;
  $1_1 = $0_1 + 128 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $124($0_1 + 104 | 0);
  $124($0_1 + 84 | 0);
  $321($0_1);
  return $0_1 | 0;
 }
 
 function $329($0_1) {
  $0_1 = $0_1 | 0;
  $121($328($0_1));
 }
 
 function $330($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 24 >> 2];
 }
 
 function $331($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if (HEAPU8[$0_1 + 165 | 0]) {
   $207($0_1 + 84 | 0, $1_1);
   return;
  }
  $332($0_1 + 104 | 0, $1_1);
 }
 
 function $332($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $4_1 = $120($1_1 << 2)
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     HEAPF32[$4_1 + $3_1 >> 2] = HEAPF32[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 2];
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 + 4 | 0;
     continue;
    }
    break;
   };
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $333($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if (HEAPU8[$0_1 + 164 | 0]) {
   $182($0_1 + 124 | 0, $1_1);
   return;
  }
  $334($0_1 + 144 | 0, $1_1);
 }
 
 function $334($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $4_1 = $120($1_1 << 1)
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     HEAP16[$4_1 + $3_1 >> 1] = HEAPU16[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 1];
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 + 2 | 0;
     continue;
    }
    break;
   };
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $335($0_1) {
  $0_1 = $0_1 | 0;
  return 28;
 }
 
 function $336($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  if (HEAPU8[$0_1 + 164 | 0]) {
   $2_1 = HEAP32[$0_1 + 128 >> 2];
   if (($2_1 | 0) == HEAP32[$0_1 + 132 >> 2]) {
    $182($0_1 + 124 | 0, $2_1 ? $2_1 << 1 : 1);
    $2_1 = HEAP32[$0_1 + 128 >> 2];
   }
   $3_1 = HEAP32[$0_1 + 136 >> 2];
   HEAP32[$3_1 + ($2_1 << 2) >> 2] = $1_1;
   HEAP32[HEAP32[$0_1 + 32 >> 2] + 4 >> 2] = $3_1;
   HEAP32[$0_1 + 128 >> 2] = HEAP32[$0_1 + 128 >> 2] + 1;
   return;
  }
  $2_1 = HEAP32[$0_1 + 148 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 152 >> 2]) {
   $334($0_1 + 144 | 0, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 148 >> 2];
  }
  HEAP32[$0_1 + 148 >> 2] = $2_1 + 1;
  $3_1 = HEAP32[$0_1 + 32 >> 2];
  $0_1 = HEAP32[$0_1 + 156 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $0_1;
  HEAP16[$0_1 + ($2_1 << 1) >> 1] = $1_1;
 }
 
 function $337($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0;
  label$1 : {
   if (HEAPU8[$0_1 + 165 | 0]) {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     $2_1 = HEAP32[$0_1 + 88 >> 2];
     $5_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
     $6_1 = HEAPF32[$1_1 + 8 >> 2];
     $7_1 = HEAPF32[$1_1 + 4 >> 2];
     $8_1 = HEAPF32[$1_1 >> 2];
     $2_1 = 0;
     while (1) {
      if (($2_1 | 0) == ($5_1 | 0)) {
       break label$3
      }
      $4_1 = HEAP32[$0_1 + 96 >> 2] + $3_1 | 0;
      if ($149(Math_fround(HEAPF32[$4_1 >> 2] - $8_1), Math_fround(HEAPF32[$4_1 + 4 >> 2] - $7_1), Math_fround(HEAPF32[$4_1 + 8 >> 2] - $6_1)) <= HEAPF32[$0_1 + 168 >> 2]) {
       break label$1
      }
      $3_1 = $3_1 + 16 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue;
     };
    }
    $2_1 = $0_1 + 32 | 0;
    $3_1 = HEAP32[$2_1 >> 2];
    HEAP32[$3_1 + 12 >> 2] = HEAP32[$3_1 + 12 >> 2] + 1;
    $200($0_1 + 84 | 0, $1_1);
    HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2] = HEAP32[$0_1 + 96 >> 2];
    return HEAP32[$0_1 + 88 >> 2] - 1 | 0;
   }
   label$5 : {
    if (!$2_1) {
     break label$5
    }
    $9_1 = HEAP32[$0_1 + 108 >> 2];
    $6_1 = HEAPF32[$1_1 + 8 >> 2];
    $7_1 = HEAPF32[$1_1 + 4 >> 2];
    $8_1 = HEAPF32[$1_1 >> 2];
    $2_1 = -1;
    $5_1 = -3;
    while (1) {
     $5_1 = $5_1 + 3 | 0;
     if (($9_1 | 0) <= ($5_1 | 0)) {
      break label$5
     }
     $2_1 = $2_1 + 1 | 0;
     $4_1 = HEAP32[$0_1 + 116 >> 2] + $3_1 | 0;
     $3_1 = $3_1 + 12 | 0;
     if (!($149(Math_fround(HEAPF32[$4_1 >> 2] - $8_1), Math_fround(HEAPF32[$4_1 + 4 >> 2] - $7_1), Math_fround(HEAPF32[$4_1 + 8 >> 2] - $6_1)) <= HEAPF32[$0_1 + 168 >> 2])) {
      continue
     }
     break;
    };
    break label$1;
   }
   $2_1 = $0_1 + 104 | 0;
   $338($2_1, $1_1);
   $338($2_1, $1_1 + 4 | 0);
   $338($2_1, $1_1 + 8 | 0);
   $1_1 = HEAP32[$0_1 + 32 >> 2];
   HEAP32[$1_1 + 16 >> 2] = HEAP32[$0_1 + 116 >> 2];
   HEAP32[$1_1 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2] + 1;
   $2_1 = (HEAP32[$0_1 + 108 >> 2] / 3 | 0) - 1 | 0;
  }
  return $2_1;
 }
 
 function $338($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $332($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
  HEAPF32[HEAP32[$0_1 + 12 >> 2] + ($2_1 << 2) >> 2] = HEAPF32[$1_1 >> 2];
 }
 
 function $339($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  while (1) {
   if (($3_1 | 0) == 12) {
    global$0 = $1_1 + 48 | 0
   } else {
    $2_1 = $1_1 + 40 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP32[$1_1 + 32 >> 2] = 0;
    HEAP32[$1_1 + 36 >> 2] = 0;
    $2_1 = ($1_1 + 32 | 0) + $3_1 | 0;
    HEAP32[$2_1 >> 2] = 1065353216;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($1_1 + 16 | 0, $0_1, $1_1 + 32 | 0);
    HEAP32[$2_1 >> 2] = -1082130432;
    $2_1 = $0_1 + $3_1 | 0;
    $5_1 = ($1_1 + 16 | 0) + $3_1 | 0;
    HEAPF32[$2_1 + 36 >> 2] = HEAPF32[$5_1 >> 2] + HEAPF32[$0_1 + 16 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($1_1, $0_1, $1_1 + 32 | 0);
    $6_1 = $1_1 + 8 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $1_1 + 24 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    $4_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$1_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$1_1 + 20 >> 2] = $4_1;
    HEAPF32[$2_1 + 20 >> 2] = HEAPF32[$5_1 >> 2] - HEAPF32[$0_1 + 16 >> 2];
    $3_1 = $3_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $340($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $11_1 = $0_1 + 28 | 0;
  $5_1 = HEAPF32[$11_1 >> 2];
  $12_1 = $0_1 + 44 | 0;
  $6_1 = HEAPF32[$12_1 >> 2];
  $13_1 = $0_1 + 24 | 0;
  $7_1 = HEAPF32[$13_1 >> 2];
  $14_1 = $0_1 + 40 | 0;
  $8_1 = HEAPF32[$14_1 >> 2];
  $9_1 = HEAPF32[$0_1 + 20 >> 2];
  $10_1 = HEAPF32[$0_1 + 36 >> 2];
  $15_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $16_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $17_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $18_1 = HEAPF32[$13_1 >> 2];
  $19_1 = HEAPF32[$14_1 >> 2];
  $20_1 = HEAPF32[$11_1 >> 2];
  $21_1 = HEAPF32[$12_1 >> 2];
  $22_1 = HEAPF32[$0_1 + 20 >> 2];
  $23_1 = HEAPF32[$0_1 + 36 >> 2];
  $243($4_1 + 32 | 0, $1_1);
  $146($4_1 + 16 | 0, $1_1, Math_fround(Math_fround($23_1 + $22_1) * Math_fround(.5)), Math_fround(Math_fround($19_1 + $18_1) * Math_fround(.5)), Math_fround(Math_fround($21_1 + $20_1) * Math_fround(.5)));
  $148($4_1, Math_fround($15_1 + Math_fround(Math_fround($10_1 - $9_1) * Math_fround(.5))), Math_fround($16_1 + Math_fround(Math_fround($8_1 - $7_1) * Math_fround(.5))), Math_fround($17_1 + Math_fround(Math_fround($6_1 - $5_1) * Math_fround(.5))), HEAPF32[$4_1 + 32 >> 2], HEAPF32[$4_1 + 36 >> 2], HEAPF32[$4_1 + 40 >> 2], HEAPF32[$4_1 + 48 >> 2], HEAPF32[$4_1 + 52 >> 2], HEAPF32[$4_1 + 56 >> 2], HEAPF32[$4_1 + 64 >> 2], HEAPF32[$4_1 + 68 >> 2], HEAPF32[$4_1 + 72 >> 2]);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $5_1 = HEAPF32[$4_1 + 24 >> 2];
  $6_1 = HEAPF32[$4_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = $5_1 - $6_1;
  $7_1 = HEAPF32[$4_1 + 20 >> 2];
  $8_1 = HEAPF32[$4_1 + 4 >> 2];
  HEAPF32[$2_1 + 4 >> 2] = $7_1 - $8_1;
  $9_1 = HEAPF32[$4_1 + 16 >> 2];
  $10_1 = HEAPF32[$4_1 >> 2];
  HEAPF32[$2_1 >> 2] = $9_1 - $10_1;
  HEAPF32[$3_1 >> 2] = $9_1 + $10_1;
  HEAPF32[$3_1 + 4 >> 2] = $7_1 + $8_1;
  HEAPF32[$3_1 + 8 >> 2] = $5_1 + $6_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  global$0 = $4_1 + 80 | 0;
 }
 
 function $341($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $3_1;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $2_1 + 12 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $339($0_1);
 }
 
 function $342($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 52 >> 2] + 4 | 0;
 }
 
 function $343($0_1) {
  $0_1 = $0_1 | 0;
  return 12238;
 }
 
 function $344($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $6_1 = $2_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $4_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  $6_1 = $3_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $4_1 + 40 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  HEAP32[$4_1 + 8 >> 2] = 12112;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $5_1;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$4_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 36 >> 2] = $5_1;
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  $0_1 = HEAP32[$0_1 + 52 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $4_1 + 8 | 0, $2_1, $3_1);
  global$0 = $4_1 + 48 | 0;
 }
 
 function $345($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 192 | 0;
  global$0 = $3_1;
  $5_1 = $3_1 + 168 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 152 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $6_1 = $3_1 + 128 | 0;
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 136 >> 2] = 0;
  HEAP32[$3_1 + 160 >> 2] = 0;
  HEAP32[$3_1 + 164 >> 2] = 0;
  HEAP32[$3_1 + 144 >> 2] = 0;
  HEAP32[$3_1 + 148 >> 2] = 0;
  HEAP32[$3_1 + 120 >> 2] = 0;
  HEAP32[$3_1 + 124 >> 2] = 0;
  $6_1 = $3_1 + 28 | 0;
  $4_1 = $6_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 48 >> 2] = 0;
  $4_1 = $3_1 + 60 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 56 >> 2] = 1065353216;
  HEAP32[$3_1 + 52 >> 2] = HEAP32[$3_1 + 172 >> 2];
  $4_1 = $3_1 + 76 | 0;
  HEAP32[$4_1 >> 2] = 1065353216;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 20 >> 2] = 0;
  HEAP32[$3_1 + 24 >> 2] = 0;
  HEAP32[$3_1 + 16 >> 2] = 12056;
  HEAP32[$3_1 + 36 >> 2] = 1065353216;
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $3_1 + 68 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$3_1 + 128 >> 2];
  $5_1 = $3_1 + 84 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 + 124 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $4_1;
  $4_1 = $3_1 + 132 | 0;
  $7_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = $3_1 + 92 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  HEAP32[$3_1 + 100 >> 2] = -581039253;
  $145($3_1 + 176 | 0, HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], $3_1 + 36 | 0);
  $5_1 = $3_1 + 184 | 0;
  $4_1 = HEAP32[$5_1 + 4 >> 2];
  $2_1 = $3_1 + 112 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$3_1 + 180 >> 2];
  HEAP32[$3_1 + 104 >> 2] = HEAP32[$3_1 + 176 >> 2];
  HEAP32[$3_1 + 108 >> 2] = $2_1;
  HEAP32[$3_1 + 184 >> 2] = 1566444395;
  HEAP32[$3_1 + 188 >> 2] = 0;
  HEAP32[$3_1 + 176 >> 2] = 1566444395;
  HEAP32[$3_1 + 180 >> 2] = 1566444395;
  HEAP32[$3_1 + 8 >> 2] = -581039253;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 >> 2] = -581039253;
  HEAP32[$3_1 + 4 >> 2] = -581039253;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 64 >> 2]]($1_1, $3_1 + 16 | 0, $3_1, $3_1 + 176 | 0);
  $2_1 = HEAP32[$6_1 + 4 >> 2];
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 24 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $3_1 + 192 | 0;
 }
 
 function $346($0_1) {
  $0_1 = $0_1 | 0;
  $33($0_1);
 }
 
 function $347($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $4_1 = $0_1 + 4 | 0;
  $8_1 = HEAPF32[$0_1 + 96 >> 2];
  $9_1 = HEAPF32[$0_1 + 92 >> 2];
  $10_1 = HEAPF32[$0_1 + 88 >> 2];
  $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 48) {
    $3_1 = $1_1 + $2_1 | 0;
    $5_1 = $3_1 + 8 | 0;
    $7_1 = $160($10_1, $9_1, $8_1, HEAPF32[$3_1 >> 2], HEAPF32[$3_1 + 4 >> 2], HEAPF32[$5_1 >> 2]);
    if ($7_1 > HEAPF32[$0_1 + 84 >> 2]) {
     HEAPF32[$0_1 + 84 >> 2] = $7_1;
     $6_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $6_1;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $4_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
    }
    $2_1 = $2_1 + 16 | 0;
    continue;
   }
   break;
  };
 }
 
 function $348($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  if ($349($1_1, HEAPF32[$0_1 + 8 >> 2], HEAPF32[$0_1 + 12 >> 2], HEAPF32[$0_1 + 16 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 28 >> 2], HEAPF32[$0_1 + 32 >> 2])) {
   $0_1 = HEAP32[$0_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1, $2_1, $3_1);
  }
 }
 
 function $349($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0;
  $10_1 = $4_1;
  $4_1 = HEAPF32[$0_1 >> 2];
  $8_1 = HEAPF32[$0_1 + 16 >> 2];
  $12_1 = $4_1 < $8_1 ? $4_1 : $8_1;
  $11_1 = HEAPF32[$0_1 + 32 >> 2];
  label$1 : {
   if ($10_1 < ($11_1 > $12_1 ? $12_1 : $11_1)) {
    break label$1
   }
   $7_1 = !($4_1 > $8_1) << 4;
   if (HEAPF32[(HEAPF32[$0_1 + $7_1 >> 2] > $11_1 ? $7_1 : 32) + $0_1 >> 2] < $1_1) {
    break label$1
   }
   $10_1 = $6_1;
   $1_1 = HEAPF32[$0_1 + 8 >> 2];
   $7_1 = $0_1 + 24 | 0;
   $4_1 = HEAPF32[$7_1 >> 2];
   $8_1 = $1_1 < $4_1 ? $1_1 : $4_1;
   $9_1 = $0_1 + 40 | 0;
   $6_1 = HEAPF32[$9_1 >> 2];
   if ($10_1 < ($6_1 > $8_1 ? $8_1 : $6_1)) {
    break label$1
   }
   $7_1 = $1_1 > $4_1 ? $0_1 + 8 | 0 : $7_1;
   if (HEAPF32[($6_1 < HEAPF32[$7_1 >> 2] ? $7_1 : $9_1) >> 2] < $3_1) {
    break label$1
   }
   $6_1 = $5_1;
   $1_1 = HEAPF32[$0_1 + 4 >> 2];
   $7_1 = $0_1 + 20 | 0;
   $3_1 = HEAPF32[$7_1 >> 2];
   $5_1 = $1_1 < $3_1 ? $1_1 : $3_1;
   $9_1 = $0_1 + 36 | 0;
   $4_1 = HEAPF32[$9_1 >> 2];
   if ($6_1 < ($4_1 > $5_1 ? $5_1 : $4_1)) {
    break label$1
   }
   $0_1 = $1_1 > $3_1 ? $0_1 + 4 | 0 : $7_1;
   if (HEAPF32[($4_1 < HEAPF32[$0_1 >> 2] ? $0_1 : $9_1) >> 2] < $2_1) {
    break label$1
   }
   $13_1 = 1;
  }
  return $13_1;
 }
 
 function $350($0_1) {
  var $1_1 = 0;
  HEAP8[$0_1 + 60 | 0] = 0;
  HEAP32[$0_1 + 52 >> 2] = 289;
  HEAP32[$0_1 >> 2] = 12284;
  HEAP32[$0_1 + 144 >> 2] = 0;
  HEAP8[$0_1 + 80 | 0] = 1;
  HEAP32[$0_1 + 76 >> 2] = 0;
  HEAP8[$0_1 + 100 | 0] = 1;
  $1_1 = $0_1 + 68 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 96 >> 2] = 0;
  HEAP8[$0_1 + 120 | 0] = 1;
  $1_1 = $0_1 + 88 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 116 >> 2] = 0;
  HEAP8[$0_1 + 140 | 0] = 1;
  $1_1 = $0_1 + 108 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 136 >> 2] = 0;
  HEAP8[$0_1 + 164 | 0] = 1;
  $1_1 = $0_1 + 128 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 160 >> 2] = 0;
  HEAP32[$0_1 + 168 >> 2] = 0;
  $1_1 = $0_1 + 152 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = -8388609;
  HEAP32[$0_1 + 8 >> 2] = -8388609;
  $1_1 = $0_1 + 12 | 0;
  HEAP32[$1_1 >> 2] = -8388609;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 20 >> 2] = 2139095039;
  HEAP32[$0_1 + 24 >> 2] = 2139095039;
  $1_1 = $0_1 + 28 | 0;
  HEAP32[$1_1 >> 2] = 2139095039;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0_1;
 }
 
 function $351($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 12284;
  $124($0_1 + 148 | 0);
  $124($0_1 + 124 | 0);
  $124($0_1 + 104 | 0);
  $124($0_1 + 84 | 0);
  $124($0_1 - -64 | 0);
  return $0_1 | 0;
 }
 
 function $352($0_1) {
  $0_1 = $0_1 | 0;
  $121($351($0_1));
 }
 
 function $353($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  HEAP32[$0_1 + 168 >> 2] = HEAP32[$0_1 + 152 >> 2];
  $350($1_1);
  $2_1 = HEAP32[$0_1 + 56 >> 2];
  label$1 : {
   if ($3_1) {
    HEAP32[$1_1 + 56 >> 2] = $2_1 << 8 & 16711680 | $2_1 << 24 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
    $354($0_1 + 4 | 0, $1_1 + 4 | 0);
    $354($0_1 + 20 | 0, $1_1 + 20 | 0);
    $354($0_1 + 36 | 0, $1_1 + 36 | 0);
    $2_1 = HEAP32[$0_1 + 144 >> 2];
    HEAP32[$1_1 + 144 >> 2] = $2_1 << 24 | $2_1 << 8 & 16711680 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
    $2_1 = HEAP32[$0_1 + 168 >> 2];
    $2_1 = $2_1 << 24 | $2_1 << 8 & 16711680 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
    break label$1;
   }
   HEAP32[$1_1 + 56 >> 2] = $2_1;
   $7_1 = $0_1 + 12 | 0;
   $4_1 = HEAP32[$7_1 + 4 >> 2];
   $2_1 = $1_1 + 12 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $2_1 = HEAP32[$0_1 + 8 >> 2];
   HEAP32[$1_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$1_1 + 8 >> 2] = $2_1;
   $7_1 = $0_1 + 28 | 0;
   $4_1 = HEAP32[$7_1 + 4 >> 2];
   $2_1 = $1_1 + 28 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $2_1 = HEAP32[$0_1 + 24 >> 2];
   HEAP32[$1_1 + 20 >> 2] = HEAP32[$0_1 + 20 >> 2];
   HEAP32[$1_1 + 24 >> 2] = $2_1;
   $2_1 = HEAP32[$0_1 + 40 >> 2];
   HEAP32[$1_1 + 36 >> 2] = HEAP32[$0_1 + 36 >> 2];
   HEAP32[$1_1 + 40 >> 2] = $2_1;
   $7_1 = $0_1 + 44 | 0;
   $4_1 = HEAP32[$7_1 + 4 >> 2];
   $2_1 = $1_1 + 44 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   HEAP32[$1_1 + 144 >> 2] = HEAP32[$0_1 + 144 >> 2];
   $2_1 = HEAP32[$0_1 + 168 >> 2];
  }
  HEAP8[$1_1 + 60 | 0] = HEAPU8[$0_1 + 60 | 0];
  HEAP32[$1_1 + 168 >> 2] = $2_1;
  $9_1 = $1_1 + 172 | 0;
  $7_1 = HEAP32[$0_1 + 56 >> 2];
  label$3 : {
   if (HEAPU8[$0_1 + 60 | 0]) {
    $10_1 = $1_1 + 124 | 0;
    $355($10_1, $9_1, $7_1, $7_1);
    $2_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
    label$5 : {
     if (!$3_1) {
      while (1) {
       if (!$2_1) {
        break label$5
       }
       $4_1 = HEAP32[$1_1 + 136 >> 2] + $8_1 | 0;
       $5_1 = HEAP32[$0_1 + 136 >> 2] + $8_1 | 0;
       HEAP16[$4_1 >> 1] = HEAPU16[$5_1 >> 1];
       HEAP16[$4_1 + 2 >> 1] = HEAPU16[$5_1 + 2 >> 1];
       HEAP16[$4_1 + 4 >> 1] = HEAPU16[$5_1 + 4 >> 1];
       HEAP16[$4_1 + 6 >> 1] = HEAPU16[$5_1 + 6 >> 1];
       HEAP16[$4_1 + 8 >> 1] = HEAPU16[$5_1 + 8 >> 1];
       HEAP32[$4_1 + 12 >> 2] = HEAP32[$5_1 + 12 >> 2];
       HEAP16[$4_1 + 10 >> 1] = HEAPU16[$5_1 + 10 >> 1];
       $2_1 = $2_1 - 1 | 0;
       $8_1 = $8_1 + 16 | 0;
       continue;
      }
     }
     while (1) {
      if (!$2_1) {
       break label$5
      }
      $4_1 = HEAP32[$1_1 + 136 >> 2] + $8_1 | 0;
      $5_1 = HEAP32[$0_1 + 136 >> 2] + $8_1 | 0;
      $6_1 = HEAPU16[$5_1 >> 1];
      HEAP16[$4_1 >> 1] = ($6_1 << 24 | $6_1 << 8 & 16711680) >>> 16;
      $6_1 = HEAPU16[$5_1 + 2 >> 1];
      HEAP16[$4_1 + 2 >> 1] = ($6_1 << 24 | $6_1 << 8 & 16711680) >>> 16;
      $6_1 = HEAPU16[$5_1 + 4 >> 1];
      HEAP16[$4_1 + 4 >> 1] = ($6_1 << 24 | $6_1 << 8 & 16711680) >>> 16;
      $6_1 = HEAPU16[$5_1 + 6 >> 1];
      HEAP16[$4_1 + 6 >> 1] = ($6_1 << 24 | $6_1 << 8 & 16711680) >>> 16;
      $6_1 = HEAPU16[$5_1 + 8 >> 1];
      HEAP16[$4_1 + 8 >> 1] = ($6_1 << 24 | $6_1 << 8 & 16711680) >>> 16;
      $6_1 = HEAP32[$5_1 + 12 >> 2];
      HEAP32[$4_1 + 12 >> 2] = $6_1 << 24 | $6_1 << 8 & 16711680 | ($6_1 >>> 8 & 65280 | $6_1 >>> 24);
      $6_1 = $4_1 + 10 | 0;
      $4_1 = HEAPU16[$5_1 + 10 >> 1];
      HEAP16[$6_1 >> 1] = ($4_1 << 24 | $4_1 << 8 & 16711680) >>> 16;
      $2_1 = $2_1 - 1 | 0;
      $8_1 = $8_1 + 16 | 0;
      continue;
     };
    }
    $355($10_1, 0, 0, 0);
    $2_1 = $7_1 << 4;
    break label$3;
   }
   $10_1 = $1_1 + 84 | 0;
   $355($10_1, $9_1, $7_1, $7_1);
   $2_1 = 0;
   $8_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
   label$9 : {
    if (!$3_1) {
     while (1) {
      if (!$8_1) {
       break label$9
      }
      $5_1 = HEAP32[$0_1 + 96 >> 2] + $2_1 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      $4_1 = HEAP32[$1_1 + 96 >> 2] + $2_1 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $6_1;
      $5_1 = $5_1 + 8 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      $4_1 = $4_1 + 8 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $6_1;
      $6_1 = HEAP32[$0_1 + 96 >> 2] + $2_1 | 0;
      $11_1 = $6_1 + 24 | 0;
      $12_1 = HEAP32[$11_1 + 4 >> 2];
      $4_1 = HEAP32[$1_1 + 96 >> 2] + $2_1 | 0;
      $5_1 = $4_1 + 24 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $12_1;
      $5_1 = $6_1 + 16 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      $4_1 = $4_1 + 16 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $6_1;
      $4_1 = HEAP32[$1_1 + 96 >> 2] + $2_1 | 0;
      $5_1 = HEAP32[$0_1 + 96 >> 2] + $2_1 | 0;
      HEAP32[$4_1 + 32 >> 2] = HEAP32[$5_1 + 32 >> 2];
      HEAP32[$4_1 + 36 >> 2] = HEAP32[$5_1 + 36 >> 2];
      HEAP32[$4_1 + 40 >> 2] = HEAP32[$5_1 + 40 >> 2];
      $8_1 = $8_1 - 1 | 0;
      $2_1 = $2_1 - -64 | 0;
      continue;
     }
    }
    while (1) {
     if (!$8_1) {
      break label$9
     }
     $354(HEAP32[$0_1 + 96 >> 2] + $2_1 | 0, HEAP32[$1_1 + 96 >> 2] + $2_1 | 0);
     $354((HEAP32[$0_1 + 96 >> 2] + $2_1 | 0) + 16 | 0, (HEAP32[$1_1 + 96 >> 2] + $2_1 | 0) + 16 | 0);
     $5_1 = HEAP32[$1_1 + 96 >> 2] + $2_1 | 0;
     $6_1 = HEAP32[$0_1 + 96 >> 2] + $2_1 | 0;
     $4_1 = HEAP32[$6_1 + 32 >> 2];
     HEAP32[$5_1 + 32 >> 2] = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
     $4_1 = HEAP32[$6_1 + 36 >> 2];
     HEAP32[$5_1 + 36 >> 2] = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
     $4_1 = HEAP32[$6_1 + 40 >> 2];
     HEAP32[$5_1 + 40 >> 2] = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
     $8_1 = $8_1 - 1 | 0;
     $2_1 = $2_1 - -64 | 0;
     continue;
    };
   }
   $355($10_1, 0, 0, 0);
   $2_1 = $7_1 << 6;
  }
  $5_1 = $1_1 + 148 | 0;
  $4_1 = $2_1 + $9_1 | 0;
  $2_1 = HEAP32[$0_1 + 168 >> 2];
  $355($5_1, $4_1, $2_1, $2_1);
  label$13 : {
   if (!$3_1) {
    $2_1 = 0;
    $8_1 = 0;
    while (1) {
     if (HEAP32[$0_1 + 168 >> 2] <= ($8_1 | 0)) {
      break label$13
     }
     $3_1 = HEAP32[$1_1 + 160 >> 2] + $2_1 | 0;
     $7_1 = HEAP32[$0_1 + 160 >> 2] + $2_1 | 0;
     HEAP16[$3_1 >> 1] = HEAPU16[$7_1 >> 1];
     HEAP16[$3_1 + 2 >> 1] = HEAPU16[$7_1 + 2 >> 1];
     HEAP16[$3_1 + 4 >> 1] = HEAPU16[$7_1 + 4 >> 1];
     HEAP16[$3_1 + 6 >> 1] = HEAPU16[$7_1 + 6 >> 1];
     HEAP16[$3_1 + 8 >> 1] = HEAPU16[$7_1 + 8 >> 1];
     $9_1 = $7_1 + 12 | 0;
     $6_1 = HEAP32[$9_1 + 4 >> 2];
     $4_1 = $3_1 + 12 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $6_1;
     HEAP32[$3_1 + 28 >> 2] = 0;
     HEAP16[$3_1 + 10 >> 1] = HEAPU16[$7_1 + 10 >> 1];
     $3_1 = $3_1 + 20 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $2_1 = $2_1 + 32 | 0;
     $8_1 = $8_1 + 1 | 0;
     continue;
    };
   }
   $2_1 = 0;
   $3_1 = HEAP32[$0_1 + 168 >> 2];
   $7_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
   while (1) {
    if (!$7_1) {
     break label$13
    }
    $3_1 = HEAP32[$1_1 + 160 >> 2] + $2_1 | 0;
    $8_1 = HEAP32[$0_1 + 160 >> 2] + $2_1 | 0;
    $4_1 = HEAPU16[$8_1 >> 1];
    HEAP16[$3_1 >> 1] = ($4_1 << 24 | $4_1 << 8 & 16711680) >>> 16;
    $4_1 = HEAPU16[$8_1 + 2 >> 1];
    HEAP16[$3_1 + 2 >> 1] = ($4_1 << 24 | $4_1 << 8 & 16711680) >>> 16;
    $4_1 = HEAPU16[$8_1 + 4 >> 1];
    HEAP16[$3_1 + 4 >> 1] = ($4_1 << 24 | $4_1 << 8 & 16711680) >>> 16;
    $4_1 = HEAPU16[$8_1 + 6 >> 1];
    HEAP16[$3_1 + 6 >> 1] = ($4_1 << 24 | $4_1 << 8 & 16711680) >>> 16;
    $4_1 = HEAPU16[$8_1 + 8 >> 1];
    HEAP16[$3_1 + 8 >> 1] = ($4_1 << 24 | $4_1 << 8 & 16711680) >>> 16;
    $4_1 = HEAP32[$8_1 + 12 >> 2];
    HEAP32[$3_1 + 12 >> 2] = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $4_1 = HEAP32[$8_1 + 16 >> 2];
    HEAP32[$3_1 + 16 >> 2] = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $4_1 = $3_1 + 10 | 0;
    $3_1 = HEAPU16[$8_1 + 10 >> 1];
    HEAP16[$4_1 >> 1] = ($3_1 << 24 | $3_1 << 8 & 16711680) >>> 16;
    $7_1 = $7_1 - 1 | 0;
    $2_1 = $2_1 + 32 | 0;
    continue;
   };
  }
  $355($5_1, 0, 0, 0);
  HEAP32[$1_1 >> 2] = 0;
  return 1;
 }
 
 function $354($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  while (1) {
   if (($2_1 | 0) != 16) {
    $3_1 = $1_1 + $2_1 | 0;
    $4_1 = $0_1 + $2_1 | 0;
    HEAP8[$3_1 | 0] = HEAPU8[$4_1 + 3 | 0];
    HEAP8[$3_1 + 1 | 0] = HEAPU8[$4_1 + 2 | 0];
    HEAP8[$3_1 + 2 | 0] = HEAPU8[$4_1 + 1 | 0];
    HEAP8[$3_1 + 3 | 0] = HEAPU8[$4_1 | 0];
    $2_1 = $2_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $355($0_1, $1_1, $2_1, $3_1) {
  $124($0_1);
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP8[$0_1 + 16 | 0] = 0;
  HEAP32[$0_1 + 8 >> 2] = $3_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $356($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $132($0_1 + 20 | 0, $1_1 + 16 | 0);
  $132($0_1 + 4 | 0, $1_1);
  $132($0_1 + 36 | 0, $1_1 + 32 | 0);
  HEAP32[$1_1 + 48 >> 2] = HEAP32[$0_1 + 56 >> 2];
  HEAP32[$1_1 + 52 >> 2] = HEAPU8[$0_1 + 60 | 0];
  $3_1 = HEAP32[$0_1 + 88 >> 2];
  HEAP32[$1_1 + 56 >> 2] = $3_1;
  label$1 : {
   if (!$3_1) {
    HEAP32[$1_1 + 64 >> 2] = 0;
    break label$1;
   }
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0_1 + 96 >> 2]) | 0;
   HEAP32[$1_1 + 64 >> 2] = $3_1;
   if (!$3_1) {
    break label$1
   }
   $4_1 = HEAP32[$0_1 + 88 >> 2];
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 48, $4_1) | 0;
   $3_1 = HEAP32[$5_1 + 8 >> 2] + 44 | 0;
   $4_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
   while (1) {
    if ($4_1) {
     $132((HEAP32[$0_1 + 96 >> 2] + $7_1 | 0) + 16 | 0, $3_1 - 28 | 0);
     $132(HEAP32[$0_1 + 96 >> 2] + $7_1 | 0, $3_1 - 44 | 0);
     $6_1 = HEAP32[$0_1 + 96 >> 2] + $7_1 | 0;
     HEAP32[$3_1 - 12 >> 2] = HEAP32[$6_1 + 32 >> 2];
     $6_1 = $6_1 + 36 | 0;
     $8_1 = HEAP32[$6_1 + 4 >> 2];
     $6_1 = HEAP32[$6_1 >> 2];
     HEAP32[$3_1 >> 2] = 0;
     $9_1 = $3_1 - 8 | 0;
     HEAP32[$9_1 >> 2] = $6_1;
     HEAP32[$9_1 + 4 >> 2] = $8_1;
     $3_1 = $3_1 + 48 | 0;
     $4_1 = $4_1 - 1 | 0;
     $7_1 = $7_1 - -64 | 0;
     continue;
    } else {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $5_1, 12320, 1497453121, HEAP32[$0_1 + 96 >> 2])
    }
    break;
   };
  }
  $3_1 = HEAP32[$0_1 + 128 >> 2];
  HEAP32[$1_1 + 60 >> 2] = $3_1;
  label$6 : {
   if (!$3_1) {
    HEAP32[$1_1 + 68 >> 2] = 0;
    break label$6;
   }
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0_1 + 136 >> 2]) | 0;
   HEAP32[$1_1 + 68 >> 2] = $3_1;
   if (!$3_1) {
    break label$6
   }
   $3_1 = HEAP32[$0_1 + 128 >> 2];
   $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 16, $3_1) | 0;
   $8_1 = HEAP32[$6_1 + 8 >> 2];
   $7_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
   $4_1 = 12;
   while (1) {
    if ($7_1) {
     $3_1 = $4_1 + $8_1 | 0;
     $5_1 = HEAP32[$0_1 + 136 >> 2] + $4_1 | 0;
     HEAP16[$3_1 - 6 >> 1] = HEAPU16[$5_1 - 6 >> 1];
     HEAP16[$3_1 - 4 >> 1] = HEAPU16[$5_1 - 4 >> 1];
     HEAP16[$3_1 - 2 >> 1] = HEAPU16[$5_1 - 2 >> 1];
     HEAP16[$3_1 - 12 >> 1] = HEAPU16[$5_1 - 12 >> 1];
     HEAP16[$3_1 - 10 >> 1] = HEAPU16[$5_1 - 10 >> 1];
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP16[$3_1 - 8 >> 1] = HEAPU16[$5_1 - 8 >> 1];
     $7_1 = $7_1 - 1 | 0;
     $4_1 = $4_1 + 16 | 0;
     continue;
    } else {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $6_1, 12343, 1497453121, HEAP32[$0_1 + 136 >> 2])
    }
    break;
   };
  }
  HEAP32[$1_1 + 76 >> 2] = HEAP32[$0_1 + 144 >> 2];
  $3_1 = HEAP32[$0_1 + 152 >> 2];
  HEAP32[$1_1 + 80 >> 2] = $3_1;
  label$11 : {
   if (!$3_1) {
    HEAP32[$1_1 + 72 >> 2] = 0;
    break label$11;
   }
   $3_1 = $1_1;
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0_1 + 160 >> 2]) | 0;
   HEAP32[$3_1 + 72 >> 2] = $1_1;
   if (!$1_1) {
    break label$11
   }
   $1_1 = HEAP32[$0_1 + 152 >> 2];
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 20, $1_1) | 0;
   $3_1 = HEAP32[$5_1 + 8 >> 2];
   $7_1 = 0;
   $4_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   while (1) {
    if ($4_1) {
     $1_1 = HEAP32[$0_1 + 160 >> 2] + $7_1 | 0;
     HEAP16[$3_1 + 14 >> 1] = HEAPU16[$1_1 + 6 >> 1];
     HEAP16[$3_1 + 16 >> 1] = HEAPU16[$1_1 + 8 >> 1];
     HEAP16[$3_1 + 18 >> 1] = HEAPU16[$1_1 + 10 >> 1];
     HEAP16[$3_1 + 8 >> 1] = HEAPU16[$1_1 >> 1];
     HEAP16[$3_1 + 10 >> 1] = HEAPU16[$1_1 + 2 >> 1];
     $6_1 = $1_1 + 12 | 0;
     $8_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $8_1;
     HEAP16[$3_1 + 12 >> 1] = HEAPU16[$1_1 + 4 >> 1];
     $4_1 = $4_1 - 1 | 0;
     $7_1 = $7_1 + 32 | 0;
     $3_1 = $3_1 + 20 | 0;
     continue;
    } else {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $5_1, 12366, 1497453121, HEAP32[$0_1 + 160 >> 2])
    }
    break;
   };
  }
  return 12387;
 }
 
 function $357($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $358($0_1 + 20 | 0, $1_1 + 16 | 0);
  $358($0_1 + 4 | 0, $1_1);
  $358($0_1 + 36 | 0, $1_1 + 32 | 0);
  HEAP32[$0_1 + 56 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP8[$0_1 + 60 | 0] = HEAP32[$1_1 + 52 >> 2] != 0;
  $2_1 = HEAP32[$1_1 + 56 >> 2];
  $6_1 = $2($3_1, 0, 64);
  $359($0_1 + 84 | 0, $2_1, $6_1);
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = HEAP32[$1_1 + 64 >> 2];
   while (1) {
    if (!$3_1) {
     break label$1
    }
    $358((HEAP32[$0_1 + 96 >> 2] + $5_1 | 0) + 16 | 0, $2_1 + 16 | 0);
    $358(HEAP32[$0_1 + 96 >> 2] + $5_1 | 0, $2_1);
    $4_1 = HEAP32[$0_1 + 96 >> 2] + $5_1 | 0;
    HEAP32[$4_1 + 32 >> 2] = HEAP32[$2_1 + 32 >> 2];
    $7_1 = $2_1 + 36 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    $4_1 = $4_1 + 36 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $8_1;
    $3_1 = $3_1 - 1 | 0;
    $5_1 = $5_1 - -64 | 0;
    $2_1 = $2_1 + 48 | 0;
    continue;
   };
  }
  $2_1 = HEAP32[$1_1 + 60 >> 2];
  $3_1 = $6_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  $360($0_1 + 124 | 0, $2_1, $6_1);
  label$3 : {
   if (!$2_1) {
    break label$3
   }
   $3_1 = 0;
   $5_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $7_1 = HEAP32[$1_1 + 68 >> 2];
   while (1) {
    if (!$5_1) {
     break label$3
    }
    $2_1 = HEAP32[$0_1 + 136 >> 2] + $3_1 | 0;
    $4_1 = $3_1 + $7_1 | 0;
    HEAP16[$2_1 + 6 >> 1] = HEAPU16[$4_1 + 6 >> 1];
    HEAP16[$2_1 + 8 >> 1] = HEAPU16[$4_1 + 8 >> 1];
    HEAP16[$2_1 + 10 >> 1] = HEAPU16[$4_1 + 10 >> 1];
    HEAP16[$2_1 >> 1] = HEAPU16[$4_1 >> 1];
    HEAP16[$2_1 + 2 >> 1] = HEAPU16[$4_1 + 2 >> 1];
    HEAP32[$2_1 + 12 >> 2] = HEAP32[$4_1 + 12 >> 2];
    HEAP16[$2_1 + 4 >> 1] = HEAPU16[$4_1 + 4 >> 1];
    $5_1 = $5_1 - 1 | 0;
    $3_1 = $3_1 + 16 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 144 >> 2] = HEAP32[$1_1 + 76 >> 2];
  $2_1 = HEAP32[$1_1 + 80 >> 2];
  $361($0_1 + 148 | 0, $2_1, $6_1);
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   $5_1 = 0;
   $3_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = HEAP32[$1_1 + 72 >> 2];
   while (1) {
    if (!$3_1) {
     break label$5
    }
    $1_1 = HEAP32[$0_1 + 160 >> 2] + $5_1 | 0;
    HEAP16[$1_1 + 6 >> 1] = HEAPU16[$2_1 + 14 >> 1];
    HEAP16[$1_1 + 8 >> 1] = HEAPU16[$2_1 + 16 >> 1];
    HEAP16[$1_1 + 10 >> 1] = HEAPU16[$2_1 + 18 >> 1];
    HEAP16[$1_1 >> 1] = HEAPU16[$2_1 + 8 >> 1];
    HEAP16[$1_1 + 2 >> 1] = HEAPU16[$2_1 + 10 >> 1];
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = $1_1 + 12 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    HEAP16[$1_1 + 4 >> 1] = HEAPU16[$2_1 + 12 >> 1];
    $3_1 = $3_1 - 1 | 0;
    $5_1 = $5_1 + 32 | 0;
    $2_1 = $2_1 + 20 | 0;
    continue;
   };
  }
  global$0 = $6_1 - -64 | 0;
 }
 
 function $358($0_1, $1_1) {
  var $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 16) {
    HEAPF32[$0_1 + $2_1 >> 2] = HEAPF32[$1_1 + $2_1 >> 2];
    $2_1 = $2_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $359($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   if (($3_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) > ($3_1 | 0)) {
    $384($0_1, $1_1)
   }
   $4_1 = $1_1 - $3_1 | 0;
   $3_1 = $3_1 << 6;
   while (1) {
    if (!$4_1) {
     break label$1
    }
    $3(HEAP32[$0_1 + 12 >> 2] + $3_1 | 0, $2_1, 64);
    $4_1 = $4_1 - 1 | 0;
    $3_1 = $3_1 - -64 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $360($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   if (($3_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) > ($3_1 | 0)) {
    $383($0_1, $1_1)
   }
   $5_1 = $1_1 - $3_1 | 0;
   $3_1 = $3_1 << 4;
   while (1) {
    if (!$5_1) {
     break label$1
    }
    $6_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = HEAP32[$0_1 + 12 >> 2] + $3_1 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $7_1 = $2_1 + 8 | 0;
    $6_1 = HEAP32[$7_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $5_1 = $5_1 - 1 | 0;
    $3_1 = $3_1 + 16 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $361($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $5_1 = HEAP32[$0_1 + 4 >> 2];
   if (($5_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) > ($5_1 | 0)) {
    $364($0_1, $1_1)
   }
   $7_1 = $1_1 - $5_1 | 0;
   $5_1 = $5_1 << 5;
   while (1) {
    if (!$7_1) {
     break label$1
    }
    $4_1 = HEAP32[$2_1 + 4 >> 2];
    $6_1 = HEAP32[$0_1 + 12 >> 2] + $5_1 | 0;
    $3_1 = $6_1;
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $4_1 = $2_1 + 24 | 0;
    $8_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $3_1 + 24 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $8_1;
    $4_1 = $2_1 + 16 | 0;
    $8_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $6_1 + 16 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $8_1;
    $3_1 = $2_1 + 8 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $6_1 = $6_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $4_1;
    $7_1 = $7_1 - 1 | 0;
    $5_1 = $5_1 + 32 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $362($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $363($0_1 + 20 | 0, $1_1 + 32 | 0);
  $363($0_1 + 4 | 0, $1_1);
  $363($0_1 + 36 | 0, $1_1 - -64 | 0);
  HEAP32[$0_1 + 56 >> 2] = HEAP32[$1_1 + 96 >> 2];
  HEAP8[$0_1 + 60 | 0] = HEAP32[$1_1 + 100 >> 2] != 0;
  $2_1 = HEAP32[$1_1 + 104 >> 2];
  $6_1 = $2($3_1, 0, 64);
  $359($0_1 + 84 | 0, $2_1, $6_1);
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = HEAP32[$1_1 + 112 >> 2];
   while (1) {
    if (!$3_1) {
     break label$1
    }
    $363((HEAP32[$0_1 + 96 >> 2] + $5_1 | 0) + 16 | 0, $2_1 + 32 | 0);
    $363(HEAP32[$0_1 + 96 >> 2] + $5_1 | 0, $2_1);
    $4_1 = HEAP32[$0_1 + 96 >> 2] + $5_1 | 0;
    HEAP32[$4_1 + 32 >> 2] = HEAP32[$2_1 - -64 >> 2];
    $7_1 = $2_1 + 68 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    $4_1 = $4_1 + 36 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $8_1;
    $3_1 = $3_1 - 1 | 0;
    $5_1 = $5_1 - -64 | 0;
    $2_1 = $2_1 + 80 | 0;
    continue;
   };
  }
  $2_1 = HEAP32[$1_1 + 108 >> 2];
  $3_1 = $6_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  $360($0_1 + 124 | 0, $2_1, $6_1);
  label$3 : {
   if (!$2_1) {
    break label$3
   }
   $3_1 = 0;
   $5_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $7_1 = HEAP32[$1_1 + 116 >> 2];
   while (1) {
    if (!$5_1) {
     break label$3
    }
    $2_1 = HEAP32[$0_1 + 136 >> 2] + $3_1 | 0;
    $4_1 = $3_1 + $7_1 | 0;
    HEAP16[$2_1 + 6 >> 1] = HEAPU16[$4_1 + 6 >> 1];
    HEAP16[$2_1 + 8 >> 1] = HEAPU16[$4_1 + 8 >> 1];
    HEAP16[$2_1 + 10 >> 1] = HEAPU16[$4_1 + 10 >> 1];
    HEAP16[$2_1 >> 1] = HEAPU16[$4_1 >> 1];
    HEAP16[$2_1 + 2 >> 1] = HEAPU16[$4_1 + 2 >> 1];
    HEAP32[$2_1 + 12 >> 2] = HEAP32[$4_1 + 12 >> 2];
    HEAP16[$2_1 + 4 >> 1] = HEAPU16[$4_1 + 4 >> 1];
    $5_1 = $5_1 - 1 | 0;
    $3_1 = $3_1 + 16 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 144 >> 2] = HEAP32[$1_1 + 120 >> 2];
  $2_1 = HEAP32[$1_1 + 124 >> 2];
  $361($0_1 + 148 | 0, $2_1, $6_1);
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   $5_1 = 0;
   $3_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = HEAP32[$1_1 + 128 >> 2];
   while (1) {
    if (!$3_1) {
     break label$5
    }
    $1_1 = HEAP32[$0_1 + 160 >> 2] + $5_1 | 0;
    HEAP16[$1_1 + 6 >> 1] = HEAPU16[$2_1 + 14 >> 1];
    HEAP16[$1_1 + 8 >> 1] = HEAPU16[$2_1 + 16 >> 1];
    HEAP16[$1_1 + 10 >> 1] = HEAPU16[$2_1 + 18 >> 1];
    HEAP16[$1_1 >> 1] = HEAPU16[$2_1 + 8 >> 1];
    HEAP16[$1_1 + 2 >> 1] = HEAPU16[$2_1 + 10 >> 1];
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = $1_1 + 12 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    HEAP16[$1_1 + 4 >> 1] = HEAPU16[$2_1 + 12 >> 1];
    $3_1 = $3_1 - 1 | 0;
    $5_1 = $5_1 + 32 | 0;
    $2_1 = $2_1 + 20 | 0;
    continue;
   };
  }
  global$0 = $6_1 - -64 | 0;
 }
 
 function $363($0_1, $1_1) {
  var $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 16) {
    HEAPF32[$0_1 + $2_1 >> 2] = HEAPF64[$1_1 >> 3];
    $2_1 = $2_1 + 4 | 0;
    $1_1 = $1_1 + 8 | 0;
    continue;
   }
   break;
  };
 }
 
 function $364($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $9_1 = $120($1_1 << 5)
   }
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   $4_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
   while (1) {
    if ($4_1) {
     $5_1 = HEAP32[$0_1 + 12 >> 2] + $8_1 | 0;
     $2_1 = $5_1;
     $6_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = $9_1 + $8_1 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $2_1 = $2_1 + 24 | 0;
     $6_1 = HEAP32[$2_1 + 4 >> 2];
     $7_1 = $3_1 + 24 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $6_1;
     $7_1 = $5_1 + 16 | 0;
     $6_1 = HEAP32[$7_1 + 4 >> 2];
     $2_1 = $3_1 + 16 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $6_1;
     $5_1 = $5_1 + 8 | 0;
     $2_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $2_1;
     $4_1 = $4_1 - 1 | 0;
     $8_1 = $8_1 + 32 | 0;
     continue;
    }
    break;
   };
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $9_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $365($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25_1 = Math_fround(0), $26_1 = 0, $27_1 = 0, $28_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  $17_1 = HEAP32[$0_1 + 56 >> 2];
  $7_1 = $2_1 - $1_1 | 0;
  label$1 : {
   if (($7_1 | 0) == 1) {
    label$3 : {
     if (HEAPU8[$0_1 + 60 | 0]) {
      $1_1 = HEAP32[$0_1 + 116 >> 2] + ($1_1 << 4) | 0;
      $5_1 = HEAP32[$1_1 + 4 >> 2];
      $2_1 = HEAP32[$0_1 + 136 >> 2] + ($17_1 << 4) | 0;
      $3_1 = $2_1;
      HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $5_1;
      $1_1 = $1_1 + 8 | 0;
      $3_1 = HEAP32[$1_1 + 4 >> 2];
      $2_1 = $2_1 + 8 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $3_1;
      break label$3;
     }
     $3(HEAP32[$0_1 + 96 >> 2] + ($17_1 << 6) | 0, HEAP32[$0_1 + 76 >> 2] + ($1_1 << 6) | 0, 64);
    }
    HEAP32[$0_1 + 56 >> 2] = HEAP32[$0_1 + 56 >> 2] + 1;
    break label$1;
   }
   $9_1 = ($1_1 | 0) < ($2_1 | 0) ? $2_1 : $1_1;
   $3_1 = $1_1;
   while (1) {
    if (($3_1 | 0) != ($9_1 | 0)) {
     $366($4_1 + 48 | 0, $0_1, $3_1);
     $367($4_1 + 32 | 0, $0_1, $3_1);
     $3_1 = $3_1 + 1 | 0;
     $10_1 = Math_fround($10_1 + Math_fround(Math_fround(HEAPF32[$4_1 + 56 >> 2] + HEAPF32[$4_1 + 40 >> 2]) * Math_fround(.5)));
     $12_1 = Math_fround($12_1 + Math_fround(Math_fround(HEAPF32[$4_1 + 52 >> 2] + HEAPF32[$4_1 + 36 >> 2]) * Math_fround(.5)));
     $13_1 = Math_fround($13_1 + Math_fround(Math_fround(HEAPF32[$4_1 + 48 >> 2] + HEAPF32[$4_1 + 32 >> 2]) * Math_fround(.5)));
     continue;
    }
    break;
   };
   $15_1 = Math_fround($7_1 | 0);
   $18_1 = Math_fround(Math_fround(1.0) / $15_1);
   $21_1 = Math_fround($18_1 * $10_1);
   $22_1 = Math_fround($18_1 * $12_1);
   $25_1 = Math_fround($18_1 * $13_1);
   $13_1 = Math_fround(0.0);
   $12_1 = Math_fround(0.0);
   $10_1 = Math_fround(0.0);
   $3_1 = $1_1;
   while (1) {
    if (($3_1 | 0) != ($9_1 | 0)) {
     $366($4_1 + 48 | 0, $0_1, $3_1);
     $367($4_1 + 32 | 0, $0_1, $3_1);
     $3_1 = $3_1 + 1 | 0;
     $19_1 = $10_1;
     $10_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 56 >> 2] + HEAPF32[$4_1 + 40 >> 2]) * Math_fround(.5)) - $21_1);
     $10_1 = Math_fround($19_1 + Math_fround($10_1 * $10_1));
     $19_1 = $12_1;
     $12_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 52 >> 2] + HEAPF32[$4_1 + 36 >> 2]) * Math_fround(.5)) - $22_1);
     $12_1 = Math_fround($19_1 + Math_fround($12_1 * $12_1));
     $19_1 = $13_1;
     $13_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 48 >> 2] + HEAPF32[$4_1 + 32 >> 2]) * Math_fround(.5)) - $25_1);
     $13_1 = Math_fround($19_1 + Math_fround($13_1 * $13_1));
     continue;
    }
    break;
   };
   HEAP32[$4_1 + 44 >> 2] = 0;
   $15_1 = Math_fround(Math_fround(1.0) / Math_fround($15_1 + Math_fround(-1.0)));
   $21_1 = Math_fround($15_1 * $13_1);
   $22_1 = Math_fround($15_1 * $10_1);
   $5_1 = ($21_1 < $22_1) << 1;
   $15_1 = Math_fround($15_1 * $12_1);
   $13_1 = Math_fround(0.0);
   $12_1 = Math_fround(0.0);
   $10_1 = Math_fround(0.0);
   $3_1 = $1_1;
   while (1) {
    if (($3_1 | 0) != ($9_1 | 0)) {
     $366($4_1 + 48 | 0, $0_1, $3_1);
     $367($4_1 + 16 | 0, $0_1, $3_1);
     $3_1 = $3_1 + 1 | 0;
     $13_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 56 >> 2] + HEAPF32[$4_1 + 24 >> 2]) * Math_fround(.5)) + $13_1);
     $12_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 52 >> 2] + HEAPF32[$4_1 + 20 >> 2]) * Math_fround(.5)) + $12_1);
     $10_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 48 >> 2] + HEAPF32[$4_1 + 16 >> 2]) * Math_fround(.5)) + $10_1);
     continue;
    }
    break;
   };
   HEAPF32[$4_1 + 40 >> 2] = $18_1 * $13_1;
   HEAPF32[$4_1 + 36 >> 2] = $18_1 * $12_1;
   HEAPF32[$4_1 + 32 >> 2] = $18_1 * $10_1;
   $3_1 = ($15_1 > $21_1 ? ($15_1 < $22_1 ? 2 : 1) : $5_1) << 2;
   $11_1 = $3_1 + ($4_1 + 16 | 0) | 0;
   $10_1 = HEAPF32[$3_1 + ($4_1 + 32 | 0) >> 2];
   $14_1 = $1_1 << 4;
   $16_1 = $1_1 << 6;
   $5_1 = $1_1;
   $3_1 = $1_1;
   while (1) {
    if (($3_1 | 0) != ($9_1 | 0)) {
     $366($4_1 + 48 | 0, $0_1, $3_1);
     $367($4_1, $0_1, $3_1);
     HEAP32[$4_1 + 28 >> 2] = 0;
     HEAPF32[$4_1 + 24 >> 2] = Math_fround(HEAPF32[$4_1 + 56 >> 2] + HEAPF32[$4_1 + 8 >> 2]) * Math_fround(.5);
     HEAPF32[$4_1 + 20 >> 2] = Math_fround(HEAPF32[$4_1 + 52 >> 2] + HEAPF32[$4_1 + 4 >> 2]) * Math_fround(.5);
     HEAPF32[$4_1 + 16 >> 2] = Math_fround(HEAPF32[$4_1 + 48 >> 2] + HEAPF32[$4_1 >> 2]) * Math_fround(.5);
     if ($10_1 < HEAPF32[$11_1 >> 2]) {
      label$14 : {
       if (HEAPU8[$0_1 + 60 | 0]) {
        $8_1 = HEAP32[$0_1 + 116 >> 2];
        $6_1 = $8_1 + $14_1 | 0;
        $26_1 = HEAP32[$6_1 >> 2];
        $20_1 = HEAP32[$6_1 + 4 >> 2];
        $24_1 = $5_1 << 4;
        $8_1 = $8_1 + $24_1 | 0;
        $23_1 = HEAP32[$8_1 + 4 >> 2];
        HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $23_1;
        $6_1 = $6_1 + 8 | 0;
        $23_1 = HEAP32[$6_1 >> 2];
        $27_1 = HEAP32[$6_1 + 4 >> 2];
        $8_1 = $8_1 + 8 | 0;
        $28_1 = HEAP32[$8_1 + 4 >> 2];
        HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $28_1;
        $6_1 = HEAP32[$0_1 + 116 >> 2] + $24_1 | 0;
        HEAP32[$6_1 >> 2] = $26_1;
        HEAP32[$6_1 + 4 >> 2] = $20_1;
        $6_1 = $6_1 + 8 | 0;
        HEAP32[$6_1 >> 2] = $23_1;
        HEAP32[$6_1 + 4 >> 2] = $27_1;
        break label$14;
       }
       $6_1 = HEAP32[$0_1 + 76 >> 2];
       $8_1 = $6_1 + $16_1 | 0;
       $3($4_1 + 48 | 0, $8_1, 64);
       $20_1 = $6_1;
       $6_1 = $5_1 << 6;
       $3($8_1, $20_1 + $6_1 | 0, 64);
       $3($6_1 + HEAP32[$0_1 + 76 >> 2] | 0, $4_1 + 48 | 0, 64);
      }
      $5_1 = $5_1 + 1 | 0;
     }
     $14_1 = $14_1 + 16 | 0;
     $16_1 = $16_1 - -64 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue;
    }
    break;
   };
   $14_1 = ($7_1 >> 1) + $1_1 | 0;
   $3_1 = ($7_1 | 0) / 3 | 0;
   $7_1 = (($3_1 ^ -1) + $2_1 | 0) <= ($5_1 | 0);
   $16_1 = $1_1 + $3_1 | 0;
   $3_1 = $0_1 + 20 | 0;
   $6_1 = HEAP32[$0_1 + 56 >> 2];
   label$16 : {
    if (HEAPU8[$0_1 + 60 | 0]) {
     $368($0_1, HEAP32[$0_1 + 136 >> 2] + ($6_1 << 4) | 0, HEAPF32[$3_1 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 28 >> 2], 0);
     break label$16;
    }
    $20_1 = HEAP32[$3_1 + 4 >> 2];
    $11_1 = HEAP32[$0_1 + 96 >> 2] + ($6_1 << 6) | 0;
    $8_1 = $11_1;
    HEAP32[$8_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $20_1;
    $3_1 = $3_1 + 8 | 0;
    $8_1 = HEAP32[$3_1 + 4 >> 2];
    $11_1 = $11_1 + 8 | 0;
    HEAP32[$11_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $8_1;
   }
   $7_1 = $7_1 ? $14_1 : $5_1;
   $16_1 = ($5_1 | 0) <= ($16_1 | 0);
   $3_1 = $0_1 + 4 | 0;
   $5_1 = HEAP32[$0_1 + 56 >> 2];
   label$18 : {
    if (HEAPU8[$0_1 + 60 | 0]) {
     $368($0_1, (HEAP32[$0_1 + 136 >> 2] + ($5_1 << 4) | 0) + 6 | 0, HEAPF32[$3_1 >> 2], HEAPF32[$0_1 + 8 >> 2], HEAPF32[$0_1 + 12 >> 2], 1);
     break label$18;
    }
    $8_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = HEAP32[$0_1 + 96 >> 2] + ($5_1 << 6) | 0;
    HEAP32[$5_1 + 16 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 20 >> 2] = $8_1;
    $3_1 = $3_1 + 8 | 0;
    $11_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $5_1 + 24 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $11_1;
   }
   $14_1 = $16_1 ? $14_1 : $7_1;
   $5_1 = $1_1;
   while (1) {
    label$21 : {
     $7_1 = HEAP32[$0_1 + 56 >> 2];
     if (($5_1 | 0) == ($9_1 | 0)) {
      break label$21
     }
     $367($4_1 + 48 | 0, $0_1, $5_1);
     $366($4_1 + 32 | 0, $0_1, $5_1);
     label$22 : {
      if (HEAPU8[$0_1 + 60 | 0]) {
       $3_1 = 0;
       $368($0_1, $4_1 + 16 | 0, HEAPF32[$4_1 + 48 >> 2], HEAPF32[$4_1 + 52 >> 2], HEAPF32[$4_1 + 56 >> 2], 0);
       $368($0_1, $4_1, HEAPF32[$4_1 + 32 >> 2], HEAPF32[$4_1 + 36 >> 2], HEAPF32[$4_1 + 40 >> 2], 1);
       $16_1 = HEAP32[$0_1 + 136 >> 2] + ($7_1 << 4) | 0;
       while (1) {
        if (($3_1 | 0) == 6) {
         break label$22
        }
        $11_1 = HEAPU16[($4_1 + 16 | 0) + $3_1 >> 1];
        $7_1 = $3_1 + $16_1 | 0;
        if ($11_1 >>> 0 < HEAPU16[$7_1 >> 1]) {
         HEAP16[$7_1 >> 1] = $11_1
        }
        $11_1 = HEAPU16[$4_1 + $3_1 >> 1];
        $7_1 = $7_1 + 6 | 0;
        if ($11_1 >>> 0 > HEAPU16[$7_1 >> 1]) {
         HEAP16[$7_1 >> 1] = $11_1
        }
        $3_1 = $3_1 + 2 | 0;
        continue;
       };
      }
      $3_1 = $7_1 << 6;
      $319($3_1 + HEAP32[$0_1 + 96 >> 2] | 0, $4_1 + 48 | 0);
      $320(($3_1 + HEAP32[$0_1 + 96 >> 2] | 0) + 16 | 0, $4_1 + 32 | 0);
     }
     $5_1 = $5_1 + 1 | 0;
     continue;
    }
    break;
   };
   $3_1 = $7_1 + 1 | 0;
   HEAP32[$0_1 + 56 >> 2] = $3_1;
   $365($0_1, $1_1, $14_1);
   $5_1 = HEAP32[$0_1 + 56 >> 2];
   $365($0_1, $14_1, $2_1);
   $1_1 = HEAPU8[$0_1 + 60 | 0];
   $2_1 = HEAP32[$0_1 + 56 >> 2] - $17_1 | 0;
   if (!(!$1_1 | ($2_1 | 0) < 129)) {
    $9_1 = HEAP32[$0_1 + 136 >> 2];
    $17_1 = $9_1 + ($5_1 << 4) | 0;
    $1_1 = HEAP32[$17_1 + 12 >> 2];
    $1_1 = ($1_1 | 0) > -1 ? 1 : 0 - $1_1 | 0;
    $7_1 = $9_1 + ($3_1 << 4) | 0;
    $9_1 = HEAP32[$7_1 + 12 >> 2];
    $14_1 = ($9_1 | 0) > -1 ? 1 : 0 - $9_1 | 0;
    if (($14_1 | 0) <= 128) {
     $9_1 = $369($0_1 + 148 | 0, $4_1 + 48 | 0);
     $370($9_1, $7_1);
     HEAP32[$9_1 + 16 >> 2] = $14_1;
     HEAP32[$9_1 + 12 >> 2] = $3_1;
    }
    if (($1_1 | 0) <= 128) {
     $3_1 = $369($0_1 + 148 | 0, $4_1 + 48 | 0);
     $370($3_1, $17_1);
     HEAP32[$3_1 + 16 >> 2] = $1_1;
     HEAP32[$3_1 + 12 >> 2] = $5_1;
    }
    HEAP32[$0_1 + 168 >> 2] = HEAP32[$0_1 + 152 >> 2];
    $1_1 = HEAPU8[$0_1 + 60 | 0];
   }
   if ($1_1 & 255) {
    HEAP32[(HEAP32[$0_1 + 136 >> 2] + ($6_1 << 4) | 0) + 12 >> 2] = 0 - $2_1;
    break label$1;
   }
   HEAP32[(HEAP32[$0_1 + 96 >> 2] + ($6_1 << 6) | 0) + 32 >> 2] = $2_1;
  }
  global$0 = $4_1 + 128 | 0;
 }
 
 function $366($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  if (HEAPU8[$1_1 + 60 | 0]) {
   $3_1 = $0_1;
   $0_1 = HEAP32[$1_1 + 116 >> 2] + ($2_1 << 4) | 0;
   $371($3_1, $1_1, HEAPU16[$0_1 + 6 >> 1], HEAPU16[$0_1 + 8 >> 1], HEAPU16[$0_1 + 10 >> 1]);
   return;
  }
  $1_1 = HEAP32[$1_1 + 76 >> 2] + ($2_1 << 6) | 0;
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $1_1 = $1_1 + 24 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $367($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  if (HEAPU8[$1_1 + 60 | 0]) {
   $3_1 = $0_1;
   $0_1 = HEAP32[$1_1 + 116 >> 2] + ($2_1 << 4) | 0;
   $371($3_1, $1_1, HEAPU16[$0_1 >> 1], HEAPU16[$0_1 + 2 >> 1], HEAPU16[$0_1 + 4 >> 1]);
   return;
  }
  $1_1 = HEAP32[$1_1 + 76 >> 2] + ($2_1 << 6) | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $368($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0;
  $4_1 = Math_fround(Math_fround($4_1 - HEAPF32[$0_1 + 12 >> 2]) * HEAPF32[$0_1 + 44 >> 2]);
  $3_1 = Math_fround(Math_fround($3_1 - HEAPF32[$0_1 + 8 >> 2]) * HEAPF32[$0_1 + 40 >> 2]);
  $2_1 = Math_fround(Math_fround($2_1 - HEAPF32[$0_1 + 4 >> 2]) * HEAPF32[$0_1 + 36 >> 2]);
  $0_1 = $1_1;
  label$1 : {
   if ($5_1) {
    $5_1 = $1_1;
    $2_1 = Math_fround($2_1 + Math_fround(1.0));
    label$3 : {
     if ($2_1 < Math_fround(4294967296.0) & $2_1 >= Math_fround(0.0)) {
      $6_1 = ~~$2_1 >>> 0;
      break label$3;
     }
     $6_1 = 0;
    }
    HEAP16[$5_1 >> 1] = $6_1 | 1;
    $2_1 = Math_fround($4_1 + Math_fround(1.0));
    label$5 : {
     if ($2_1 < Math_fround(4294967296.0) & $2_1 >= Math_fround(0.0)) {
      $5_1 = ~~$2_1 >>> 0;
      break label$5;
     }
     $5_1 = 0;
    }
    $6_1 = $5_1 | 1;
    $2_1 = Math_fround($3_1 + Math_fround(1.0));
    label$7 : {
     if ($2_1 < Math_fround(4294967296.0) & $2_1 >= Math_fround(0.0)) {
      $5_1 = ~~$2_1 >>> 0;
      break label$7;
     }
     $5_1 = 0;
    }
    $5_1 = $5_1 | 1;
    break label$1;
   }
   $5_1 = $1_1;
   if ($2_1 < Math_fround(4294967296.0) & $2_1 >= Math_fround(0.0)) {
    $6_1 = ~~$2_1 >>> 0
   } else {
    $6_1 = 0
   }
   HEAP16[$5_1 >> 1] = $6_1 & 65534;
   if ($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0)) {
    $5_1 = ~~$4_1 >>> 0
   } else {
    $5_1 = 0
   }
   $6_1 = $5_1 & 65534;
   if ($3_1 < Math_fround(4294967296.0) & $3_1 >= Math_fround(0.0)) {
    $5_1 = ~~$3_1 >>> 0
   } else {
    $5_1 = 0
   }
   $5_1 = $5_1 & 65534;
  }
  HEAP16[$0_1 + 4 >> 1] = $6_1;
  HEAP16[$1_1 + 2 >> 1] = $5_1;
 }
 
 function $369($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $3_1 = $2_1;
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $364($0_1, $2_1 ? $2_1 << 1 : 1);
   $3_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $3_1 + 1;
  $6_1 = $2_1 << 5;
  $5_1 = $6_1 + HEAP32[$0_1 + 12 >> 2] | 0;
  $4_1 = $5_1 + 24 | 0;
  $2_1 = $1_1 + 24 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $2_1 = $1_1 + 16 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $5_1 + 16 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $2_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $5_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $3_1;
  return $6_1 + HEAP32[$0_1 + 12 >> 2] | 0;
 }
 
 function $370($0_1, $1_1) {
  HEAP16[$0_1 >> 1] = HEAPU16[$1_1 >> 1];
  HEAP16[$0_1 + 2 >> 1] = HEAPU16[$1_1 + 2 >> 1];
  HEAP16[$0_1 + 4 >> 1] = HEAPU16[$1_1 + 4 >> 1];
  HEAP16[$0_1 + 6 >> 1] = HEAPU16[$1_1 + 6 >> 1];
  HEAP16[$0_1 + 8 >> 1] = HEAPU16[$1_1 + 8 >> 1];
  HEAP16[$0_1 + 10 >> 1] = HEAPU16[$1_1 + 10 >> 1];
 }
 
 function $371($0_1, $1_1, $2_1, $3_1, $4_1) {
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(($4_1 & 65535) >>> 0) / HEAPF32[$1_1 + 44 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(($3_1 & 65535) >>> 0) / HEAPF32[$1_1 + 40 >> 2];
  HEAPF32[$0_1 >> 2] = Math_fround(($2_1 & 65535) >>> 0) / HEAPF32[$1_1 + 36 >> 2];
  $158($0_1, $1_1 + 4 | 0);
 }
 
 function $372($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $6_1 = $2_1 + 8 | 0;
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  $7_1 = $4_1 + 8 | 0;
  $5_1 = $7_1;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $8_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $320($4_1, $0_1 + 4 | 0);
  $319($4_1, $0_1 + 20 | 0);
  $368($0_1, $1_1, HEAPF32[$4_1 >> 2], HEAPF32[$4_1 + 4 >> 2], HEAPF32[$7_1 >> 2], $3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $373($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $0_1 = ($4_1 << 4) + $0_1 | 0;
  while (1) {
   if (($4_1 | 0) < ($5_1 | 0)) {
    $6_1 = HEAP32[$0_1 + 12 >> 2];
    $8_1 = $374(HEAPU16[$2_1 >> 1], HEAPU16[$2_1 + 2 >> 1], HEAPU16[$2_1 + 4 >> 1], HEAPU16[$3_1 >> 1], HEAPU16[$3_1 + 2 >> 1], HEAPU16[$3_1 + 4 >> 1], HEAPU16[$0_1 >> 1], HEAPU16[$0_1 + 2 >> 1], HEAPU16[$0_1 + 4 >> 1], HEAPU16[$0_1 + 6 >> 1], HEAPU16[$0_1 + 8 >> 1], HEAPU16[$0_1 + 10 >> 1]);
    if (!(!$8_1 | ($6_1 | 0) < 0)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $6_1 >>> 21 | 0, $6_1 & 2097151)
    }
    $7_1 = $7_1 + 1 | 0;
    if (($6_1 | 0) < 0 ? !$8_1 : 0) {
     $6_1 = HEAP32[$0_1 + 12 >> 2];
     $4_1 = $4_1 - $6_1 | 0;
     $0_1 = $0_1 - ($6_1 << 4) | 0;
    } else {
     $4_1 = $4_1 + 1 | 0;
     $0_1 = $0_1 + 16 | 0;
    }
    continue;
   }
   break;
  };
  if (HEAP32[5672] < ($7_1 | 0)) {
   HEAP32[5672] = $7_1
  }
 }
 
 function $374($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  return ($0_1 & 65535) >>> 0 <= ($9_1 & 65535) >>> 0 & ($3_1 & 65535) >>> 0 >= ($6_1 & 65535) >>> 0 & ($2_1 & 65535) >>> 0 <= ($11_1 & 65535) >>> 0 & ($5_1 & 65535) >>> 0 >= ($8_1 & 65535) >>> 0 & ($1_1 & 65535) >>> 0 <= ($10_1 & 65535) >>> 0 & ($4_1 & 65535) >>> 0 >= ($7_1 & 65535) >>> 0;
 }
 
 function $375($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  while (1) {
   label$2 : {
    if ($374(HEAPU16[$2_1 >> 1], HEAPU16[$2_1 + 2 >> 1], HEAPU16[$2_1 + 4 >> 1], HEAPU16[$3_1 >> 1], HEAPU16[$3_1 + 2 >> 1], HEAPU16[$3_1 + 4 >> 1], HEAPU16[$0_1 >> 1], HEAPU16[$0_1 + 2 >> 1], HEAPU16[$0_1 + 4 >> 1], HEAPU16[$0_1 + 6 >> 1], HEAPU16[$0_1 + 8 >> 1], HEAPU16[$0_1 + 10 >> 1])) {
     $4_1 = HEAP32[$0_1 + 12 >> 2];
     if (($4_1 | 0) < 0) {
      break label$2
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $4_1 >>> 21 | 0, $4_1 & 2097151);
    }
    return;
   }
   $4_1 = $0_1 + 16 | 0;
   $375($4_1, $1_1, $2_1, $3_1);
   $5_1 = $0_1 + 32 | 0;
   $0_1 = HEAP32[$0_1 + 28 >> 2];
   $0_1 = ($0_1 | 0) > -1 ? $5_1 : $4_1 - ($0_1 << 4) | 0;
   continue;
  };
 }
 
 function $376($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0;
  $8_1 = 0;
  label$1 : {
   if (HEAPF32[$7_1 >> 2] < $0_1) {
    break label$1
   }
   $8_1 = 0;
   if (HEAPF32[$6_1 >> 2] > $3_1) {
    break label$1
   }
   $8_1 = 1;
  }
  return HEAPF32[$7_1 + 4 >> 2] < $1_1 | HEAPF32[$6_1 + 4 >> 2] > $4_1 ? 0 : HEAPF32[$7_1 + 8 >> 2] < $2_1 | HEAPF32[$6_1 + 8 >> 2] > $5_1 ? 0 : $8_1;
 }
 
 function $377($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $12_1 = HEAP32[$2_1 >> 2];
  $8_1 = Math_fround(Math_fround(HEAPF32[($12_1 << 4) + $3_1 >> 2] - HEAPF32[$0_1 >> 2]) * HEAPF32[$1_1 >> 2]);
  HEAPF32[$4_1 >> 2] = $8_1;
  $13_1 = HEAP32[$2_1 + 4 >> 2];
  $10_1 = HEAPF32[$0_1 + 4 >> 2];
  $6_1 = HEAPF32[$1_1 + 4 >> 2];
  $7_1 = Math_fround(Math_fround(HEAPF32[(($13_1 << 4) + $3_1 | 0) + 4 >> 2] - $10_1) * $6_1);
  $11_1 = Math_fround(Math_fround(HEAPF32[(1 - $12_1 << 4) + $3_1 >> 2] - HEAPF32[$0_1 >> 2]) * HEAPF32[$1_1 >> 2]);
  label$1 : {
   if ($7_1 > $11_1) {
    break label$1
   }
   $9_1 = Math_fround($6_1 * Math_fround(HEAPF32[((1 - $13_1 << 4) + $3_1 | 0) + 4 >> 2] - $10_1));
   if ($9_1 < $8_1) {
    break label$1
   }
   if ($8_1 < $7_1) {
    HEAPF32[$4_1 >> 2] = $7_1;
    $8_1 = $7_1;
   }
   $2_1 = HEAP32[$2_1 + 8 >> 2];
   $10_1 = HEAPF32[$0_1 + 8 >> 2];
   $6_1 = HEAPF32[$1_1 + 8 >> 2];
   $7_1 = Math_fround(Math_fround(HEAPF32[(($2_1 << 4) + $3_1 | 0) + 8 >> 2] - $10_1) * $6_1);
   $9_1 = $9_1 < $11_1 ? $9_1 : $11_1;
   if ($7_1 > $9_1) {
    break label$1
   }
   $6_1 = Math_fround($6_1 * Math_fround(HEAPF32[((1 - $2_1 << 4) + $3_1 | 0) + 8 >> 2] - $10_1));
   if ($6_1 < $8_1) {
    break label$1
   }
   if ($8_1 < $7_1) {
    HEAPF32[$4_1 >> 2] = $7_1;
    $8_1 = $7_1;
   }
   $14_1 = $5_1 > $8_1 & ($6_1 < $9_1 ? $6_1 : $9_1) > Math_fround(0.0);
  }
  return $14_1;
 }
 
 function $378($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = 0, $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = Math_fround(0), $34_1 = 0, $35_1 = 0, $36_1 = 0;
  $6_1 = global$0 - 128 | 0;
  global$0 = $6_1;
  label$1 : {
   if (HEAPU8[$0_1 + 60 | 0]) {
    $8_1 = HEAP32[$0_1 + 136 >> 2];
    $16_1 = HEAP32[$0_1 + 56 >> 2];
    HEAP32[$6_1 + 124 >> 2] = 0;
    $9_1 = $2_1 + 8 | 0;
    HEAPF32[$6_1 + 120 >> 2] = HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$9_1 >> 2];
    HEAPF32[$6_1 + 116 >> 2] = HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$2_1 + 4 >> 2];
    HEAPF32[$6_1 + 112 >> 2] = HEAPF32[$3_1 >> 2] - HEAPF32[$2_1 >> 2];
    $26_1 = $153($6_1 + 112 | 0);
    $11_1 = HEAPF32[$6_1 + 112 >> 2];
    $21_1 = $11_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $11_1);
    HEAPF32[$6_1 + 112 >> 2] = $21_1;
    $13_1 = HEAPF32[$6_1 + 116 >> 2];
    $18_1 = $13_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $13_1);
    HEAPF32[$6_1 + 116 >> 2] = $18_1;
    $14_1 = HEAPF32[$6_1 + 120 >> 2];
    $19_1 = $14_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $14_1);
    HEAPF32[$6_1 + 120 >> 2] = $19_1;
    $22_1 = HEAPF32[$9_1 >> 2];
    $27_1 = HEAPF32[$3_1 + 8 >> 2];
    $28_1 = HEAPF32[$2_1 >> 2];
    $29_1 = HEAPF32[$3_1 >> 2];
    $23_1 = HEAPF32[$2_1 + 4 >> 2];
    $24_1 = HEAPF32[$3_1 + 4 >> 2];
    HEAP32[$6_1 + 60 >> 2] = $19_1 < Math_fround(0.0);
    HEAP32[$6_1 + 56 >> 2] = $18_1 < Math_fround(0.0);
    HEAP32[$6_1 + 52 >> 2] = $21_1 < Math_fround(0.0);
    $12_1 = HEAP32[$9_1 + 4 >> 2];
    $7_1 = $6_1 + 104 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $12_1;
    $10_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$6_1 + 96 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$6_1 + 100 >> 2] = $10_1;
    $15_1 = HEAP32[$9_1 + 4 >> 2];
    $10_1 = $6_1 + 88 | 0;
    HEAP32[$10_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $15_1;
    $9_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$6_1 + 80 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$6_1 + 84 >> 2] = $9_1;
    $319($6_1 + 96 | 0, $3_1);
    $320($6_1 + 80 | 0, $3_1);
    HEAPF32[$7_1 >> 2] = HEAPF32[$4_1 + 8 >> 2] + HEAPF32[$7_1 >> 2];
    HEAPF32[$10_1 >> 2] = HEAPF32[$5_1 + 8 >> 2] + HEAPF32[$10_1 >> 2];
    HEAPF32[$6_1 + 96 >> 2] = HEAPF32[$4_1 >> 2] + HEAPF32[$6_1 + 96 >> 2];
    HEAPF32[$6_1 + 100 >> 2] = HEAPF32[$4_1 + 4 >> 2] + HEAPF32[$6_1 + 100 >> 2];
    HEAPF32[$6_1 + 80 >> 2] = HEAPF32[$5_1 >> 2] + HEAPF32[$6_1 + 80 >> 2];
    HEAPF32[$6_1 + 84 >> 2] = HEAPF32[$5_1 + 4 >> 2] + HEAPF32[$6_1 + 84 >> 2];
    $372($0_1, $6_1 + 44 | 0, $6_1 + 96 | 0, 0);
    $372($0_1, $6_1 + 38 | 0, $6_1 + 80 | 0, 1);
    $11_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround($29_1 - $28_1)) + Math_fround($13_1 * Math_fround($24_1 - $23_1))) + Math_fround($14_1 * Math_fround($27_1 - $22_1)));
    $10_1 = $6_1 + 16 | 0;
    $15_1 = HEAPU16[$6_1 + 42 >> 1];
    $25_1 = HEAPU16[$6_1 + 40 >> 1];
    $30_1 = HEAPU16[$6_1 + 38 >> 1];
    $34_1 = HEAPU16[$6_1 + 48 >> 1];
    $35_1 = HEAPU16[$6_1 + 46 >> 1];
    $36_1 = HEAPU16[$6_1 + 44 >> 1];
    $9_1 = 0;
    $3_1 = 0;
    while (1) {
     label$4 : {
      label$5 : {
       if (($3_1 | 0) < ($16_1 | 0)) {
        HEAP32[$6_1 + 32 >> 2] = 1065353216;
        $9_1 = $9_1 + 1 | 0;
        $12_1 = HEAP32[$8_1 + 12 >> 2];
        $7_1 = HEAPU16[$8_1 >> 1];
        $17_1 = HEAPU16[$8_1 + 2 >> 1];
        $20_1 = HEAPU16[$8_1 + 4 >> 1];
        $31_1 = $8_1 + 8 | 0;
        $32_1 = $8_1 + 10 | 0;
        if (!$374($36_1, $35_1, $34_1, $30_1, $25_1, $15_1, $7_1, $17_1, $20_1, HEAPU16[$8_1 + 6 >> 1], HEAPU16[$31_1 >> 1], HEAPU16[$32_1 >> 1])) {
         $7_1 = 0;
         break label$5;
        }
        $371($6_1 - -64 | 0, $0_1, $7_1, $17_1, $20_1);
        $7_1 = $6_1 + 72 | 0;
        $20_1 = HEAP32[$7_1 + 4 >> 2];
        HEAP32[$6_1 + 8 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$6_1 + 12 >> 2] = $20_1;
        $17_1 = HEAP32[$6_1 + 68 >> 2];
        HEAP32[$6_1 >> 2] = HEAP32[$6_1 + 64 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $17_1;
        $371($6_1 - -64 | 0, $0_1, HEAPU16[$8_1 + 6 >> 1], HEAPU16[$31_1 >> 1], HEAPU16[$32_1 >> 1]);
        $20_1 = HEAP32[$7_1 + 4 >> 2];
        $17_1 = $10_1 + 8 | 0;
        HEAP32[$17_1 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$17_1 + 4 >> 2] = $20_1;
        $7_1 = HEAP32[$6_1 + 68 >> 2];
        HEAP32[$10_1 >> 2] = HEAP32[$6_1 + 64 >> 2];
        HEAP32[$10_1 + 4 >> 2] = $7_1;
        HEAPF32[$6_1 >> 2] = HEAPF32[$6_1 >> 2] - HEAPF32[$5_1 >> 2];
        HEAPF32[$6_1 + 4 >> 2] = HEAPF32[$6_1 + 4 >> 2] - HEAPF32[$5_1 + 4 >> 2];
        HEAPF32[$6_1 + 8 >> 2] = HEAPF32[$6_1 + 8 >> 2] - HEAPF32[$5_1 + 8 >> 2];
        HEAPF32[$6_1 + 16 >> 2] = HEAPF32[$6_1 + 16 >> 2] - HEAPF32[$4_1 >> 2];
        HEAPF32[$6_1 + 20 >> 2] = HEAPF32[$6_1 + 20 >> 2] - HEAPF32[$4_1 + 4 >> 2];
        HEAPF32[$6_1 + 24 >> 2] = HEAPF32[$6_1 + 24 >> 2] - HEAPF32[$4_1 + 8 >> 2];
        $7_1 = $377($2_1, $26_1, $6_1 + 52 | 0, $6_1, $6_1 + 32 | 0, $11_1);
        if (!$7_1 | ($12_1 | 0) < 0) {
         break label$5
        }
        $7_1 = HEAP32[$8_1 + 12 >> 2];
        FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $7_1 >> 21, $7_1 & 2097151);
        break label$4;
       }
       if (HEAP32[5672] >= ($9_1 | 0)) {
        break label$1
       }
       HEAP32[5672] = $9_1;
       break label$1;
      }
      if (($12_1 | 0) > -1 | $7_1) {
       break label$4
      }
      $7_1 = HEAP32[$8_1 + 12 >> 2];
      $3_1 = $3_1 - $7_1 | 0;
      $8_1 = $8_1 - ($7_1 << 4) | 0;
      continue;
     }
     $3_1 = $3_1 + 1 | 0;
     $8_1 = $8_1 + 16 | 0;
     continue;
    };
   }
   $8_1 = HEAP32[$0_1 + 96 >> 2];
   $7_1 = $2_1 + 8 | 0;
   $16_1 = HEAP32[$7_1 + 4 >> 2];
   $10_1 = $6_1 + 120 | 0;
   $9_1 = $10_1;
   HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $16_1;
   $9_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$6_1 + 112 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$6_1 + 116 >> 2] = $9_1;
   $16_1 = HEAP32[$7_1 + 4 >> 2];
   $9_1 = $6_1 + 104 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $16_1;
   $12_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$6_1 + 96 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$6_1 + 100 >> 2] = $12_1;
   $319($6_1 + 112 | 0, $3_1);
   $320($6_1 + 96 | 0, $3_1);
   HEAPF32[$10_1 >> 2] = HEAPF32[$4_1 + 8 >> 2] + HEAPF32[$10_1 >> 2];
   $21_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] + HEAPF32[$9_1 >> 2]);
   HEAPF32[$9_1 >> 2] = $21_1;
   HEAPF32[$6_1 + 112 >> 2] = HEAPF32[$4_1 >> 2] + HEAPF32[$6_1 + 112 >> 2];
   HEAPF32[$6_1 + 116 >> 2] = HEAPF32[$4_1 + 4 >> 2] + HEAPF32[$6_1 + 116 >> 2];
   HEAPF32[$6_1 + 96 >> 2] = HEAPF32[$5_1 >> 2] + HEAPF32[$6_1 + 96 >> 2];
   HEAPF32[$6_1 + 100 >> 2] = HEAPF32[$5_1 + 4 >> 2] + HEAPF32[$6_1 + 100 >> 2];
   $9_1 = 0;
   HEAP32[$6_1 + 92 >> 2] = 0;
   HEAPF32[$6_1 + 88 >> 2] = HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$7_1 >> 2];
   HEAPF32[$6_1 + 84 >> 2] = HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$2_1 + 4 >> 2];
   HEAPF32[$6_1 + 80 >> 2] = HEAPF32[$3_1 >> 2] - HEAPF32[$2_1 >> 2];
   $153($6_1 + 80 | 0);
   $18_1 = HEAPF32[$7_1 >> 2];
   $19_1 = HEAPF32[$3_1 + 8 >> 2];
   $22_1 = HEAPF32[$2_1 >> 2];
   $27_1 = HEAPF32[$3_1 >> 2];
   $28_1 = HEAPF32[$2_1 + 4 >> 2];
   $29_1 = HEAPF32[$3_1 + 4 >> 2];
   $11_1 = HEAPF32[$6_1 + 88 >> 2];
   $13_1 = HEAPF32[$6_1 + 84 >> 2];
   $14_1 = HEAPF32[$6_1 + 80 >> 2];
   $23_1 = $14_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $14_1);
   HEAPF32[$6_1 + 64 >> 2] = $23_1;
   $24_1 = $13_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $13_1);
   HEAPF32[$6_1 + 68 >> 2] = $24_1;
   $33_1 = $11_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $11_1);
   HEAPF32[$6_1 + 72 >> 2] = $33_1;
   HEAP32[$6_1 + 60 >> 2] = $33_1 < Math_fround(0.0);
   HEAP32[$6_1 + 56 >> 2] = $24_1 < Math_fround(0.0);
   HEAP32[$6_1 + 52 >> 2] = $23_1 < Math_fround(0.0);
   $11_1 = Math_fround(Math_fround(Math_fround($14_1 * Math_fround($27_1 - $22_1)) + Math_fround($13_1 * Math_fround($29_1 - $28_1))) + Math_fround($11_1 * Math_fround($19_1 - $18_1)));
   $12_1 = $6_1 + 16 | 0;
   $13_1 = HEAPF32[$10_1 >> 2];
   $14_1 = HEAPF32[$6_1 + 100 >> 2];
   $18_1 = HEAPF32[$6_1 + 96 >> 2];
   $19_1 = HEAPF32[$6_1 + 116 >> 2];
   $22_1 = HEAPF32[$6_1 + 112 >> 2];
   $7_1 = 0;
   while (1) {
    if (HEAP32[$0_1 + 56 >> 2] > ($9_1 | 0)) {
     $3_1 = $8_1 + 8 | 0;
     $10_1 = HEAP32[$3_1 >> 2];
     $3_1 = HEAP32[$3_1 + 4 >> 2];
     $16_1 = HEAP32[$8_1 >> 2];
     $26_1 = HEAP32[$8_1 + 4 >> 2];
     $25_1 = $8_1 + 24 | 0;
     $30_1 = HEAP32[$25_1 + 4 >> 2];
     $15_1 = $12_1 + 8 | 0;
     HEAP32[$15_1 >> 2] = HEAP32[$25_1 >> 2];
     HEAP32[$15_1 + 4 >> 2] = $30_1;
     $15_1 = HEAP32[$8_1 + 20 >> 2];
     HEAP32[$12_1 >> 2] = HEAP32[$8_1 + 16 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $15_1;
     HEAP32[$6_1 >> 2] = $16_1;
     HEAP32[$6_1 + 4 >> 2] = $26_1;
     HEAP32[$6_1 + 44 >> 2] = 1065353216;
     HEAP32[$6_1 + 8 >> 2] = $10_1;
     HEAP32[$6_1 + 12 >> 2] = $3_1;
     HEAPF32[$6_1 + 4 >> 2] = HEAPF32[$6_1 + 4 >> 2] - HEAPF32[$5_1 + 4 >> 2];
     HEAPF32[$6_1 >> 2] = HEAPF32[$6_1 >> 2] - HEAPF32[$5_1 >> 2];
     HEAPF32[$6_1 + 8 >> 2] = HEAPF32[$6_1 + 8 >> 2] - HEAPF32[$5_1 + 8 >> 2];
     HEAPF32[$6_1 + 16 >> 2] = HEAPF32[$6_1 + 16 >> 2] - HEAPF32[$4_1 >> 2];
     HEAPF32[$6_1 + 20 >> 2] = HEAPF32[$6_1 + 20 >> 2] - HEAPF32[$4_1 + 4 >> 2];
     HEAPF32[$6_1 + 24 >> 2] = HEAPF32[$6_1 + 24 >> 2] - HEAPF32[$4_1 + 8 >> 2];
     $3_1 = 0;
     if ($376($22_1, $19_1, $13_1, $18_1, $14_1, $21_1, $8_1, $8_1 + 16 | 0)) {
      $3_1 = $377($2_1, $6_1 - -64 | 0, $6_1 + 52 | 0, $6_1, $6_1 + 44 | 0, $11_1)
     }
     $10_1 = HEAP32[$8_1 + 32 >> 2];
     if (!(!$3_1 | ($10_1 | 0) != -1)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, HEAP32[$8_1 + 36 >> 2], HEAP32[$8_1 + 40 >> 2])
     }
     $7_1 = $7_1 + 1 | 0;
     if (($3_1 ^ -1) & ($10_1 | 0) != -1) {
      $3_1 = HEAP32[$8_1 + 32 >> 2];
      $9_1 = $3_1 + $9_1 | 0;
      $8_1 = ($3_1 << 6) + $8_1 | 0;
     } else {
      $9_1 = $9_1 + 1 | 0;
      $8_1 = $8_1 - -64 | 0;
     }
     continue;
    }
    break;
   };
   if (HEAP32[5672] >= ($7_1 | 0)) {
    break label$1
   }
   HEAP32[5672] = $7_1;
  }
  global$0 = $6_1 + 128 | 0;
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  $351($0_1);
  return $0_1 | 0;
 }
 
 function $380($0_1) {
  $0_1 = $0_1 | 0;
  $351($0_1);
  $121($0_1);
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  return 84;
 }
 
 function $382($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $353($0_1, $1_1, $2_1, $3_1);
  return 1;
 }
 
 function $383($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $7_1 = $120($1_1 << 4)
   }
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
   while (1) {
    if ($3_1) {
     $4_1 = HEAP32[$0_1 + 12 >> 2] + $5_1 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $2_1 = $7_1 + $5_1 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $6_1;
     $4_1 = $4_1 + 8 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $2_1 = $2_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $6_1;
     $3_1 = $3_1 - 1 | 0;
     $5_1 = $5_1 + 16 | 0;
     continue;
    }
    break;
   };
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $7_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $384($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $4_1 = $120($1_1 << 6)
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     $3($4_1 + $3_1 | 0, HEAP32[$0_1 + 12 >> 2] + $3_1 | 0, 64);
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 - -64 | 0;
     continue;
    }
    break;
   };
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $385($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  $5_1 = $4_1 + 32 | 0;
  HEAP32[$5_1 >> 2] = 1566444395;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $7_1 = $4_1 + 16 | 0;
  $6_1 = $7_1;
  HEAP32[$6_1 >> 2] = -581039253;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 24 >> 2] = 1566444395;
  HEAP32[$4_1 + 28 >> 2] = 1566444395;
  HEAP32[$4_1 + 8 >> 2] = -581039253;
  HEAP32[$4_1 + 12 >> 2] = -581039253;
  $319($4_1 + 24 | 0, $1_1);
  $320($4_1 + 8 | 0, $1_1);
  $6_1 = $1_1 + 16 | 0;
  $319($4_1 + 24 | 0, $6_1);
  $320($4_1 + 8 | 0, $6_1);
  $1_1 = $1_1 + 32 | 0;
  $319($4_1 + 24 | 0, $1_1);
  $320($4_1 + 8 | 0, $1_1);
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = $4_1 + 72 | 0;
  $1_1 = $6_1;
  HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $8_1;
  $5_1 = HEAP32[$7_1 + 4 >> 2];
  $8_1 = $4_1 + 88 | 0;
  $1_1 = $8_1;
  HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $5_1;
  $1_1 = HEAP32[$4_1 + 28 >> 2];
  HEAP32[$4_1 + 64 >> 2] = HEAP32[$4_1 + 24 >> 2];
  HEAP32[$4_1 + 68 >> 2] = $1_1;
  $1_1 = HEAP32[$4_1 + 12 >> 2];
  HEAP32[$4_1 + 80 >> 2] = HEAP32[$4_1 + 8 >> 2];
  HEAP32[$4_1 + 84 >> 2] = $1_1;
  $5_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = HEAP32[$5_1 + 4 >> 2];
  if (($1_1 | 0) == HEAP32[$5_1 + 8 >> 2]) {
   $384($5_1, $1_1 ? $1_1 << 1 : 1);
   $1_1 = HEAP32[$5_1 + 4 >> 2];
  }
  $7_1 = HEAP32[$4_1 + 68 >> 2];
  $0_1 = HEAP32[$5_1 + 12 >> 2] + ($1_1 << 6) | 0;
  $1_1 = $0_1;
  HEAP32[$1_1 >> 2] = HEAP32[$4_1 + 64 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $7_1;
  HEAP32[$1_1 + 40 >> 2] = $3_1;
  HEAP32[$1_1 + 36 >> 2] = $2_1;
  HEAP32[$1_1 + 32 >> 2] = -1;
  $1_1 = HEAP32[$4_1 + 48 >> 2];
  HEAP32[$0_1 + 44 >> 2] = HEAP32[$4_1 + 44 >> 2];
  HEAP32[$0_1 + 48 >> 2] = $1_1;
  $2_1 = HEAP32[$8_1 + 4 >> 2];
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $2_1 = $4_1 + 80 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 16 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $2_1 = HEAP32[$6_1 + 4 >> 2];
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $2_1 = $4_1 + 52 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 52 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 + 60 >> 2] = HEAP32[$4_1 + 60 >> 2];
  HEAP32[$5_1 + 4 >> 2] = HEAP32[$5_1 + 4 >> 2] + 1;
  global$0 = $4_1 + 96 | 0;
 }
 
 function $386($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 24 >> 2] = 1566444395;
  HEAP32[$4_1 + 28 >> 2] = 0;
  HEAP32[$4_1 + 16 >> 2] = 1566444395;
  HEAP32[$4_1 + 20 >> 2] = 1566444395;
  HEAP32[$4_1 + 8 >> 2] = -581039253;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAP32[$4_1 >> 2] = -581039253;
  HEAP32[$4_1 + 4 >> 2] = -581039253;
  $319($4_1 + 16 | 0, $1_1);
  $320($4_1, $1_1);
  $5_1 = $1_1 + 16 | 0;
  $319($4_1 + 16 | 0, $5_1);
  $320($4_1, $5_1);
  $1_1 = $1_1 + 32 | 0;
  $319($4_1 + 16 | 0, $1_1);
  $320($4_1, $1_1);
  $6_1 = HEAPF32[$4_1 >> 2];
  $7_1 = HEAPF32[$4_1 + 16 >> 2];
  if (Math_fround($6_1 - $7_1) < Math_fround(2.0000000949949026e-03)) {
   $6_1 = Math_fround($6_1 + Math_fround(1.0000000474974513e-03));
   HEAPF32[$4_1 >> 2] = $6_1;
   $7_1 = Math_fround($7_1 + Math_fround(-1.0000000474974513e-03));
  }
  $8_1 = HEAPF32[$4_1 + 4 >> 2];
  $9_1 = HEAPF32[$4_1 + 20 >> 2];
  $1_1 = Math_fround($8_1 - $9_1) < Math_fround(2.0000000949949026e-03);
  $10_1 = HEAPF32[$4_1 + 8 >> 2];
  $11_1 = HEAPF32[$4_1 + 24 >> 2];
  $5_1 = Math_fround($10_1 - $11_1) < Math_fround(2.0000000949949026e-03);
  $368(HEAP32[$0_1 + 8 >> 2], $4_1 + 32 | 0, $7_1, $1_1 ? Math_fround($9_1 + Math_fround(-1.0000000474974513e-03)) : $9_1, $5_1 ? Math_fround($11_1 + Math_fround(-1.0000000474974513e-03)) : $11_1, 0);
  $368(HEAP32[$0_1 + 8 >> 2], $4_1 + 32 | 6, $6_1, $1_1 ? Math_fround($8_1 + Math_fround(1.0000000474974513e-03)) : $8_1, $5_1 ? Math_fround($10_1 + Math_fround(1.0000000474974513e-03)) : $10_1, 1);
  HEAP32[$4_1 + 44 >> 2] = $2_1 << 21 | $3_1;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  if (($0_1 | 0) == HEAP32[$1_1 + 8 >> 2]) {
   $383($1_1, $0_1 ? $0_1 << 1 : 1);
   $0_1 = HEAP32[$1_1 + 4 >> 2];
  }
  $2_1 = HEAP32[$4_1 + 36 >> 2];
  $0_1 = HEAP32[$1_1 + 12 >> 2] + ($0_1 << 4) | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$4_1 + 32 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $2_1 = $4_1 + 40 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + 1;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $387($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $1_1 = global$0 - 112 | 0;
  global$0 = $1_1;
  if (HEAPU8[$0_1 + 65 | 0]) {
   $2_1 = HEAP32[$0_1 + 56 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] >> 2]]($2_1) | 0;
   $121(HEAP32[$0_1 + 56 >> 2]);
  }
  $2_1 = $120(172);
  $3_1 = $350($2_1);
  HEAP32[$0_1 + 56 >> 2] = $2_1;
  HEAP32[$2_1 >> 2] = 12436;
  $7_1 = HEAPU8[$0_1 + 64 | 0];
  HEAP8[$2_1 + 60 | 0] = $7_1;
  $8_1 = HEAP32[$0_1 + 52 >> 2];
  label$2 : {
   if ($7_1) {
    $4_1 = HEAPF32[$0_1 + 24 >> 2];
    $5_1 = HEAPF32[$0_1 + 28 >> 2];
    $6_1 = HEAPF32[$0_1 + 20 >> 2];
    HEAP32[$2_1 + 16 >> 2] = 0;
    $6_1 = Math_fround($6_1 + Math_fround(-1.0));
    HEAPF32[$2_1 + 4 >> 2] = $6_1;
    $7_1 = $2_1 + 12 | 0;
    $5_1 = Math_fround($5_1 + Math_fround(-1.0));
    HEAPF32[$7_1 >> 2] = $5_1;
    $12_1 = $2_1 + 8 | 0;
    $4_1 = Math_fround($4_1 + Math_fround(-1.0));
    HEAPF32[$12_1 >> 2] = $4_1;
    HEAP8[$2_1 + 60 | 0] = 1;
    $9_1 = HEAPF32[$0_1 + 40 >> 2];
    $10_1 = HEAPF32[$0_1 + 44 >> 2];
    $11_1 = HEAPF32[$0_1 + 36 >> 2];
    HEAP32[$2_1 + 48 >> 2] = 0;
    HEAP32[$2_1 + 32 >> 2] = 0;
    $13_1 = $2_1 + 28 | 0;
    $10_1 = Math_fround($10_1 + Math_fround(1.0));
    HEAPF32[$13_1 >> 2] = $10_1;
    $14_1 = $2_1 + 24 | 0;
    $9_1 = Math_fround($9_1 + Math_fround(1.0));
    HEAPF32[$14_1 >> 2] = $9_1;
    $11_1 = Math_fround($11_1 + Math_fround(1.0));
    HEAPF32[$2_1 + 20 >> 2] = $11_1;
    HEAPF32[$2_1 + 44 >> 2] = Math_fround(65533.0) / Math_fround($10_1 - $5_1);
    HEAPF32[$2_1 + 40 >> 2] = Math_fround(65533.0) / Math_fround($9_1 - $4_1);
    HEAPF32[$2_1 + 36 >> 2] = Math_fround(65533.0) / Math_fround($11_1 - $6_1);
    $368($3_1, $1_1 + 88 | 0, $6_1, $4_1, $5_1, 0);
    $371($1_1 + 8 | 0, $3_1, HEAPU16[$1_1 + 88 >> 1], HEAPU16[$1_1 + 90 >> 1], HEAPU16[$1_1 + 92 >> 1]);
    $6_1 = HEAPF32[$1_1 + 8 >> 2];
    $5_1 = HEAPF32[$1_1 + 12 >> 2];
    $4_1 = HEAPF32[$1_1 + 16 >> 2];
    HEAP32[$1_1 + 20 >> 2] = 0;
    HEAPF32[$1_1 + 16 >> 2] = $4_1 + Math_fround(-1.0);
    HEAPF32[$1_1 + 12 >> 2] = $5_1 + Math_fround(-1.0);
    HEAPF32[$1_1 + 8 >> 2] = $6_1 + Math_fround(-1.0);
    $15_1 = $2_1 + 4 | 0;
    $319($15_1, $1_1 + 8 | 0);
    HEAP32[$2_1 + 48 >> 2] = 0;
    $6_1 = HEAPF32[$13_1 >> 2];
    HEAPF32[$2_1 + 44 >> 2] = Math_fround(65533.0) / Math_fround($6_1 - HEAPF32[$7_1 >> 2]);
    $5_1 = HEAPF32[$14_1 >> 2];
    HEAPF32[$2_1 + 40 >> 2] = Math_fround(65533.0) / Math_fround($5_1 - HEAPF32[$12_1 >> 2]);
    $4_1 = HEAPF32[$2_1 + 20 >> 2];
    HEAPF32[$2_1 + 36 >> 2] = Math_fround(65533.0) / Math_fround($4_1 - HEAPF32[$2_1 + 4 >> 2]);
    $368($3_1, $1_1 + 88 | 0, $4_1, $5_1, $6_1, 1);
    $371($1_1 + 8 | 0, $3_1, HEAPU16[$1_1 + 88 >> 1], HEAPU16[$1_1 + 90 >> 1], HEAPU16[$1_1 + 92 >> 1]);
    $6_1 = HEAPF32[$1_1 + 8 >> 2];
    $5_1 = HEAPF32[$1_1 + 12 >> 2];
    $4_1 = HEAPF32[$1_1 + 16 >> 2];
    HEAP32[$1_1 + 20 >> 2] = 0;
    HEAPF32[$1_1 + 16 >> 2] = $4_1 + Math_fround(1.0);
    HEAPF32[$1_1 + 12 >> 2] = $5_1 + Math_fround(1.0);
    HEAPF32[$1_1 + 8 >> 2] = $6_1 + Math_fround(1.0);
    $16_1 = $2_1 + 20 | 0;
    $320($16_1, $1_1 + 8 | 0);
    HEAP32[$2_1 + 48 >> 2] = 0;
    HEAPF32[$2_1 + 44 >> 2] = Math_fround(65533.0) / Math_fround(HEAPF32[$13_1 >> 2] - HEAPF32[$7_1 >> 2]);
    HEAPF32[$2_1 + 40 >> 2] = Math_fround(65533.0) / Math_fround(HEAPF32[$14_1 >> 2] - HEAPF32[$12_1 >> 2]);
    HEAPF32[$2_1 + 36 >> 2] = Math_fround(65533.0) / Math_fround(HEAPF32[$2_1 + 20 >> 2] - HEAPF32[$2_1 + 4 >> 2]);
    HEAP32[$1_1 + 88 >> 2] = 12508;
    HEAP32[$1_1 + 96 >> 2] = $2_1;
    HEAP32[$1_1 + 92 >> 2] = $2_1 + 104;
    FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 8 >> 2]]($8_1, $1_1 + 88 | 0, $15_1, $16_1);
    $8_1 = HEAP32[$2_1 + 108 >> 2];
    $7_1 = $1_1 + 16 | 0;
    HEAP32[$7_1 >> 2] = 0;
    HEAP32[$7_1 + 4 >> 2] = 0;
    HEAP32[$1_1 + 8 >> 2] = 0;
    HEAP32[$1_1 + 12 >> 2] = 0;
    $360($2_1 + 124 | 0, $8_1 << 1, $1_1 + 8 | 0);
    break label$2;
   }
   HEAP32[$1_1 + 104 >> 2] = 12528;
   HEAP32[$1_1 + 108 >> 2] = $2_1 - -64;
   HEAP32[$1_1 + 96 >> 2] = -581039253;
   HEAP32[$1_1 + 100 >> 2] = 0;
   HEAP32[$1_1 + 88 >> 2] = -581039253;
   HEAP32[$1_1 + 92 >> 2] = -581039253;
   HEAP32[$1_1 + 80 >> 2] = 1566444395;
   HEAP32[$1_1 + 84 >> 2] = 0;
   HEAP32[$1_1 + 72 >> 2] = 1566444395;
   HEAP32[$1_1 + 76 >> 2] = 1566444395;
   FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 8 >> 2]]($8_1, $1_1 + 104 | 0, $1_1 + 88 | 0, $1_1 + 72 | 0);
   $8_1 = HEAP32[$2_1 + 68 >> 2];
   $2($1_1 + 8 | 0, 0, 64);
   $359($2_1 + 84 | 0, $8_1 << 1, $1_1 + 8 | 0);
  }
  HEAP32[$2_1 + 56 >> 2] = 0;
  $365($3_1, 0, $8_1);
  if (!(HEAP32[$2_1 + 152 >> 2] | !HEAPU8[$2_1 + 60 | 0])) {
   $3_1 = $369($2_1 + 148 | 0, $1_1 + 8 | 0);
   $370($3_1, HEAP32[$2_1 + 136 >> 2]);
   HEAP32[$3_1 + 12 >> 2] = 0;
   $7_1 = $3_1;
   $3_1 = HEAP32[HEAP32[$2_1 + 136 >> 2] + 12 >> 2];
   HEAP32[$7_1 + 16 >> 2] = ($3_1 | 0) > -1 ? 1 : 0 - $3_1 | 0;
  }
  HEAP32[$2_1 + 168 >> 2] = HEAP32[$2_1 + 152 >> 2];
  $124($2_1 + 104 | 0);
  $124($2_1 - -64 | 0);
  HEAP8[$0_1 + 65 | 0] = 1;
  global$0 = $1_1 + 112 | 0;
 }
 
 function $388($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 12764;
  if (HEAPU8[$0_1 + 65 | 0]) {
   $1_1 = HEAP32[$0_1 + 56 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $121(HEAP32[$0_1 + 56 >> 2]);
  }
  return $0_1 | 0;
 }
 
 function $389($0_1) {
  $0_1 = $0_1 | 0;
  $121($388($0_1));
 }
 
 function $390($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
  if ($149(Math_fround(HEAPF32[$2_1 >> 2] - HEAPF32[$1_1 >> 2]), Math_fround(HEAPF32[$2_1 + 4 >> 2] - HEAPF32[$1_1 + 4 >> 2]), Math_fround(HEAPF32[$2_1 + 8 >> 2] - HEAPF32[$1_1 + 8 >> 2])) > Math_fround(1.1920928955078125e-07)) {
   $341($0_1, $1_1);
   $387($0_1);
  }
 }
 
 function $391($0_1) {
  $0_1 = $0_1 | 0;
  return 13060;
 }
 
 function $392($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $140($0_1, $1_1, $2_1);
  $3_1 = HEAP32[$0_1 + 52 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 56 >> 2]]($3_1, $1_1 + 12 | 0, $2_1) | 0;
  HEAPF32[$1_1 + 52 >> 2] = HEAPF32[$0_1 + 16 >> 2];
  label$1 : {
   label$2 : {
    if (!HEAP32[$0_1 + 56 >> 2]) {
     break label$2
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 52 >> 2]]($2_1) & 1) {
     break label$2
    }
    $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, HEAP32[$0_1 + 56 >> 2]) | 0;
    if ($3_1) {
     HEAP32[$1_1 + 44 >> 2] = 0;
     HEAP32[$1_1 + 40 >> 2] = $3_1;
     break label$1;
    }
    $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0_1 + 56 >> 2]) | 0;
    HEAP32[$1_1 + 44 >> 2] = 0;
    HEAP32[$1_1 + 40 >> 2] = $3_1;
    $3_1 = HEAP32[$0_1 + 56 >> 2];
    $3_1 = ((((wasm2js_i32$1 = $2_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
    $4_1 = HEAP32[$0_1 + 56 >> 2];
    (((((wasm2js_i32$3 = $2_1, wasm2js_i32$2 = $3_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, HEAP32[$3_1 + 8 >> 2], $2_1) | 0), wasm2js_i32$4 = 1213612625), wasm2js_i32$5 = HEAP32[$0_1 + 56 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
    break label$1;
   }
   HEAP32[$1_1 + 40 >> 2] = 0;
   HEAP32[$1_1 + 44 >> 2] = 0;
  }
  label$4 : {
   label$5 : {
    if (!HEAP32[$0_1 + 60 >> 2]) {
     break label$5
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 52 >> 2]]($2_1) & 2) {
     break label$5
    }
    $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, HEAP32[$0_1 + 60 >> 2]) | 0;
    if ($3_1) {
     HEAP32[$1_1 + 48 >> 2] = $3_1;
     break label$4;
    }
    (wasm2js_i32$0 = $1_1, wasm2js_i32$5 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0_1 + 60 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$5;
    $3_1 = HEAP32[$0_1 + 60 >> 2];
    $3_1 = ((((wasm2js_i32$5 = $2_1, wasm2js_i32$4 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1) | 0), wasm2js_i32$1 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$5 | 0, wasm2js_i32$4 | 0, wasm2js_i32$1 | 0) | 0);
    $4_1 = HEAP32[$0_1 + 60 >> 2];
    (((((wasm2js_i32$1 = $2_1, wasm2js_i32$4 = $3_1), wasm2js_i32$5 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, HEAP32[$3_1 + 8 >> 2], $2_1) | 0), wasm2js_i32$2 = 1346456916), wasm2js_i32$3 = HEAP32[$0_1 + 60 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
    break label$4;
   }
   HEAP32[$1_1 + 48 >> 2] = 0;
  }
  HEAP32[$1_1 + 56 >> 2] = 0;
  return 13036;
 }
 
 function $393($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 60 >> 2] = 0;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 12868;
  HEAP32[$4_1 + 4 >> 2] = HEAP32[$0_1 + 52 >> 2];
  $5_1 = HEAP32[$0_1 + 56 >> 2];
  label$1 : {
   if (HEAPU8[$5_1 + 60 | 0]) {
    $372($5_1, $4_1 + 74 | 0, $2_1, 0);
    $372($5_1, $4_1 + 68 | 0, $3_1, 1);
    label$3 : {
     switch (HEAP32[$5_1 + 144 >> 2]) {
     case 0:
      $373(HEAP32[$5_1 + 136 >> 2], $4_1, $4_1 + 74 | 0, $4_1 + 68 | 0, 0, HEAP32[$5_1 + 56 >> 2]);
      break label$1;
     case 1:
      $3_1 = 0;
      $1_1 = HEAPU16[$4_1 + 72 >> 1];
      $7_1 = HEAPU16[$4_1 + 70 >> 1];
      $6_1 = HEAPU16[$4_1 + 68 >> 1];
      $8_1 = HEAPU16[$4_1 + 78 >> 1];
      $10_1 = HEAPU16[$4_1 + 76 >> 1];
      $11_1 = HEAPU16[$4_1 + 74 >> 1];
      $12_1 = $5_1 + 136 | 0;
      $2_1 = 0;
      while (1) {
       if (HEAP32[$5_1 + 152 >> 2] <= ($2_1 | 0)) {
        break label$1
       }
       $0_1 = HEAP32[$5_1 + 160 >> 2] + $3_1 | 0;
       if ($374($11_1, $10_1, $8_1, $6_1, $7_1, $1_1, HEAPU16[$0_1 >> 1], HEAPU16[$0_1 + 2 >> 1], HEAPU16[$0_1 + 4 >> 1], HEAPU16[$0_1 + 6 >> 1], HEAPU16[$0_1 + 8 >> 1], HEAPU16[$0_1 + 10 >> 1])) {
        $9_1 = HEAP32[$0_1 + 12 >> 2];
        $373(HEAP32[$12_1 >> 2], $4_1, $4_1 + 74 | 0, $4_1 + 68 | 0, $9_1, HEAP32[$0_1 + 16 >> 2] + $9_1 | 0);
       }
       $3_1 = $3_1 + 32 | 0;
       $2_1 = $2_1 + 1 | 0;
       continue;
      };
     case 2:
      break label$3;
     default:
      break label$1;
     };
    }
    $375(HEAP32[$5_1 + 136 >> 2], $4_1, $4_1 + 74 | 0, $4_1 + 68 | 0);
    break label$1;
   }
   $0_1 = HEAP32[$5_1 + 96 >> 2];
   $1_1 = 0;
   while (1) {
    if (HEAP32[$5_1 + 56 >> 2] > ($1_1 | 0)) {
     $6_1 = HEAP32[$0_1 + 32 >> 2];
     $8_1 = $376(HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], HEAPF32[$3_1 >> 2], HEAPF32[$3_1 + 4 >> 2], HEAPF32[$3_1 + 8 >> 2], $0_1, $0_1 + 16 | 0);
     if (!(!$8_1 | ($6_1 | 0) != -1)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, HEAP32[$0_1 + 36 >> 2], HEAP32[$0_1 + 40 >> 2])
     }
     $7_1 = $7_1 + 1 | 0;
     if (($8_1 ^ -1) & ($6_1 | 0) != -1) {
      $6_1 = HEAP32[$0_1 + 32 >> 2];
      $1_1 = $6_1 + $1_1 | 0;
      $0_1 = ($6_1 << 6) + $0_1 | 0;
     } else {
      $1_1 = $1_1 + 1 | 0;
      $0_1 = $0_1 - -64 | 0;
     }
     continue;
    }
    break;
   };
   if (HEAP32[5672] >= ($7_1 | 0)) {
    break label$1
   }
   HEAP32[5672] = $7_1;
  }
  global$0 = $4_1 + 80 | 0;
 }
 
 function $394($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($0_1, $1_1, $2_1);
 }
 
 function $395($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = HEAP32[$0_1 + 56 >> 2];
  if ($2_1) {
   $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
   $3_1 = HEAP32[$0_1 + 56 >> 2];
   (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1213612625), wasm2js_i32$5 = HEAP32[$0_1 + 56 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
  }
 }
 
 function $396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = HEAP32[$0_1 + 60 >> 2];
  if ($2_1) {
   $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
   $3_1 = HEAP32[$0_1 + 60 >> 2];
   (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1346456916), wasm2js_i32$5 = HEAP32[$0_1 + 60 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
  }
 }
 
 function $397($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0);
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$0_1 + 60 >> 2] = HEAP32[$0_1 + 60 >> 2] + 1;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $4_1 + 28 | 0, $4_1 + 24 | 0, $4_1 + 20 | 0, $4_1 + 16 | 0, $4_1 + 12 | 0, $4_1 + 8 | 0, $4_1 + 4 | 0, $4_1, $1_1);
  $5_1 = $0_1 + 44 | 0;
  $6_1 = HEAP32[$0_1 + 4 >> 2];
  $14_1 = $6_1 + 12 | 0;
  $8_1 = HEAP32[$4_1 + 12 >> 2] + Math_imul(HEAP32[$4_1 + 8 >> 2], $2_1) | 0;
  $7_1 = 2;
  $15_1 = HEAP32[$4_1 + 16 >> 2];
  $16_1 = HEAP32[$4_1 + 28 >> 2];
  $17_1 = HEAP32[$4_1 + 20 >> 2];
  $18_1 = HEAP32[$4_1 >> 2] - 2 | 0;
  $9_1 = 8;
  $10_1 = 4;
  while (1) {
   if (($7_1 | 0) > -1) {
    label$3 : {
     label$4 : {
      switch ($18_1 | 0) {
      case 1:
       $3_1 = HEAPU16[$8_1 + $10_1 >> 1];
       break label$3;
      case 0:
       $3_1 = HEAP32[$8_1 + $9_1 >> 2];
       break label$3;
      default:
       break label$4;
      };
     }
     $3_1 = HEAPU8[$7_1 + $8_1 | 0];
    }
    $3_1 = Math_imul($3_1, $15_1) + $16_1 | 0;
    label$7 : {
     if (!$17_1) {
      $11_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$6_1 + 8 >> 2]);
      $12_1 = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$6_1 + 4 >> 2]);
      $13_1 = HEAPF32[$6_1 + 12 >> 2];
      $3_1 = $3_1 + 8 | 0;
      break label$7;
     }
     $11_1 = Math_fround(HEAPF32[$6_1 + 8 >> 2] * Math_fround(HEAPF64[$3_1 + 8 >> 3]));
     $12_1 = Math_fround(HEAPF32[$6_1 + 4 >> 2] * Math_fround(HEAPF64[$3_1 >> 3]));
     $13_1 = Math_fround(HEAPF64[$3_1 + 16 >> 3]);
     $3_1 = $14_1;
    }
    $19_1 = HEAPF32[$3_1 >> 2];
    HEAP32[$5_1 + 12 >> 2] = 0;
    HEAPF32[$5_1 + 4 >> 2] = $11_1;
    HEAPF32[$5_1 >> 2] = $12_1;
    HEAPF32[$5_1 + 8 >> 2] = $19_1 * $13_1;
    $9_1 = $9_1 - 4 | 0;
    $10_1 = $10_1 - 2 | 0;
    $5_1 = $5_1 - 16 | 0;
    $7_1 = $7_1 - 1 | 0;
    continue;
   }
   break;
  };
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $0_1 + 12 | 0, $1_1, $2_1);
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $1_1);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $398($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 13112;
  HEAP32[$4_1 + 4 >> 2] = HEAP32[$0_1 + 52 >> 2];
  $0_1 = HEAP32[$0_1 + 56 >> 2];
  $1_1 = $4_1 + 40 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 32 >> 2] = 0;
  HEAP32[$4_1 + 36 >> 2] = 0;
  $1_1 = $4_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 16 >> 2] = 0;
  HEAP32[$4_1 + 20 >> 2] = 0;
  $378($0_1, $4_1, $2_1, $3_1, $4_1 + 32 | 0, $4_1 + 16 | 0);
  global$0 = $4_1 + 48 | 0;
 }
 
 function $399($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $4_1 + 28 | 0, $4_1 + 24 | 0, $4_1 + 20 | 0, $4_1 + 16 | 0, $4_1 + 12 | 0, $4_1 + 8 | 0, $4_1 + 4 | 0, $4_1, $1_1);
  $5_1 = HEAP32[$0_1 + 4 >> 2];
  $13_1 = $5_1 + 12 | 0;
  $3_1 = HEAP32[$4_1 + 12 >> 2] + Math_imul(HEAP32[$4_1 + 8 >> 2], $2_1) | 0;
  $7_1 = $3_1 + 8 | 0;
  $8_1 = $3_1 + 4 | 0;
  $6_1 = $4_1 - -64 | 0;
  $9_1 = 2;
  $14_1 = HEAP32[$4_1 + 16 >> 2];
  $15_1 = HEAP32[$4_1 + 28 >> 2];
  $16_1 = HEAP32[$4_1 + 20 >> 2];
  $17_1 = HEAP32[$4_1 >> 2] != 3;
  while (1) {
   if (($9_1 | 0) > -1) {
    if ($17_1) {
     $3_1 = HEAP32[$7_1 >> 2]
    } else {
     $3_1 = HEAPU16[$8_1 >> 1]
    }
    $3_1 = Math_imul($3_1, $14_1) + $15_1 | 0;
    label$5 : {
     if (!$16_1) {
      $10_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$5_1 + 8 >> 2]);
      $11_1 = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$5_1 + 4 >> 2]);
      $12_1 = HEAPF32[$5_1 + 12 >> 2];
      $3_1 = $3_1 + 8 | 0;
      break label$5;
     }
     $10_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] * Math_fround(HEAPF64[$3_1 + 8 >> 3]));
     $11_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] * Math_fround(HEAPF64[$3_1 >> 3]));
     $12_1 = Math_fround(HEAPF64[$3_1 + 16 >> 3]);
     $3_1 = $13_1;
    }
    $18_1 = HEAPF32[$3_1 >> 2];
    HEAP32[$6_1 + 12 >> 2] = 0;
    HEAPF32[$6_1 + 4 >> 2] = $10_1;
    HEAPF32[$6_1 >> 2] = $11_1;
    HEAPF32[$6_1 + 8 >> 2] = $18_1 * $12_1;
    $7_1 = $7_1 - 4 | 0;
    $6_1 = $6_1 - 16 | 0;
    $8_1 = $8_1 - 2 | 0;
    $9_1 = $9_1 - 1 | 0;
    continue;
   }
   break;
  };
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $4_1 + 32 | 0, $1_1, $2_1);
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $1_1);
  global$0 = $4_1 + 80 | 0;
 }
 
 function $400($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0;
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $0_1 = $1_1 + 52 | 0;
  $4_1 = HEAPF32[$0_1 >> 2];
  $10_1 = $1_1 + 56 | 0;
  $5_1 = HEAPF32[$10_1 >> 2];
  $6_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAPF32[$2_1 + 8 >> 2] = $5_1 - $9_1;
  HEAPF32[$2_1 + 4 >> 2] = $4_1 - $8_1;
  HEAPF32[$2_1 >> 2] = $6_1 - $7_1;
  $4_1 = HEAPF32[$0_1 >> 2];
  $5_1 = HEAPF32[$10_1 >> 2];
  $6_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = $9_1 + $5_1;
  HEAPF32[$3_1 + 4 >> 2] = $8_1 + $4_1;
  HEAPF32[$3_1 >> 2] = $7_1 + $6_1;
 }
 
 function $401($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 20 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 24 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 28 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $402($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 20 | 0;
 }
 
 function $403($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
 }
 
 function $404($0_1) {
  $0_1 = $0_1 | 0;
  return 13476;
 }
 
 function $405($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
 }
 
 function $406($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0, $21_1 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $4_1 = HEAP32[$0_1 + 828 >> 2];
       if (($4_1 | 0) == 4) {
        $20_1 = $0_1 + 84 | 0;
        $2_1 = HEAPF32[$1_1 + 80 >> 2];
        $7_1 = -1;
        $4_1 = 0;
        while (1) {
         if (($4_1 | 0) == 4) {
          label$9 : {
           $8_1 = HEAPF32[$1_1 >> 2];
           if ($7_1) {
            break label$9
           }
           $10_1 = HEAPF32[$0_1 + 624 >> 2];
           $12_1 = HEAPF32[$0_1 + 420 >> 2];
           $6_1 = Math_fround($10_1 - $12_1);
           $13_1 = HEAPF32[$0_1 + 620 >> 2];
           $14_1 = HEAPF32[$0_1 + 416 >> 2];
           $5_1 = Math_fround($13_1 - $14_1);
           $15_1 = HEAPF32[$0_1 + 616 >> 2];
           $16_1 = HEAPF32[$0_1 + 412 >> 2];
           $9_1 = Math_fround($15_1 - $16_1);
           $3_1 = HEAPF32[$1_1 + 8 >> 2];
           $2_1 = HEAPF32[$1_1 + 4 >> 2];
           break label$5;
          }
         } else {
          $3_1 = HEAPF32[$20_1 >> 2];
          $22_1 = $3_1 < $2_1;
          $7_1 = $22_1 ? $4_1 : $7_1;
          $2_1 = $22_1 ? $3_1 : $2_1;
          $20_1 = $20_1 + 204 | 0;
          $4_1 = $4_1 + 1 | 0;
          continue;
         }
         break;
        };
        $2_1 = HEAPF32[$1_1 + 4 >> 2];
        $11_1 = HEAPF32[$0_1 + 212 >> 2];
        $17_1 = Math_fround($2_1 - $11_1);
        $10_1 = HEAPF32[$0_1 + 624 >> 2];
        $12_1 = HEAPF32[$0_1 + 420 >> 2];
        $6_1 = Math_fround($10_1 - $12_1);
        $3_1 = HEAPF32[$1_1 + 8 >> 2];
        $18_1 = HEAPF32[$0_1 + 216 >> 2];
        $9_1 = Math_fround($3_1 - $18_1);
        $13_1 = HEAPF32[$0_1 + 620 >> 2];
        $14_1 = HEAPF32[$0_1 + 416 >> 2];
        $5_1 = Math_fround($13_1 - $14_1);
        $24_1 = Math_fround(Math_fround($17_1 * $6_1) - Math_fround($9_1 * $5_1));
        $21_1 = $9_1;
        $15_1 = HEAPF32[$0_1 + 616 >> 2];
        $16_1 = HEAPF32[$0_1 + 412 >> 2];
        $9_1 = Math_fround($15_1 - $16_1);
        $19_1 = HEAPF32[$0_1 + 208 >> 2];
        $23_1 = Math_fround($8_1 - $19_1);
        $17_1 = $149($24_1, Math_fround(Math_fround($21_1 * $9_1) - Math_fround($23_1 * $6_1)), Math_fround(Math_fround($23_1 * $5_1) - Math_fround($17_1 * $9_1)));
        if (($7_1 | 0) != 1) {
         break label$5
        }
        $8_1 = Math_fround($8_1 - HEAPF32[$0_1 + 4 >> 2]);
        $3_1 = Math_fround($3_1 - HEAPF32[$0_1 + 12 >> 2]);
        $2_1 = Math_fround($2_1 - HEAPF32[$0_1 + 8 >> 2]);
        $9_1 = Math_fround(0.0);
        break label$4;
       }
       HEAP32[$0_1 + 828 >> 2] = $4_1 + 1;
       break label$1;
      }
      $2_1 = Math_fround($2_1 - HEAPF32[$0_1 + 8 >> 2]);
      $3_1 = Math_fround($3_1 - HEAPF32[$0_1 + 12 >> 2]);
      $8_1 = Math_fround($8_1 - HEAPF32[$0_1 + 4 >> 2]);
      $9_1 = $149(Math_fround(Math_fround($2_1 * $6_1) - Math_fround($3_1 * $5_1)), Math_fround(Math_fround($3_1 * $9_1) - Math_fround($8_1 * $6_1)), Math_fround(Math_fround($8_1 * $5_1) - Math_fround($2_1 * $9_1)));
      $18_1 = HEAPF32[$0_1 + 216 >> 2];
      $11_1 = HEAPF32[$0_1 + 212 >> 2];
      $19_1 = HEAPF32[$0_1 + 208 >> 2];
      $6_1 = Math_fround(0.0);
      if (($7_1 | 0) == 2) {
       break label$3
      }
     }
     $6_1 = Math_fround($10_1 - $18_1);
     $5_1 = Math_fround($13_1 - $11_1);
     $10_1 = Math_fround($15_1 - $19_1);
     $6_1 = $149(Math_fround(Math_fround($2_1 * $6_1) - Math_fround($3_1 * $5_1)), Math_fround(Math_fround($3_1 * $10_1) - Math_fround($8_1 * $6_1)), Math_fround(Math_fround($8_1 * $5_1) - Math_fround($2_1 * $10_1)));
     $5_1 = Math_fround(0.0);
     if (($7_1 | 0) == 3) {
      break label$2
     }
    }
    $5_1 = Math_fround($12_1 - $18_1);
    $11_1 = Math_fround($14_1 - $11_1);
    $10_1 = Math_fround(Math_fround($2_1 * $5_1) - Math_fround($3_1 * $11_1));
    $21_1 = $3_1;
    $3_1 = Math_fround($16_1 - $19_1);
    $5_1 = $149($10_1, Math_fround(Math_fround($21_1 * $3_1) - Math_fround($8_1 * $5_1)), Math_fround(Math_fround($8_1 * $11_1) - Math_fround($2_1 * $3_1)));
   }
   $2_1 = Math_fround(Math_abs($17_1));
   $4_1 = $2_1 > Math_fround(-999999984306749440.0);
   $7_1 = $4_1 ? 0 : -1;
   $3_1 = Math_fround(Math_abs($9_1));
   $2_1 = $4_1 ? $2_1 : Math_fround(-999999984306749440.0);
   $4_1 = $3_1 > $2_1;
   $7_1 = $4_1 ? 1 : $7_1;
   $6_1 = Math_fround(Math_abs($6_1));
   $2_1 = $4_1 ? $3_1 : $2_1;
   $4_1 = $6_1 > $2_1;
   $4_1 = Math_fround(Math_abs($5_1)) > ($4_1 ? $6_1 : $2_1) ? 3 : $4_1 ? 2 : $7_1;
  }
  $7_1 = $0_1;
  $0_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
  $3(($7_1 + Math_imul($0_1, 204) | 0) + 4 | 0, $1_1, 204);
  return $0_1;
 }
 
 function $407($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] - 1 | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  $3_1 = $0_1 + 4 | 0;
  $1_1 = $1_1 << 4;
  $4_1 = $3_1 + $1_1 | 0;
  $5_1 = $4_1 + 8 | 0;
  $2_1 = $3_1 + ($2_1 << 4) | 0;
  $3_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $2_1 = $0_1 + 84 | 0;
  $4_1 = $2_1 + $1_1 | 0;
  $3_1 = $4_1 + 8 | 0;
  $2_1 = $2_1 + (HEAP32[$0_1 >> 2] << 4) | 0;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $2_1 = $1_1;
  $1_1 = $0_1 + 164 | 0;
  $4_1 = $2_1 + $1_1 | 0;
  $2_1 = $4_1;
  $0_1 = $1_1 + (HEAP32[$0_1 >> 2] << 4) | 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $2_1 + 8 | 0;
  $0_1 = $0_1 + 8 | 0;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
 }
 
 function $408($0_1, $1_1) {
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2];
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($2_1 | 0) >= 4) {
         $2_1 = HEAPU8[$1_1 | 0];
         if ($2_1 & 8) {
          break label$6
         }
         $407($0_1, 3);
         $2_1 = HEAP32[$0_1 >> 2];
        }
        if (($2_1 | 0) < 3) {
         break label$5
        }
        $2_1 = HEAPU8[$1_1 | 0];
       }
       if ($2_1 & 4) {
        break label$4
       }
       $407($0_1, 2);
       $2_1 = HEAP32[$0_1 >> 2];
      }
      if (($2_1 | 0) < 2) {
       break label$3
      }
      $2_1 = HEAPU8[$1_1 | 0];
     }
     if ($2_1 & 2) {
      break label$2
     }
     $407($0_1, 1);
     $2_1 = HEAP32[$0_1 >> 2];
    }
    if (($2_1 | 0) < 1) {
     break label$1
    }
    $2_1 = HEAPU8[$1_1 | 0];
   }
   if ($2_1 & 1) {
    break label$1
   }
   $407($0_1, 0);
  }
 }
 
 function $409($0_1) {
  var $1_1 = 0;
  HEAP8[$0_1 + 356 | 0] = 1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP8[$0_1 + 312 | 0] = 0;
  HEAP32[$0_1 + 292 >> 2] = 1566444395;
  HEAP32[$0_1 + 296 >> 2] = 1566444395;
  $1_1 = $0_1 + 336 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 300 | 0;
  HEAP32[$1_1 >> 2] = 1566444395;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 344 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0_1 + 352 | 0] = 0;
  $0_1 = $0_1 + 332 | 0;
  HEAP8[$0_1 | 0] = HEAPU8[$0_1 | 0] & 240;
 }
 
 function $410($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 292 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 296 >> 2] = $4_1;
  $4_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = $0_1 + 300 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  HEAP8[$0_1 + 356 | 0] = 1;
  $7_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = (HEAP32[$0_1 >> 2] << 4) + $0_1 | 0;
  $6_1 = $5_1 + 12 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $7_1;
  $4_1 = $5_1 + 4 | 0;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $1_1 = (HEAP32[$0_1 >> 2] << 4) + $0_1 | 0;
  $4_1 = $1_1 + 92 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $1_1 + 84 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = (HEAP32[$0_1 >> 2] << 4) + $0_1 | 0;
  $2_1 = $1_1 + 164 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = $3_1 + 8 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $1_1 + 172 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
 }
 
 function $411($0_1) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0);
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!HEAPU8[$0_1 + 356 | 0]) {
    $5_1 = HEAPU8[$0_1 + 312 | 0];
    break label$1;
   }
   HEAP8[$0_1 + 356 | 0] = 0;
   $8_1 = $0_1 + 352 | 0;
   HEAP8[$8_1 | 0] = 0;
   $9_1 = $0_1 + 344 | 0;
   HEAP32[$9_1 >> 2] = 0;
   HEAP32[$9_1 + 4 >> 2] = 0;
   $13_1 = $0_1 + 336 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $14_1 = $0_1 + 332 | 0;
   $10_1 = HEAPU8[$14_1 | 0];
   $17_1 = $10_1 & -16;
   HEAP8[$14_1 | 0] = $17_1;
   $13_1 = $0_1 + 316 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      switch (HEAP32[$0_1 >> 2]) {
      case 1:
       $5_1 = HEAP32[$0_1 + 168 >> 2];
       HEAP32[$0_1 + 260 >> 2] = HEAP32[$0_1 + 164 >> 2];
       HEAP32[$0_1 + 264 >> 2] = $5_1;
       $5_1 = HEAP32[$0_1 + 88 >> 2];
       HEAP32[$0_1 + 244 >> 2] = HEAP32[$0_1 + 84 >> 2];
       HEAP32[$0_1 + 248 >> 2] = $5_1;
       $10_1 = $0_1 + 172 | 0;
       $19_1 = HEAP32[$10_1 + 4 >> 2];
       $14_1 = $0_1 + 268 | 0;
       $5_1 = $14_1;
       HEAP32[$5_1 >> 2] = HEAP32[$10_1 >> 2];
       HEAP32[$5_1 + 4 >> 2] = $19_1;
       $10_1 = $0_1 + 92 | 0;
       $19_1 = HEAP32[$10_1 + 4 >> 2];
       $5_1 = $0_1 + 252 | 0;
       HEAP32[$5_1 >> 2] = HEAP32[$10_1 >> 2];
       HEAP32[$5_1 + 4 >> 2] = $19_1;
       HEAP8[$8_1 | 0] = 0;
       HEAP32[$0_1 + 288 >> 2] = 0;
       HEAPF32[$0_1 + 280 >> 2] = HEAPF32[$0_1 + 248 >> 2] - HEAPF32[$0_1 + 264 >> 2];
       HEAPF32[$0_1 + 276 >> 2] = HEAPF32[$0_1 + 244 >> 2] - HEAPF32[$0_1 + 260 >> 2];
       HEAPF32[$0_1 + 284 >> 2] = HEAPF32[$5_1 >> 2] - HEAPF32[$14_1 >> 2];
       HEAP32[$9_1 >> 2] = 0;
       HEAP32[$9_1 + 4 >> 2] = 0;
       HEAP32[$0_1 + 336 >> 2] = 1065353216;
       HEAP32[$0_1 + 340 >> 2] = 0;
       HEAP8[$0_1 + 332 | 0] = $17_1;
       break label$4;
      case 2:
       $5_1 = 1;
       $7_1 = HEAPF32[$0_1 + 4 >> 2];
       $2_1 = Math_fround(HEAPF32[$0_1 + 20 >> 2] - $7_1);
       $11_1 = HEAPF32[$0_1 + 8 >> 2];
       $4_1 = Math_fround(HEAPF32[$0_1 + 24 >> 2] - $11_1);
       $12_1 = HEAPF32[$0_1 + 12 >> 2];
       $6_1 = Math_fround(HEAPF32[$0_1 + 28 >> 2] - $12_1);
       $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(0.0) - $7_1) * $2_1) + Math_fround(Math_fround(Math_fround(0.0) - $11_1) * $4_1)) + Math_fround(Math_fround(Math_fround(0.0) - $12_1) * $6_1));
       $1_1 = Math_fround(0.0);
       label$10 : {
        if (!($7_1 > Math_fround(0.0))) {
         break label$10
        }
        $1_1 = Math_fround(Math_fround(Math_fround($2_1 * $2_1) + Math_fround($4_1 * $4_1)) + Math_fround($6_1 * $6_1));
        if (!($1_1 > $7_1)) {
         $5_1 = 2;
         $1_1 = Math_fround(1.0);
         break label$10;
        }
        $5_1 = 3;
        $1_1 = Math_fround($7_1 / $1_1);
       }
       $9_1 = $0_1 + 344 | 0;
       HEAP32[$9_1 >> 2] = 0;
       HEAP32[$9_1 + 4 >> 2] = 0;
       HEAPF32[$0_1 + 340 >> 2] = $1_1;
       HEAPF32[$0_1 + 336 >> 2] = Math_fround(1.0) - $1_1;
       $9_1 = $0_1 + 332 | 0;
       HEAP8[$9_1 | 0] = $5_1 | $17_1;
       HEAP32[$0_1 + 256 >> 2] = 0;
       $2_1 = HEAPF32[$0_1 + 92 >> 2];
       $7_1 = Math_fround($2_1 + Math_fround($1_1 * Math_fround(HEAPF32[$0_1 + 108 >> 2] - $2_1)));
       HEAPF32[$0_1 + 252 >> 2] = $7_1;
       $2_1 = HEAPF32[$0_1 + 88 >> 2];
       $11_1 = Math_fround($2_1 + Math_fround($1_1 * Math_fround(HEAPF32[$0_1 + 104 >> 2] - $2_1)));
       HEAPF32[$0_1 + 248 >> 2] = $11_1;
       $2_1 = HEAPF32[$0_1 + 84 >> 2];
       $12_1 = Math_fround($2_1 + Math_fround($1_1 * Math_fround(HEAPF32[$0_1 + 100 >> 2] - $2_1)));
       HEAPF32[$0_1 + 244 >> 2] = $12_1;
       $15_1 = HEAPF32[$0_1 + 180 >> 2];
       $16_1 = HEAPF32[$0_1 + 184 >> 2];
       $2_1 = HEAPF32[$0_1 + 168 >> 2];
       $18_1 = HEAPF32[$0_1 + 188 >> 2];
       $4_1 = HEAPF32[$0_1 + 172 >> 2];
       $6_1 = HEAPF32[$0_1 + 164 >> 2];
       HEAP32[$0_1 + 288 >> 2] = 0;
       $4_1 = Math_fround($4_1 + Math_fround($1_1 * Math_fround($18_1 - $4_1)));
       HEAPF32[$0_1 + 284 >> 2] = $7_1 - $4_1;
       $2_1 = Math_fround($2_1 + Math_fround($1_1 * Math_fround($16_1 - $2_1)));
       HEAPF32[$0_1 + 280 >> 2] = $11_1 - $2_1;
       $1_1 = Math_fround($6_1 + Math_fround($1_1 * Math_fround($15_1 - $6_1)));
       HEAPF32[$0_1 + 276 >> 2] = $12_1 - $1_1;
       HEAP32[$0_1 + 272 >> 2] = 0;
       HEAPF32[$0_1 + 268 >> 2] = $4_1;
       HEAPF32[$0_1 + 264 >> 2] = $2_1;
       HEAPF32[$0_1 + 260 >> 2] = $1_1;
       $408($0_1, $9_1);
       break label$4;
      case 3:
       $5_1 = $3_1 + 32 | 0;
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$5_1 + 4 >> 2] = 0;
       HEAP32[$3_1 + 24 >> 2] = 0;
       HEAP32[$3_1 + 28 >> 2] = 0;
       $412($3_1 + 24 | 0, $0_1 + 4 | 0, $0_1 + 20 | 0, $0_1 + 36 | 0, $13_1);
       HEAP32[$0_1 + 256 >> 2] = 0;
       $1_1 = HEAPF32[$0_1 + 336 >> 2];
       $2_1 = HEAPF32[$0_1 + 340 >> 2];
       $4_1 = HEAPF32[$9_1 >> 2];
       $6_1 = Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 92 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 108 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 124 >> 2]));
       HEAPF32[$0_1 + 252 >> 2] = $6_1;
       $7_1 = Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 88 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 104 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 120 >> 2]));
       HEAPF32[$0_1 + 248 >> 2] = $7_1;
       $11_1 = Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 84 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 100 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 116 >> 2]));
       HEAPF32[$0_1 + 244 >> 2] = $11_1;
       $12_1 = HEAPF32[$0_1 + 180 >> 2];
       $15_1 = HEAPF32[$0_1 + 196 >> 2];
       $16_1 = HEAPF32[$0_1 + 168 >> 2];
       $18_1 = HEAPF32[$0_1 + 184 >> 2];
       $20_1 = HEAPF32[$0_1 + 200 >> 2];
       $21_1 = HEAPF32[$0_1 + 172 >> 2];
       $25_1 = HEAPF32[$0_1 + 188 >> 2];
       $26_1 = HEAPF32[$0_1 + 204 >> 2];
       $27_1 = HEAPF32[$0_1 + 164 >> 2];
       HEAP32[$0_1 + 288 >> 2] = 0;
       $22_1 = $6_1;
       $6_1 = Math_fround(Math_fround(Math_fround($1_1 * $21_1) + Math_fround($2_1 * $25_1)) + Math_fround($4_1 * $26_1));
       HEAPF32[$0_1 + 284 >> 2] = $22_1 - $6_1;
       $22_1 = $7_1;
       $7_1 = Math_fround(Math_fround(Math_fround($1_1 * $16_1) + Math_fround($2_1 * $18_1)) + Math_fround($4_1 * $20_1));
       HEAPF32[$0_1 + 280 >> 2] = $22_1 - $7_1;
       $1_1 = Math_fround(Math_fround(Math_fround($1_1 * $27_1) + Math_fround($2_1 * $12_1)) + Math_fround($4_1 * $15_1));
       HEAPF32[$0_1 + 276 >> 2] = $11_1 - $1_1;
       HEAP32[$0_1 + 272 >> 2] = 0;
       HEAPF32[$0_1 + 268 >> 2] = $6_1;
       HEAPF32[$0_1 + 264 >> 2] = $7_1;
       HEAPF32[$0_1 + 260 >> 2] = $1_1;
       $408($0_1, $14_1);
       break label$4;
      case 4:
       $5_1 = $3_1 + 16 | 0;
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$5_1 + 4 >> 2] = 0;
       HEAP32[$3_1 + 8 >> 2] = 0;
       HEAP32[$3_1 + 12 >> 2] = 0;
       HEAP32[$13_1 >> 2] = 0;
       HEAP32[$13_1 + 4 >> 2] = 0;
       $5_1 = $13_1 + 8 | 0;
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$5_1 + 4 >> 2] = 0;
       HEAP8[$0_1 + 332 | 0] = $10_1 | 15;
       $5_1 = $0_1 + 4 | 0;
       $1_1 = HEAPF32[$5_1 >> 2];
       $2_1 = HEAPF32[$0_1 + 8 >> 2];
       $4_1 = HEAPF32[$0_1 + 12 >> 2];
       $9_1 = $0_1 + 20 | 0;
       $6_1 = HEAPF32[$9_1 >> 2];
       $7_1 = HEAPF32[$0_1 + 24 >> 2];
       $11_1 = HEAPF32[$0_1 + 28 >> 2];
       $17_1 = $0_1 + 36 | 0;
       $12_1 = HEAPF32[$17_1 >> 2];
       $15_1 = HEAPF32[$0_1 + 40 >> 2];
       $16_1 = HEAPF32[$0_1 + 44 >> 2];
       $14_1 = $0_1 + 52 | 0;
       $18_1 = HEAPF32[$14_1 >> 2];
       $20_1 = HEAPF32[$0_1 + 56 >> 2];
       $21_1 = HEAPF32[$0_1 + 60 >> 2];
       HEAP8[$3_1 + 40 | 0] = 0;
       $8_1 = $413($1_1, $2_1, $4_1, $6_1, $7_1, $11_1, $12_1, $15_1, $16_1, $18_1, $20_1, $21_1);
       $10_1 = $413($1_1, $2_1, $4_1, $12_1, $15_1, $16_1, $18_1, $20_1, $21_1, $6_1, $7_1, $11_1);
       $19_1 = $413($1_1, $2_1, $4_1, $18_1, $20_1, $21_1, $6_1, $7_1, $11_1, $12_1, $15_1, $16_1);
       $24_1 = $413($6_1, $7_1, $11_1, $18_1, $20_1, $21_1, $12_1, $15_1, $16_1, $1_1, $2_1, $4_1);
       $23_1 = $24_1 | ($8_1 | $10_1 | $19_1);
       if (($23_1 | 0) >= 0) {
        if ($23_1) {
         $1_1 = Math_fround(3402823466385288598117041.0e14);
         label$14 : {
          if (!$8_1) {
           break label$14
          }
          $412($3_1 + 8 | 0, $5_1, $9_1, $17_1, $3_1 + 24 | 0);
          $4_1 = HEAPF32[$3_1 + 24 >> 2];
          $6_1 = HEAPF32[$3_1 + 28 >> 2];
          $7_1 = HEAPF32[$3_1 + 32 >> 2];
          $2_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1));
          $1_1 = Math_fround(3402823466385288598117041.0e14);
          if (!($2_1 < Math_fround(3402823466385288598117041.0e14))) {
           break label$14
          }
          HEAPF32[$0_1 + 316 >> 2] = $4_1;
          $8_1 = HEAP32[$3_1 + 48 >> 2];
          HEAP32[$0_1 + 336 >> 2] = HEAP32[$3_1 + 44 >> 2];
          HEAP32[$0_1 + 340 >> 2] = $8_1;
          HEAPF32[$0_1 + 328 >> 2] = HEAPF32[$3_1 + 36 >> 2];
          HEAPF32[$0_1 + 324 >> 2] = $7_1;
          HEAPF32[$0_1 + 320 >> 2] = $6_1;
          HEAP32[$0_1 + 348 >> 2] = 0;
          HEAPF32[$0_1 + 344 >> 2] = HEAPF32[$3_1 + 52 >> 2];
          $8_1 = HEAPU8[$3_1 + 40 | 0];
          HEAP8[$0_1 + 332 | 0] = $8_1 & 1 | HEAPU8[$0_1 + 332 | 0] & 240 | $8_1 & 2 | $8_1 & 4;
          $1_1 = $2_1;
         }
         label$15 : {
          if (!$10_1) {
           break label$15
          }
          $412($3_1 + 8 | 0, $5_1, $17_1, $14_1, $3_1 + 24 | 0);
          $4_1 = HEAPF32[$3_1 + 24 >> 2];
          $6_1 = HEAPF32[$3_1 + 28 >> 2];
          $7_1 = HEAPF32[$3_1 + 32 >> 2];
          $2_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1));
          if (!($2_1 < $1_1)) {
           break label$15
          }
          HEAPF32[$0_1 + 316 >> 2] = $4_1;
          HEAPF32[$0_1 + 336 >> 2] = HEAPF32[$3_1 + 44 >> 2];
          HEAPF32[$0_1 + 328 >> 2] = HEAPF32[$3_1 + 36 >> 2];
          HEAPF32[$0_1 + 324 >> 2] = $7_1;
          HEAPF32[$0_1 + 320 >> 2] = $6_1;
          HEAP32[$0_1 + 340 >> 2] = 0;
          $10_1 = $3_1 + 48 | 0;
          $23_1 = HEAP32[$10_1 + 4 >> 2];
          $8_1 = $0_1 + 344 | 0;
          HEAP32[$8_1 >> 2] = HEAP32[$10_1 >> 2];
          HEAP32[$8_1 + 4 >> 2] = $23_1;
          $10_1 = HEAPU8[$3_1 + 40 | 0];
          $8_1 = $10_1 << 1;
          HEAP8[$0_1 + 332 | 0] = $8_1 & 8 | ($8_1 & 4 | ($10_1 & 1 | HEAPU8[$0_1 + 332 | 0] & 240));
          $1_1 = $2_1;
         }
         label$16 : {
          if (!$19_1) {
           break label$16
          }
          $412($3_1 + 8 | 0, $5_1, $14_1, $9_1, $3_1 + 24 | 0);
          $4_1 = HEAPF32[$3_1 + 24 >> 2];
          $6_1 = HEAPF32[$3_1 + 28 >> 2];
          $7_1 = HEAPF32[$3_1 + 32 >> 2];
          $2_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1));
          if (!($2_1 < $1_1)) {
           break label$16
          }
          HEAPF32[$0_1 + 316 >> 2] = $4_1;
          HEAPF32[$0_1 + 336 >> 2] = HEAPF32[$3_1 + 44 >> 2];
          HEAPF32[$0_1 + 328 >> 2] = HEAPF32[$3_1 + 36 >> 2];
          HEAPF32[$0_1 + 324 >> 2] = $7_1;
          HEAPF32[$0_1 + 320 >> 2] = $6_1;
          HEAP32[$0_1 + 344 >> 2] = 0;
          HEAPF32[$0_1 + 348 >> 2] = HEAPF32[$3_1 + 48 >> 2];
          HEAPF32[$0_1 + 340 >> 2] = HEAPF32[$3_1 + 52 >> 2];
          $5_1 = HEAPU8[$3_1 + 40 | 0];
          HEAP8[$0_1 + 332 | 0] = $5_1 & 1 | HEAPU8[$0_1 + 332 | 0] & 240 | $5_1 >>> 1 & 2 | $5_1 << 2 & 8;
          $1_1 = $2_1;
         }
         label$17 : {
          if (!$24_1) {
           break label$17
          }
          $412($3_1 + 8 | 0, $9_1, $14_1, $17_1, $3_1 + 24 | 0);
          $22_1 = $1_1;
          $1_1 = HEAPF32[$3_1 + 24 >> 2];
          $2_1 = HEAPF32[$3_1 + 28 >> 2];
          $4_1 = HEAPF32[$3_1 + 32 >> 2];
          if (!($22_1 > Math_fround(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($2_1 * $2_1)) + Math_fround($4_1 * $4_1)))) {
           break label$17
          }
          HEAPF32[$0_1 + 316 >> 2] = $1_1;
          HEAP32[$0_1 + 336 >> 2] = 0;
          HEAPF32[$0_1 + 328 >> 2] = HEAPF32[$3_1 + 36 >> 2];
          HEAPF32[$0_1 + 324 >> 2] = $4_1;
          HEAPF32[$0_1 + 320 >> 2] = $2_1;
          HEAPF32[$0_1 + 340 >> 2] = HEAPF32[$3_1 + 44 >> 2];
          HEAPF32[$0_1 + 348 >> 2] = HEAPF32[$3_1 + 48 >> 2];
          HEAPF32[$0_1 + 344 >> 2] = HEAPF32[$3_1 + 52 >> 2];
          $5_1 = HEAPU8[$3_1 + 40 | 0];
          HEAP8[$0_1 + 332 | 0] = $5_1 & 4 | HEAPU8[$0_1 + 332 | 0] & 240 | $5_1 << 1 & 2 | $5_1 << 2 & 8;
         }
         HEAP32[$0_1 + 256 >> 2] = 0;
         $1_1 = HEAPF32[$0_1 + 336 >> 2];
         $2_1 = HEAPF32[$0_1 + 340 >> 2];
         $4_1 = HEAPF32[$0_1 + 344 >> 2];
         $6_1 = HEAPF32[$0_1 + 348 >> 2];
         $7_1 = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 92 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 108 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 124 >> 2])) + Math_fround($6_1 * HEAPF32[$0_1 + 140 >> 2]));
         HEAPF32[$0_1 + 252 >> 2] = $7_1;
         $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 88 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 104 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 120 >> 2])) + Math_fround($6_1 * HEAPF32[$0_1 + 136 >> 2]));
         HEAPF32[$0_1 + 248 >> 2] = $11_1;
         $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 84 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 100 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 116 >> 2])) + Math_fround($6_1 * HEAPF32[$0_1 + 132 >> 2]));
         HEAPF32[$0_1 + 244 >> 2] = $12_1;
         HEAP32[$0_1 + 272 >> 2] = 0;
         HEAP32[$0_1 + 288 >> 2] = 0;
         $15_1 = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 172 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 188 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 204 >> 2])) + Math_fround($6_1 * HEAPF32[$0_1 + 220 >> 2]));
         HEAPF32[$0_1 + 268 >> 2] = $15_1;
         $16_1 = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 168 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 184 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 200 >> 2])) + Math_fround($6_1 * HEAPF32[$0_1 + 216 >> 2]));
         HEAPF32[$0_1 + 264 >> 2] = $16_1;
         $1_1 = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 164 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 180 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 196 >> 2])) + Math_fround($6_1 * HEAPF32[$0_1 + 212 >> 2]));
         HEAPF32[$0_1 + 260 >> 2] = $1_1;
         HEAPF32[$0_1 + 284 >> 2] = $7_1 - $15_1;
         HEAPF32[$0_1 + 280 >> 2] = $11_1 - $16_1;
         HEAPF32[$0_1 + 276 >> 2] = $12_1 - $1_1;
         $408($0_1, $0_1 + 332 | 0);
         break label$4;
        }
        HEAP32[$0_1 + 276 >> 2] = 0;
        HEAP32[$0_1 + 280 >> 2] = 0;
        $5_1 = 1;
        HEAP8[$0_1 + 312 | 0] = 1;
        $0_1 = $0_1 + 284 | 0;
        HEAP32[$0_1 >> 2] = 0;
        HEAP32[$0_1 + 4 >> 2] = 0;
        break label$1;
       }
       HEAP8[$0_1 + 352 | 0] = 1;
       break;
      case 0:
       break label$3;
      default:
       break label$5;
      };
     }
     $5_1 = 0;
     break label$3;
    }
    $5_1 = 0;
    if (!(!(HEAPF32[$13_1 + 28 >> 2] >= Math_fround(0.0)) | (!(HEAPF32[$13_1 + 20 >> 2] >= Math_fround(0.0)) | !(HEAPF32[$13_1 + 24 >> 2] >= Math_fround(0.0))))) {
     $5_1 = HEAPF32[$13_1 + 32 >> 2] >= Math_fround(0.0)
    }
   }
   HEAP8[$0_1 + 312 | 0] = $5_1;
  }
  global$0 = $3_1 - -64 | 0;
  return ($5_1 | 0) != 0;
 }
 
 function $412($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = 0;
  $10_1 = HEAPU8[$4_1 + 16 | 0] & -16;
  HEAP8[$4_1 + 16 | 0] = $10_1;
  $27_1 = HEAPF32[$3_1 >> 2];
  $12_1 = HEAPF32[$1_1 >> 2];
  $17_1 = Math_fround($27_1 - $12_1);
  $11_1 = HEAPF32[$0_1 >> 2];
  $5_1 = Math_fround($11_1 - $12_1);
  $28_1 = HEAPF32[$3_1 + 4 >> 2];
  $13_1 = HEAPF32[$1_1 + 4 >> 2];
  $18_1 = Math_fround($28_1 - $13_1);
  $8_1 = HEAPF32[$0_1 + 4 >> 2];
  $6_1 = Math_fround($8_1 - $13_1);
  $29_1 = HEAPF32[$3_1 + 8 >> 2];
  $14_1 = HEAPF32[$1_1 + 8 >> 2];
  $19_1 = Math_fround($29_1 - $14_1);
  $15_1 = HEAPF32[$0_1 + 8 >> 2];
  $7_1 = Math_fround($15_1 - $14_1);
  $9_1 = Math_fround(Math_fround(Math_fround($17_1 * $5_1) + Math_fround($18_1 * $6_1)) + Math_fround($19_1 * $7_1));
  $30_1 = $4_1;
  $23_1 = HEAPF32[$2_1 >> 2];
  $20_1 = Math_fround($23_1 - $12_1);
  $24_1 = HEAPF32[$2_1 + 4 >> 2];
  $21_1 = Math_fround($24_1 - $13_1);
  $25_1 = HEAPF32[$2_1 + 8 >> 2];
  $22_1 = Math_fround($25_1 - $14_1);
  $6_1 = Math_fround(Math_fround(Math_fround($20_1 * $5_1) + Math_fround($21_1 * $6_1)) + Math_fround($22_1 * $7_1));
  label$1 : {
   if (!(!($6_1 <= Math_fround(0.0)) | !($9_1 <= Math_fround(0.0)))) {
    $0_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $0_1;
    $1_1 = $1_1 + 8 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $4_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    HEAP8[$4_1 + 16 | 0] = $10_1 | 1;
    $6_1 = Math_fround(0.0);
    $5_1 = Math_fround(0.0);
    $7_1 = Math_fround(1.0);
    break label$1;
   }
   $5_1 = Math_fround($11_1 - $23_1);
   $7_1 = Math_fround($8_1 - $24_1);
   $16_1 = Math_fround($15_1 - $25_1);
   $26_1 = Math_fround(Math_fround(Math_fround($17_1 * $5_1) + Math_fround($18_1 * $7_1)) + Math_fround($19_1 * $16_1));
   $7_1 = Math_fround(Math_fround(Math_fround($20_1 * $5_1) + Math_fround($21_1 * $7_1)) + Math_fround($22_1 * $16_1));
   if (!(!($7_1 >= Math_fround(0.0)) | !($7_1 >= $26_1))) {
    $0_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $0_1;
    $1_1 = $2_1 + 8 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $4_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    HEAP8[$4_1 + 16 | 0] = $10_1 | 2;
    $6_1 = Math_fround(1.0);
    $5_1 = Math_fround(0.0);
    $7_1 = Math_fround(0.0);
    break label$1;
   }
   $16_1 = Math_fround(Math_fround($6_1 * $26_1) - Math_fround($7_1 * $9_1));
   label$4 : {
    if (!($7_1 <= Math_fround(0.0)) | !($6_1 >= Math_fround(0.0))) {
     break label$4
    }
    $5_1 = Math_fround(0.0);
    if (!($16_1 <= Math_fround(0.0))) {
     break label$4
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAP8[$4_1 + 16 | 0] = $10_1 | 3;
    $6_1 = Math_fround($6_1 / Math_fround($6_1 - $7_1));
    HEAPF32[$4_1 + 8 >> 2] = $14_1 + Math_fround($22_1 * $6_1);
    HEAPF32[$4_1 + 4 >> 2] = $13_1 + Math_fround($21_1 * $6_1);
    HEAPF32[$4_1 >> 2] = $12_1 + Math_fround($20_1 * $6_1);
    $7_1 = Math_fround(Math_fround(1.0) - $6_1);
    break label$1;
   }
   $5_1 = Math_fround($11_1 - $27_1);
   $8_1 = Math_fround($8_1 - $28_1);
   $15_1 = Math_fround($15_1 - $29_1);
   $11_1 = Math_fround(Math_fround(Math_fround($20_1 * $5_1) + Math_fround($21_1 * $8_1)) + Math_fround($22_1 * $15_1));
   $5_1 = Math_fround(Math_fround(Math_fround($17_1 * $5_1) + Math_fround($18_1 * $8_1)) + Math_fround($19_1 * $15_1));
   if (!(!($5_1 >= Math_fround(0.0)) | !($5_1 >= $11_1))) {
    $0_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $0_1;
    $1_1 = $3_1 + 8 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $4_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    HEAP8[$4_1 + 16 | 0] = $10_1 | 4;
    $5_1 = Math_fround(1.0);
    $6_1 = Math_fround(0.0);
    $7_1 = Math_fround(0.0);
    break label$1;
   }
   $8_1 = Math_fround(Math_fround($11_1 * $9_1) - Math_fround($6_1 * $5_1));
   label$6 : {
    if (!($5_1 <= Math_fround(0.0)) | !($9_1 >= Math_fround(0.0))) {
     break label$6
    }
    $6_1 = Math_fround(0.0);
    if (!($8_1 <= Math_fround(0.0))) {
     break label$6
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAP8[$4_1 + 16 | 0] = $10_1 | 5;
    $5_1 = Math_fround($9_1 / Math_fround($9_1 - $5_1));
    HEAPF32[$4_1 + 8 >> 2] = $14_1 + Math_fround($19_1 * $5_1);
    HEAPF32[$4_1 + 4 >> 2] = $13_1 + Math_fround($18_1 * $5_1);
    HEAPF32[$4_1 >> 2] = $12_1 + Math_fround($17_1 * $5_1);
    $7_1 = Math_fround(Math_fround(1.0) - $5_1);
    break label$1;
   }
   $6_1 = Math_fround(Math_fround($7_1 * $5_1) - Math_fround($11_1 * $26_1));
   label$7 : {
    $9_1 = Math_fround($11_1 - $5_1);
    if (!($9_1 >= Math_fround(0.0))) {
     break label$7
    }
    $5_1 = Math_fround($26_1 - $7_1);
    if (!($5_1 >= Math_fround(0.0)) | !($6_1 <= Math_fround(0.0))) {
     break label$7
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAP8[$4_1 + 16 | 0] = $10_1 | 6;
    $5_1 = Math_fround($5_1 / Math_fround($5_1 + $9_1));
    HEAPF32[$4_1 + 8 >> 2] = $25_1 + Math_fround(Math_fround($29_1 - $25_1) * $5_1);
    HEAPF32[$4_1 + 4 >> 2] = $24_1 + Math_fround(Math_fround($28_1 - $24_1) * $5_1);
    HEAPF32[$4_1 >> 2] = $23_1 + Math_fround(Math_fround($27_1 - $23_1) * $5_1);
    $6_1 = Math_fround(Math_fround(1.0) - $5_1);
    $7_1 = Math_fround(0.0);
    break label$1;
   }
   HEAP32[$4_1 + 12 >> 2] = 0;
   HEAP8[$4_1 + 16 | 0] = $10_1 | 7;
   $6_1 = Math_fround(Math_fround(1.0) / Math_fround($16_1 + Math_fround($6_1 + $8_1)));
   $5_1 = Math_fround($16_1 * $6_1);
   $6_1 = Math_fround($8_1 * $6_1);
   HEAPF32[$4_1 + 8 >> 2] = Math_fround($19_1 * $5_1) + Math_fround($14_1 + Math_fround($22_1 * $6_1));
   HEAPF32[$4_1 + 4 >> 2] = Math_fround($18_1 * $5_1) + Math_fround($13_1 + Math_fround($21_1 * $6_1));
   HEAPF32[$4_1 >> 2] = Math_fround($17_1 * $5_1) + Math_fround($12_1 + Math_fround($20_1 * $6_1));
   $7_1 = Math_fround(Math_fround(Math_fround(1.0) - $6_1) - $5_1);
  }
  HEAPF32[$30_1 + 20 >> 2] = $7_1;
  HEAP32[$4_1 + 32 >> 2] = 0;
  HEAPF32[$4_1 + 28 >> 2] = $5_1;
  HEAPF32[$4_1 + 24 >> 2] = $6_1;
 }
 
 function $413($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  var $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  $4_1 = Math_fround($4_1 - $1_1);
  $8_1 = Math_fround($8_1 - $2_1);
  $5_1 = Math_fround($5_1 - $2_1);
  $7_1 = Math_fround($7_1 - $1_1);
  $12_1 = Math_fround(Math_fround($4_1 * $8_1) - Math_fround($5_1 * $7_1));
  $13_1 = $5_1;
  $5_1 = Math_fround($6_1 - $0_1);
  $3_1 = Math_fround($3_1 - $0_1);
  $6_1 = Math_fround(Math_fround($13_1 * $5_1) - Math_fround($3_1 * $8_1));
  $4_1 = Math_fround(Math_fround($3_1 * $7_1) - Math_fround($4_1 * $5_1));
  $3_1 = Math_fround(Math_fround(Math_fround($12_1 * Math_fround($9_1 - $0_1)) + Math_fround($6_1 * Math_fround($10_1 - $1_1))) + Math_fround($4_1 * Math_fround($11_1 - $2_1)));
  return Math_fround($3_1 * $3_1) < Math_fround(9.99999905104687e-09) ? -1 : Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(0.0) - $0_1) * $12_1) + Math_fround(Math_fround(Math_fround(0.0) - $1_1) * $6_1)) + Math_fround($4_1 * Math_fround(Math_fround(0.0) - $2_1))) * $3_1) < Math_fround(0.0);
 }
 
 function $414($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0;
  $3_1 = HEAP32[$0_1 >> 2];
  $4_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  $2_1 = $0_1 + 12 | 0;
  $6_1 = HEAPF32[$1_1 + 8 >> 2];
  $7_1 = HEAPF32[$1_1 + 4 >> 2];
  $8_1 = HEAPF32[$1_1 >> 2];
  label$1 : {
   while (1) {
    if (($4_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    $9_1 = HEAPF32[$2_1 >> 2];
    $10_1 = $2_1 - 4 | 0;
    $11_1 = $2_1 - 8 | 0;
    $2_1 = $2_1 + 16 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (!($149(Math_fround($8_1 - HEAPF32[$11_1 >> 2]), Math_fround($7_1 - HEAPF32[$10_1 >> 2]), Math_fround($6_1 - $9_1)) <= HEAPF32[$0_1 + 308 >> 2])) {
     continue
    }
    break;
   };
   $4_1 = $5_1 - 1 | 0;
  }
  $2_1 = 0;
  if (!(HEAPF32[$1_1 + 12 >> 2] != HEAPF32[$0_1 + 304 >> 2] | HEAPF32[$0_1 + 300 >> 2] != $6_1 | HEAPF32[$0_1 + 296 >> 2] != $7_1)) {
   $2_1 = HEAPF32[$0_1 + 292 >> 2] == $8_1
  }
  return ($4_1 | 0) < ($3_1 | 0) | $2_1;
 }
 
 function $415($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = 0, $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = 0, $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = Math_fround(0);
  $5_1 = global$0 - 512 | 0;
  global$0 = $5_1;
  HEAP32[$0_1 + 56 >> 2] = 0;
  $4_1 = $5_1 + 472 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$5_1 + 464 >> 2] = 0;
  HEAP32[$5_1 + 468 >> 2] = 0;
  $6_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  $8_1 = $5_1 + 408 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $4_1;
  $6_1 = $1_1 + 24 | 0;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  $8_1 = $5_1 + 424 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $4_1;
  $6_1 = $1_1 + 40 | 0;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  $8_1 = $5_1 + 440 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $4_1;
  $6_1 = $1_1 + 56 | 0;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  $18_1 = $5_1 + 456 | 0;
  $8_1 = $18_1;
  HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$5_1 + 400 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 404 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$5_1 + 416 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$5_1 + 420 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$5_1 + 432 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$5_1 + 436 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$5_1 + 448 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$5_1 + 452 >> 2] = $4_1;
  $6_1 = $1_1 + 120 | 0;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  $13_1 = $5_1 + 392 | 0;
  $8_1 = $13_1;
  HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $4_1;
  $6_1 = $1_1 + 72 | 0;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  $8_1 = $5_1 + 344 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $4_1;
  $6_1 = $1_1 + 88 | 0;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  $8_1 = $5_1 + 360 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $4_1;
  $6_1 = $1_1 + 104 | 0;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  $8_1 = $5_1 + 376 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 68 >> 2];
  HEAP32[$5_1 + 336 >> 2] = HEAP32[$1_1 + 64 >> 2];
  HEAP32[$5_1 + 340 >> 2] = $4_1;
  $6_1 = $1_1 + 80 | 0;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$5_1 + 352 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 356 >> 2] = $4_1;
  $6_1 = $1_1 + 96 | 0;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$5_1 + 368 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 372 >> 2] = $4_1;
  $6_1 = $1_1 + 112 | 0;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$5_1 + 384 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 388 >> 2] = $4_1;
  $6_1 = $5_1 + 388 | 0;
  $14_1 = HEAPF32[$6_1 >> 2];
  $4_1 = $5_1 + 452 | 0;
  $10_1 = HEAPF32[$4_1 >> 2];
  $12_1 = HEAPF32[$5_1 + 384 >> 2];
  $11_1 = HEAPF32[$5_1 + 448 >> 2];
  $9_1 = HEAPF32[$18_1 >> 2];
  $7_1 = HEAPF32[$13_1 >> 2];
  $41_1 = Math_fround(Math_fround($9_1 + $7_1) * Math_fround(.5));
  HEAPF32[$18_1 >> 2] = $9_1 - $41_1;
  $42_1 = Math_fround(Math_fround($10_1 + $14_1) * Math_fround(.5));
  HEAPF32[$4_1 >> 2] = $10_1 - $42_1;
  $43_1 = Math_fround(Math_fround($11_1 + $12_1) * Math_fround(.5));
  HEAPF32[$5_1 + 448 >> 2] = $11_1 - $43_1;
  HEAPF32[$13_1 >> 2] = $7_1 - $41_1;
  HEAPF32[$6_1 >> 2] = $14_1 - $42_1;
  HEAPF32[$5_1 + 384 >> 2] = $12_1 - $43_1;
  $6_1 = HEAP32[$0_1 + 28 >> 2];
  label$1 : {
   if (HEAP32[$6_1 + 4 >> 2] - 17 >>> 0 >= 2) {
    $16_1 = HEAP32[$0_1 + 32 >> 2];
    break label$1;
   }
   $16_1 = HEAP32[$0_1 + 32 >> 2];
   $44_1 = HEAP32[$16_1 + 4 >> 2] - 17 >>> 0 < 2;
  }
  $52_1 = $1_1 - -64 | 0;
  HEAP32[$0_1 + 68 >> 2] = 0;
  HEAP32[$0_1 + 60 >> 2] = -1;
  HEAP32[$0_1 + 64 >> 2] = 0;
  $4_1 = $0_1 + 12 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $19_1 = $0_1 + 4 | 0;
  $4_1 = $19_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 1065353216;
  $11_1 = HEAPF32[$0_1 + 44 >> 2];
  $13_1 = HEAPU8[$0_1 + 52 | 0];
  $9_1 = HEAPF32[$0_1 + 48 >> 2];
  HEAP32[$5_1 + 128 >> 2] = 0;
  HEAP32[$5_1 + 132 >> 2] = 0;
  HEAP32[$5_1 + 120 >> 2] = 1065353216;
  HEAP32[$5_1 + 124 >> 2] = 0;
  $416($6_1, $5_1 + 400 | 0, $16_1, $5_1 + 336 | 0, $5_1 + 120 | 0, $44_1, $5_1 + 88 | 0, $5_1 + 72 | 0, $5_1 + 104 | 0);
  $37_1 = $5_1 + 112 | 0;
  $6_1 = $37_1;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  $45_1 = $5_1 + 32 | 0;
  $8_1 = $45_1;
  HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $4_1;
  $46_1 = $5_1 + 96 | 0;
  $6_1 = $46_1;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  $8_1 = $5_1 + 48 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $4_1;
  $47_1 = $5_1 + 80 | 0;
  $6_1 = $47_1;
  $4_1 = HEAP32[$6_1 + 4 >> 2];
  $8_1 = $5_1 - -64 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $4_1;
  HEAP32[$5_1 + 328 >> 2] = 0;
  $4_1 = HEAP32[$5_1 + 108 >> 2];
  HEAP32[$5_1 + 24 >> 2] = HEAP32[$5_1 + 104 >> 2];
  HEAP32[$5_1 + 28 >> 2] = $4_1;
  $4_1 = HEAP32[$5_1 + 92 >> 2];
  HEAP32[$5_1 + 40 >> 2] = HEAP32[$5_1 + 88 >> 2];
  HEAP32[$5_1 + 44 >> 2] = $4_1;
  $4_1 = HEAP32[$5_1 + 76 >> 2];
  HEAP32[$5_1 + 56 >> 2] = HEAP32[$5_1 + 72 >> 2];
  HEAP32[$5_1 + 60 >> 2] = $4_1;
  $3($5_1 + 136 | 0, $5_1 + 24 | 0, 48);
  HEAP32[$5_1 + 132 >> 2] = 0;
  $7_1 = Math_fround(-HEAPF32[$37_1 >> 2]);
  HEAPF32[$5_1 + 128 >> 2] = $7_1;
  $15_1 = Math_fround(-HEAPF32[$5_1 + 108 >> 2]);
  HEAPF32[$5_1 + 124 >> 2] = $15_1;
  $17_1 = Math_fround(-HEAPF32[$5_1 + 104 >> 2]);
  HEAPF32[$5_1 + 120 >> 2] = $17_1;
  $36_1 = $13_1 ? Math_fround(0.0) : $9_1;
  $32_1 = Math_fround(($13_1 ? Math_fround(0.0) : $11_1) + $36_1);
  $33_1 = $5_1 + 232 | 0;
  $48_1 = $5_1 + 56 | 0;
  $49_1 = $5_1 + 40 | 0;
  $16_1 = $5_1 + 184 | 0;
  $23_1 = -2;
  $18_1 = 1001;
  label$3 : {
   label$4 : {
    while (1) {
     $18_1 = $18_1 - 1 | 0;
     if (!$18_1) {
      $4_1 = $23_1;
      break label$4;
     }
     $416(HEAP32[$0_1 + 28 >> 2], $5_1 + 400 | 0, HEAP32[$0_1 + 32 >> 2], $5_1 + 336 | 0, $5_1 + 120 | 0, $44_1, $5_1 + 88 | 0, $5_1 + 72 | 0, $5_1 + 104 | 0);
     label$7 : {
      if (Math_fround(Math_fround(Math_fround(HEAPF32[$5_1 + 104 >> 2] * $17_1) + Math_fround(HEAPF32[$5_1 + 108 >> 2] * $15_1)) + Math_fround(HEAPF32[$5_1 + 112 >> 2] * $7_1)) < Math_fround(0.0)) {
       break label$7
      }
      $4_1 = HEAP32[$5_1 + 92 >> 2];
      HEAP32[$49_1 >> 2] = HEAP32[$5_1 + 88 >> 2];
      HEAP32[$49_1 + 4 >> 2] = $4_1;
      $4_1 = HEAP32[$5_1 + 76 >> 2];
      HEAP32[$48_1 >> 2] = HEAP32[$5_1 + 72 >> 2];
      HEAP32[$48_1 + 4 >> 2] = $4_1;
      $4_1 = HEAP32[$37_1 + 4 >> 2];
      HEAP32[$45_1 >> 2] = HEAP32[$37_1 >> 2];
      HEAP32[$45_1 + 4 >> 2] = $4_1;
      $4_1 = HEAP32[$46_1 + 4 >> 2];
      $6_1 = $49_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$46_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $4_1;
      $4_1 = HEAP32[$47_1 + 4 >> 2];
      $6_1 = $48_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$47_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $4_1;
      $4_1 = HEAP32[$5_1 + 108 >> 2];
      HEAP32[$5_1 + 24 >> 2] = HEAP32[$5_1 + 104 >> 2];
      HEAP32[$5_1 + 28 >> 2] = $4_1;
      $4_1 = HEAP32[$5_1 + 328 >> 2] + 1 | 0;
      HEAP32[$5_1 + 328 >> 2] = $4_1;
      $3(($5_1 + 136 | 0) + Math_imul($4_1, 48) | 0, $5_1 + 24 | 0, 48);
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          $4_1 = HEAP32[$5_1 + 328 >> 2];
          switch ($4_1 - 1 | 0) {
          case 1:
           break label$10;
          case 0:
           break label$11;
          default:
           break label$9;
          };
         }
         $6_1 = $16_1 + 8 | 0;
         $4_1 = HEAP32[$6_1 + 4 >> 2];
         $8_1 = $5_1 + 488 | 0;
         HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
         HEAP32[$8_1 + 4 >> 2] = $4_1;
         $20_1 = HEAPF32[$8_1 >> 2];
         HEAPF32[$8_1 >> 2] = -$20_1;
         $4_1 = HEAP32[$16_1 + 4 >> 2];
         HEAP32[$5_1 + 480 >> 2] = HEAP32[$16_1 >> 2];
         HEAP32[$5_1 + 484 >> 2] = $4_1;
         HEAP32[$5_1 + 508 >> 2] = 0;
         $14_1 = HEAPF32[$5_1 + 480 >> 2];
         HEAPF32[$5_1 + 480 >> 2] = -$14_1;
         $10_1 = Math_fround(HEAPF32[$5_1 + 144 >> 2] - HEAPF32[$5_1 + 192 >> 2]);
         HEAPF32[$5_1 + 504 >> 2] = $10_1;
         $12_1 = Math_fround(HEAPF32[$5_1 + 136 >> 2] - HEAPF32[$5_1 + 184 >> 2]);
         HEAPF32[$5_1 + 496 >> 2] = $12_1;
         $11_1 = Math_fround(HEAPF32[$5_1 + 140 >> 2] - HEAPF32[$5_1 + 188 >> 2]);
         HEAPF32[$5_1 + 500 >> 2] = $11_1;
         $9_1 = HEAPF32[$5_1 + 484 >> 2];
         $7_1 = Math_fround(-$9_1);
         HEAPF32[$5_1 + 484 >> 2] = $7_1;
         $13_1 = 1;
         $21_1 = Math_fround(Math_fround(Math_fround($11_1 * $7_1) - Math_fround($12_1 * $14_1)) - Math_fround($10_1 * $20_1));
         if ($21_1 > Math_fround(0.0)) {
          $24_1 = Math_fround(Math_fround($11_1 * $14_1) - Math_fround($12_1 * $9_1));
          $7_1 = Math_fround(Math_fround($10_1 * $9_1) - Math_fround($11_1 * $20_1));
          $9_1 = Math_fround($7_1 * $7_1);
          $7_1 = Math_fround(Math_fround($12_1 * $20_1) - Math_fround($10_1 * $14_1));
          if (Math_fround(Math_abs(Math_fround(Math_fround($24_1 * $24_1) + Math_fround($9_1 + Math_fround($7_1 * $7_1))))) < Math_fround(1.1920928955078125e-07)) {
           break label$8
          }
         }
         if (!(Math_fround(Math_abs($21_1)) < Math_fround(1.1920928955078125e-07) ? 0 : !($21_1 < Math_fround(0.0)))) {
          $3($5_1 + 136 | 0, $16_1, 48);
          $4_1 = HEAP32[$8_1 + 4 >> 2];
          $6_1 = $5_1 + 128 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $4_1;
          $13_1 = 0;
          HEAP32[$5_1 + 328 >> 2] = 0;
          $4_1 = HEAP32[$5_1 + 484 >> 2];
          HEAP32[$5_1 + 120 >> 2] = HEAP32[$5_1 + 480 >> 2];
          HEAP32[$5_1 + 124 >> 2] = $4_1;
          break label$8;
         }
         $417($5_1 + 496 | 0, $5_1 + 480 | 0, $5_1 + 496 | 0, $5_1 + 120 | 0);
         $13_1 = 0;
         break label$8;
        }
        $13_1 = $418($5_1 + 136 | 0, $5_1 + 120 | 0);
        break label$8;
       }
       $27_1 = ($5_1 + 136 | 0) + Math_imul($4_1, 48) | 0;
       if (Math_fround(Math_abs($419($27_1, $33_1, $16_1, $5_1 + 136 | 0))) < Math_fround(1.1920928955078125e-07)) {
        $6_1 = -1;
        break label$3;
       }
       $4_1 = 0;
       if (Math_fround(Math_abs($419(22692, $27_1, $33_1, $16_1))) < Math_fround(1.1920928955078125e-07)) {
        break label$4
       }
       if (Math_fround(Math_abs($419(22692, $27_1, $16_1, $5_1 + 136 | 0))) < Math_fround(1.1920928955078125e-07)) {
        break label$4
       }
       if (Math_fround(Math_abs($419(22692, $27_1, $33_1, $5_1 + 136 | 0))) < Math_fround(1.1920928955078125e-07)) {
        break label$4
       }
       if (Math_fround(Math_abs($419(22692, $33_1, $16_1, $5_1 + 136 | 0))) < Math_fround(1.1920928955078125e-07)) {
        break label$4
       }
       $34_1 = HEAPF32[$27_1 + 4 >> 2];
       $22_1 = Math_fround(HEAPF32[$5_1 + 236 >> 2] - $34_1);
       $15_1 = HEAPF32[$27_1 >> 2];
       $26_1 = Math_fround(HEAPF32[$5_1 + 136 >> 2] - $15_1);
       $9_1 = Math_fround(HEAPF32[$5_1 + 232 >> 2] - $15_1);
       $28_1 = Math_fround(HEAPF32[$5_1 + 140 >> 2] - $34_1);
       $38_1 = Math_fround(Math_fround($22_1 * $26_1) - Math_fround($9_1 * $28_1));
       $17_1 = HEAPF32[$27_1 + 8 >> 2];
       $21_1 = Math_fround(HEAPF32[$5_1 + 144 >> 2] - $17_1);
       $7_1 = Math_fround(HEAPF32[$5_1 + 240 >> 2] - $17_1);
       $39_1 = Math_fround(Math_fround($9_1 * $21_1) - Math_fround($7_1 * $26_1));
       $40_1 = Math_fround(Math_fround($7_1 * $28_1) - Math_fround($22_1 * $21_1));
       $29_1 = Math_fround(HEAPF32[$5_1 + 184 >> 2] - $15_1);
       $35_1 = Math_fround($22_1 * $29_1);
       $30_1 = Math_fround(HEAPF32[$5_1 + 188 >> 2] - $34_1);
       $25_1 = Math_fround($9_1 * $30_1);
       $31_1 = Math_fround(HEAPF32[$5_1 + 192 >> 2] - $17_1);
       $20_1 = Math_fround($9_1 * $31_1);
       $24_1 = Math_fround($7_1 * $29_1);
       $14_1 = Math_fround($7_1 * $30_1);
       $10_1 = Math_fround($22_1 * $31_1);
       $12_1 = Math_fround(Math_fround($29_1 * $28_1) - Math_fround($30_1 * $26_1));
       $11_1 = Math_fround(Math_fround($30_1 * $21_1) - Math_fround($31_1 * $28_1));
       $53_1 = Math_fround($9_1 * $11_1);
       $9_1 = Math_fround(Math_fround($31_1 * $26_1) - Math_fround($29_1 * $21_1));
       $7_1 = Math_fround(Math_fround($7_1 * $12_1) + Math_fround($53_1 + Math_fround($22_1 * $9_1)));
       $8_1 = 0;
       label$15 : {
        if (Math_fround(Math_abs($7_1)) < Math_fround(1.1920928955078125e-07)) {
         break label$15
        }
        $8_1 = -1;
        if ($7_1 < Math_fround(0.0)) {
         break label$15
        }
        $8_1 = 1;
       }
       $25_1 = Math_fround($25_1 - $35_1);
       $24_1 = Math_fround($24_1 - $20_1);
       $10_1 = Math_fround($10_1 - $14_1);
       $7_1 = Math_fround(Math_fround($31_1 * $38_1) + Math_fround(Math_fround($29_1 * $40_1) + Math_fround($30_1 * $39_1)));
       label$16 : {
        if (Math_fround(Math_abs($7_1)) < Math_fround(1.1920928955078125e-07)) {
         break label$16
        }
        $4_1 = -1;
        if ($7_1 < Math_fround(0.0)) {
         break label$16
        }
        $4_1 = 1;
       }
       $14_1 = Math_fround(-$34_1);
       $50_1 = 0;
       $7_1 = Math_fround(Math_fround(Math_fround($26_1 * $10_1) + Math_fround($24_1 * $28_1)) + Math_fround($25_1 * $21_1));
       $6_1 = 0;
       label$17 : {
        if (Math_fround(Math_abs($7_1)) < Math_fround(1.1920928955078125e-07)) {
         break label$17
        }
        $6_1 = -1;
        if ($7_1 < Math_fround(0.0)) {
         break label$17
        }
        $6_1 = 1;
       }
       $7_1 = Math_fround(Math_fround(Math_fround($9_1 * $14_1) - Math_fround($15_1 * $11_1)) - Math_fround($17_1 * $12_1));
       label$18 : {
        if (Math_fround(Math_abs($7_1)) < Math_fround(1.1920928955078125e-07)) {
         break label$18
        }
        $50_1 = -1;
        if ($7_1 < Math_fround(0.0)) {
         break label$18
        }
        $50_1 = 1;
       }
       $51_1 = 0;
       $7_1 = Math_fround(Math_fround(Math_fround($39_1 * $14_1) - Math_fround($15_1 * $40_1)) - Math_fround($17_1 * $38_1));
       $13_1 = 0;
       label$19 : {
        if (Math_fround(Math_abs($7_1)) < Math_fround(1.1920928955078125e-07)) {
         break label$19
        }
        $13_1 = -1;
        if ($7_1 < Math_fround(0.0)) {
         break label$19
        }
        $13_1 = 1;
       }
       $7_1 = Math_fround(Math_fround(Math_fround($24_1 * $14_1) - Math_fround($15_1 * $10_1)) - Math_fround($17_1 * $25_1));
       label$20 : {
        if (Math_fround(Math_abs($7_1)) < Math_fround(1.1920928955078125e-07)) {
         break label$20
        }
        $51_1 = -1;
        if ($7_1 < Math_fround(0.0)) {
         break label$20
        }
        $51_1 = 1;
       }
       $8_1 = ($8_1 | 0) != ($50_1 | 0);
       if (!($8_1 | ($4_1 | 0) != ($13_1 | 0) | ($6_1 | 0) != ($51_1 | 0))) {
        $4_1 = 0;
        break label$4;
       }
       if (!$8_1) {
        label$23 : {
         if (($4_1 | 0) != ($13_1 | 0)) {
          $3($16_1, $5_1 + 136 | 0, 48);
          $4_1 = $5_1 + 136 | 0;
          break label$23;
         }
         $3($5_1 + 136 | 0, $16_1, 48);
         $4_1 = $16_1;
        }
        $3($4_1, $33_1, 48);
       }
       $3($33_1, $27_1, 48);
       HEAP32[$5_1 + 328 >> 2] = 2;
       $13_1 = $418($5_1 + 136 | 0, $5_1 + 120 | 0);
      }
      $6_1 = -1;
      $4_1 = 0;
      label$25 : {
       switch ($13_1 + 1 | 0) {
       case 0:
        break label$3;
       case 2:
        break label$4;
       default:
        break label$25;
       };
      }
      $17_1 = HEAPF32[$5_1 + 120 >> 2];
      $15_1 = HEAPF32[$5_1 + 124 >> 2];
      $7_1 = HEAPF32[$5_1 + 128 >> 2];
      if ($149($17_1, $15_1, $7_1) < Math_fround(1.1920928955078125e-07)) {
       break label$7
      }
      $4_1 = -1;
      $23_1 = Math_fround(Math_abs(Math_fround(Math_fround(Math_fround($17_1 * $17_1) + Math_fround($15_1 * $15_1)) + Math_fround($7_1 * $7_1)))) < Math_fround(1.1920928955078125e-07) ? -1 : $23_1;
      if (!$420($17_1, $15_1, $7_1)) {
       continue
      }
      break label$4;
     }
     break;
    };
    $4_1 = -1;
   }
   $6_1 = $4_1;
  }
  $409(HEAP32[$0_1 + 24 >> 2]);
  $9_1 = Math_fround(999999984306749440.0);
  $13_1 = $0_1 + 12 | 0;
  $8_1 = $0_1 + 8 | 0;
  $23_1 = 0;
  while (1) {
   $145($5_1 + 24 | 0, Math_fround(-HEAPF32[$0_1 + 4 >> 2]), Math_fround(-HEAPF32[$8_1 >> 2]), Math_fround(-HEAPF32[$13_1 >> 2]), $5_1 + 400 | 0);
   $145($5_1 + 496 | 0, HEAPF32[$0_1 + 4 >> 2], HEAPF32[$8_1 >> 2], HEAPF32[$13_1 >> 2], $5_1 + 336 | 0);
   $147($5_1 + 480 | 0, HEAP32[$0_1 + 28 >> 2], $5_1 + 24 | 0);
   $147($5_1 + 104 | 0, HEAP32[$0_1 + 32 >> 2], $5_1 + 496 | 0);
   $146($5_1 + 88 | 0, $5_1 + 400 | 0, HEAPF32[$5_1 + 480 >> 2], HEAPF32[$5_1 + 484 >> 2], HEAPF32[$5_1 + 488 >> 2]);
   $146($5_1 + 72 | 0, $5_1 + 336 | 0, HEAPF32[$5_1 + 104 >> 2], HEAPF32[$5_1 + 108 >> 2], HEAPF32[$5_1 + 112 >> 2]);
   label$27 : {
    if (!$44_1) {
     $15_1 = HEAPF32[$5_1 + 96 >> 2];
     $7_1 = HEAPF32[$5_1 + 80 >> 2];
     break label$27;
    }
    HEAP32[$5_1 + 80 >> 2] = 0;
    HEAP32[$5_1 + 96 >> 2] = 0;
    $15_1 = Math_fround(0.0);
    $7_1 = Math_fround(0.0);
   }
   HEAP32[$5_1 + 20 >> 2] = 0;
   $10_1 = Math_fround($15_1 - $7_1);
   HEAPF32[$5_1 + 16 >> 2] = $10_1;
   $12_1 = HEAPF32[$13_1 >> 2];
   $11_1 = Math_fround(HEAPF32[$5_1 + 92 >> 2] - HEAPF32[$5_1 + 76 >> 2]);
   HEAPF32[$5_1 + 12 >> 2] = $11_1;
   $7_1 = HEAPF32[$8_1 >> 2];
   $14_1 = Math_fround(HEAPF32[$5_1 + 88 >> 2] - HEAPF32[$5_1 + 72 >> 2]);
   HEAPF32[$5_1 + 8 >> 2] = $14_1;
   label$29 : {
    label$30 : {
     $7_1 = Math_fround(Math_fround(Math_fround($14_1 * HEAPF32[$0_1 + 4 >> 2]) + Math_fround($11_1 * $7_1)) + Math_fround($10_1 * $12_1));
     if (!(!($7_1 > Math_fround(0.0)) | !(Math_fround($7_1 * $7_1) > Math_fround($9_1 * HEAPF32[$1_1 + 128 >> 2])))) {
      HEAP32[$0_1 + 68 >> 2] = 10;
      break label$30;
     }
     if ($414(HEAP32[$0_1 + 24 >> 2], $5_1 + 8 | 0)) {
      $23_1 = 1;
      HEAP32[$0_1 + 68 >> 2] = 1;
      $16_1 = 0;
      break label$29;
     }
     $7_1 = Math_fround($9_1 - $7_1);
     if ($7_1 <= Math_fround($9_1 * Math_fround(9.999999974752427e-07))) {
      HEAP32[$0_1 + 68 >> 2] = $7_1 <= Math_fround(0.0) ? 2 : 11;
      break label$30;
     }
     $410(HEAP32[$0_1 + 24 >> 2], $5_1 + 8 | 0, $5_1 + 88 | 0, $5_1 + 72 | 0);
     $4_1 = HEAP32[$0_1 + 24 >> 2];
     if (!$411($4_1)) {
      HEAP32[$0_1 + 68 >> 2] = 3;
      break label$30;
     }
     $10_1 = HEAPF32[$4_1 + 288 >> 2];
     $12_1 = HEAPF32[$4_1 + 276 >> 2];
     $11_1 = HEAPF32[$4_1 + 280 >> 2];
     $14_1 = HEAPF32[$4_1 + 284 >> 2];
     $7_1 = $149($12_1, $11_1, $14_1);
     if ($7_1 < Math_fround(9.999999974752427e-07)) {
      HEAP32[$0_1 + 68 >> 2] = 6;
      HEAPF32[$0_1 + 16 >> 2] = $10_1;
      HEAPF32[$0_1 + 4 >> 2] = $12_1;
      HEAPF32[$13_1 >> 2] = $14_1;
      HEAPF32[$8_1 >> 2] = $11_1;
      break label$30;
     }
     label$36 : {
      if (Math_fround($9_1 - $7_1) <= Math_fround($9_1 * Math_fround(1.1920928955078125e-07))) {
       HEAP32[$0_1 + 68 >> 2] = 12;
       $23_1 = 1;
       $16_1 = 0;
       break label$36;
      }
      HEAPF32[$0_1 + 16 >> 2] = $10_1;
      HEAPF32[$0_1 + 4 >> 2] = $12_1;
      HEAPF32[$13_1 >> 2] = $14_1;
      HEAPF32[$8_1 >> 2] = $11_1;
      $4_1 = HEAP32[$0_1 + 64 >> 2];
      HEAP32[$0_1 + 64 >> 2] = $4_1 + 1;
      $16_1 = 0;
      if (($4_1 | 0) > 1e3) {
       break label$36
      }
      if (HEAP32[HEAP32[$0_1 + 24 >> 2] >> 2] != 4) {
       $16_1 = 1;
       break label$36;
      }
      HEAP32[$0_1 + 68 >> 2] = 13;
     }
     $9_1 = $7_1;
     break label$29;
    }
    $23_1 = 1;
    $16_1 = 0;
   }
   if ($16_1) {
    continue
   }
   break;
  };
  $4_1 = 0;
  label$39 : {
   if (!$23_1) {
    $26_1 = Math_fround(0.0);
    $15_1 = Math_fround(0.0);
    $17_1 = Math_fround(0.0);
    $22_1 = Math_fround(0.0);
    $18_1 = 0;
    $7_1 = Math_fround(0.0);
    break label$39;
   }
   $23_1 = HEAP32[$0_1 + 24 >> 2];
   $411($23_1);
   $13_1 = $19_1 + 8 | 0;
   $8_1 = HEAP32[$13_1 + 4 >> 2];
   $18_1 = $5_1 + 472 | 0;
   HEAP32[$18_1 >> 2] = HEAP32[$13_1 >> 2];
   HEAP32[$18_1 + 4 >> 2] = $8_1;
   $8_1 = HEAP32[$19_1 + 4 >> 2];
   HEAP32[$5_1 + 464 >> 2] = HEAP32[$19_1 >> 2];
   HEAP32[$5_1 + 468 >> 2] = $8_1;
   $24_1 = HEAPF32[$23_1 + 268 >> 2];
   $21_1 = HEAPF32[$23_1 + 264 >> 2];
   $14_1 = HEAPF32[$23_1 + 260 >> 2];
   $12_1 = HEAPF32[$0_1 + 4 >> 2];
   $11_1 = HEAPF32[$0_1 + 8 >> 2];
   $7_1 = HEAPF32[$0_1 + 12 >> 2];
   $10_1 = $149($12_1, $11_1, $7_1);
   if ($10_1 < Math_fround(9.999999974752427e-07)) {
    HEAP32[$0_1 + 68 >> 2] = 5
   }
   $16_1 = 1;
   $18_1 = $10_1 > Math_fround(1.4210854715202004e-14);
   label$42 : {
    if (!$18_1) {
     $16_1 = 2;
     $26_1 = Math_fround(0.0);
     $15_1 = Math_fround(0.0);
     $17_1 = Math_fround(0.0);
     $22_1 = Math_fround(0.0);
     $7_1 = Math_fround(0.0);
     break label$42;
    }
    $10_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10_1)));
    $22_1 = Math_fround($10_1 * HEAPF32[$5_1 + 464 >> 2]);
    HEAPF32[$5_1 + 464 >> 2] = $22_1;
    $17_1 = Math_fround($10_1 * HEAPF32[$5_1 + 468 >> 2]);
    HEAPF32[$5_1 + 468 >> 2] = $17_1;
    $15_1 = Math_fround($10_1 * HEAPF32[$5_1 + 472 >> 2]);
    HEAPF32[$5_1 + 472 >> 2] = $15_1;
    $9_1 = Math_fround($36_1 / Math_fround(Math_sqrt($9_1)));
    $24_1 = Math_fround(Math_fround($9_1 * $7_1) + $24_1);
    $21_1 = Math_fround(Math_fround($9_1 * $11_1) + $21_1);
    $14_1 = Math_fround(Math_fround($9_1 * $12_1) + $14_1);
    $26_1 = HEAPF32[$5_1 + 476 >> 2];
    $7_1 = Math_fround(Math_fround(Math_fround(1.0) / $10_1) - $32_1);
   }
   HEAP32[$0_1 + 60 >> 2] = $16_1;
  }
  if (!(!HEAP32[$0_1 + 68 >> 2] | (!HEAP32[$0_1 + 72 >> 2] | !HEAP32[$0_1 + 20 >> 2]))) {
   $4_1 = Math_fround($32_1 + $7_1) < Math_fround(1.0000000474974513e-03)
  }
  label$45 : {
   label$46 : {
    if ($18_1 ^ 1 ? 0 : !(!$6_1 | $4_1)) {
     break label$46
    }
    $6_1 = HEAP32[$0_1 + 20 >> 2];
    if (!$6_1) {
     break label$46
    }
    $4_1 = $19_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    HEAP32[$19_1 >> 2] = 0;
    HEAP32[$19_1 + 4 >> 2] = 0;
    $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 8 >> 2]]($6_1, HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 28 >> 2], HEAP32[$0_1 + 32 >> 2], $5_1 + 400 | 0, $5_1 + 336 | 0, $19_1, $5_1 + 24 | 0, $5_1 + 496 | 0, $3_1) | 0;
    $35_1 = HEAPF32[$0_1 + 4 >> 2];
    $25_1 = HEAPF32[$0_1 + 8 >> 2];
    $20_1 = HEAPF32[$0_1 + 12 >> 2];
    $11_1 = $149($35_1, $25_1, $20_1);
    if ($11_1 == Math_fround(0.0)) {
     break label$46
    }
    if ($3_1) {
     HEAP32[$5_1 + 492 >> 2] = 0;
     $10_1 = Math_fround(HEAPF32[$5_1 + 504 >> 2] - HEAPF32[$5_1 + 32 >> 2]);
     HEAPF32[$5_1 + 488 >> 2] = $10_1;
     $12_1 = Math_fround(HEAPF32[$5_1 + 500 >> 2] - HEAPF32[$5_1 + 28 >> 2]);
     HEAPF32[$5_1 + 484 >> 2] = $12_1;
     $9_1 = Math_fround(HEAPF32[$5_1 + 496 >> 2] - HEAPF32[$5_1 + 24 >> 2]);
     HEAPF32[$5_1 + 480 >> 2] = $9_1;
     $9_1 = $149($9_1, $12_1, $10_1);
     if ($9_1 <= Math_fround(1.4210854715202004e-14)) {
      $4_1 = $19_1 + 8 | 0;
      $3_1 = HEAP32[$4_1 + 4 >> 2];
      $6_1 = $5_1 + 488 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $3_1;
      $3_1 = HEAP32[$19_1 + 4 >> 2];
      HEAP32[$5_1 + 480 >> 2] = HEAP32[$19_1 >> 2];
      HEAP32[$5_1 + 484 >> 2] = $3_1;
      $9_1 = $11_1;
     }
     if ($9_1 > Math_fround(1.4210854715202004e-14)) {
      $167($5_1 + 480 | 0, Math_fround(Math_sqrt($9_1)));
      $10_1 = HEAPF32[$5_1 + 504 >> 2];
      $25_1 = HEAPF32[$5_1 + 32 >> 2];
      $12_1 = HEAPF32[$5_1 + 500 >> 2];
      $20_1 = HEAPF32[$5_1 + 28 >> 2];
      $11_1 = HEAPF32[$5_1 + 496 >> 2];
      $9_1 = HEAPF32[$5_1 + 24 >> 2];
      HEAP32[$0_1 + 60 >> 2] = 3;
      $4_1 = 1;
      $9_1 = Math_fround(-$137(Math_fround($9_1 - $11_1), Math_fround($20_1 - $12_1), Math_fround($25_1 - $10_1)));
      if (!(!($9_1 < $7_1) & $18_1)) {
       $6_1 = $5_1 + 488 | 0;
       $3_1 = HEAP32[$6_1 + 4 >> 2];
       $8_1 = $5_1 + 472 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $3_1;
       $3_1 = HEAP32[$5_1 + 484 >> 2];
       HEAP32[$5_1 + 464 >> 2] = HEAP32[$5_1 + 480 >> 2];
       HEAP32[$5_1 + 468 >> 2] = $3_1;
       $14_1 = $11_1;
       $21_1 = $12_1;
       $24_1 = $10_1;
       $7_1 = $9_1;
       break label$45;
      }
      HEAP32[$0_1 + 60 >> 2] = 8;
      break label$45;
     }
     HEAP32[$0_1 + 60 >> 2] = 9;
     break label$46;
    }
    if (!($11_1 > Math_fround(0.0))) {
     break label$46
    }
    $8_1 = $0_1;
    $10_1 = HEAPF32[$5_1 + 496 >> 2];
    $12_1 = HEAPF32[$5_1 + 500 >> 2];
    $11_1 = HEAPF32[$5_1 + 504 >> 2];
    $9_1 = Math_fround($137(Math_fround(HEAPF32[$5_1 + 24 >> 2] - $10_1), Math_fround(HEAPF32[$5_1 + 28 >> 2] - $12_1), Math_fround(HEAPF32[$5_1 + 32 >> 2] - $11_1)) - $32_1);
    if (!($9_1 < $7_1) & $18_1) {
     $3_1 = 5
    } else {
     $4_1 = $19_1 + 8 | 0;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $6_1 = $5_1 + 472 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $3_1;
     $3_1 = HEAP32[$19_1 + 4 >> 2];
     HEAP32[$5_1 + 464 >> 2] = HEAP32[$19_1 >> 2];
     HEAP32[$5_1 + 468 >> 2] = $3_1;
     $24_1 = Math_fround(Math_fround($36_1 * $20_1) + $11_1);
     $21_1 = Math_fround(Math_fround($36_1 * $25_1) + $12_1);
     $14_1 = Math_fround(Math_fround($36_1 * $35_1) + $10_1);
     $153($5_1 + 464 | 0);
     $7_1 = $9_1;
     $3_1 = 6;
    }
    HEAP32[$8_1 + 60 >> 2] = $3_1;
    $4_1 = 1;
    break label$45;
   }
   $4_1 = $18_1;
  }
  if (!(!$4_1 | (HEAPF32[$1_1 + 128 >> 2] > Math_fround($7_1 * $7_1) ? 0 : !($7_1 < Math_fround(0.0))))) {
   $3_1 = HEAP32[$5_1 + 468 >> 2];
   HEAP32[$19_1 >> 2] = HEAP32[$5_1 + 464 >> 2];
   HEAP32[$19_1 + 4 >> 2] = $3_1;
   HEAPF32[$0_1 + 56 >> 2] = $7_1;
   $6_1 = $5_1 + 472 | 0;
   $3_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $19_1 + 8 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $3_1;
   $145($5_1 + 136 | 0, Math_fround(-$22_1), Math_fround(-$17_1), Math_fround(-$15_1), $5_1 + 400 | 0);
   $145($5_1 + 24 | 0, $22_1, $17_1, $15_1, $5_1 + 336 | 0);
   $147($5_1 + 496 | 0, HEAP32[$0_1 + 28 >> 2], $5_1 + 136 | 0);
   $147($5_1 + 480 | 0, HEAP32[$0_1 + 32 >> 2], $5_1 + 24 | 0);
   $146($5_1 + 120 | 0, $5_1 + 400 | 0, HEAPF32[$5_1 + 496 >> 2], HEAPF32[$5_1 + 500 >> 2], HEAPF32[$5_1 + 504 >> 2]);
   $146($5_1 + 104 | 0, $5_1 + 336 | 0, HEAPF32[$5_1 + 480 >> 2], HEAPF32[$5_1 + 484 >> 2], HEAPF32[$5_1 + 488 >> 2]);
   $28_1 = HEAPF32[$5_1 + 112 >> 2];
   $29_1 = HEAPF32[$5_1 + 128 >> 2];
   $30_1 = HEAPF32[$5_1 + 104 >> 2];
   $31_1 = HEAPF32[$5_1 + 120 >> 2];
   $34_1 = HEAPF32[$5_1 + 108 >> 2];
   $38_1 = HEAPF32[$5_1 + 124 >> 2];
   $145($5_1 + 136 | 0, HEAPF32[$5_1 + 464 >> 2], HEAPF32[$5_1 + 468 >> 2], HEAPF32[$6_1 >> 2], $5_1 + 400 | 0);
   $145($5_1 + 24 | 0, Math_fround(-HEAPF32[$5_1 + 464 >> 2]), Math_fround(-HEAPF32[$5_1 + 468 >> 2]), Math_fround(-HEAPF32[$6_1 >> 2]), $5_1 + 336 | 0);
   $147($5_1 + 496 | 0, HEAP32[$0_1 + 28 >> 2], $5_1 + 136 | 0);
   $147($5_1 + 480 | 0, HEAP32[$0_1 + 32 >> 2], $5_1 + 24 | 0);
   $146($5_1 + 120 | 0, $5_1 + 400 | 0, HEAPF32[$5_1 + 496 >> 2], HEAPF32[$5_1 + 500 >> 2], HEAPF32[$5_1 + 504 >> 2]);
   $146($5_1 + 104 | 0, $5_1 + 336 | 0, HEAPF32[$5_1 + 480 >> 2], HEAPF32[$5_1 + 484 >> 2], HEAPF32[$5_1 + 488 >> 2]);
   $39_1 = HEAPF32[$5_1 + 112 >> 2];
   $40_1 = HEAPF32[$5_1 + 128 >> 2];
   $35_1 = HEAPF32[$5_1 + 108 >> 2];
   $25_1 = HEAPF32[$5_1 + 124 >> 2];
   $20_1 = HEAPF32[$5_1 + 104 >> 2];
   $10_1 = HEAPF32[$5_1 + 120 >> 2];
   $12_1 = HEAPF32[$5_1 + 464 >> 2];
   $11_1 = Math_fround(-HEAPF32[$5_1 + 468 >> 2]);
   $9_1 = HEAPF32[$6_1 >> 2];
   $145($5_1 + 136 | 0, Math_fround(-$12_1), $11_1, Math_fround(-$9_1), $1_1);
   $145($5_1 + 24 | 0, HEAPF32[$5_1 + 464 >> 2], HEAPF32[$5_1 + 468 >> 2], HEAPF32[$6_1 >> 2], $52_1);
   $147($5_1 + 496 | 0, HEAP32[$0_1 + 28 >> 2], $5_1 + 136 | 0);
   $147($5_1 + 480 | 0, HEAP32[$0_1 + 32 >> 2], $5_1 + 24 | 0);
   $146($5_1 + 120 | 0, $5_1 + 400 | 0, HEAPF32[$5_1 + 496 >> 2], HEAPF32[$5_1 + 500 >> 2], HEAPF32[$5_1 + 504 >> 2]);
   $146($5_1 + 104 | 0, $5_1 + 336 | 0, HEAPF32[$5_1 + 480 >> 2], HEAPF32[$5_1 + 484 >> 2], HEAPF32[$5_1 + 488 >> 2]);
   $20_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($25_1 - $35_1) * $11_1) - Math_fround($12_1 * Math_fround($10_1 - $20_1))) - Math_fround($9_1 * Math_fround($40_1 - $39_1))) - $32_1);
   $10_1 = HEAPF32[$5_1 + 464 >> 2];
   $12_1 = HEAPF32[$5_1 + 468 >> 2];
   $9_1 = HEAPF32[$6_1 >> 2];
   $11_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$5_1 + 120 >> 2] - HEAPF32[$5_1 + 104 >> 2]) * $10_1) + Math_fround(Math_fround(HEAPF32[$5_1 + 124 >> 2] - HEAPF32[$5_1 + 108 >> 2]) * $12_1)) + Math_fround(Math_fround(HEAPF32[$5_1 + 128 >> 2] - HEAPF32[$5_1 + 112 >> 2]) * $9_1)) - $32_1);
   if ($20_1 > $11_1) {
    HEAP32[$0_1 + 60 >> 2] = 10;
    HEAPF32[$5_1 + 472 >> 2] = -$9_1;
    HEAPF32[$5_1 + 468 >> 2] = -$12_1;
    HEAPF32[$5_1 + 464 >> 2] = -$10_1;
   }
   $9_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($31_1 - $30_1) * $22_1) + Math_fround(Math_fround($38_1 - $34_1) * $17_1)) + Math_fround(Math_fround($29_1 - $28_1) * $15_1)) - $32_1);
   if (!(!($9_1 > $7_1) | !($9_1 > $20_1) | (!($9_1 > $11_1) | $149($22_1, $17_1, $15_1) == Math_fround(0.0)))) {
    HEAPF32[$5_1 + 476 >> 2] = $26_1;
    HEAPF32[$5_1 + 472 >> 2] = $15_1;
    HEAPF32[$5_1 + 468 >> 2] = $17_1;
    HEAPF32[$5_1 + 464 >> 2] = $22_1;
    $7_1 = $9_1;
   }
   HEAP32[$5_1 + 148 >> 2] = 0;
   HEAPF32[$5_1 + 144 >> 2] = $41_1 + $24_1;
   HEAPF32[$5_1 + 140 >> 2] = $42_1 + $21_1;
   HEAPF32[$5_1 + 136 >> 2] = $43_1 + $14_1;
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $5_1 + 464 | 0, $5_1 + 136 | 0, $7_1);
  }
  global$0 = $5_1 + 512 | 0;
 }
 
 function $416($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0);
  $9_1 = global$0 - 80 | 0;
  global$0 = $9_1;
  $13_1 = $4_1 + 4 | 0;
  $14_1 = $4_1 + 8 | 0;
  $145($9_1 - -64 | 0, HEAPF32[$4_1 >> 2], HEAPF32[$13_1 >> 2], HEAPF32[$14_1 >> 2], $1_1);
  $145($9_1 + 48 | 0, Math_fround(-HEAPF32[$4_1 >> 2]), Math_fround(-HEAPF32[$13_1 >> 2]), Math_fround(-HEAPF32[$14_1 >> 2]), $3_1);
  $147($9_1 + 32 | 0, $0_1, $9_1 - -64 | 0);
  $147($9_1 + 16 | 0, $2_1, $9_1 + 48 | 0);
  $10_1 = HEAPF32[$9_1 + 24 >> 2];
  $11_1 = HEAPF32[$9_1 + 20 >> 2];
  $12_1 = HEAPF32[$9_1 + 16 >> 2];
  $146($9_1, $1_1, HEAPF32[$9_1 + 32 >> 2], HEAPF32[$9_1 + 36 >> 2], HEAPF32[$9_1 + 40 >> 2]);
  $0_1 = $9_1 + 8 | 0;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = $6_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$9_1 + 4 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $1_1;
  $146($9_1, $3_1, $12_1, $11_1, $10_1);
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = $7_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $0_1 = HEAP32[$9_1 + 4 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $0_1;
  if ($5_1) {
   HEAP32[$6_1 + 8 >> 2] = 0;
   HEAP32[$7_1 + 8 >> 2] = 0;
   $10_1 = Math_fround(0.0);
  } else {
   $10_1 = HEAPF32[$7_1 + 8 >> 2]
  }
  $11_1 = HEAPF32[$7_1 >> 2];
  $12_1 = HEAPF32[$6_1 >> 2];
  $15_1 = HEAPF32[$7_1 + 4 >> 2];
  $16_1 = HEAPF32[$6_1 + 4 >> 2];
  $17_1 = HEAPF32[$6_1 + 8 >> 2];
  HEAP32[$8_1 + 12 >> 2] = 0;
  HEAPF32[$8_1 + 8 >> 2] = $17_1 - $10_1;
  HEAPF32[$8_1 + 4 >> 2] = $16_1 - $15_1;
  HEAPF32[$8_1 >> 2] = $12_1 - $11_1;
  global$0 = $9_1 + 80 | 0;
 }
 
 function $417($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $421($4_1, $0_1, $1_1);
  $421($3_1, $4_1, $2_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $418($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20_1 = Math_fround(0), $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  $5_1 = 1;
  $18_1 = HEAP32[$0_1 + 192 >> 2];
  $3_1 = Math_imul($18_1, 48) + $0_1 | 0;
  $6_1 = $0_1 + 48 | 0;
  label$1 : {
   if (Math_fround(Math_abs($419(22692, $3_1, $6_1, $0_1))) < Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $5_1 = -1;
   if ($422($3_1, $6_1)) {
    break label$1
   }
   if ($422($3_1, $0_1)) {
    break label$1
   }
   $19_1 = $3_1 + 8 | 0;
   $21_1 = HEAP32[$19_1 + 4 >> 2];
   $5_1 = $2_1 + 88 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$19_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $21_1;
   $4_1 = HEAPF32[$5_1 >> 2];
   HEAPF32[$5_1 >> 2] = -$4_1;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 80 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 84 >> 2] = $5_1;
   HEAP32[$2_1 + 76 >> 2] = 0;
   $7_1 = HEAPF32[$3_1 >> 2];
   $13_1 = Math_fround(HEAPF32[$0_1 + 48 >> 2] - $7_1);
   HEAPF32[$2_1 + 64 >> 2] = $13_1;
   $14_1 = HEAPF32[$2_1 + 80 >> 2];
   HEAPF32[$2_1 + 80 >> 2] = -$14_1;
   $15_1 = Math_fround(-HEAPF32[$2_1 + 84 >> 2]);
   HEAPF32[$2_1 + 84 >> 2] = $15_1;
   $5_1 = Math_imul($18_1, 48) + $0_1 | 0;
   $9_1 = HEAPF32[$5_1 + 8 >> 2];
   $16_1 = Math_fround(HEAPF32[$0_1 + 56 >> 2] - $9_1);
   HEAPF32[$2_1 + 72 >> 2] = $16_1;
   $10_1 = HEAPF32[$5_1 + 4 >> 2];
   $17_1 = Math_fround(HEAPF32[$0_1 + 52 >> 2] - $10_1);
   HEAPF32[$2_1 + 68 >> 2] = $17_1;
   $11_1 = HEAPF32[$0_1 >> 2];
   $12_1 = HEAPF32[$0_1 + 4 >> 2];
   $8_1 = HEAPF32[$0_1 + 8 >> 2];
   HEAP32[$2_1 + 60 >> 2] = 0;
   $8_1 = Math_fround($8_1 - $9_1);
   HEAPF32[$2_1 + 56 >> 2] = $8_1;
   $12_1 = Math_fround($12_1 - $10_1);
   HEAPF32[$2_1 + 52 >> 2] = $12_1;
   $11_1 = Math_fround($11_1 - $7_1);
   HEAPF32[$2_1 + 48 >> 2] = $11_1;
   $7_1 = Math_fround(Math_fround($13_1 * $12_1) - Math_fround($17_1 * $11_1));
   $9_1 = Math_fround(Math_fround($17_1 * $8_1) - Math_fround($16_1 * $12_1));
   $10_1 = Math_fround(Math_fround($16_1 * $11_1) - Math_fround($13_1 * $8_1));
   $20_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($11_1 * $7_1) - Math_fround($8_1 * $9_1)) * $15_1) - Math_fround($14_1 * Math_fround(Math_fround($8_1 * $10_1) - Math_fround($12_1 * $7_1)))) - Math_fround($4_1 * Math_fround(Math_fround($12_1 * $9_1) - Math_fround($11_1 * $10_1))));
   label$2 : {
    if (!(Math_fround(Math_abs($20_1)) < Math_fround(1.1920928955078125e-07) ? 0 : !($20_1 > Math_fround(0.0)))) {
     $7_1 = Math_fround(Math_fround(Math_fround($12_1 * $15_1) - Math_fround($14_1 * $11_1)) - Math_fround($4_1 * $8_1));
     if (!(Math_fround(Math_abs($7_1)) < Math_fround(1.1920928955078125e-07) ? 0 : !($7_1 > Math_fround(0.0)))) {
      $3($6_1, $3_1, 48);
      HEAP32[$0_1 + 192 >> 2] = 1;
      $417($2_1 + 48 | 0, $2_1 + 80 | 0, $2_1 + 48 | 0, $1_1);
      break label$2;
     }
     $4_1 = Math_fround(Math_fround(Math_fround($17_1 * $15_1) - Math_fround($14_1 * $13_1)) - Math_fround($4_1 * $16_1));
     if (!(Math_fround(Math_abs($4_1)) < Math_fround(1.1920928955078125e-07) ? 0 : !($4_1 > Math_fround(0.0)))) {
      $0_1 = $3($0_1, $6_1, 48);
      $3($6_1, $3_1, 48);
      HEAP32[$0_1 + 192 >> 2] = 1;
      $417($2_1 - -64 | 0, $2_1 + 80 | 0, $2_1 - -64 | 0, $1_1);
      break label$2;
     }
     $5_1 = 0;
     (wasm2js_i32$0 = $3($0_1, $3_1, 48), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 + 192 >> 2] = wasm2js_i32$1;
     $3_1 = $2_1 + 88 | 0;
     $6_1 = HEAP32[$3_1 + 4 >> 2];
     $0_1 = $1_1 + 8 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $6_1;
     $0_1 = HEAP32[$2_1 + 84 >> 2];
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 80 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $0_1;
     break label$1;
    }
    $8_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($16_1 * $9_1) - Math_fround($13_1 * $7_1)) * $15_1) - Math_fround($14_1 * Math_fround(Math_fround($17_1 * $7_1) - Math_fround($16_1 * $10_1)))) - Math_fround($4_1 * Math_fround(Math_fround($13_1 * $10_1) - Math_fround($17_1 * $9_1))));
    if (!(Math_fround(Math_abs($8_1)) < Math_fround(1.1920928955078125e-07) ? 0 : !($8_1 > Math_fround(0.0)))) {
     $4_1 = Math_fround(Math_fround(Math_fround($17_1 * $15_1) - Math_fround($14_1 * $13_1)) - Math_fround($4_1 * $16_1));
     if (!(Math_fround(Math_abs($4_1)) < Math_fround(1.1920928955078125e-07) ? 0 : !($4_1 > Math_fround(0.0)))) {
      $0_1 = $3($0_1, $6_1, 48);
      $3($6_1, $3_1, 48);
      HEAP32[$0_1 + 192 >> 2] = 1;
      $417($2_1 - -64 | 0, $2_1 + 80 | 0, $2_1 - -64 | 0, $1_1);
      break label$2;
     }
     $5_1 = 0;
     (wasm2js_i32$0 = $3($0_1, $3_1, 48), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 + 192 >> 2] = wasm2js_i32$1;
     $3_1 = $2_1 + 88 | 0;
     $6_1 = HEAP32[$3_1 + 4 >> 2];
     $0_1 = $1_1 + 8 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $6_1;
     $0_1 = HEAP32[$2_1 + 84 >> 2];
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 80 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $0_1;
     break label$1;
    }
    $4_1 = Math_fround(Math_fround(Math_fround($10_1 * $15_1) - Math_fround($14_1 * $9_1)) - Math_fround($4_1 * $7_1));
    if (!(Math_fround(Math_abs($4_1)) < Math_fround(1.1920928955078125e-07) ? 0 : !($4_1 > Math_fround(0.0)))) {
     HEAPF32[$1_1 + 8 >> 2] = $7_1;
     HEAPF32[$1_1 + 4 >> 2] = $10_1;
     HEAPF32[$1_1 >> 2] = $9_1;
     break label$2;
    }
    $3_1 = $3($2_1, $0_1, 48);
    $3($0_1, $6_1, 48);
    $3($6_1, $3_1, 48);
    HEAPF32[$1_1 + 8 >> 2] = $7_1;
    HEAPF32[$1_1 + 4 >> 2] = $10_1;
    HEAPF32[$1_1 >> 2] = $9_1;
    $423($1_1, Math_fround(-1.0));
   }
   $5_1 = 0;
  }
  global$0 = $2_1 + 96 | 0;
  return $5_1;
 }
 
 function $419($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = 0.0, $6_1 = 0.0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0.0, $13_1 = 0.0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0.0, $19_1 = 0.0, $20_1 = 0.0, $21_1 = 0.0;
  $14_1 = global$0 - 16 | 0;
  global$0 = $14_1;
  $7_1 = HEAPF32[$1_1 >> 2];
  $4_1 = Math_fround(HEAPF32[$2_1 >> 2] - $7_1);
  $10_1 = Math_fround(HEAPF32[$3_1 >> 2] - $7_1);
  $8_1 = HEAPF32[$1_1 + 4 >> 2];
  $11_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] - $8_1);
  $15_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] - $8_1);
  $9_1 = HEAPF32[$1_1 + 8 >> 2];
  $16_1 = Math_fround(HEAPF32[$2_1 + 8 >> 2] - $9_1);
  $17_1 = Math_fround(HEAPF32[$3_1 + 8 >> 2] - $9_1);
  $13_1 = +Math_fround(Math_fround(Math_fround($4_1 * $10_1) + Math_fround($11_1 * $15_1)) + Math_fround($16_1 * $17_1));
  $7_1 = Math_fround($7_1 - HEAPF32[$0_1 >> 2]);
  $8_1 = Math_fround($8_1 - HEAPF32[$0_1 + 4 >> 2]);
  $9_1 = Math_fround($9_1 - HEAPF32[$0_1 + 8 >> 2]);
  $12_1 = +Math_fround(Math_fround(Math_fround($10_1 * $7_1) + Math_fround($15_1 * $8_1)) + Math_fround($17_1 * $9_1));
  $18_1 = +Math_fround(Math_fround(Math_fround($10_1 * $10_1) + Math_fround($15_1 * $15_1)) + Math_fround($17_1 * $17_1));
  $20_1 = +Math_fround(Math_fround(Math_fround($4_1 * $7_1) + Math_fround($11_1 * $8_1)) + Math_fround($16_1 * $9_1));
  $21_1 = +Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($11_1 * $11_1)) + Math_fround($16_1 * $16_1));
  $5_1 = ($13_1 * $12_1 - $18_1 * $20_1) / ($21_1 * $18_1 - $13_1 * $13_1);
  $4_1 = Math_fround($5_1);
  label$1 : {
   label$2 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(1.1920928955078125e-07) ? 0 : !($5_1 > 0.0)) {
     break label$2
    }
    if ($424($4_1, Math_fround(1.0)) ? 0 : !($5_1 < 1.0)) {
     break label$2
    }
    $6_1 = ($13_1 * -$5_1 - $12_1) / $18_1;
    $4_1 = Math_fround($6_1);
    if (Math_fround(Math_abs($4_1)) < Math_fround(1.1920928955078125e-07) ? 0 : !($6_1 > 0.0)) {
     break label$2
    }
    if ($424($4_1, Math_fround(1.0)) ? 0 : !($6_1 < 1.0)) {
     break label$2
    }
    $19_1 = $5_1 + $6_1;
    if ($424(Math_fround($19_1), Math_fround(1.0)) ? 0 : !($19_1 < 1.0)) {
     break label$2
    }
    $19_1 = ($6_1 + $6_1) * $12_1;
    $12_1 = $5_1 + $5_1;
    $5_1 = $19_1 + ($12_1 * $20_1 + ($12_1 * $6_1 * $13_1 + ($5_1 * $5_1 * $21_1 + $6_1 * $6_1 * $18_1))) + +Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1)) + Math_fround($9_1 * $9_1));
    break label$1;
   }
   $4_1 = $425($0_1, $1_1, $2_1, 0);
   $10_1 = $425($0_1, $1_1, $3_1, $14_1);
   $11_1 = $425($0_1, $2_1, $3_1, $14_1);
   $4_1 = $4_1 > $10_1 ? $10_1 : $4_1;
   if (!($11_1 < $4_1)) {
    $5_1 = +$4_1;
    break label$1;
   }
   $5_1 = +$11_1;
  }
  global$0 = $14_1 + 16 | 0;
  return Math_fround($5_1);
 }
 
 function $420($0_1, $1_1, $2_1) {
  return $149($0_1, $1_1, $2_1) < Math_fround(1.4210854715202004e-14);
 }
 
 function $421($0_1, $1_1, $2_1) {
  HEAPF32[$0_1 >> 2] = Math_fround(HEAPF32[$1_1 + 4 >> 2] * HEAPF32[$2_1 + 8 >> 2]) - Math_fround(HEAPF32[$1_1 + 8 >> 2] * HEAPF32[$2_1 + 4 >> 2]);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(HEAPF32[$1_1 + 8 >> 2] * HEAPF32[$2_1 >> 2]) - Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$2_1 + 8 >> 2]);
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$2_1 + 4 >> 2]) - Math_fround(HEAPF32[$1_1 + 4 >> 2] * HEAPF32[$2_1 >> 2]);
 }
 
 function $422($0_1, $1_1) {
  var $2_1 = 0;
  label$1 : {
   if (!$424(HEAPF32[$0_1 >> 2], HEAPF32[$1_1 >> 2])) {
    break label$1
   }
   if (!$424(HEAPF32[$0_1 + 4 >> 2], HEAPF32[$1_1 + 4 >> 2])) {
    break label$1
   }
   $2_1 = ($424(HEAPF32[$0_1 + 8 >> 2], HEAPF32[$1_1 + 8 >> 2]) | 0) != 0;
  }
  return $2_1;
 }
 
 function $423($0_1, $1_1) {
  HEAPF32[$0_1 >> 2] = HEAPF32[$0_1 >> 2] * $1_1;
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$0_1 + 4 >> 2] * $1_1;
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$0_1 + 8 >> 2] * $1_1;
 }
 
 function $424($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = 0;
  $2_1 = Math_fround(Math_abs(Math_fround($0_1 - $1_1)));
  if ($2_1 < Math_fround(1.1920928955078125e-07)) {
   $3_1 = 1
  } else {
   $1_1 = Math_fround(Math_abs($1_1));
   $0_1 = Math_fround(Math_abs($0_1));
   if ($1_1 > $0_1) {
    return Math_fround($1_1 * Math_fround(1.1920928955078125e-07)) > $2_1
   }
   $3_1 = Math_fround($0_1 * Math_fround(1.1920928955078125e-07)) > $2_1;
  }
  return $3_1;
 }
 
 function $425($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  $15_1 = HEAPF32[$2_1 >> 2];
  $9_1 = HEAPF32[$1_1 >> 2];
  $4_1 = Math_fround($15_1 - $9_1);
  $10_1 = HEAPF32[$0_1 >> 2];
  $16_1 = Math_fround($9_1 - $10_1);
  $17_1 = HEAPF32[$2_1 + 4 >> 2];
  $11_1 = HEAPF32[$1_1 + 4 >> 2];
  $6_1 = Math_fround($17_1 - $11_1);
  $12_1 = HEAPF32[$0_1 + 4 >> 2];
  $18_1 = Math_fround($11_1 - $12_1);
  $19_1 = HEAPF32[$2_1 + 8 >> 2];
  $13_1 = HEAPF32[$1_1 + 8 >> 2];
  $7_1 = Math_fround($19_1 - $13_1);
  $14_1 = HEAPF32[$0_1 + 8 >> 2];
  $8_1 = Math_fround($13_1 - $14_1);
  $5_1 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($4_1 * $16_1) + Math_fround($6_1 * $18_1)) + Math_fround($7_1 * $8_1))) / Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1)));
  label$1 : {
   if (!(Math_fround(Math_abs($5_1)) < Math_fround(1.1920928955078125e-07) ? 0 : !($5_1 < Math_fround(0.0)))) {
    $4_1 = $426($9_1, $11_1, $13_1, $10_1, $12_1, $14_1);
    $8_1 = $4_1;
    if (!$3_1) {
     break label$1
    }
    $0_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $0_1;
    $1_1 = $1_1 + 8 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $3_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    return $4_1;
   }
   label$3 : {
    if (!($5_1 > Math_fround(1.0))) {
     if (!$424($5_1, Math_fround(1.0))) {
      break label$3
     }
    }
    $4_1 = $426($15_1, $17_1, $19_1, $10_1, $12_1, $14_1);
    $8_1 = $4_1;
    if (!$3_1) {
     break label$1
    }
    $0_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $0_1;
    $1_1 = $2_1 + 8 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $3_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    return $4_1;
   }
   if ($3_1) {
    HEAP32[$3_1 + 12 >> 2] = 0;
    HEAPF32[$3_1 + 8 >> 2] = $7_1;
    HEAPF32[$3_1 >> 2] = $4_1;
    $2_1 = $3_1 + 4 | 0;
    HEAPF32[$2_1 >> 2] = $6_1;
    $423($3_1, $5_1);
    $5_1 = Math_fround(HEAPF32[$1_1 >> 2] + HEAPF32[$3_1 >> 2]);
    HEAPF32[$3_1 >> 2] = $5_1;
    $4_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] + HEAPF32[$2_1 >> 2]);
    HEAPF32[$2_1 >> 2] = $4_1;
    $6_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] + HEAPF32[$3_1 + 8 >> 2]);
    HEAPF32[$3_1 + 8 >> 2] = $6_1;
    return $426($5_1, $4_1, $6_1, HEAPF32[$0_1 >> 2], HEAPF32[$0_1 + 4 >> 2], HEAPF32[$0_1 + 8 >> 2]);
   }
   $7_1 = Math_fround($8_1 + Math_fround($7_1 * $5_1));
   $4_1 = Math_fround($16_1 + Math_fround($4_1 * $5_1));
   $5_1 = Math_fround($18_1 + Math_fround($6_1 * $5_1));
   $8_1 = Math_fround(Math_fround($7_1 * $7_1) + Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)));
  }
  return $8_1;
 }
 
 function $426($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = Math_fround($0_1 - $3_1);
  $3_1 = Math_fround($0_1 * $0_1);
  $0_1 = Math_fround($1_1 - $4_1);
  $1_1 = Math_fround($3_1 + Math_fround($0_1 * $0_1));
  $0_1 = Math_fround($2_1 - $5_1);
  return Math_fround($1_1 + Math_fround($0_1 * $0_1));
 }
 
 function $427($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  $5_1 = HEAPF32[$4_1 + 36 >> 2];
  $6_1 = HEAPF32[$4_1 + 20 >> 2];
  $7_1 = HEAPF32[$4_1 + 40 >> 2];
  $8_1 = HEAPF32[$4_1 + 24 >> 2];
  $9_1 = HEAPF32[$4_1 + 4 >> 2];
  $10_1 = HEAPF32[$4_1 + 8 >> 2];
  $11_1 = HEAPF32[$4_1 + 32 >> 2];
  $12_1 = HEAPF32[$4_1 >> 2];
  $13_1 = HEAPF32[$4_1 + 16 >> 2];
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($12_1 * $1_1) + Math_fround($13_1 * $2_1)) + Math_fround($11_1 * $3_1);
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(Math_fround($10_1 * $1_1) + Math_fround($8_1 * $2_1)) + Math_fround($7_1 * $3_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(Math_fround($9_1 * $1_1) + Math_fround($6_1 * $2_1)) + Math_fround($5_1 * $3_1);
 }
 
 function $428($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $9_1 = global$0 + -64 | 0;
  global$0 = $9_1;
  $10_1 = $3_1;
  $14_1 = $4_1;
  $3_1 = HEAPF32[$5_1 >> 2];
  $11_1 = $5_1 + 4 | 0;
  $4_1 = HEAPF32[$11_1 >> 2];
  $12_1 = $5_1 + 8 | 0;
  $13_1 = HEAPF32[$12_1 >> 2];
  $2_1 = $160($2_1, $10_1, $14_1, $3_1, $4_1, $13_1);
  $427($9_1 + 48 | 0, $3_1, $4_1, $13_1, $0_1);
  $427($9_1 + 32 | 0, HEAPF32[$5_1 >> 2], HEAPF32[$11_1 >> 2], HEAPF32[$12_1 >> 2], $1_1);
  $429($6_1 + 80 | 0, $9_1 + 48 | 0, $9_1 + 20 | 0);
  $429($7_1 + 80 | 0, $9_1 + 32 | 0, $9_1 + 8 | 0);
  global$0 = $9_1 - -64 | 0;
  $3_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$9_1 + 20 >> 2] * HEAPF32[$9_1 + 48 >> 2]) + Math_fround(HEAPF32[$9_1 + 24 >> 2] * HEAPF32[$9_1 + 52 >> 2])) + Math_fround(HEAPF32[$9_1 + 28 >> 2] * HEAPF32[$9_1 + 56 >> 2]));
  $4_1 = HEAPF32[$6_1 + 96 >> 2];
  $10_1 = $3_1 > $4_1 ? $3_1 : $4_1;
  $3_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$9_1 + 8 >> 2] * HEAPF32[$9_1 + 32 >> 2]) + Math_fround(HEAPF32[$9_1 + 12 >> 2] * HEAPF32[$9_1 + 36 >> 2])) + Math_fround(HEAPF32[$9_1 + 16 >> 2] * HEAPF32[$9_1 + 40 >> 2]));
  $4_1 = HEAPF32[$7_1 + 96 >> 2];
  $3_1 = Math_fround($10_1 + ($3_1 > $4_1 ? $3_1 : $4_1));
  $4_1 = Math_fround($2_1 + $3_1);
  $2_1 = Math_fround($3_1 - $2_1);
  return !(($2_1 > $4_1 ? $4_1 : $2_1) > $8_1);
 }
 
 function $429($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0);
  $3_1 = HEAPF32[$0_1 >> 2];
  HEAPF32[$2_1 >> 2] = HEAPF32[$1_1 >> 2] < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
  $3_1 = HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$1_1 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
  $3_1 = HEAPF32[$0_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$1_1 + 8 >> 2] < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
 }
 
 function $430($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = 0, $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0);
  $6_1 = global$0 - 128 | 0;
  global$0 = $6_1;
  HEAP32[5677] = HEAP32[5677] + 1;
  $146($6_1 + 112 | 0, $2_1, HEAPF32[$0_1 - -64 >> 2], HEAPF32[$0_1 + 68 >> 2], HEAPF32[$0_1 + 72 >> 2]);
  $146($6_1 + 96 | 0, $3_1, HEAPF32[$1_1 - -64 >> 2], HEAPF32[$1_1 + 68 >> 2], HEAPF32[$1_1 + 72 >> 2]);
  $10_1 = HEAP32[$0_1 + 28 >> 2];
  $10_1 = ($10_1 | 0) > 0 ? $10_1 : 0;
  $18_1 = Math_fround(HEAPF32[$6_1 + 120 >> 2] - HEAPF32[$6_1 + 104 >> 2]);
  $19_1 = Math_fround(HEAPF32[$6_1 + 116 >> 2] - HEAPF32[$6_1 + 100 >> 2]);
  $20_1 = Math_fround(HEAPF32[$6_1 + 112 >> 2] - HEAPF32[$6_1 + 96 >> 2]);
  $7_1 = Math_fround(3402823466385288598117041.0e14);
  $16_1 = 20;
  label$1 : {
   while (1) {
    if ($10_1) {
     $11_1 = HEAP32[$0_1 + 36 >> 2] + $16_1 | 0;
     $431($6_1 + 80 | 0, $2_1, HEAPF32[$11_1 >> 2], HEAPF32[$11_1 + 4 >> 2], HEAPF32[$11_1 + 8 >> 2]);
     $8_1 = HEAPF32[$6_1 + 80 >> 2];
     $9_1 = HEAPF32[$6_1 + 84 >> 2];
     $12_1 = HEAPF32[$6_1 + 88 >> 2];
     if (Math_fround(Math_fround(Math_fround($20_1 * $8_1) + Math_fround($19_1 * $9_1)) + Math_fround($18_1 * $12_1)) < Math_fround(0.0)) {
      HEAPF32[$6_1 + 88 >> 2] = -$12_1;
      HEAPF32[$6_1 + 84 >> 2] = -$9_1;
      HEAPF32[$6_1 + 80 >> 2] = -$8_1;
     }
     HEAP32[5678] = HEAP32[5678] + 1;
     if ($428($2_1, $3_1, $20_1, $19_1, $18_1, $6_1 + 80 | 0, $0_1, $1_1, $7_1)) {
      $11_1 = 0;
      HEAP32[5679] = HEAP32[5679] + 1;
      label$6 : {
       if (!$432($0_1, $1_1, $2_1, $3_1, $6_1 + 80 | 0, $6_1 + 24 | 0, $6_1 - -64 | 0, $6_1 + 48 | 0)) {
        $15_1 = 0;
        break label$6;
       }
       $15_1 = 1;
       $8_1 = HEAPF32[$6_1 + 24 >> 2];
       if (!($8_1 < $7_1)) {
        break label$6
       }
       $13_1 = HEAP32[$6_1 + 84 >> 2];
       HEAP32[$4_1 >> 2] = HEAP32[$6_1 + 80 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $13_1;
       $14_1 = $6_1 + 88 | 0;
       $28_1 = HEAP32[$14_1 + 4 >> 2];
       $13_1 = $4_1 + 8 | 0;
       HEAP32[$13_1 >> 2] = HEAP32[$14_1 >> 2];
       HEAP32[$13_1 + 4 >> 2] = $28_1;
       $7_1 = $8_1;
      }
      if (!$15_1) {
       break label$1
      }
     }
     $10_1 = $10_1 - 1 | 0;
     $16_1 = $16_1 + 36 | 0;
     continue;
    }
    break;
   };
   $10_1 = HEAP32[$1_1 + 28 >> 2];
   $10_1 = ($10_1 | 0) > 0 ? $10_1 : 0;
   $16_1 = 20;
   while (1) {
    if ($10_1) {
     $11_1 = HEAP32[$1_1 + 36 >> 2] + $16_1 | 0;
     $431($6_1 + 80 | 0, $3_1, HEAPF32[$11_1 >> 2], HEAPF32[$11_1 + 4 >> 2], HEAPF32[$11_1 + 8 >> 2]);
     $8_1 = HEAPF32[$6_1 + 80 >> 2];
     $9_1 = HEAPF32[$6_1 + 84 >> 2];
     $12_1 = HEAPF32[$6_1 + 88 >> 2];
     if (Math_fround(Math_fround(Math_fround($20_1 * $8_1) + Math_fround($19_1 * $9_1)) + Math_fround($18_1 * $12_1)) < Math_fround(0.0)) {
      HEAPF32[$6_1 + 88 >> 2] = -$12_1;
      HEAPF32[$6_1 + 84 >> 2] = -$9_1;
      HEAPF32[$6_1 + 80 >> 2] = -$8_1;
     }
     HEAP32[5678] = HEAP32[5678] + 1;
     if ($428($2_1, $3_1, $20_1, $19_1, $18_1, $6_1 + 80 | 0, $0_1, $1_1, $7_1)) {
      $11_1 = 0;
      HEAP32[5679] = HEAP32[5679] + 1;
      label$12 : {
       if (!$432($0_1, $1_1, $2_1, $3_1, $6_1 + 80 | 0, $6_1 + 24 | 0, $6_1 - -64 | 0, $6_1 + 48 | 0)) {
        $15_1 = 0;
        break label$12;
       }
       $15_1 = 1;
       $8_1 = HEAPF32[$6_1 + 24 >> 2];
       if (!($8_1 < $7_1)) {
        break label$12
       }
       $13_1 = HEAP32[$6_1 + 84 >> 2];
       HEAP32[$4_1 >> 2] = HEAP32[$6_1 + 80 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $13_1;
       $14_1 = $6_1 + 88 | 0;
       $28_1 = HEAP32[$14_1 + 4 >> 2];
       $13_1 = $4_1 + 8 | 0;
       HEAP32[$13_1 >> 2] = HEAP32[$14_1 >> 2];
       HEAP32[$13_1 + 4 >> 2] = $28_1;
       $7_1 = $8_1;
      }
      if (!$15_1) {
       break label$1
      }
     }
     $10_1 = $10_1 - 1 | 0;
     $16_1 = $16_1 + 36 | 0;
     continue;
    }
    break;
   };
   $15_1 = -1;
   $13_1 = -1;
   $11_1 = 0;
   while (1) {
    if (HEAP32[$0_1 + 48 >> 2] > ($11_1 | 0)) {
     $10_1 = HEAP32[$0_1 + 56 >> 2] + ($11_1 << 4) | 0;
     $431($6_1 + 80 | 0, $2_1, HEAPF32[$10_1 >> 2], HEAPF32[$10_1 + 4 >> 2], HEAPF32[$10_1 + 8 >> 2]);
     $16_1 = 0;
     $8_1 = HEAPF32[$6_1 + 80 >> 2];
     $9_1 = HEAPF32[$6_1 + 88 >> 2];
     $12_1 = HEAPF32[$6_1 + 84 >> 2];
     $10_1 = 0;
     label$16 : {
      while (1) {
       if (HEAP32[$1_1 + 48 >> 2] <= ($10_1 | 0)) {
        break label$16
       }
       $14_1 = HEAP32[$1_1 + 56 >> 2] + $16_1 | 0;
       $431($6_1 - -64 | 0, $3_1, HEAPF32[$14_1 >> 2], HEAPF32[$14_1 + 4 >> 2], HEAPF32[$14_1 + 8 >> 2]);
       HEAP32[$6_1 + 60 >> 2] = 0;
       $21_1 = HEAPF32[$6_1 + 68 >> 2];
       $22_1 = HEAPF32[$6_1 + 64 >> 2];
       $17_1 = Math_fround(Math_fround($21_1 * $8_1) - Math_fround($12_1 * $22_1));
       HEAPF32[$6_1 + 56 >> 2] = $17_1;
       $23_1 = HEAPF32[$6_1 + 72 >> 2];
       $29_1 = Math_fround(Math_fround($9_1 * $22_1) - Math_fround($23_1 * $8_1));
       HEAPF32[$6_1 + 52 >> 2] = $29_1;
       $30_1 = Math_fround(Math_fround($12_1 * $23_1) - Math_fround($9_1 * $21_1));
       HEAPF32[$6_1 + 48 >> 2] = $30_1;
       label$18 : {
        label$19 : {
         if (+Math_fround(Math_abs($17_1)) > 1.0e-06 ? 0 : !(+Math_fround(Math_abs($30_1)) > 1.0e-06 | +Math_fround(Math_abs($29_1)) > 1.0e-06)) {
          break label$19
         }
         $14_1 = $153($6_1 + 48 | 0);
         $17_1 = HEAPF32[$6_1 + 48 >> 2];
         $29_1 = HEAPF32[$6_1 + 52 >> 2];
         $30_1 = HEAPF32[$6_1 + 56 >> 2];
         if (Math_fround(Math_fround(Math_fround($20_1 * $17_1) + Math_fround($19_1 * $29_1)) + Math_fround($18_1 * $30_1)) < Math_fround(0.0)) {
          HEAPF32[$6_1 + 56 >> 2] = -$30_1;
          HEAPF32[$6_1 + 52 >> 2] = -$29_1;
          HEAPF32[$6_1 + 48 >> 2] = -$17_1;
         }
         HEAP32[5678] = HEAP32[5678] + 1;
         if (!$428($2_1, $3_1, $20_1, $19_1, $18_1, $14_1, $0_1, $1_1, $7_1)) {
          break label$19
         }
         HEAP32[5679] = HEAP32[5679] + 1;
         $14_1 = $432($0_1, $1_1, $2_1, $3_1, $14_1, $6_1 + 44 | 0, $6_1 + 24 | 0, $6_1 + 8 | 0);
         label$21 : {
          if (!$14_1) {
           break label$21
          }
          $17_1 = HEAPF32[$6_1 + 44 >> 2];
          if (!($17_1 < $7_1)) {
           break label$21
          }
          $15_1 = HEAP32[$6_1 + 52 >> 2];
          HEAP32[$4_1 >> 2] = HEAP32[$6_1 + 48 >> 2];
          HEAP32[$4_1 + 4 >> 2] = $15_1;
          $13_1 = $6_1 + 56 | 0;
          $28_1 = HEAP32[$13_1 + 4 >> 2];
          $15_1 = $4_1 + 8 | 0;
          HEAP32[$15_1 >> 2] = HEAP32[$13_1 >> 2];
          HEAP32[$15_1 + 4 >> 2] = $28_1;
          $33_1 = HEAPF32[$6_1 + 16 >> 2];
          $34_1 = HEAPF32[$6_1 + 12 >> 2];
          $35_1 = HEAPF32[$6_1 + 8 >> 2];
          $36_1 = HEAPF32[$6_1 + 32 >> 2];
          $37_1 = HEAPF32[$6_1 + 28 >> 2];
          $38_1 = HEAPF32[$6_1 + 24 >> 2];
          $24_1 = $22_1;
          $25_1 = $21_1;
          $26_1 = $23_1;
          $27_1 = $8_1;
          $31_1 = $12_1;
          $32_1 = $9_1;
          $15_1 = $11_1;
          $13_1 = $10_1;
          $7_1 = $17_1;
         }
         if (!$14_1) {
          break label$18
         }
        }
        $16_1 = $16_1 + 16 | 0;
        $10_1 = $10_1 + 1 | 0;
        continue;
       }
       break;
      };
      $11_1 = 0;
      break label$1;
     }
     $11_1 = $11_1 + 1 | 0;
     continue;
    }
    break;
   };
   label$22 : {
    if (($15_1 | $13_1) < 0) {
     break label$22
    }
    $21_1 = Math_fround($35_1 - $38_1);
    $22_1 = Math_fround($34_1 - $37_1);
    $23_1 = Math_fround($33_1 - $36_1);
    $17_1 = Math_fround(Math_fround(Math_fround($24_1 * $21_1) + Math_fround($25_1 * $22_1)) + Math_fround($26_1 * $23_1));
    $12_1 = Math_fround(Math_fround(Math_fround($27_1 * $21_1) + Math_fround($31_1 * $22_1)) + Math_fround($32_1 * $23_1));
    $8_1 = Math_fround(0.0);
    $9_1 = Math_fround(Math_fround(Math_fround($27_1 * $24_1) + Math_fround($31_1 * $25_1)) + Math_fround($32_1 * $26_1));
    $7_1 = Math_fround(Math_fround(1.0) - Math_fround($9_1 * $9_1));
    label$23 : {
     label$24 : {
      if ($7_1 == Math_fround(0.0)) {
       break label$24
      }
      $8_1 = Math_fround(-1000000015047466219876688.0e6);
      $7_1 = Math_fround(Math_fround($12_1 - Math_fround($9_1 * $17_1)) / $7_1);
      if ($7_1 < Math_fround(-1000000015047466219876688.0e6)) {
       break label$24
      }
      $8_1 = Math_fround(1000000015047466219876688.0e6);
      if (!($7_1 > Math_fround(1000000015047466219876688.0e6))) {
       break label$23
      }
     }
     $7_1 = $8_1;
    }
    $8_1 = Math_fround(Math_fround($9_1 * $7_1) - $17_1);
    label$25 : {
     if ($8_1 < Math_fround(-1000000015047466219876688.0e6)) {
      $9_1 = Math_fround($12_1 + Math_fround($9_1 * Math_fround(-1000000015047466219876688.0e6)));
      if ($9_1 < Math_fround(-1000000015047466219876688.0e6)) {
       $8_1 = Math_fround(-1000000015047466219876688.0e6);
       $7_1 = Math_fround(-1000000015047466219876688.0e6);
       break label$25;
      }
      $7_1 = Math_fround(1000000015047466219876688.0e6);
      if (!($9_1 > Math_fround(1000000015047466219876688.0e6))) {
       $8_1 = Math_fround(-1000000015047466219876688.0e6);
       $7_1 = $9_1;
       break label$25;
      }
      $8_1 = Math_fround(-1000000015047466219876688.0e6);
      break label$25;
     }
     if (!($8_1 > Math_fround(1000000015047466219876688.0e6))) {
      break label$25
     }
     $7_1 = Math_fround(-1000000015047466219876688.0e6);
     $8_1 = Math_fround(1000000015047466219876688.0e6);
     $9_1 = Math_fround(Math_fround($9_1 * Math_fround(1000000015047466219876688.0e6)) + $12_1);
     if ($9_1 < Math_fround(-1000000015047466219876688.0e6)) {
      break label$25
     }
     $7_1 = $9_1;
     if (!($9_1 > Math_fround(1000000015047466219876688.0e6))) {
      break label$25
     }
     $7_1 = Math_fround(1000000015047466219876688.0e6);
    }
    HEAP32[$6_1 + 92 >> 2] = 0;
    $12_1 = Math_fround($24_1 * $8_1);
    $24_1 = Math_fround($12_1 + Math_fround($21_1 - Math_fround($27_1 * $7_1)));
    $25_1 = Math_fround($8_1 * $25_1);
    $9_1 = Math_fround($25_1 + Math_fround($22_1 - Math_fround($7_1 * $31_1)));
    $26_1 = Math_fround($8_1 * $26_1);
    $8_1 = Math_fround($26_1 + Math_fround($23_1 - Math_fround($7_1 * $32_1)));
    $7_1 = $149($24_1, $9_1, $8_1);
    if (!($7_1 > Math_fround(1.1920928955078125e-07))) {
     break label$22
    }
    $27_1 = Math_fround(Math_sqrt($7_1));
    $7_1 = Math_fround(Math_fround(1.0) / $27_1);
    $8_1 = Math_fround($7_1 * $8_1);
    HEAPF32[$6_1 + 88 >> 2] = $8_1;
    $9_1 = Math_fround($7_1 * $9_1);
    HEAPF32[$6_1 + 84 >> 2] = $9_1;
    $7_1 = Math_fround($7_1 * $24_1);
    HEAPF32[$6_1 + 80 >> 2] = $7_1;
    if (Math_fround(Math_fround(Math_fround($7_1 * $20_1) + Math_fround($9_1 * $19_1)) + Math_fround($8_1 * $18_1)) < Math_fround(0.0)) {
     HEAPF32[$6_1 + 88 >> 2] = -$8_1;
     HEAPF32[$6_1 + 84 >> 2] = -$9_1;
     HEAPF32[$6_1 + 80 >> 2] = -$7_1;
    }
    HEAP32[$6_1 + 76 >> 2] = 0;
    HEAPF32[$6_1 + 72 >> 2] = $33_1 + $26_1;
    HEAPF32[$6_1 + 68 >> 2] = $34_1 + $25_1;
    HEAPF32[$6_1 + 64 >> 2] = $35_1 + $12_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 16 >> 2]]($5_1, $6_1 + 80 | 0, $6_1 - -64 | 0, Math_fround(-$27_1));
   }
   $11_1 = 1;
   $7_1 = HEAPF32[$4_1 >> 2];
   $8_1 = HEAPF32[$4_1 + 4 >> 2];
   $9_1 = HEAPF32[$4_1 + 8 >> 2];
   if (!(Math_fround(Math_fround(Math_fround($20_1 * $7_1) + Math_fround($19_1 * $8_1)) + Math_fround($18_1 * $9_1)) < Math_fround(0.0))) {
    break label$1
   }
   HEAP32[$4_1 + 12 >> 2] = 0;
   HEAPF32[$4_1 + 8 >> 2] = -$9_1;
   HEAPF32[$4_1 + 4 >> 2] = -$8_1;
   HEAPF32[$4_1 >> 2] = -$7_1;
  }
  global$0 = $6_1 + 128 | 0;
  return $11_1;
 }
 
 function $431($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5_1 = $160(HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2], $2_1, $3_1, $4_1);
  $6_1 = $160(HEAPF32[$1_1 + 16 >> 2], HEAPF32[$1_1 + 20 >> 2], HEAPF32[$1_1 + 24 >> 2], $2_1, $3_1, $4_1);
  $7_1 = HEAPF32[$1_1 + 40 >> 2];
  $8_1 = HEAPF32[$1_1 + 36 >> 2];
  $9_1 = HEAPF32[$1_1 + 32 >> 2];
  HEAP32[$0_1 + 12 >> 2] = 0;
  (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = $160($9_1, $8_1, $7_1, $2_1, $3_1, $4_1)), HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
  HEAPF32[$0_1 + 4 >> 2] = $6_1;
  HEAPF32[$0_1 >> 2] = $5_1;
 }
 
 function $432($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  $170($0_1, $2_1, $4_1, $8_1 + 76 | 0, $8_1 + 72 | 0, $8_1 + 48 | 0, $8_1 + 32 | 0);
  $170($1_1, $3_1, $4_1, $8_1 + 68 | 0, $8_1 - -64 | 0, $8_1 + 16 | 0, $8_1);
  $4_1 = 0;
  $9_1 = HEAPF32[$8_1 + 72 >> 2];
  $10_1 = HEAPF32[$8_1 + 68 >> 2];
  label$1 : {
   if ($9_1 < $10_1) {
    break label$1
   }
   $11_1 = HEAPF32[$8_1 + 64 >> 2];
   $12_1 = HEAPF32[$8_1 + 76 >> 2];
   if ($11_1 < $12_1) {
    break label$1
   }
   $4_1 = 1;
   $9_1 = Math_fround($9_1 - $10_1);
   $10_1 = Math_fround($11_1 - $12_1);
   if ($9_1 < $10_1) {
    HEAPF32[$5_1 >> 2] = $9_1;
    $0_1 = HEAP32[$8_1 + 36 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$8_1 + 32 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $0_1;
    $1_1 = $8_1 + 40 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $6_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    $0_1 = HEAP32[$8_1 + 20 >> 2];
    HEAP32[$7_1 >> 2] = HEAP32[$8_1 + 16 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $0_1;
    $1_1 = $8_1 + 24 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $7_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    break label$1;
   }
   HEAPF32[$5_1 >> 2] = $10_1;
   $0_1 = HEAP32[$8_1 + 52 >> 2];
   HEAP32[$6_1 >> 2] = HEAP32[$8_1 + 48 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $0_1;
   $1_1 = $8_1 + 56 | 0;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $0_1 = $6_1 + 8 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $2_1;
   $0_1 = HEAP32[$8_1 + 4 >> 2];
   HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $0_1;
   $1_1 = $8_1 + 8 | 0;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $0_1 = $7_1 + 8 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $2_1;
  }
  global$0 = $8_1 + 80 | 0;
  return $4_1;
 }
 
 function $433($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = Math_fround(0), $33_1 = 0, $34_1 = 0, $35_1 = 0;
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  $203($4_1, 0, $8_1 - -64 | 0);
  $207($4_1, HEAP32[$3_1 + 4 >> 2]);
  $19_1 = -1;
  $11_1 = Math_fround(3402823466385288598117041.0e14);
  $12_1 = 20;
  while (1) {
   if (HEAP32[$1_1 + 28 >> 2] <= ($13_1 | 0)) {
    label$3 : {
     if (($19_1 | 0) < 0) {
      break label$3
     }
     $28_1 = HEAP32[$1_1 + 36 >> 2];
     $10_1 = $28_1 + Math_imul($19_1, 36) | 0;
     $22_1 = HEAP32[$10_1 + 4 >> 2];
     $33_1 = ($22_1 | 0) > 0 ? $22_1 : 0;
     $29_1 = $10_1 + 28 | 0;
     $30_1 = $10_1 + 24 | 0;
     $31_1 = $10_1 + 20 | 0;
     $34_1 = $10_1 + 12 | 0;
     while (1) {
      if (($20_1 | 0) == ($33_1 | 0)) {
       $11_1 = HEAPF32[(Math_imul($19_1, 36) + $28_1 | 0) + 32 >> 2];
       $431($8_1 - -64 | 0, $2_1, HEAPF32[$31_1 >> 2], HEAPF32[$30_1 >> 2], HEAPF32[$29_1 >> 2]);
       $14_1 = $11_1;
       $11_1 = HEAPF32[$8_1 + 64 >> 2];
       $9_1 = HEAPF32[$8_1 + 68 >> 2];
       $15_1 = HEAPF32[$8_1 + 72 >> 2];
       $16_1 = Math_fround($14_1 - Math_fround(Math_fround(Math_fround($11_1 * HEAPF32[$2_1 + 48 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 52 >> 2])) + Math_fround($15_1 * HEAPF32[$2_1 + 56 >> 2])));
       $1_1 = 0;
       $12_1 = 0;
       while (1) {
        if (HEAP32[$3_1 + 4 >> 2] <= ($12_1 | 0)) {
         break label$3
        }
        $2_1 = HEAP32[$3_1 + 12 >> 2] + $1_1 | 0;
        $4_1 = $2_1 + 8 | 0;
        $14_1 = Math_fround($16_1 + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2] * $11_1) + Math_fround(HEAPF32[$2_1 + 4 >> 2] * $9_1)) + Math_fround(HEAPF32[$4_1 >> 2] * $15_1)));
        $14_1 = $5_1 >= $14_1 ? $5_1 : $14_1;
        if ($14_1 <= $6_1) {
         $13_1 = HEAP32[$4_1 + 4 >> 2];
         $10_1 = $8_1 + 56 | 0;
         HEAP32[$10_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$10_1 + 4 >> 2] = $13_1;
         $4_1 = HEAP32[$2_1 + 4 >> 2];
         HEAP32[$8_1 + 48 >> 2] = HEAP32[$2_1 >> 2];
         HEAP32[$8_1 + 52 >> 2] = $4_1;
         FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 16 >> 2]]($7_1, $0_1, $8_1 + 48 | 0, $14_1);
        }
        $1_1 = $1_1 + 16 | 0;
        $12_1 = $12_1 + 1 | 0;
        continue;
       };
      }
      $10_1 = $4_1;
      $13_1 = HEAP32[$1_1 + 16 >> 2];
      $12_1 = HEAP32[$34_1 >> 2];
      $4_1 = $13_1 + (HEAP32[$12_1 + ($20_1 << 2) >> 2] << 4) | 0;
      $20_1 = $20_1 + 1 | 0;
      $12_1 = $13_1 + (HEAP32[$12_1 + (($20_1 | 0) % ($22_1 | 0) << 2) >> 2] << 4) | 0;
      $13_1 = $4_1 + 4 | 0;
      $17_1 = $4_1 + 8 | 0;
      $431($8_1 + 32 | 0, $2_1, Math_fround(HEAPF32[$4_1 >> 2] - HEAPF32[$12_1 >> 2]), Math_fround(HEAPF32[$13_1 >> 2] - HEAPF32[$12_1 + 4 >> 2]), Math_fround(HEAPF32[$17_1 >> 2] - HEAPF32[$12_1 + 8 >> 2]));
      $431($8_1 + 16 | 0, $2_1, HEAPF32[$31_1 >> 2], HEAPF32[$30_1 >> 2], HEAPF32[$29_1 >> 2]);
      $11_1 = HEAPF32[$8_1 + 16 >> 2];
      $9_1 = HEAPF32[$8_1 + 32 >> 2];
      $15_1 = HEAPF32[$8_1 + 24 >> 2];
      $16_1 = HEAPF32[$8_1 + 36 >> 2];
      $14_1 = HEAPF32[$8_1 + 20 >> 2];
      $18_1 = HEAPF32[$8_1 + 40 >> 2];
      $146($8_1, $2_1, HEAPF32[$4_1 >> 2], HEAPF32[$13_1 >> 2], HEAPF32[$17_1 >> 2]);
      label$8 : {
       $13_1 = HEAP32[$3_1 + 4 >> 2];
       if (($13_1 | 0) < 2) {
        break label$8
       }
       $23_1 = Math_fround(-Math_fround(Math_fround($18_1 * $11_1) - Math_fround($15_1 * $9_1)));
       $18_1 = Math_fround(Math_fround($16_1 * $15_1) - Math_fround($18_1 * $14_1));
       $24_1 = Math_fround(Math_fround($14_1 * $9_1) - Math_fround($16_1 * $11_1));
       $32_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$8_1 + 4 >> 2] * $23_1) - Math_fround($18_1 * HEAPF32[$8_1 >> 2])) - Math_fround($24_1 * HEAPF32[$8_1 + 8 >> 2]));
       $4_1 = (HEAP32[$3_1 + 12 >> 2] + ($13_1 << 4) | 0) - 16 | 0;
       $15_1 = HEAPF32[$4_1 + 4 >> 2];
       $16_1 = HEAPF32[$4_1 >> 2];
       $14_1 = HEAPF32[$4_1 + 8 >> 2];
       $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $23_1) - Math_fround($18_1 * $16_1)) - Math_fround($24_1 * $14_1)) - $32_1);
       $12_1 = 0;
       while (1) {
        if (!$13_1) {
         break label$8
        }
        $9_1 = $11_1;
        $17_1 = HEAP32[$3_1 + 12 >> 2] + $12_1 | 0;
        $21_1 = $17_1 + 8 | 0;
        $35_1 = HEAP32[$21_1 + 4 >> 2];
        $4_1 = $8_1 + 72 | 0;
        HEAP32[$4_1 >> 2] = HEAP32[$21_1 >> 2];
        HEAP32[$4_1 + 4 >> 2] = $35_1;
        $21_1 = HEAP32[$17_1 + 4 >> 2];
        HEAP32[$8_1 + 64 >> 2] = HEAP32[$17_1 >> 2];
        HEAP32[$8_1 + 68 >> 2] = $21_1;
        $25_1 = HEAPF32[$8_1 + 68 >> 2];
        $26_1 = HEAPF32[$8_1 + 64 >> 2];
        $27_1 = HEAPF32[$4_1 >> 2];
        $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($25_1 * $23_1) - Math_fround($18_1 * $26_1)) - Math_fround($24_1 * $27_1)) - $32_1);
        label$10 : {
         if ($9_1 < Math_fround(0.0)) {
          if ($11_1 < Math_fround(0.0)) {
           $200($10_1, $8_1 - -64 | 0);
           break label$10;
          }
          HEAP32[$8_1 + 60 >> 2] = 0;
          $9_1 = Math_fround($9_1 / Math_fround($9_1 - $11_1));
          HEAPF32[$8_1 + 56 >> 2] = $14_1 + Math_fround(Math_fround($27_1 - $14_1) * $9_1);
          HEAPF32[$8_1 + 52 >> 2] = $15_1 + Math_fround(Math_fround($25_1 - $15_1) * $9_1);
          HEAPF32[$8_1 + 48 >> 2] = $16_1 + Math_fround(Math_fround($26_1 - $16_1) * $9_1);
          $200($10_1, $8_1 + 48 | 0);
          break label$10;
         }
         if (!($11_1 < Math_fround(0.0))) {
          break label$10
         }
         HEAP32[$8_1 + 60 >> 2] = 0;
         $9_1 = Math_fround($9_1 / Math_fround($9_1 - $11_1));
         HEAPF32[$8_1 + 56 >> 2] = $14_1 + Math_fround(Math_fround($27_1 - $14_1) * $9_1);
         HEAPF32[$8_1 + 52 >> 2] = $15_1 + Math_fround(Math_fround($25_1 - $15_1) * $9_1);
         HEAPF32[$8_1 + 48 >> 2] = $16_1 + Math_fround(Math_fround($26_1 - $16_1) * $9_1);
         $200($10_1, $8_1 + 48 | 0);
         $200($10_1, $8_1 - -64 | 0);
        }
        $13_1 = $13_1 - 1 | 0;
        $12_1 = $12_1 + 16 | 0;
        $14_1 = HEAPF32[$8_1 + 72 >> 2];
        $15_1 = HEAPF32[$8_1 + 68 >> 2];
        $16_1 = HEAPF32[$8_1 + 64 >> 2];
        continue;
       };
      }
      $203($3_1, 0, $8_1 - -64 | 0);
      $4_1 = $3_1;
      $3_1 = $10_1;
      continue;
     };
    }
    global$0 = $8_1 + 80 | 0;
   } else {
    $10_1 = HEAP32[$1_1 + 36 >> 2] + $12_1 | 0;
    $431($8_1 - -64 | 0, $2_1, HEAPF32[$10_1 >> 2], HEAPF32[$10_1 + 4 >> 2], HEAPF32[$10_1 + 8 >> 2]);
    $9_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$8_1 + 64 >> 2] * HEAPF32[$0_1 >> 2]) + Math_fround(HEAPF32[$8_1 + 68 >> 2] * HEAPF32[$0_1 + 4 >> 2])) + Math_fround(HEAPF32[$8_1 + 72 >> 2] * HEAPF32[$0_1 + 8 >> 2]));
    $10_1 = $9_1 < $11_1;
    $11_1 = $10_1 ? $9_1 : $11_1;
    $19_1 = $10_1 ? $13_1 : $19_1;
    $12_1 = $12_1 + 36 | 0;
    $13_1 = $13_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $434($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $6_1 = global$0 - 288 | 0;
  global$0 = $6_1;
  $409(HEAP32[$0_1 + 4 >> 2]);
  $9_1 = HEAPF32[$1_1 + 52 >> 2];
  $12_1 = HEAPF32[$2_1 + 52 >> 2];
  $13_1 = HEAPF32[$3_1 + 52 >> 2];
  $14_1 = HEAPF32[$4_1 + 52 >> 2];
  $10_1 = $1_1 + 56 | 0;
  $15_1 = HEAPF32[$10_1 >> 2];
  $16_1 = HEAPF32[$2_1 + 56 >> 2];
  $11_1 = $3_1 + 56 | 0;
  $17_1 = HEAPF32[$11_1 >> 2];
  $18_1 = HEAPF32[$4_1 + 56 >> 2];
  $19_1 = HEAPF32[$1_1 + 48 >> 2];
  $20_1 = HEAPF32[$2_1 + 48 >> 2];
  $21_1 = HEAPF32[$3_1 + 48 >> 2];
  $22_1 = HEAPF32[$4_1 + 48 >> 2];
  HEAP8[$6_1 + 264 | 0] = 0;
  HEAP32[$6_1 + 260 >> 2] = 1566444395;
  HEAP32[$6_1 + 224 >> 2] = 13780;
  $7_1 = $6_1 + 156 | 0;
  HEAP32[$7_1 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 144 >> 2] = 13624;
  HEAP32[$6_1 + 164 >> 2] = 0;
  HEAP32[$6_1 + 148 >> 2] = 0;
  HEAP32[$6_1 + 152 >> 2] = 1065353216;
  $7_1 = HEAP32[$0_1 + 12 >> 2];
  HEAP32[$6_1 + 176 >> 2] = $7_1;
  $8_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$6_1 + 172 >> 2] = $8_1;
  HEAP32[$6_1 + 168 >> 2] = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$6_1 + 180 >> 2] = HEAP32[$8_1 + 4 >> 2];
  HEAP32[$6_1 + 184 >> 2] = HEAP32[$7_1 + 4 >> 2];
  (wasm2js_i32$0 = $6_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 48 >> 2]]($8_1))), HEAPF32[wasm2js_i32$0 + 188 >> 2] = wasm2js_f32$0;
  $23_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 48 >> 2]]($7_1));
  HEAP32[$6_1 + 216 >> 2] = 1;
  HEAP32[$6_1 + 220 >> 2] = 1;
  HEAP32[$6_1 + 204 >> 2] = -1;
  HEAP8[$6_1 + 196 | 0] = 0;
  HEAPF32[$6_1 + 192 >> 2] = $23_1;
  $7_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0_1 = $6_1 + 16 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  $7_1 = $1_1 + 24 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0_1 = $6_1 + 32 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  $7_1 = $1_1 + 40 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0_1 = $6_1 + 48 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  $7_1 = HEAP32[$10_1 + 4 >> 2];
  $0_1 = $6_1 - -64 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $7_1;
  $7_1 = $3_1 + 8 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0_1 = $6_1 + 80 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  HEAP32[$6_1 + 136 >> 2] = 1566444395;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$6_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$6_1 + 24 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$6_1 + 28 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$6_1 + 40 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$6_1 + 44 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$6_1 + 56 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$6_1 + 60 >> 2] = $0_1;
  $0_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$6_1 + 72 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 76 >> 2] = $0_1;
  $7_1 = $3_1 + 24 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0_1 = $6_1 + 96 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  $7_1 = HEAP32[$3_1 + 20 >> 2];
  $0_1 = $6_1 + 88 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $7_1;
  $7_1 = $3_1 + 40 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0_1 = $6_1 + 112 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  $7_1 = HEAP32[$3_1 + 36 >> 2];
  $0_1 = $6_1 + 104 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$11_1 + 4 >> 2];
  $0_1 = $6_1 + 128 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 52 >> 2];
  $8_1 = $6_1 + 120 | 0;
  $0_1 = $8_1;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $7_1;
  $415($6_1 + 144 | 0, $6_1 + 8 | 0, $6_1 + 224 | 0, 0, 0);
  $10_1 = $6_1 + 252 | 0;
  $11_1 = HEAP32[$10_1 + 4 >> 2];
  $7_1 = $6_1 + 280 | 0;
  $0_1 = $7_1;
  HEAP32[$0_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $11_1;
  $0_1 = HEAP32[$6_1 + 248 >> 2];
  HEAP32[$6_1 + 272 >> 2] = HEAP32[$6_1 + 244 >> 2];
  HEAP32[$6_1 + 276 >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!HEAPU8[$6_1 + 264 | 0]) {
     break label$2
    }
    $17_1 = Math_fround(Math_fround($16_1 - $15_1) - Math_fround($18_1 - $17_1));
    $18_1 = Math_fround(Math_fround($12_1 - $9_1) - Math_fround($14_1 - $13_1));
    $19_1 = Math_fround(Math_fround($20_1 - $19_1) - Math_fround($22_1 - $21_1));
    $10_1 = $3_1 + 48 | 0;
    $4_1 = $4_1 + 48 | 0;
    $11_1 = $1_1 + 48 | 0;
    $2_1 = $2_1 + 48 | 0;
    $0_1 = $6_1 + 244 | 0;
    $24_1 = $6_1 + 56 | 0;
    $12_1 = HEAPF32[$6_1 + 240 >> 2];
    $13_1 = HEAPF32[$6_1 + 236 >> 2];
    $14_1 = HEAPF32[$6_1 + 232 >> 2];
    $3_1 = 32;
    $15_1 = HEAPF32[$6_1 + 228 >> 2];
    $16_1 = HEAPF32[$6_1 + 260 >> 2];
    $9_1 = Math_fround(0.0);
    label$3 : {
     while (1) {
      if ($16_1 > Math_fround(1.0000000474974513e-03)) {
       if (!$3_1) {
        break label$2
       }
       $12_1 = $9_1;
       $9_1 = Math_fround($9_1 - Math_fround($16_1 / Math_fround(Math_fround(Math_fround($19_1 * $15_1) + Math_fround($18_1 * $14_1)) + Math_fround($17_1 * $13_1))));
       if ($9_1 <= $12_1 | $9_1 > Math_fround(1.0) | $9_1 < Math_fround(0.0)) {
        break label$2
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] >> 2]]($5_1, $9_1);
       $435($24_1, $11_1, $2_1, $9_1);
       $435($8_1, $10_1, $4_1, $9_1);
       $415($6_1 + 144 | 0, $6_1 + 8 | 0, $6_1 + 224 | 0, 0, 0);
       $1_1 = 0;
       if (!HEAPU8[$6_1 + 264 | 0]) {
        break label$1
       }
       $16_1 = HEAPF32[$6_1 + 260 >> 2];
       if ($16_1 < Math_fround(0.0)) {
        HEAPF32[$5_1 + 164 >> 2] = $9_1;
        $1_1 = HEAP32[$6_1 + 232 >> 2];
        HEAP32[$5_1 + 132 >> 2] = HEAP32[$6_1 + 228 >> 2];
        HEAP32[$5_1 + 136 >> 2] = $1_1;
        $2_1 = HEAP32[$6_1 + 240 >> 2];
        $1_1 = $5_1 + 140 | 0;
        HEAP32[$1_1 >> 2] = HEAP32[$6_1 + 236 >> 2];
        HEAP32[$1_1 + 4 >> 2] = $2_1;
        $1_1 = HEAP32[$0_1 + 4 >> 2];
        HEAP32[$5_1 + 148 >> 2] = HEAP32[$0_1 >> 2];
        HEAP32[$5_1 + 152 >> 2] = $1_1;
        $0_1 = $0_1 + 8 | 0;
        $2_1 = HEAP32[$0_1 + 4 >> 2];
        $1_1 = $5_1 + 156 | 0;
        HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
        HEAP32[$1_1 + 4 >> 2] = $2_1;
        break label$3;
       } else {
        $1_1 = $0_1 + 8 | 0;
        $25_1 = HEAP32[$1_1 + 4 >> 2];
        HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $25_1;
        $1_1 = HEAP32[$0_1 + 4 >> 2];
        HEAP32[$6_1 + 272 >> 2] = HEAP32[$0_1 >> 2];
        HEAP32[$6_1 + 276 >> 2] = $1_1;
        $3_1 = $3_1 - 1 | 0;
        $12_1 = HEAPF32[$6_1 + 240 >> 2];
        $13_1 = HEAPF32[$6_1 + 236 >> 2];
        $14_1 = HEAPF32[$6_1 + 232 >> 2];
        $15_1 = HEAPF32[$6_1 + 228 >> 2];
        continue;
       }
      }
      break;
     };
     $1_1 = 0;
     if (Math_fround(-HEAPF32[$5_1 + 172 >> 2]) <= Math_fround(Math_fround(Math_fround($19_1 * $15_1) + Math_fround($18_1 * $14_1)) + Math_fround($17_1 * $13_1))) {
      break label$1
     }
     HEAPF32[$5_1 + 132 >> 2] = $15_1;
     HEAPF32[$5_1 + 164 >> 2] = $9_1;
     $0_1 = HEAP32[$6_1 + 276 >> 2];
     HEAP32[$5_1 + 148 >> 2] = HEAP32[$6_1 + 272 >> 2];
     HEAP32[$5_1 + 152 >> 2] = $0_1;
     HEAPF32[$5_1 + 144 >> 2] = $12_1;
     HEAPF32[$5_1 + 140 >> 2] = $13_1;
     HEAPF32[$5_1 + 136 >> 2] = $14_1;
     $1_1 = $6_1 + 280 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $5_1 + 156 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
    }
    $1_1 = 1;
    break label$1;
   }
   $1_1 = 0;
  }
  global$0 = $6_1 + 288 | 0;
  return $1_1 | 0;
 }
 
 function $435($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0);
  $4_1 = Math_fround(Math_fround(1.0) - $3_1);
  HEAPF32[$0_1 >> 2] = Math_fround($4_1 * HEAPF32[$1_1 >> 2]) + Math_fround(HEAPF32[$2_1 >> 2] * $3_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround($4_1 * HEAPF32[$1_1 + 4 >> 2]) + Math_fround(HEAPF32[$2_1 + 4 >> 2] * $3_1);
  HEAPF32[$0_1 + 8 >> 2] = Math_fround($4_1 * HEAPF32[$1_1 + 8 >> 2]) + Math_fround(HEAPF32[$2_1 + 8 >> 2] * $3_1);
 }
 
 function $436($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0;
  if (HEAPF32[$0_1 + 36 >> 2] > $3_1) {
   HEAP8[$0_1 + 40 | 0] = 1;
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$0_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 8 >> 2] = $4_1;
   $1_1 = $1_1 + 8 | 0;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   $4_1 = $0_1 + 12 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$0_1 + 20 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0_1 + 24 >> 2] = $1_1;
   $2_1 = $2_1 + 8 | 0;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $0_1 + 28 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   HEAPF32[$0_1 + 36 >> 2] = $3_1;
  }
 }
 
 function $437($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 240 | 0;
  global$0 = $4_1;
  $7_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if (HEAPF32[$7_1 + 832 >> 2] < $3_1) {
    break label$1
   }
   $6_1 = $2_1 + 8 | 0;
   $8_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 8 >> 2] * $3_1) + HEAPF32[$6_1 >> 2]);
   $5_1 = $2_1 + 4 | 0;
   $11_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 4 >> 2] * $3_1) + HEAPF32[$5_1 >> 2]);
   $13_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $3_1) + HEAPF32[$2_1 >> 2]);
   $7_1 = HEAP32[$7_1 + 820 >> 2];
   $12_1 = ($7_1 | 0) == HEAP32[HEAP32[$0_1 + 8 >> 2] + 8 >> 2];
   label$2 : {
    if (!$12_1) {
     $438($4_1 + 224 | 0, HEAP32[HEAP32[$0_1 + 12 >> 2] + 8 >> 2] + 4 | 0, $13_1, $11_1, $8_1);
     $438($4_1 + 208 | 0, HEAP32[HEAP32[$0_1 + 8 >> 2] + 8 >> 2] + 4 | 0, HEAPF32[$2_1 >> 2], HEAPF32[$5_1 >> 2], HEAPF32[$6_1 >> 2]);
     break label$2;
    }
    $438($4_1 + 224 | 0, $7_1 + 4 | 0, $13_1, $11_1, $8_1);
    $438($4_1 + 208 | 0, HEAP32[HEAP32[$0_1 + 12 >> 2] + 8 >> 2] + 4 | 0, HEAPF32[$2_1 >> 2], HEAPF32[$5_1 >> 2], HEAPF32[$6_1 >> 2]);
   }
   $6_1 = $4_1 + 92 | 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[$6_1 + 4 >> 2] = 0;
   $5_1 = $4_1 + 232 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $6_1 = $4_1 + 8 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $7_1;
   $7_1 = $4_1 + 216 | 0;
   $9_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $4_1 + 24 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $9_1;
   $7_1 = $1_1 + 8 | 0;
   $9_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $4_1 + 72 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $9_1;
   $5_1 = HEAP32[$4_1 + 228 >> 2];
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 + 224 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $5_1 = HEAP32[$4_1 + 212 >> 2];
   HEAP32[$4_1 + 16 >> 2] = HEAP32[$4_1 + 208 >> 2];
   HEAP32[$4_1 + 20 >> 2] = $5_1;
   HEAP32[$4_1 + 84 >> 2] = 0;
   HEAP32[$4_1 + 88 >> 2] = 0;
   HEAPF32[$4_1 + 80 >> 2] = $3_1;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$4_1 + 64 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 68 >> 2] = $5_1;
   $1_1 = 0;
   $2($4_1 + 116 | 0, 0, 48);
   HEAP32[$4_1 + 60 >> 2] = 0;
   HEAPF32[$4_1 + 56 >> 2] = $8_1;
   HEAPF32[$4_1 + 52 >> 2] = $11_1;
   $7_1 = $2_1 + 8 | 0;
   $9_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $4_1 + 40 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $9_1;
   HEAPF32[$4_1 + 48 >> 2] = $13_1;
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$4_1 + 32 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 36 >> 2] = $5_1;
   $5_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = HEAP32[$5_1 + 828 >> 2];
   $7_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = $5_1 + 12 | 0;
   $19_1 = $4_1 - -64 | 0;
   $8_1 = HEAPF32[$6_1 >> 2];
   $3_1 = HEAPF32[$5_1 + 832 >> 2];
   $3_1 = Math_fround($3_1 * $3_1);
   $14_1 = -1;
   $11_1 = HEAPF32[$4_1 + 4 >> 2];
   $13_1 = HEAPF32[$4_1 >> 2];
   while (1) {
    if (($1_1 | 0) != ($7_1 | 0)) {
     $10_1 = Math_fround(HEAPF32[$2_1 - 8 >> 2] - $13_1);
     $15_1 = Math_fround($10_1 * $10_1);
     $10_1 = Math_fround(HEAPF32[$2_1 - 4 >> 2] - $11_1);
     $15_1 = Math_fround($15_1 + Math_fround($10_1 * $10_1));
     $10_1 = Math_fround(HEAPF32[$2_1 >> 2] - $8_1);
     $10_1 = Math_fround($15_1 + Math_fround($10_1 * $10_1));
     $6_1 = $10_1 < $3_1;
     $3_1 = $6_1 ? $10_1 : $3_1;
     $14_1 = $6_1 ? $1_1 : $14_1;
     $2_1 = $2_1 + 204 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue;
    }
    break;
   };
   $5_1 = HEAP32[$0_1 + 8 >> 2];
   $1_1 = HEAP32[$5_1 + 8 >> 2];
   $7_1 = HEAP32[$0_1 + 12 >> 2];
   $2_1 = HEAP32[$7_1 + 8 >> 2];
   HEAPF32[$4_1 + 96 >> 2] = HEAPF32[$1_1 + 232 >> 2] * HEAPF32[$2_1 + 232 >> 2];
   $3_1 = HEAPF32[$1_1 + 228 >> 2];
   $8_1 = HEAPF32[$2_1 + 228 >> 2];
   HEAPF32[$4_1 + 84 >> 2] = Math_min(Math_fround(Math_max(Math_fround($3_1 * $8_1), Math_fround(-10.0))), Math_fround(10.0));
   HEAPF32[$4_1 + 88 >> 2] = Math_min(Math_fround(Math_max(Math_fround(Math_fround($8_1 * HEAPF32[$1_1 + 236 >> 2]) + Math_fround($3_1 * HEAPF32[$2_1 + 236 >> 2])), Math_fround(-10.0))), Math_fround(10.0));
   HEAPF32[$4_1 + 92 >> 2] = Math_min(Math_fround(Math_max(Math_fround(Math_fround($8_1 * HEAPF32[$1_1 + 240 >> 2]) + Math_fround($3_1 * HEAPF32[$2_1 + 240 >> 2])), Math_fround(-10.0))), Math_fround(10.0));
   $9_1 = HEAP32[$1_1 + 204 >> 2];
   label$6 : {
    if (!($9_1 & 128)) {
     $6_1 = 16;
     if (!(HEAPU8[$2_1 + 204 | 0] & 128)) {
      break label$6
     }
    }
    HEAPF32[$4_1 + 152 >> 2] = HEAPF32[$1_1 + 244 >> 2] + HEAPF32[$2_1 + 244 >> 2];
    HEAPF32[$4_1 + 148 >> 2] = Math_fround(1.0) / Math_fround(Math_fround(Math_fround(1.0) / HEAPF32[HEAP32[$5_1 + 8 >> 2] + 248 >> 2]) + Math_fround(Math_fround(1.0) / HEAPF32[HEAP32[$7_1 + 8 >> 2] + 248 >> 2]));
    HEAP32[$4_1 + 120 >> 2] = 8;
    $2_1 = HEAP32[$7_1 + 8 >> 2];
    $1_1 = HEAP32[$5_1 + 8 >> 2];
    $9_1 = HEAP32[$1_1 + 204 >> 2];
    $6_1 = 24;
   }
   if (!(HEAPU8[$2_1 + 205 | 0] & 2 ? 0 : !($9_1 & 512))) {
    HEAP32[$4_1 + 120 >> 2] = $6_1
   }
   label$10 : {
    if (!$12_1) {
     $9_1 = $0_1 + 28 | 0;
     $16_1 = $0_1 + 16 | 0;
     $17_1 = $0_1 + 20 | 0;
     $6_1 = HEAP32[$5_1 >> 2];
     $12_1 = $6_1 ? $6_1 : $5_1;
     $6_1 = HEAP32[$7_1 >> 2];
     $5_1 = $6_1 ? $6_1 : $7_1;
     $6_1 = $1_1;
     $7_1 = $0_1 + 24 | 0;
     break label$10;
    }
    $9_1 = $0_1 + 24 | 0;
    $16_1 = $0_1 + 20 | 0;
    $17_1 = $0_1 + 16 | 0;
    $6_1 = HEAP32[$7_1 >> 2];
    $12_1 = $6_1 ? $6_1 : $7_1;
    $6_1 = HEAP32[$5_1 >> 2];
    $5_1 = $6_1 ? $6_1 : $5_1;
    $6_1 = $2_1;
    $2_1 = $1_1;
    $7_1 = $0_1 + 28 | 0;
   }
   $1_1 = HEAP32[$5_1 + 4 >> 2];
   $5_1 = HEAP32[$12_1 + 4 >> 2];
   HEAP32[$4_1 + 200 >> 2] = $5_1;
   HEAP32[$4_1 + 196 >> 2] = $1_1;
   $12_1 = HEAP32[$7_1 >> 2];
   HEAP32[$4_1 + 112 >> 2] = $12_1;
   $18_1 = HEAP32[$9_1 >> 2];
   HEAP32[$4_1 + 108 >> 2] = $18_1;
   HEAP32[$4_1 + 104 >> 2] = HEAP32[$16_1 >> 2];
   HEAP32[$4_1 + 100 >> 2] = HEAP32[$17_1 >> 2];
   $3_1 = HEAPF32[$2_1 + 236 >> 2];
   $8_1 = HEAPF32[$2_1 + 232 >> 2];
   $11_1 = HEAPF32[$2_1 + 228 >> 2];
   $9_1 = 0;
   $7_1 = HEAP32[$1_1 + 4 >> 2];
   label$12 : {
    label$13 : {
     if (!(($7_1 | 0) == 21 | ($7_1 | 0) == 24 | ($7_1 | 0) == 26)) {
      if (!HEAPU8[$1_1 + 156 | 0] | ($7_1 | 0) != 31) {
       break label$12
      }
      $2_1 = $18_1 << 2;
      $8_1 = HEAPF32[$2_1 + HEAP32[$1_1 + 148 >> 2] >> 2];
      $11_1 = HEAPF32[$2_1 + HEAP32[$1_1 + 108 >> 2] >> 2];
      $3_1 = HEAPF32[$2_1 + HEAP32[$1_1 + 128 >> 2] >> 2];
      break label$13;
     }
     $2_1 = HEAP32[$2_1 + 192 >> 2];
     if (HEAP32[$2_1 + 4 >> 2] != 31 | !HEAPU8[$2_1 + 156 | 0]) {
      break label$12
     }
     $1_1 = HEAP32[$1_1 + 12 >> 2] << 2;
     $8_1 = HEAPF32[$1_1 + HEAP32[$2_1 + 148 >> 2] >> 2];
     $11_1 = HEAPF32[$1_1 + HEAP32[$2_1 + 108 >> 2] >> 2];
     $3_1 = HEAPF32[$1_1 + HEAP32[$2_1 + 128 >> 2] >> 2];
    }
    $9_1 = 1;
   }
   $13_1 = HEAPF32[$6_1 + 236 >> 2];
   $10_1 = HEAPF32[$6_1 + 232 >> 2];
   $15_1 = HEAPF32[$6_1 + 228 >> 2];
   label$15 : {
    label$16 : {
     label$17 : {
      $1_1 = HEAP32[$5_1 + 4 >> 2];
      label$18 : {
       if (!(($1_1 | 0) == 21 | ($1_1 | 0) == 24 | ($1_1 | 0) == 26)) {
        if (($1_1 | 0) != 31) {
         break label$17
        }
        if (HEAPU8[$5_1 + 156 | 0]) {
         break label$18
        }
        break label$17;
       }
       $1_1 = HEAP32[$6_1 + 192 >> 2];
       if (HEAP32[$1_1 + 4 >> 2] != 31 | !HEAPU8[$1_1 + 156 | 0]) {
        break label$17
       }
       $12_1 = HEAP32[$5_1 + 12 >> 2];
       $5_1 = $1_1;
      }
      $1_1 = $12_1 << 2;
      $10_1 = HEAPF32[$1_1 + HEAP32[$5_1 + 148 >> 2] >> 2];
      $15_1 = HEAPF32[$1_1 + HEAP32[$5_1 + 108 >> 2] >> 2];
      $13_1 = HEAPF32[$1_1 + HEAP32[$5_1 + 128 >> 2] >> 2];
      break label$16;
     }
     if (!$9_1) {
      break label$15
     }
    }
    HEAPF32[$4_1 + 96 >> 2] = $8_1 * $10_1;
    HEAPF32[$4_1 + 84 >> 2] = $11_1 * $15_1;
    HEAPF32[$4_1 + 88 >> 2] = $3_1 * $13_1;
   }
   $281($19_1, $4_1 + 164 | 0, $4_1 + 180 | 0);
   $0_1 = HEAP32[$0_1 + 4 >> 2];
   if (($14_1 | 0) >= 0) {
    $0_1 = $0_1 + Math_imul($14_1, 204) | 0;
    $1_1 = $0_1 + 140 | 0;
    $3_1 = HEAPF32[$1_1 >> 2];
    $2_1 = $0_1 + 136 | 0;
    $8_1 = HEAPF32[$2_1 >> 2];
    $6_1 = $0_1 + 132 | 0;
    $13_1 = HEAPF32[$6_1 >> 2];
    $5_1 = $0_1 + 128 | 0;
    $11_1 = HEAPF32[$5_1 >> 2];
    $7_1 = $0_1 + 164 | 0;
    $9_1 = HEAP32[$7_1 >> 2];
    label$21 : {
     if (HEAPU8[$4_1 + 120 | 0] & 16) {
      $10_1 = Math_fround(Math_fround($11_1 * HEAPF32[$0_1 + 88 >> 2]) + Math_fround(0.0));
      if (!(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($3_1 * $3_1)) > Math_fround($10_1 * $10_1))) {
       break label$21
      }
     }
     $12_1 = $0_1 + 120 | 0;
     $14_1 = HEAP32[$12_1 >> 2];
     $3($0_1 + 4 | 0, $4_1, 204);
     HEAPF32[$5_1 >> 2] = $11_1;
     HEAP32[$12_1 >> 2] = $14_1;
     HEAPF32[$6_1 >> 2] = $13_1;
     HEAPF32[$2_1 >> 2] = $8_1;
     HEAPF32[$1_1 >> 2] = $3_1;
    }
    HEAP32[$7_1 >> 2] = $9_1;
    break label$1;
   }
   $406($0_1, $4_1);
  }
  global$0 = $4_1 + 240 | 0;
 }
 
 function $438($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  $6_1 = HEAPF32[$1_1 + 52 >> 2];
  $7_1 = HEAPF32[$1_1 + 56 >> 2];
  $8_1 = HEAPF32[$1_1 + 48 >> 2];
  $439($5_1, $1_1);
  $431($0_1, $5_1, Math_fround($2_1 - $8_1), Math_fround($3_1 - $6_1), Math_fround($4_1 - $7_1));
  global$0 = $5_1 + 48 | 0;
 }
 
 function $439($0_1, $1_1) {
  var $2_1 = Math_fround(0);
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 >> 2] = HEAPF32[$1_1 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$1_1 + 16 >> 2];
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$1_1 + 32 >> 2];
  HEAPF32[$0_1 + 16 >> 2] = HEAPF32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAPF32[$0_1 + 32 >> 2] = HEAPF32[$1_1 + 8 >> 2];
  HEAPF32[$0_1 + 20 >> 2] = HEAPF32[$1_1 + 20 >> 2];
  HEAPF32[$0_1 + 24 >> 2] = HEAPF32[$1_1 + 36 >> 2];
  HEAPF32[$0_1 + 36 >> 2] = HEAPF32[$1_1 + 24 >> 2];
  $2_1 = HEAPF32[$1_1 + 40 >> 2];
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$0_1 + 40 >> 2] = $2_1;
 }
 
 function $440($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
 }
 
 function $441($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  while (1) {
   if ($3_1) {
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $0_1 = $2_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    $3_1 = $3_1 - 1 | 0;
    $2_1 = $2_1 + 16 | 0;
    continue;
   }
   break;
  };
 }
 
 function $442($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($3_1 + 16 | 0, $1_1, $2_1);
  $5_1 = $3_1 + 24 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $4_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 20 >> 2] = $4_1;
  if ($149(HEAPF32[$3_1 + 16 >> 2], HEAPF32[$3_1 + 20 >> 2], HEAPF32[$5_1 >> 2]) < Math_fround(1.4210854715202004e-14)) {
   HEAP32[$3_1 + 24 >> 2] = -1082130432;
   HEAP32[$3_1 + 28 >> 2] = 0;
   HEAP32[$3_1 + 16 >> 2] = -1082130432;
   HEAP32[$3_1 + 20 >> 2] = -1082130432;
  }
  $153($3_1 + 16 | 0);
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = $7_1 * HEAPF32[$3_1 + 24 >> 2];
  HEAPF32[$3_1 + 4 >> 2] = $7_1 * HEAPF32[$3_1 + 20 >> 2];
  HEAPF32[$3_1 >> 2] = $7_1 * HEAPF32[$3_1 + 16 >> 2];
  $158($0_1, $3_1);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $443($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  HEAP32[$2_1 + 12 >> 2] = 0;
  $1_1 = Math_fround($4_1 * Math_fround($3_1 * Math_fround($1_1 * Math_fround(.4000000059604645))));
  HEAPF32[$2_1 + 8 >> 2] = $1_1;
  HEAPF32[$2_1 + 4 >> 2] = $1_1;
  HEAPF32[$2_1 >> 2] = $1_1;
 }
 
 function $444($0_1) {
  $0_1 = $0_1 | 0;
  return 13911;
 }
 
 function $445($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[$0_1 + 32 >> 2] * HEAPF32[$0_1 + 16 >> 2]));
 }
 
 function $446($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 56 >> 2]]($2_1, 72) | 0;
  HEAP8[$2_1 + 60 | 0] = 0;
  HEAP8[$2_1 + 52 | 0] = 0;
  HEAP32[$2_1 + 36 >> 2] = 0;
  HEAP32[$2_1 + 40 >> 2] = 0;
  $3_1 = HEAP32[$0_1 + 12 >> 2];
  $4_1 = HEAP32[$0_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP8[$2_1 + 28 | 0] = 1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$2_1 >> 2] = 14088;
  HEAP32[$2_1 + 24 >> 2] = 0;
  HEAP8[$2_1 + 48 | 0] = 1;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 44 >> 2] = 0;
  HEAP32[$2_1 + 64 >> 2] = $3_1;
  HEAP32[$2_1 + 68 >> 2] = $4_1;
  HEAP32[$2_1 + 56 >> 2] = HEAP32[$1_1 + 4 >> 2];
  return $2_1 | 0;
 }
 
 function $447($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 14088;
  label$1 : {
   if (!HEAPU8[$0_1 + 52 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 56 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  $124($0_1 + 32 | 0);
  $124($0_1 + 12 | 0);
  return $0_1 | 0;
 }
 
 function $448($0_1) {
  $0_1 = $0_1 | 0;
  $33($447($0_1));
 }
 
 function $449($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = Math_fround(0), $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5_1 = global$0 - 1088 | 0;
  global$0 = $5_1;
  $7_1 = HEAP32[$0_1 + 56 >> 2];
  if (!$7_1) {
   $7_1 = HEAP32[$0_1 + 4 >> 2];
   $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 12 >> 2]]($7_1, HEAP32[$1_1 + 8 >> 2], HEAP32[$2_1 + 8 >> 2]) | 0;
   HEAP8[$0_1 + 52 | 0] = 1;
   HEAP32[$0_1 + 56 >> 2] = $7_1;
  }
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       $12_1 = HEAP32[$1_1 + 4 >> 2];
       switch (HEAP32[$12_1 + 4 >> 2] - 8 | 0) {
       case 0:
        break label$5;
       case 2:
        break label$6;
       default:
        break label$4;
       };
      }
      label$7 : {
       switch (HEAP32[$6_1 + 4 >> 2] - 8 | 0) {
       case 2:
        $3_1 = $12_1 + 32 | 0;
        $0_1 = HEAP32[$12_1 + 56 >> 2];
        $17_1 = HEAPF32[$3_1 + ($0_1 << 2) >> 2];
        $21_1 = HEAPF32[$3_1 + (($0_1 + 2 | 0) % 3 << 2) >> 2];
        $3_1 = HEAP32[$6_1 + 56 >> 2];
        $6_1 = $6_1 + 32 | 0;
        $13_1 = Math_fround(HEAPF32[$7_1 + 832 >> 2] + HEAPF32[$4_1 + 32 >> 2]);
        $10_1 = $450($5_1 + 592 | 0, $5_1, $17_1, $21_1, HEAPF32[($3_1 << 2) + $6_1 >> 2], HEAPF32[$6_1 + (($3_1 + 2 | 0) % 3 << 2) >> 2], $0_1, $3_1, HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], $13_1);
        if (!($10_1 < $13_1)) {
         break label$3
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $5_1 + 592 | 0, $5_1, $10_1);
        break label$3;
       case 0:
        break label$7;
       default:
        break label$4;
       };
      }
      $3_1 = $12_1 + 32 | 0;
      $0_1 = HEAP32[$12_1 + 56 >> 2];
      $13_1 = Math_fround(HEAPF32[$7_1 + 832 >> 2] + HEAPF32[$4_1 + 32 >> 2]);
      $10_1 = $450($5_1 + 592 | 0, $5_1, HEAPF32[$3_1 + ($0_1 << 2) >> 2], HEAPF32[$3_1 + (($0_1 + 2 | 0) % 3 << 2) >> 2], Math_fround(0.0), Math_fround(HEAPF32[$6_1 + 32 >> 2] * HEAPF32[$6_1 + 16 >> 2]), $0_1, 1, HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], $13_1);
      if (!($10_1 < $13_1)) {
       break label$3
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $5_1 + 592 | 0, $5_1, $10_1);
      break label$3;
     }
     if (HEAP32[$6_1 + 4 >> 2] != 10) {
      break label$4
     }
     $3_1 = $6_1 + 32 | 0;
     $0_1 = HEAP32[$6_1 + 56 >> 2];
     $13_1 = Math_fround(HEAPF32[$7_1 + 832 >> 2] + HEAPF32[$4_1 + 32 >> 2]);
     $10_1 = $450($5_1 + 592 | 0, $5_1, Math_fround(0.0), Math_fround(HEAPF32[$12_1 + 32 >> 2] * HEAPF32[$12_1 + 16 >> 2]), HEAPF32[$3_1 + ($0_1 << 2) >> 2], HEAPF32[$3_1 + (($0_1 + 2 | 0) % 3 << 2) >> 2], 1, $0_1, HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], $13_1);
     if (!($10_1 < $13_1)) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $5_1 + 592 | 0, $5_1, $10_1);
     break label$3;
    }
    HEAP8[$5_1 + 924 | 0] = 0;
    HEAP32[$5_1 + 900 >> 2] = 953267991;
    $7_1 = $5_1 + 524 | 0;
    HEAP32[$7_1 >> 2] = 0;
    HEAP32[$7_1 + 4 >> 2] = 0;
    HEAP32[$5_1 + 512 >> 2] = 13624;
    HEAP32[$5_1 + 544 >> 2] = $6_1;
    HEAP32[$5_1 + 540 >> 2] = $12_1;
    HEAP32[$5_1 + 516 >> 2] = 0;
    HEAP32[$5_1 + 520 >> 2] = 1065353216;
    HEAP32[$5_1 + 532 >> 2] = HEAP32[$0_1 + 8 >> 2];
    HEAP32[$5_1 + 548 >> 2] = HEAP32[$12_1 + 4 >> 2];
    HEAP32[$5_1 + 552 >> 2] = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$5_1 + 536 >> 2] = $5_1 + 592;
    (wasm2js_i32$0 = $5_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 48 >> 2]]($12_1))), HEAPF32[wasm2js_i32$0 + 556 >> 2] = wasm2js_f32$0;
    $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 48 >> 2]]($6_1));
    HEAP32[$5_1 + 584 >> 2] = 1;
    HEAP32[$5_1 + 588 >> 2] = 1;
    HEAP32[$5_1 + 572 >> 2] = -1;
    HEAP8[$5_1 + 564 | 0] = 0;
    HEAPF32[$5_1 + 560 >> 2] = $10_1;
    HEAP32[$5_1 + 544 >> 2] = $6_1;
    HEAP32[$5_1 + 540 >> 2] = $12_1;
    $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 48 >> 2]]($12_1));
    $13_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 48 >> 2]]($6_1));
    $7_1 = HEAP32[$1_1 + 12 >> 2];
    $11_1 = $7_1 + 8 | 0;
    $15_1 = HEAP32[$11_1 + 4 >> 2];
    $14_1 = $5_1 + 960 | 0;
    HEAP32[$14_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$14_1 + 4 >> 2] = $15_1;
    $11_1 = $7_1 + 24 | 0;
    $15_1 = HEAP32[$11_1 + 4 >> 2];
    $14_1 = $5_1 + 976 | 0;
    HEAP32[$14_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$14_1 + 4 >> 2] = $15_1;
    $11_1 = $7_1 + 40 | 0;
    $15_1 = HEAP32[$11_1 + 4 >> 2];
    $14_1 = $5_1 + 992 | 0;
    HEAP32[$14_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$14_1 + 4 >> 2] = $15_1;
    $11_1 = $7_1 + 56 | 0;
    $15_1 = HEAP32[$11_1 + 4 >> 2];
    $14_1 = $5_1 + 1008 | 0;
    HEAP32[$14_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$14_1 + 4 >> 2] = $15_1;
    $14_1 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$5_1 + 952 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$5_1 + 956 >> 2] = $14_1;
    $14_1 = HEAP32[$7_1 + 20 >> 2];
    HEAP32[$5_1 + 968 >> 2] = HEAP32[$7_1 + 16 >> 2];
    HEAP32[$5_1 + 972 >> 2] = $14_1;
    $14_1 = HEAP32[$7_1 + 36 >> 2];
    HEAP32[$5_1 + 984 >> 2] = HEAP32[$7_1 + 32 >> 2];
    HEAP32[$5_1 + 988 >> 2] = $14_1;
    $14_1 = HEAP32[$7_1 + 52 >> 2];
    HEAP32[$5_1 + 1e3 >> 2] = HEAP32[$7_1 + 48 >> 2];
    HEAP32[$5_1 + 1004 >> 2] = $14_1;
    $10_1 = Math_fround(Math_fround(Math_fround($10_1 + $13_1) + HEAPF32[HEAP32[$0_1 + 56 >> 2] + 832 >> 2]) + HEAPF32[$4_1 + 32 >> 2]);
    HEAPF32[$5_1 + 1080 >> 2] = $10_1 * $10_1;
    $15_1 = HEAP32[$2_1 + 12 >> 2];
    $7_1 = $15_1;
    $16_1 = HEAP32[$7_1 + 20 >> 2];
    $14_1 = $5_1 + 1032 | 0;
    $11_1 = $14_1;
    HEAP32[$11_1 >> 2] = HEAP32[$7_1 + 16 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $16_1;
    $18_1 = HEAP32[$7_1 + 36 >> 2];
    $11_1 = $5_1 + 1048 | 0;
    HEAP32[$11_1 >> 2] = HEAP32[$7_1 + 32 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $18_1;
    $18_1 = HEAP32[$7_1 + 52 >> 2];
    $22_1 = $5_1 + 1064 | 0;
    $16_1 = $22_1;
    HEAP32[$16_1 >> 2] = HEAP32[$7_1 + 48 >> 2];
    HEAP32[$16_1 + 4 >> 2] = $18_1;
    $7_1 = $7_1 + 8 | 0;
    $18_1 = HEAP32[$7_1 + 4 >> 2];
    $16_1 = $5_1 + 1024 | 0;
    HEAP32[$16_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$16_1 + 4 >> 2] = $18_1;
    $16_1 = $15_1 + 24 | 0;
    $18_1 = HEAP32[$16_1 + 4 >> 2];
    $7_1 = $5_1 + 1040 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$16_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $18_1;
    $16_1 = $15_1 + 40 | 0;
    $18_1 = HEAP32[$16_1 + 4 >> 2];
    $7_1 = $5_1 + 1056 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$16_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $18_1;
    $16_1 = $15_1 + 56 | 0;
    $18_1 = HEAP32[$16_1 + 4 >> 2];
    $7_1 = $5_1 + 1072 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$16_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $18_1;
    $7_1 = HEAP32[$15_1 + 4 >> 2];
    HEAP32[$5_1 + 1016 >> 2] = HEAP32[$15_1 >> 2];
    HEAP32[$5_1 + 1020 >> 2] = $7_1;
    label$9 : {
     label$10 : {
      $15_1 = HEAP32[$12_1 + 4 >> 2];
      if (($15_1 | 0) > 6) {
       break label$10
      }
      $7_1 = HEAP32[$6_1 + 4 >> 2];
      if (($7_1 | 0) > 6) {
       break label$10
      }
      $10_1 = Math_fround(0.0);
      $13_1 = Math_fround(0.0);
      if ($15_1) {
       $13_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 48 >> 2]]($12_1));
       $7_1 = HEAP32[$6_1 + 4 >> 2];
      }
      if ($7_1) {
       $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 48 >> 2]]($6_1))
      }
      HEAP8[$5_1 + 324 | 0] = 0;
      HEAPF32[$5_1 + 316 >> 2] = $10_1;
      HEAPF32[$5_1 + 312 >> 2] = $13_1;
      HEAP32[$5_1 + 292 >> 2] = $4_1;
      HEAP32[$5_1 + 288 >> 2] = 14196;
      $7_1 = HEAP32[$12_1 + 56 >> 2];
      if (!$7_1) {
       break label$10
      }
      $15_1 = HEAP32[$6_1 + 56 >> 2];
      if ($15_1) {
       $13_1 = HEAPF32[$4_1 + 32 >> 2];
       $20_1 = HEAPF32[HEAP32[$0_1 + 56 >> 2] + 832 >> 2];
       label$15 : {
        if (HEAPU8[$3_1 + 24 | 0]) {
         $10_1 = Math_fround(-1000000015047466219876688.0e6);
         if ($430($7_1, $15_1, HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], $5_1 + 448 | 0, $4_1)) {
          break label$15
         }
         break label$9;
        }
        $415($5_1 + 512 | 0, $5_1 + 952 | 0, $5_1 + 288 | 0, HEAP32[$3_1 + 20 >> 2], 0);
        $7_1 = $5_1 + 304 | 0;
        $14_1 = HEAP32[$7_1 + 4 >> 2];
        $3_1 = $5_1 + 456 | 0;
        HEAP32[$3_1 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$3_1 + 4 >> 2] = $14_1;
        $3_1 = HEAP32[$5_1 + 300 >> 2];
        HEAP32[$5_1 + 448 >> 2] = HEAP32[$5_1 + 296 >> 2];
        HEAP32[$5_1 + 452 >> 2] = $3_1;
        $10_1 = HEAPF32[$5_1 + 320 >> 2];
        if (!($10_1 < Math_fround(0.0)) | !HEAPU8[$5_1 + 324 | 0]) {
         break label$9
        }
       }
       $7_1 = 0;
       $14_1 = $0_1 + 12 | 0;
       $203($14_1, 0, $5_1);
       $13_1 = Math_fround($20_1 + $13_1);
       $20_1 = Math_fround($10_1 - $13_1);
       $11_1 = HEAP32[$2_1 + 12 >> 2];
       $15_1 = HEAP32[$1_1 + 12 >> 2];
       $3_1 = HEAP32[$6_1 + 56 >> 2];
       $12_1 = HEAP32[$12_1 + 56 >> 2];
       $185($5_1, $5_1 + 448 | 0);
       $2_1 = -1;
       $10_1 = Math_fround(-3402823466385288598117041.0e14);
       $1_1 = 28;
       while (1) if (HEAP32[$3_1 + 28 >> 2] <= ($7_1 | 0)) {
        $7_1 = 0;
        $203($14_1, 0, $5_1 + 368 | 0);
        $6_1 = HEAP32[$3_1 + 36 >> 2] + Math_imul($2_1, 36) | 0;
        $1_1 = HEAP32[$6_1 + 4 >> 2];
        $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
        $16_1 = $0_1 + 32 | 0;
        $18_1 = $6_1 + 12 | 0;
        while (1) if ($1_1) {
         $6_1 = HEAP32[$3_1 + 16 >> 2] + (HEAP32[HEAP32[$18_1 >> 2] + $7_1 >> 2] << 4) | 0;
         $146($5_1 + 368 | 0, $11_1, HEAPF32[$6_1 >> 2], HEAPF32[$6_1 + 4 >> 2], HEAPF32[$6_1 + 8 >> 2]);
         $200($14_1, $5_1 + 368 | 0);
         $1_1 = $1_1 - 1 | 0;
         $7_1 = $7_1 + 4 | 0;
         continue;
        } else {
         if (($2_1 | 0) <= -1) {
          break label$9
         }
         $433($5_1, $12_1, $15_1, $14_1, $16_1, $20_1, $13_1, $4_1);
         break label$9;
        };
       } else {
        $6_1 = HEAP32[$3_1 + 36 >> 2] + $1_1 | 0;
        $431($5_1 + 368 | 0, $11_1, HEAPF32[$6_1 - 8 >> 2], HEAPF32[$6_1 - 4 >> 2], HEAPF32[$6_1 >> 2]);
        $17_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$5_1 + 368 >> 2] * HEAPF32[$5_1 >> 2]) + Math_fround(HEAPF32[$5_1 + 372 >> 2] * HEAPF32[$5_1 + 4 >> 2])) + Math_fround(HEAPF32[$5_1 + 376 >> 2] * HEAPF32[$5_1 + 8 >> 2]));
        $6_1 = $17_1 > $10_1;
        $10_1 = $6_1 ? $17_1 : $10_1;
        $2_1 = $6_1 ? $7_1 : $2_1;
        $1_1 = $1_1 + 36 | 0;
        $7_1 = $7_1 + 1 | 0;
        continue;
       };
      }
      if (!HEAPU8[$3_1 + 24 | 0] | HEAP32[$6_1 + 4 >> 2] != 1) {
       break label$10
      }
      HEAP32[$5_1 + 500 >> 2] = 0;
      HEAP8[$5_1 + 504 | 0] = 1;
      HEAP32[$5_1 + 492 >> 2] = 0;
      HEAP32[$5_1 + 496 >> 2] = 0;
      $14_1 = $6_1 + 60 | 0;
      $11_1 = $6_1 - -64 | 0;
      $15_1 = $6_1 + 68 | 0;
      $146($5_1, HEAP32[$2_1 + 12 >> 2], HEAPF32[$14_1 >> 2], HEAPF32[$11_1 >> 2], HEAPF32[$15_1 >> 2]);
      $200($5_1 + 488 | 0, $5_1);
      $3_1 = $6_1 + 76 | 0;
      $16_1 = $6_1 + 80 | 0;
      $18_1 = $6_1 + 84 | 0;
      $146($5_1, HEAP32[$2_1 + 12 >> 2], HEAPF32[$3_1 >> 2], HEAPF32[$16_1 >> 2], HEAPF32[$18_1 >> 2]);
      $200($5_1 + 488 | 0, $5_1);
      $7_1 = $6_1 + 92 | 0;
      $22_1 = $6_1 + 96 | 0;
      $23_1 = $6_1 + 100 | 0;
      $146($5_1, HEAP32[$2_1 + 12 >> 2], HEAPF32[$7_1 >> 2], HEAPF32[$22_1 >> 2], HEAPF32[$23_1 >> 2]);
      $200($5_1 + 488 | 0, $5_1);
      $29_1 = HEAPF32[$4_1 + 32 >> 2];
      $45_1 = HEAPF32[HEAP32[$0_1 + 56 >> 2] + 832 >> 2];
      $10_1 = HEAPF32[$11_1 >> 2];
      $13_1 = HEAPF32[$16_1 >> 2];
      $20_1 = HEAPF32[$15_1 >> 2];
      $17_1 = HEAPF32[$18_1 >> 2];
      HEAP32[$5_1 + 396 >> 2] = 0;
      HEAP32[$5_1 + 380 >> 2] = 0;
      HEAPF32[$5_1 + 376 >> 2] = $17_1 - $20_1;
      HEAPF32[$5_1 + 372 >> 2] = $13_1 - $10_1;
      $43_1 = HEAPF32[$3_1 >> 2];
      $44_1 = HEAPF32[$14_1 >> 2];
      HEAPF32[$5_1 + 368 >> 2] = $43_1 - $44_1;
      $21_1 = HEAPF32[$22_1 >> 2];
      $24_1 = HEAPF32[$23_1 >> 2];
      HEAP32[$5_1 + 412 >> 2] = 0;
      HEAPF32[$5_1 + 408 >> 2] = $20_1 - $24_1;
      HEAPF32[$5_1 + 404 >> 2] = $10_1 - $21_1;
      $15_1 = $5_1 + 392 | 0;
      HEAPF32[$15_1 >> 2] = $24_1 - $17_1;
      $16_1 = $5_1 + 388 | 0;
      HEAPF32[$16_1 >> 2] = $21_1 - $13_1;
      $10_1 = HEAPF32[$7_1 >> 2];
      HEAPF32[$5_1 + 384 >> 2] = $10_1 - $43_1;
      HEAPF32[$5_1 + 400 >> 2] = $44_1 - $10_1;
      $18_1 = $153($5_1 + 368 | 0);
      $22_1 = $153($5_1 + 384 | 0);
      $23_1 = $153($5_1 + 400 | 0);
      HEAP8[$5_1 + 20 | 0] = 1;
      HEAP32[$5_1 + 16 >> 2] = 0;
      HEAP8[$5_1 + 40 | 0] = 1;
      $11_1 = $5_1 + 8 | 0;
      HEAP32[$11_1 >> 2] = 0;
      HEAP32[$11_1 + 4 >> 2] = 0;
      HEAP32[$5_1 + 36 >> 2] = 0;
      HEAP8[$5_1 + 60 | 0] = 1;
      $11_1 = $5_1 + 28 | 0;
      HEAP32[$11_1 >> 2] = 0;
      HEAP32[$11_1 + 4 >> 2] = 0;
      HEAP32[$5_1 + 56 >> 2] = 0;
      $11_1 = $5_1 + 48 | 0;
      HEAP32[$11_1 >> 2] = 0;
      HEAP32[$11_1 + 4 >> 2] = 0;
      HEAP32[$5_1 >> 2] = 10056;
      $11_1 = $5_1 | 4;
      $200($11_1, $7_1);
      $200($11_1, $14_1);
      $200($11_1, $3_1);
      HEAP32[$5_1 + 460 >> 2] = 0;
      HEAP8[$5_1 + 464 | 0] = 1;
      HEAP32[$5_1 + 452 >> 2] = 0;
      HEAP32[$5_1 + 456 >> 2] = 0;
      HEAP32[$5_1 + 432 >> 2] = 0;
      $205($5_1 + 448 | 0, $5_1 + 432 | 0);
      HEAP32[$5_1 + 432 >> 2] = 1;
      $205($5_1 + 448 | 0, $5_1 + 432 | 0);
      HEAP32[$5_1 + 432 >> 2] = 2;
      $205($5_1 + 448 | 0, $5_1 + 432 | 0);
      HEAP32[$5_1 + 444 >> 2] = 0;
      $10_1 = HEAPF32[$16_1 >> 2];
      $13_1 = HEAPF32[$5_1 + 368 >> 2];
      $20_1 = HEAPF32[$5_1 + 372 >> 2];
      $17_1 = HEAPF32[$5_1 + 384 >> 2];
      HEAPF32[$5_1 + 440 >> 2] = Math_fround($10_1 * $13_1) - Math_fround($20_1 * $17_1);
      $21_1 = $17_1;
      $17_1 = HEAPF32[$5_1 + 376 >> 2];
      $24_1 = $13_1;
      $13_1 = HEAPF32[$15_1 >> 2];
      HEAPF32[$5_1 + 436 >> 2] = Math_fround($21_1 * $17_1) - Math_fround($24_1 * $13_1);
      HEAPF32[$5_1 + 432 >> 2] = Math_fround($20_1 * $13_1) - Math_fround($17_1 * $10_1);
      $153($5_1 + 432 | 0);
      $3_1 = HEAP32[$5_1 + 452 >> 2];
      $7_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
      $10_1 = Math_fround(1000000015047466219876688.0e6);
      $13_1 = HEAPF32[$5_1 + 440 >> 2];
      $20_1 = HEAPF32[$5_1 + 436 >> 2];
      $17_1 = HEAPF32[$5_1 + 432 >> 2];
      $3_1 = HEAP32[$5_1 + 460 >> 2];
      while (1) if ($7_1) {
       $11_1 = $14_1 + (HEAP32[$3_1 >> 2] << 4) | 0;
       $21_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$11_1 >> 2] * $17_1) + Math_fround(HEAPF32[$11_1 + 4 >> 2] * $20_1)) + Math_fround(HEAPF32[$11_1 + 8 >> 2] * $13_1));
       $10_1 = $10_1 > $21_1 ? $21_1 : $10_1;
       $7_1 = $7_1 - 1 | 0;
       $3_1 = $3_1 + 4 | 0;
       continue;
      } else {
       HEAPF32[$5_1 + 480 >> 2] = -$10_1;
       HEAPF32[$5_1 + 476 >> 2] = $13_1;
       HEAPF32[$5_1 + 472 >> 2] = $20_1;
       HEAPF32[$5_1 + 468 >> 2] = $17_1;
       $15_1 = $5_1 + 24 | 0;
       $206($15_1, $5_1 + 448 | 0);
       $124($5_1 + 448 | 0);
       HEAP32[$5_1 + 460 >> 2] = 0;
       HEAP8[$5_1 + 464 | 0] = 1;
       HEAP32[$5_1 + 452 >> 2] = 0;
       HEAP32[$5_1 + 456 >> 2] = 0;
       HEAP32[$5_1 + 432 >> 2] = 0;
       $205($5_1 + 448 | 0, $5_1 + 432 | 0);
       HEAP32[$5_1 + 432 >> 2] = 2;
       $205($5_1 + 448 | 0, $5_1 + 432 | 0);
       HEAP32[$5_1 + 432 >> 2] = 1;
       $205($5_1 + 448 | 0, $5_1 + 432 | 0);
       HEAP32[$5_1 + 444 >> 2] = 0;
       $10_1 = HEAPF32[$5_1 + 388 >> 2];
       $13_1 = HEAPF32[$5_1 + 368 >> 2];
       $20_1 = HEAPF32[$5_1 + 372 >> 2];
       $17_1 = HEAPF32[$5_1 + 384 >> 2];
       HEAPF32[$5_1 + 440 >> 2] = -Math_fround(Math_fround($10_1 * $13_1) - Math_fround($20_1 * $17_1));
       $21_1 = $17_1;
       $17_1 = HEAPF32[$5_1 + 376 >> 2];
       $24_1 = $13_1;
       $13_1 = HEAPF32[$5_1 + 392 >> 2];
       HEAPF32[$5_1 + 436 >> 2] = -Math_fround(Math_fround($21_1 * $17_1) - Math_fround($24_1 * $13_1));
       HEAPF32[$5_1 + 432 >> 2] = -Math_fround(Math_fround($20_1 * $13_1) - Math_fround($17_1 * $10_1));
       $153($5_1 + 432 | 0);
       $3_1 = HEAP32[$5_1 + 452 >> 2];
       $7_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
       $10_1 = Math_fround(1000000015047466219876688.0e6);
       $13_1 = HEAPF32[$5_1 + 440 >> 2];
       $20_1 = HEAPF32[$5_1 + 436 >> 2];
       $17_1 = HEAPF32[$5_1 + 432 >> 2];
       $3_1 = HEAP32[$5_1 + 460 >> 2];
       while (1) if ($7_1) {
        $11_1 = $14_1 + (HEAP32[$3_1 >> 2] << 4) | 0;
        $21_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$11_1 >> 2] * $17_1) + Math_fround(HEAPF32[$11_1 + 4 >> 2] * $20_1)) + Math_fround(HEAPF32[$11_1 + 8 >> 2] * $13_1));
        $10_1 = $10_1 > $21_1 ? $21_1 : $10_1;
        $7_1 = $7_1 - 1 | 0;
        $3_1 = $3_1 + 4 | 0;
        continue;
       } else {
        HEAPF32[$5_1 + 480 >> 2] = -$10_1;
        HEAPF32[$5_1 + 476 >> 2] = $13_1;
        HEAPF32[$5_1 + 472 >> 2] = $20_1;
        HEAPF32[$5_1 + 468 >> 2] = $17_1;
        $206($15_1, $5_1 + 448 | 0);
        $124($5_1 + 448 | 0);
        $3_1 = $5_1 + 44 | 0;
        $200($3_1, $18_1);
        $200($3_1, $22_1);
        $200($3_1, $23_1);
        $166($5_1);
        FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 96 >> 2]]($6_1, $5_1);
        $161($5_1);
        if ($430(HEAP32[$12_1 + 56 >> 2], HEAP32[$6_1 + 56 >> 2], HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], $5_1, $4_1)) {
         $2_1 = $0_1 + 32 | 0;
         $203($2_1, 0, $5_1 + 368 | 0);
         $10_1 = Math_fround($45_1 + $29_1);
         $433($5_1, HEAP32[$12_1 + 56 >> 2], HEAP32[$1_1 + 12 >> 2], $5_1 + 488 | 0, $2_1, Math_fround(Math_fround(-1000000015047466219876688.0e6) - $10_1), $10_1, $4_1);
        }
        if (HEAPU8[$0_1 + 52 | 0]) {
         $451($4_1)
        }
        $124($5_1 + 488 | 0);
        break label$2;
       };
      };
     }
     $415($5_1 + 512 | 0, $5_1 + 952 | 0, $4_1, HEAP32[$3_1 + 20 >> 2], 0);
     label$31 : {
      if (!HEAP32[$0_1 + 64 >> 2] | HEAP32[HEAP32[$4_1 + 4 >> 2] + 828 >> 2] >= HEAP32[$0_1 + 68 >> 2]) {
       break label$31
      }
      $13_1 = HEAPF32[$5_1 + 516 >> 2];
      $20_1 = HEAPF32[$5_1 + 520 >> 2];
      $17_1 = HEAPF32[$5_1 + 524 >> 2];
      $10_1 = $149($13_1, $20_1, $17_1);
      if (!($10_1 > Math_fround(1.1920928955078125e-07))) {
       break label$31
      }
      $15_1 = $5_1 + 1016 | 0;
      $23_1 = $5_1 + 1e3 | 0;
      $16_1 = $5_1 + 984 | 0;
      $18_1 = $5_1 + 968 | 0;
      HEAP32[$5_1 + 444 >> 2] = 0;
      $10_1 = Math_fround(Math_fround(1.0) / $10_1);
      $17_1 = Math_fround($10_1 * $17_1);
      HEAPF32[$5_1 + 440 >> 2] = $17_1;
      $21_1 = Math_fround($10_1 * $20_1);
      HEAPF32[$5_1 + 436 >> 2] = $21_1;
      $24_1 = Math_fround($10_1 * $13_1);
      HEAPF32[$5_1 + 432 >> 2] = $24_1;
      $281($5_1 + 432 | 0, $5_1 + 448 | 0, $5_1 + 488 | 0);
      $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 16 >> 2]]($12_1));
      $13_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 16 >> 2]]($6_1));
      $26_1 = $10_1 < $13_1;
      $10_1 = Math_fround(Math_fround(.019999999552965164) / ($26_1 ? $10_1 : $13_1));
      label$32 : {
       if ($26_1) {
        $6_1 = $5_1 + 960 | 0;
        $12_1 = HEAP32[$6_1 + 4 >> 2];
        $7_1 = $5_1 + 376 | 0;
        HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $12_1;
        $6_1 = $18_1 + 8 | 0;
        $12_1 = HEAP32[$6_1 + 4 >> 2];
        $7_1 = $5_1 + 392 | 0;
        HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $12_1;
        $6_1 = $16_1 + 8 | 0;
        $12_1 = HEAP32[$6_1 + 4 >> 2];
        $7_1 = $5_1 + 408 | 0;
        HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $12_1;
        $6_1 = $23_1 + 8 | 0;
        $12_1 = HEAP32[$6_1 + 4 >> 2];
        $7_1 = $5_1 + 424 | 0;
        HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $12_1;
        $7_1 = HEAP32[$5_1 + 956 >> 2];
        HEAP32[$5_1 + 368 >> 2] = HEAP32[$5_1 + 952 >> 2];
        HEAP32[$5_1 + 372 >> 2] = $7_1;
        $7_1 = HEAP32[$18_1 + 4 >> 2];
        HEAP32[$5_1 + 384 >> 2] = HEAP32[$18_1 >> 2];
        HEAP32[$5_1 + 388 >> 2] = $7_1;
        $7_1 = HEAP32[$16_1 + 4 >> 2];
        HEAP32[$5_1 + 400 >> 2] = HEAP32[$16_1 >> 2];
        HEAP32[$5_1 + 404 >> 2] = $7_1;
        $7_1 = HEAP32[$23_1 + 4 >> 2];
        HEAP32[$5_1 + 416 >> 2] = HEAP32[$23_1 >> 2];
        HEAP32[$5_1 + 420 >> 2] = $7_1;
        $27_1 = $5_1 + 400 | 0;
        $28_1 = $5_1 + 384 | 0;
        $7_1 = $5_1 + 416 | 0;
        break label$32;
       }
       $6_1 = $15_1 + 8 | 0;
       $12_1 = HEAP32[$6_1 + 4 >> 2];
       $7_1 = $5_1 + 376 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $12_1;
       $6_1 = $14_1 + 8 | 0;
       $12_1 = HEAP32[$6_1 + 4 >> 2];
       $7_1 = $5_1 + 392 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $12_1;
       $6_1 = $11_1 + 8 | 0;
       $12_1 = HEAP32[$6_1 + 4 >> 2];
       $7_1 = $5_1 + 408 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $12_1;
       $6_1 = $22_1 + 8 | 0;
       $12_1 = HEAP32[$6_1 + 4 >> 2];
       $7_1 = $5_1 + 424 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $12_1;
       $7_1 = HEAP32[$15_1 + 4 >> 2];
       HEAP32[$5_1 + 368 >> 2] = HEAP32[$15_1 >> 2];
       HEAP32[$5_1 + 372 >> 2] = $7_1;
       $7_1 = HEAP32[$14_1 + 4 >> 2];
       HEAP32[$5_1 + 384 >> 2] = HEAP32[$14_1 >> 2];
       HEAP32[$5_1 + 388 >> 2] = $7_1;
       $7_1 = HEAP32[$11_1 + 4 >> 2];
       HEAP32[$5_1 + 400 >> 2] = HEAP32[$11_1 >> 2];
       HEAP32[$5_1 + 404 >> 2] = $7_1;
       $7_1 = HEAP32[$22_1 + 4 >> 2];
       HEAP32[$5_1 + 416 >> 2] = HEAP32[$22_1 >> 2];
       HEAP32[$5_1 + 420 >> 2] = $7_1;
       $27_1 = $5_1 + 400 | 0;
       $28_1 = $5_1 + 384 | 0;
       $7_1 = $5_1 + 416 | 0;
      }
      $29_1 = Math_fround(Math_min($10_1, Math_fround(.39269909262657166)));
      $30_1 = $5_1 + 216 | 0;
      $31_1 = $5_1 + 200 | 0;
      $32_1 = $5_1 + 184 | 0;
      $33_1 = $5_1 + 168 | 0;
      $34_1 = $5_1 + 152 | 0;
      $35_1 = $5_1 + 136 | 0;
      $36_1 = $5_1 + 120 | 0;
      $37_1 = $5_1 + 104 | 0;
      $38_1 = $5_1 + 88 | 0;
      $39_1 = $5_1 + 72 | 0;
      $40_1 = $5_1 + 56 | 0;
      $41_1 = $5_1 + 40 | 0;
      $12_1 = $5_1 + 32 | 0;
      $25_1 = $5_1 + 16 | 0;
      $10_1 = HEAPF32[$5_1 + 456 >> 2];
      $13_1 = HEAPF32[$5_1 + 452 >> 2];
      $20_1 = HEAPF32[$5_1 + 448 >> 2];
      while (1) {
       if (HEAP32[$0_1 + 64 >> 2] <= ($42_1 | 0)) {
        break label$31
       }
       if ($149($20_1, $13_1, $10_1) > Math_fround(1.1920928955078125e-07)) {
        $452($5_1 + 352 | 0, $20_1, $13_1, $10_1, $29_1);
        $452($5_1 + 336 | 0, $24_1, $21_1, $17_1, Math_fround(Math_fround(Math_fround(6.2831854820251465) / Math_fround(HEAP32[$0_1 + 64 >> 2])) * Math_fround($42_1 | 0)));
        label$36 : {
         if ($26_1) {
          HEAPF32[$5_1 + 248 >> 2] = -HEAPF32[$5_1 + 344 >> 2];
          HEAPF32[$5_1 + 244 >> 2] = -HEAPF32[$5_1 + 340 >> 2];
          HEAPF32[$5_1 + 240 >> 2] = -HEAPF32[$5_1 + 336 >> 2];
          HEAPF32[$5_1 + 252 >> 2] = HEAPF32[$5_1 + 348 >> 2];
          $453($5_1 + 256 | 0, $5_1 + 240 | 0, $5_1 + 352 | 0);
          $453($5_1 + 272 | 0, $5_1 + 256 | 0, $5_1 + 336 | 0);
          $454($5_1 + 288 | 0, $5_1 + 272 | 0);
          $455($5_1, $5_1 + 288 | 0, HEAP32[$1_1 + 12 >> 2]);
          $8_1 = $5_1 + 8 | 0;
          $9_1 = HEAP32[$8_1 + 4 >> 2];
          $6_1 = $5_1 + 960 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $9_1;
          $6_1 = HEAP32[$25_1 + 4 >> 2];
          HEAP32[$18_1 >> 2] = HEAP32[$25_1 >> 2];
          HEAP32[$18_1 + 4 >> 2] = $6_1;
          $8_1 = $25_1 + 8 | 0;
          $9_1 = HEAP32[$8_1 + 4 >> 2];
          $6_1 = $18_1 + 8 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $9_1;
          $6_1 = HEAP32[$12_1 + 4 >> 2];
          HEAP32[$16_1 >> 2] = HEAP32[$12_1 >> 2];
          HEAP32[$16_1 + 4 >> 2] = $6_1;
          $8_1 = $12_1 + 8 | 0;
          $9_1 = HEAP32[$8_1 + 4 >> 2];
          $6_1 = $16_1 + 8 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $9_1;
          $6_1 = HEAP32[$5_1 + 4 >> 2];
          HEAP32[$5_1 + 952 >> 2] = HEAP32[$5_1 >> 2];
          HEAP32[$5_1 + 956 >> 2] = $6_1;
          $8_1 = HEAP32[$2_1 + 12 >> 2];
          $6_1 = $8_1;
          $9_1 = HEAP32[$6_1 + 4 >> 2];
          HEAP32[$15_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$15_1 + 4 >> 2] = $9_1;
          $9_1 = HEAP32[$6_1 + 20 >> 2];
          HEAP32[$14_1 >> 2] = HEAP32[$6_1 + 16 >> 2];
          HEAP32[$14_1 + 4 >> 2] = $9_1;
          $9_1 = HEAP32[$6_1 + 36 >> 2];
          HEAP32[$11_1 >> 2] = HEAP32[$6_1 + 32 >> 2];
          HEAP32[$11_1 + 4 >> 2] = $9_1;
          $9_1 = HEAP32[$6_1 + 52 >> 2];
          HEAP32[$22_1 >> 2] = HEAP32[$6_1 + 48 >> 2];
          HEAP32[$22_1 + 4 >> 2] = $9_1;
          $6_1 = $6_1 + 8 | 0;
          $19_1 = HEAP32[$6_1 + 4 >> 2];
          $9_1 = $15_1 + 8 | 0;
          HEAP32[$9_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$9_1 + 4 >> 2] = $19_1;
          $9_1 = $8_1 + 24 | 0;
          $19_1 = HEAP32[$9_1 + 4 >> 2];
          $6_1 = $14_1 + 8 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $19_1;
          $9_1 = $8_1 + 40 | 0;
          $19_1 = HEAP32[$9_1 + 4 >> 2];
          $6_1 = $11_1 + 8 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $19_1;
          $8_1 = $8_1 + 56 | 0;
          $9_1 = HEAP32[$8_1 + 4 >> 2];
          $6_1 = $22_1 + 8 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $9_1;
          break label$36;
         }
         $8_1 = HEAP32[$1_1 + 12 >> 2];
         $6_1 = $8_1;
         $9_1 = HEAP32[$6_1 + 20 >> 2];
         HEAP32[$18_1 >> 2] = HEAP32[$6_1 + 16 >> 2];
         HEAP32[$18_1 + 4 >> 2] = $9_1;
         $9_1 = HEAP32[$6_1 + 36 >> 2];
         HEAP32[$16_1 >> 2] = HEAP32[$6_1 + 32 >> 2];
         HEAP32[$16_1 + 4 >> 2] = $9_1;
         $9_1 = HEAP32[$6_1 + 52 >> 2];
         HEAP32[$23_1 >> 2] = HEAP32[$6_1 + 48 >> 2];
         HEAP32[$23_1 + 4 >> 2] = $9_1;
         $6_1 = $6_1 + 8 | 0;
         $19_1 = HEAP32[$6_1 + 4 >> 2];
         $9_1 = $5_1 + 960 | 0;
         HEAP32[$9_1 >> 2] = HEAP32[$6_1 >> 2];
         HEAP32[$9_1 + 4 >> 2] = $19_1;
         $9_1 = $8_1 + 24 | 0;
         $19_1 = HEAP32[$9_1 + 4 >> 2];
         $6_1 = $18_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $19_1;
         $9_1 = $8_1 + 40 | 0;
         $19_1 = HEAP32[$9_1 + 4 >> 2];
         $6_1 = $16_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $19_1;
         $9_1 = $8_1 + 56 | 0;
         $19_1 = HEAP32[$9_1 + 4 >> 2];
         $6_1 = $23_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $19_1;
         $6_1 = HEAP32[$8_1 + 4 >> 2];
         HEAP32[$5_1 + 952 >> 2] = HEAP32[$8_1 >> 2];
         HEAP32[$5_1 + 956 >> 2] = $6_1;
         HEAPF32[$5_1 + 248 >> 2] = -HEAPF32[$5_1 + 344 >> 2];
         HEAPF32[$5_1 + 244 >> 2] = -HEAPF32[$5_1 + 340 >> 2];
         HEAPF32[$5_1 + 240 >> 2] = -HEAPF32[$5_1 + 336 >> 2];
         HEAPF32[$5_1 + 252 >> 2] = HEAPF32[$5_1 + 348 >> 2];
         $453($5_1 + 256 | 0, $5_1 + 240 | 0, $5_1 + 352 | 0);
         $453($5_1 + 272 | 0, $5_1 + 256 | 0, $5_1 + 336 | 0);
         $454($5_1 + 288 | 0, $5_1 + 272 | 0);
         $455($5_1, $5_1 + 288 | 0, HEAP32[$2_1 + 12 >> 2]);
         $8_1 = $5_1 + 8 | 0;
         $9_1 = HEAP32[$8_1 + 4 >> 2];
         $6_1 = $15_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $9_1;
         $6_1 = HEAP32[$5_1 + 4 >> 2];
         HEAP32[$15_1 >> 2] = HEAP32[$5_1 >> 2];
         HEAP32[$15_1 + 4 >> 2] = $6_1;
         $6_1 = HEAP32[$25_1 + 4 >> 2];
         HEAP32[$14_1 >> 2] = HEAP32[$25_1 >> 2];
         HEAP32[$14_1 + 4 >> 2] = $6_1;
         $8_1 = $25_1 + 8 | 0;
         $9_1 = HEAP32[$8_1 + 4 >> 2];
         $6_1 = $14_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $9_1;
         $6_1 = HEAP32[$12_1 + 4 >> 2];
         HEAP32[$11_1 >> 2] = HEAP32[$12_1 >> 2];
         HEAP32[$11_1 + 4 >> 2] = $6_1;
         $8_1 = $12_1 + 8 | 0;
         $9_1 = HEAP32[$8_1 + 4 >> 2];
         $6_1 = $11_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $9_1;
        }
        $6_1 = HEAP32[$5_1 + 956 >> 2];
        HEAP32[$41_1 >> 2] = HEAP32[$5_1 + 952 >> 2];
        HEAP32[$41_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$18_1 + 4 >> 2];
        HEAP32[$40_1 >> 2] = HEAP32[$18_1 >> 2];
        HEAP32[$40_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$16_1 + 4 >> 2];
        HEAP32[$39_1 >> 2] = HEAP32[$16_1 >> 2];
        HEAP32[$39_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$23_1 + 4 >> 2];
        HEAP32[$38_1 >> 2] = HEAP32[$23_1 >> 2];
        HEAP32[$38_1 + 4 >> 2] = $6_1;
        $8_1 = $5_1 + 960 | 0;
        $9_1 = HEAP32[$8_1 + 4 >> 2];
        $6_1 = $41_1 + 8 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $9_1;
        $8_1 = $18_1 + 8 | 0;
        $9_1 = HEAP32[$8_1 + 4 >> 2];
        $6_1 = $40_1 + 8 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $9_1;
        $8_1 = $16_1 + 8 | 0;
        $9_1 = HEAP32[$8_1 + 4 >> 2];
        $6_1 = $39_1 + 8 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $9_1;
        $8_1 = $23_1 + 8 | 0;
        $9_1 = HEAP32[$8_1 + 4 >> 2];
        $6_1 = $38_1 + 8 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $9_1;
        HEAP32[$5_1 + 32 >> 2] = 0;
        HEAP32[$5_1 + 36 >> 2] = $4_1;
        HEAP32[$5_1 >> 2] = 14224;
        $6_1 = HEAP32[$3_1 + 20 >> 2];
        $9_1 = $15_1 + 8 | 0;
        $19_1 = HEAP32[$9_1 + 4 >> 2];
        $8_1 = $37_1 + 8 | 0;
        HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$8_1 + 4 >> 2] = $19_1;
        $8_1 = HEAP32[$15_1 + 4 >> 2];
        HEAP32[$37_1 >> 2] = HEAP32[$15_1 >> 2];
        HEAP32[$37_1 + 4 >> 2] = $8_1;
        $9_1 = $14_1 + 8 | 0;
        $19_1 = HEAP32[$9_1 + 4 >> 2];
        $8_1 = $36_1 + 8 | 0;
        HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$8_1 + 4 >> 2] = $19_1;
        $8_1 = HEAP32[$14_1 + 4 >> 2];
        HEAP32[$36_1 >> 2] = HEAP32[$14_1 >> 2];
        HEAP32[$36_1 + 4 >> 2] = $8_1;
        $9_1 = $11_1 + 8 | 0;
        $19_1 = HEAP32[$9_1 + 4 >> 2];
        $8_1 = $35_1 + 8 | 0;
        HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$8_1 + 4 >> 2] = $19_1;
        $8_1 = HEAP32[$11_1 + 4 >> 2];
        HEAP32[$35_1 >> 2] = HEAP32[$11_1 >> 2];
        HEAP32[$35_1 + 4 >> 2] = $8_1;
        $9_1 = $22_1 + 8 | 0;
        $19_1 = HEAP32[$9_1 + 4 >> 2];
        $8_1 = $34_1 + 8 | 0;
        HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$8_1 + 4 >> 2] = $19_1;
        $8_1 = HEAP32[$22_1 + 4 >> 2];
        HEAP32[$34_1 >> 2] = HEAP32[$22_1 >> 2];
        HEAP32[$34_1 + 4 >> 2] = $8_1;
        $9_1 = $5_1 + 376 | 0;
        $19_1 = HEAP32[$9_1 + 4 >> 2];
        $8_1 = $33_1 + 8 | 0;
        HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$8_1 + 4 >> 2] = $19_1;
        $8_1 = HEAP32[$5_1 + 372 >> 2];
        HEAP32[$33_1 >> 2] = HEAP32[$5_1 + 368 >> 2];
        HEAP32[$33_1 + 4 >> 2] = $8_1;
        $9_1 = $28_1 + 8 | 0;
        $19_1 = HEAP32[$9_1 + 4 >> 2];
        $8_1 = $32_1 + 8 | 0;
        HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$8_1 + 4 >> 2] = $19_1;
        $8_1 = HEAP32[$28_1 + 4 >> 2];
        HEAP32[$32_1 >> 2] = HEAP32[$28_1 >> 2];
        HEAP32[$32_1 + 4 >> 2] = $8_1;
        $9_1 = $27_1 + 8 | 0;
        $19_1 = HEAP32[$9_1 + 4 >> 2];
        $8_1 = $31_1 + 8 | 0;
        HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$8_1 + 4 >> 2] = $19_1;
        $8_1 = HEAP32[$27_1 + 4 >> 2];
        HEAP32[$31_1 >> 2] = HEAP32[$27_1 >> 2];
        HEAP32[$31_1 + 4 >> 2] = $8_1;
        $9_1 = $7_1 + 8 | 0;
        $19_1 = HEAP32[$9_1 + 4 >> 2];
        $8_1 = $30_1 + 8 | 0;
        HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$8_1 + 4 >> 2] = $19_1;
        $8_1 = HEAP32[$7_1 + 4 >> 2];
        HEAP32[$30_1 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$30_1 + 4 >> 2] = $8_1;
        HEAP32[$5_1 + 236 >> 2] = $6_1;
        HEAP8[$5_1 + 232 | 0] = $26_1;
        $415($5_1 + 512 | 0, $5_1 + 952 | 0, $5_1, $6_1, 0);
       }
       $42_1 = $42_1 + 1 | 0;
       continue;
      };
     }
     if (!HEAPU8[$0_1 + 52 | 0]) {
      break label$2
     }
     break label$3;
    }
    if (!HEAPU8[$0_1 + 52 | 0]) {
     break label$2
    }
   }
   $451($4_1);
  }
  global$0 = $5_1 + 1088 | 0;
 }
 
 function $450($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  var $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0);
  $15_1 = global$0 - 32 | 0;
  global$0 = $15_1;
  HEAP32[$15_1 + 28 >> 2] = 0;
  $6_1 = ($6_1 << 2) + $8_1 | 0;
  $16_1 = HEAPF32[$6_1 >> 2];
  HEAPF32[$15_1 + 16 >> 2] = $16_1;
  $17_1 = HEAPF32[$6_1 + 16 >> 2];
  HEAPF32[$15_1 + 20 >> 2] = $17_1;
  $19_1 = HEAPF32[$6_1 + 32 >> 2];
  HEAPF32[$15_1 + 24 >> 2] = $19_1;
  $6_1 = ($7_1 << 2) + $9_1 | 0;
  $20_1 = HEAPF32[$6_1 >> 2];
  $21_1 = Math_fround(HEAPF32[$9_1 + 48 >> 2] - HEAPF32[$8_1 + 48 >> 2]);
  $22_1 = HEAPF32[$6_1 + 16 >> 2];
  $23_1 = Math_fround(HEAPF32[$9_1 + 52 >> 2] - HEAPF32[$8_1 + 52 >> 2]);
  $24_1 = HEAPF32[$6_1 + 32 >> 2];
  $25_1 = Math_fround(HEAPF32[$9_1 + 56 >> 2] - HEAPF32[$8_1 + 56 >> 2]);
  $13_1 = Math_fround(Math_fround(Math_fround($20_1 * $21_1) + Math_fround($22_1 * $23_1)) + Math_fround($24_1 * $25_1));
  $18_1 = Math_fround(Math_fround(Math_fround($16_1 * $21_1) + Math_fround($17_1 * $23_1)) + Math_fround($19_1 * $25_1));
  $14_1 = Math_fround(Math_fround(Math_fround($16_1 * $20_1) + Math_fround($17_1 * $22_1)) + Math_fround($19_1 * $24_1));
  $12_1 = Math_fround(Math_fround(1.0) - Math_fround($14_1 * $14_1));
  label$1 : {
   if ($12_1 == Math_fround(0.0)) {
    break label$1
   }
   $11_1 = Math_fround(-$2_1);
   $12_1 = Math_fround(Math_fround($18_1 - Math_fround($14_1 * $13_1)) / $12_1);
   if ($11_1 > $12_1) {
    break label$1
   }
   $11_1 = $12_1;
   if (!($11_1 > $2_1)) {
    break label$1
   }
   $11_1 = $2_1;
  }
  $12_1 = Math_fround(Math_fround($14_1 * $11_1) - $13_1);
  $13_1 = Math_fround(-$4_1);
  label$2 : {
   label$3 : {
    if ($12_1 < $13_1) {
     $11_1 = Math_fround(-$2_1);
     $4_1 = Math_fround($18_1 - Math_fround($14_1 * $4_1));
     if ($11_1 > $4_1) {
      $12_1 = $13_1;
      break label$2;
     }
     if (!($2_1 < $4_1)) {
      $12_1 = $13_1;
      $11_1 = $4_1;
      break label$2;
     }
     $4_1 = $13_1;
     break label$3;
    }
    if (!($4_1 < $12_1)) {
     break label$2
    }
    $11_1 = Math_fround(-$2_1);
    $13_1 = Math_fround(Math_fround($14_1 * $4_1) + $18_1);
    if ($11_1 > $13_1) {
     $12_1 = $4_1;
     break label$2;
    }
    if (!($2_1 < $13_1)) {
     $12_1 = $4_1;
     $11_1 = $13_1;
     break label$2;
    }
   }
   $12_1 = $4_1;
   $11_1 = $2_1;
  }
  $18_1 = $10_1;
  $13_1 = Math_fround($20_1 * $12_1);
  $2_1 = Math_fround($13_1 + Math_fround($21_1 - Math_fround($16_1 * $11_1)));
  $14_1 = Math_fround($22_1 * $12_1);
  $4_1 = Math_fround($14_1 + Math_fround($23_1 - Math_fround($17_1 * $11_1)));
  $16_1 = Math_fround($24_1 * $12_1);
  $10_1 = Math_fround($16_1 + Math_fround($25_1 - Math_fround($19_1 * $11_1)));
  $17_1 = Math_fround(Math_fround($137($2_1, $4_1, $10_1) - $3_1) - $5_1);
  if (!($18_1 < $17_1)) {
   $3_1 = $149($2_1, $4_1, $10_1);
   label$10 : {
    if ($3_1 <= Math_fround(1.4210854715202004e-14)) {
     $281($15_1 + 16 | 0, $0_1, $15_1);
     $12_1 = HEAPF32[$0_1 + 8 >> 2];
     $3_1 = HEAPF32[$0_1 + 4 >> 2];
     $2_1 = HEAPF32[$0_1 >> 2];
     break label$10;
    }
    HEAP32[$0_1 + 12 >> 2] = 0;
    $11_1 = Math_fround(Math_fround(-1.0) / Math_fround(Math_sqrt($3_1)));
    $12_1 = Math_fround($11_1 * $10_1);
    HEAPF32[$0_1 + 8 >> 2] = $12_1;
    $3_1 = Math_fround($11_1 * $4_1);
    HEAPF32[$0_1 + 4 >> 2] = $3_1;
    $2_1 = Math_fround($11_1 * $2_1);
    HEAPF32[$0_1 >> 2] = $2_1;
   }
   $4_1 = HEAPF32[$9_1 + 48 >> 2];
   $10_1 = HEAPF32[$9_1 + 52 >> 2];
   $11_1 = HEAPF32[$9_1 + 56 >> 2];
   HEAP32[$1_1 + 12 >> 2] = 0;
   HEAPF32[$1_1 + 8 >> 2] = Math_fround($16_1 + $11_1) + Math_fround($12_1 * $5_1);
   HEAPF32[$1_1 + 4 >> 2] = Math_fround($14_1 + $10_1) + Math_fround($3_1 * $5_1);
   HEAPF32[$1_1 >> 2] = Math_fround($13_1 + $4_1) + Math_fround($2_1 * $5_1);
  }
  global$0 = $15_1 + 32 | 0;
  return $17_1;
 }
 
 function $451($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  label$1 : {
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = HEAP32[$4_1 + 828 >> 2];
   if (!$2_1) {
    break label$1
   }
   $1_1 = (Math_imul($2_1, 204) + $4_1 | 0) - 200 | 0;
   $11_1 = HEAP32[HEAP32[$0_1 + 8 >> 2] + 8 >> 2];
   $7_1 = HEAP32[$4_1 + 820 >> 2];
   $5_1 = ($11_1 | 0) == ($7_1 | 0);
   $0_1 = HEAP32[HEAP32[$0_1 + 12 >> 2] + 8 >> 2];
   $11_1 = ($5_1 ? $0_1 : $11_1) + 4 | 0;
   $5_1 = ($5_1 ? $7_1 : $0_1) + 4 | 0;
   while (1) {
    if (($2_1 | 0) >= 1) {
     $2_1 = $2_1 - 1 | 0;
     $146($6_1, $5_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
     $0_1 = $6_1 + 8 | 0;
     $3_1 = HEAP32[$0_1 + 4 >> 2];
     $7_1 = $1_1 + 56 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $3_1;
     $3_1 = HEAP32[$6_1 + 4 >> 2];
     $13_1 = $1_1 + 48 | 0;
     $9_1 = $13_1;
     HEAP32[$9_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $3_1;
     $146($6_1, $11_1, HEAPF32[$1_1 + 16 >> 2], HEAPF32[$1_1 + 20 >> 2], HEAPF32[$1_1 + 24 >> 2]);
     $14_1 = HEAP32[$0_1 + 4 >> 2];
     $9_1 = $1_1 + 40 | 0;
     $3_1 = $9_1;
     HEAP32[$3_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $14_1;
     $3_1 = HEAP32[$6_1 + 4 >> 2];
     $0_1 = $1_1 + 32 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $3_1;
     $3_1 = $1_1 + 160 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + 1;
     HEAPF32[$1_1 + 80 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$13_1 >> 2] - HEAPF32[$0_1 >> 2]) * HEAPF32[$1_1 - -64 >> 2]) + Math_fround(Math_fround(HEAPF32[$1_1 + 52 >> 2] - HEAPF32[$1_1 + 36 >> 2]) * HEAPF32[$1_1 + 68 >> 2])) + Math_fround(Math_fround(HEAPF32[$7_1 >> 2] - HEAPF32[$9_1 >> 2]) * HEAPF32[$1_1 + 72 >> 2]);
     $1_1 = $1_1 - 204 | 0;
     continue;
    }
    break;
   };
   $2_1 = HEAP32[$4_1 + 828 >> 2];
   $0_1 = Math_imul($2_1, 204) - 168 | 0;
   while (1) {
    if (($2_1 | 0) < 1) {
     break label$1
    }
    $2_1 = $2_1 - 1 | 0;
    $12_1 = HEAPF32[$4_1 + 832 >> 2];
    $1_1 = $0_1 + $4_1 | 0;
    $8_1 = HEAPF32[$1_1 + 48 >> 2];
    label$5 : {
     if ($12_1 >= $8_1) {
      $10_1 = Math_fround(HEAPF32[$1_1 >> 2] - Math_fround(HEAPF32[$1_1 + 16 >> 2] - Math_fround(HEAPF32[$1_1 + 32 >> 2] * $8_1)));
      $15_1 = Math_fround($10_1 * $10_1);
      $10_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - Math_fround(HEAPF32[$1_1 + 20 >> 2] - Math_fround($8_1 * HEAPF32[$1_1 + 36 >> 2])));
      $8_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] - Math_fround(HEAPF32[$1_1 + 24 >> 2] - Math_fround($8_1 * HEAPF32[$1_1 + 40 >> 2])));
      if (!(Math_fround(Math_fround($15_1 + Math_fround($10_1 * $10_1)) + Math_fround($8_1 * $8_1)) > Math_fround($12_1 * $12_1))) {
       break label$5
      }
     }
     $1_1 = HEAP32[$4_1 + 828 >> 2] - 1 | 0;
     if (($1_1 | 0) != ($2_1 | 0)) {
      $5_1 = $4_1 + 4 | 0;
      $1_1 = $5_1 + Math_imul($1_1, 204) | 0;
      $3($5_1 + Math_imul($2_1, 204) | 0, $1_1, 204);
      HEAP32[$1_1 + 116 >> 2] = 0;
      HEAP32[$1_1 + 120 >> 2] = 0;
      HEAP32[$1_1 + 160 >> 2] = 0;
      $5_1 = $1_1 + 124 | 0;
      HEAP32[$5_1 >> 2] = 0;
      HEAP32[$5_1 + 4 >> 2] = 0;
      $1_1 = $1_1 + 132 | 0;
      HEAP32[$1_1 >> 2] = 0;
      HEAP32[$1_1 + 4 >> 2] = 0;
      $1_1 = HEAP32[$4_1 + 828 >> 2] - 1 | 0;
     }
     HEAP32[$4_1 + 828 >> 2] = $1_1;
    }
    $0_1 = $0_1 - 204 | 0;
    continue;
   };
  }
  global$0 = $6_1 + 16 | 0;
 }
 
 function $452($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5_1 = $137($1_1, $2_1, $3_1);
  $4_1 = Math_fround($4_1 * Math_fround(.5));
  (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = $115($4_1)), HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
  $4_1 = Math_fround($116($4_1) / $5_1);
  HEAPF32[$0_1 + 8 >> 2] = $4_1 * $3_1;
  HEAPF32[$0_1 + 4 >> 2] = $4_1 * $2_1;
  HEAPF32[$0_1 >> 2] = $4_1 * $1_1;
 }
 
 function $453($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $3_1 = HEAPF32[$1_1 + 12 >> 2];
  $4_1 = HEAPF32[$2_1 + 12 >> 2];
  $5_1 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$1_1 >> 2];
  $7_1 = HEAPF32[$1_1 + 4 >> 2];
  $8_1 = HEAPF32[$2_1 + 4 >> 2];
  $9_1 = HEAPF32[$2_1 + 8 >> 2];
  $10_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAPF32[$0_1 + 12 >> 2] = Math_fround(Math_fround(Math_fround($3_1 * $4_1) - Math_fround($5_1 * $6_1)) - Math_fround($7_1 * $8_1)) - Math_fround($9_1 * $10_1);
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(Math_fround(Math_fround($3_1 * $9_1) + Math_fround($4_1 * $10_1)) + Math_fround($6_1 * $8_1)) - Math_fround($5_1 * $7_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(Math_fround($5_1 * $10_1) + Math_fround(Math_fround($4_1 * $7_1) + Math_fround($3_1 * $8_1))) - Math_fround($6_1 * $9_1);
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround($3_1 * $5_1) + Math_fround($6_1 * $4_1)) + Math_fround($7_1 * $9_1)) - Math_fround($10_1 * $8_1);
 }
 
 function $454($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $4_1 = $653($1_1);
  $5_1 = HEAPF32[$1_1 + 4 >> 2];
  $9_1 = HEAPF32[$1_1 + 8 >> 2];
  $6_1 = HEAPF32[$1_1 + 12 >> 2];
  $2_1 = HEAPF32[$1_1 >> 2];
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  $3_1 = Math_fround(Math_fround(2.0) / $4_1);
  $4_1 = Math_fround($9_1 * $3_1);
  $7_1 = Math_fround($5_1 * $4_1);
  $10_1 = Math_fround($2_1 * $3_1);
  $11_1 = Math_fround($6_1 * $10_1);
  HEAPF32[$0_1 + 36 >> 2] = $7_1 + $11_1;
  $12_1 = Math_fround($2_1 * $4_1);
  $3_1 = Math_fround($3_1 * $5_1);
  $8_1 = Math_fround($6_1 * $3_1);
  HEAPF32[$0_1 + 32 >> 2] = $12_1 - $8_1;
  HEAPF32[$0_1 + 24 >> 2] = $7_1 - $11_1;
  $7_1 = Math_fround($2_1 * $3_1);
  $6_1 = Math_fround($6_1 * $4_1);
  HEAPF32[$0_1 + 16 >> 2] = $7_1 + $6_1;
  HEAPF32[$0_1 + 8 >> 2] = $12_1 + $8_1;
  HEAPF32[$0_1 + 4 >> 2] = $7_1 - $6_1;
  $2_1 = Math_fround($2_1 * $10_1);
  $5_1 = Math_fround($5_1 * $3_1);
  HEAPF32[$0_1 + 40 >> 2] = Math_fround(1.0) - Math_fround($2_1 + $5_1);
  $8_1 = $2_1;
  $2_1 = Math_fround($9_1 * $4_1);
  HEAPF32[$0_1 + 20 >> 2] = Math_fround(1.0) - Math_fround($8_1 + $2_1);
  HEAPF32[$0_1 >> 2] = Math_fround(1.0) - Math_fround($5_1 + $2_1);
 }
 
 function $455($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $6_1 = HEAPF32[$2_1 >> 2];
  $7_1 = HEAPF32[$2_1 + 16 >> 2];
  $8_1 = HEAPF32[$2_1 + 32 >> 2];
  $5_1 = HEAPF32[$1_1 >> 2];
  $3_1 = HEAPF32[$1_1 + 4 >> 2];
  $4_1 = HEAPF32[$1_1 + 8 >> 2];
  $15_1 = $160($6_1, $7_1, $8_1, $5_1, $3_1, $4_1);
  $9_1 = HEAPF32[$2_1 + 4 >> 2];
  $10_1 = HEAPF32[$2_1 + 20 >> 2];
  $11_1 = HEAPF32[$2_1 + 36 >> 2];
  $16_1 = $160($9_1, $10_1, $11_1, $5_1, $3_1, $4_1);
  $12_1 = HEAPF32[$2_1 + 8 >> 2];
  $13_1 = HEAPF32[$2_1 + 24 >> 2];
  $14_1 = HEAPF32[$2_1 + 40 >> 2];
  $17_1 = $160($12_1, $13_1, $14_1, $5_1, $3_1, $4_1);
  $5_1 = HEAPF32[$1_1 + 16 >> 2];
  $3_1 = HEAPF32[$1_1 + 20 >> 2];
  $4_1 = HEAPF32[$1_1 + 24 >> 2];
  $18_1 = $160($6_1, $7_1, $8_1, $5_1, $3_1, $4_1);
  $19_1 = $160($9_1, $10_1, $11_1, $5_1, $3_1, $4_1);
  $5_1 = $160($12_1, $13_1, $14_1, $5_1, $3_1, $4_1);
  $3_1 = $6_1;
  $4_1 = $7_1;
  $20_1 = $8_1;
  $6_1 = HEAPF32[$1_1 + 32 >> 2];
  $7_1 = HEAPF32[$1_1 + 36 >> 2];
  $8_1 = HEAPF32[$1_1 + 40 >> 2];
  $3_1 = $160($3_1, $4_1, $20_1, $6_1, $7_1, $8_1);
  $4_1 = $160($9_1, $10_1, $11_1, $6_1, $7_1, $8_1);
  HEAP32[$0_1 + 44 >> 2] = 0;
  (wasm2js_i32$0 = $0_1 + 40 | 0, wasm2js_f32$0 = $160($12_1, $13_1, $14_1, $6_1, $7_1, $8_1)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  HEAPF32[$0_1 + 36 >> 2] = $4_1;
  HEAPF32[$0_1 + 32 >> 2] = $3_1;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAPF32[$0_1 + 24 >> 2] = $5_1;
  HEAPF32[$0_1 + 20 >> 2] = $19_1;
  HEAPF32[$0_1 + 16 >> 2] = $18_1;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = $17_1;
  HEAPF32[$0_1 + 4 >> 2] = $16_1;
  HEAPF32[$0_1 >> 2] = $15_1;
 }
 
 function $456($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0);
  $0_1 = global$0 - 624 | 0;
  global$0 = $0_1;
  $5_1 = $149(Math_fround(HEAPF32[$1_1 + 116 >> 2] - HEAPF32[$1_1 + 52 >> 2]), Math_fround(HEAPF32[$1_1 + 120 >> 2] - HEAPF32[$1_1 + 56 >> 2]), Math_fround(HEAPF32[$1_1 + 124 >> 2] - HEAPF32[$1_1 + 60 >> 2]));
  $6_1 = HEAPF32[$1_1 + 280 >> 2];
  label$1 : {
   if ($5_1 < Math_fround($6_1 * $6_1)) {
    $6_1 = Math_fround(1.0);
    $12_1 = $149(Math_fround(HEAPF32[$2_1 + 116 >> 2] - HEAPF32[$2_1 + 52 >> 2]), Math_fround(HEAPF32[$2_1 + 120 >> 2] - HEAPF32[$2_1 + 56 >> 2]), Math_fround(HEAPF32[$2_1 + 124 >> 2] - HEAPF32[$2_1 + 60 >> 2]));
    $5_1 = HEAPF32[$2_1 + 280 >> 2];
    if ($12_1 < Math_fround($5_1 * $5_1)) {
     break label$1
    }
   }
   $4_1 = HEAP32[$1_1 + 192 >> 2];
   $3_1 = $457($0_1 + 568 | 0, HEAPF32[$2_1 + 276 >> 2]);
   HEAP32[$0_1 + 564 >> 2] = 953267991;
   HEAP32[$0_1 + 556 >> 2] = 0;
   HEAP32[$0_1 + 560 >> 2] = 32;
   HEAP32[$0_1 + 548 >> 2] = 1566444395;
   HEAP32[$0_1 + 552 >> 2] = 0;
   HEAP32[$0_1 + 384 >> 2] = 14128;
   $7_1 = $0_1 + 356 | 0;
   HEAP8[$7_1 | 0] = 0;
   HEAP32[$0_1 + 332 >> 2] = 953267991;
   HEAP32[$0_1 + 20 >> 2] = $3_1;
   HEAP32[$0_1 + 16 >> 2] = $4_1;
   HEAP32[$0_1 + 8 >> 2] = 13748;
   HEAP32[$0_1 + 12 >> 2] = $0_1 + 24;
   $8_1 = $1_1 + 4 | 0;
   $9_1 = $1_1 + 68 | 0;
   $10_1 = $2_1 + 4 | 0;
   $11_1 = $2_1 + 68 | 0;
   $6_1 = Math_fround(1.0);
   label$3 : {
    if (!$434($0_1 + 8 | 0, $8_1, $9_1, $10_1, $11_1, $0_1 + 384 | 0)) {
     break label$3
    }
    $5_1 = HEAPF32[$0_1 + 548 >> 2];
    if ($5_1 < HEAPF32[$1_1 + 272 >> 2]) {
     HEAPF32[$1_1 + 272 >> 2] = $5_1
    }
    if ($5_1 < HEAPF32[$2_1 + 272 >> 2]) {
     HEAPF32[$2_1 + 272 >> 2] = $5_1
    }
    $6_1 = Math_fround(1.0);
    if (!($5_1 < Math_fround(1.0))) {
     break label$3
    }
    $6_1 = $5_1;
   }
   $4_1 = HEAP32[$2_1 + 192 >> 2];
   $3_1 = $457($0_1 + 568 | 0, HEAPF32[$1_1 + 276 >> 2]);
   HEAP32[$0_1 + 564 >> 2] = 953267991;
   HEAP32[$0_1 + 556 >> 2] = 0;
   HEAP32[$0_1 + 560 >> 2] = 32;
   HEAP32[$0_1 + 548 >> 2] = 1566444395;
   HEAP32[$0_1 + 552 >> 2] = 0;
   HEAP32[$0_1 + 384 >> 2] = 14128;
   HEAP8[$7_1 | 0] = 0;
   HEAP32[$0_1 + 332 >> 2] = 953267991;
   HEAP32[$0_1 + 20 >> 2] = $4_1;
   HEAP32[$0_1 + 16 >> 2] = $3_1;
   HEAP32[$0_1 + 8 >> 2] = 13748;
   HEAP32[$0_1 + 12 >> 2] = $0_1 + 24;
   if (!$434($0_1 + 8 | 0, $8_1, $9_1, $10_1, $11_1, $0_1 + 384 | 0)) {
    break label$1
   }
   $5_1 = HEAPF32[$0_1 + 548 >> 2];
   if ($5_1 < HEAPF32[$1_1 + 272 >> 2]) {
    HEAPF32[$1_1 + 272 >> 2] = $5_1
   }
   if ($5_1 < HEAPF32[$2_1 + 272 >> 2]) {
    HEAPF32[$2_1 + 272 >> 2] = $5_1
   }
   if (!($5_1 < $6_1)) {
    break label$1
   }
   $6_1 = $5_1;
  }
  global$0 = $0_1 + 624 | 0;
  return Math_fround($6_1);
 }
 
 function $457($0_1, $1_1) {
  var $2_1 = 0;
  $154($0_1);
  $2_1 = $0_1 + 28 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = 1065353216;
  HEAP32[$0_1 + 16 >> 2] = 1065353216;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  HEAP32[$0_1 + 4 >> 2] = 8;
  HEAP32[$0_1 >> 2] = 13928;
  $2_1 = $0_1 + 36 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 52 >> 2] = 0;
  HEAPF32[$0_1 + 48 >> 2] = $1_1;
  HEAPF32[$0_1 + 32 >> 2] = $1_1;
  return $0_1;
 }
 
 function $458($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if (!(!HEAP32[$0_1 + 56 >> 2] | !HEAPU8[$0_1 + 52 | 0])) {
   $459($1_1, $0_1 + 56 | 0)
  }
 }
 
 function $459($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $182($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
  HEAP32[HEAP32[$0_1 + 12 >> 2] + ($2_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $460($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 + 24 >> 2] = $2_1;
  HEAP32[$0_1 + 16 >> 2] = $1_1;
 }
 
 function $461($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 + 28 >> 2] = $2_1;
  HEAP32[$0_1 + 20 >> 2] = $1_1;
 }
 
 function $462($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 8 >> 2] * $3_1) + HEAPF32[$5_1 >> 2]);
  $7_1 = $2_1 + 4 | 0;
  $8_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 4 >> 2] * $3_1) + HEAPF32[$7_1 >> 2]);
  $3_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $3_1) + HEAPF32[$2_1 >> 2]);
  label$1 : {
   if (HEAPU8[$0_1 + 232 | 0]) {
    $463($4_1, $0_1 + 40 | 0);
    $464($4_1 - -64 | 0, $0_1 + 168 | 0, $4_1);
    $146($4_1 + 128 | 0, $4_1 - -64 | 0, $3_1, $8_1, $6_1);
    HEAP32[$4_1 + 156 >> 2] = 0;
    $6_1 = HEAPF32[$4_1 + 128 >> 2];
    $8_1 = HEAPF32[$1_1 >> 2];
    $9_1 = HEAPF32[$4_1 + 132 >> 2];
    $10_1 = HEAPF32[$1_1 + 4 >> 2];
    $11_1 = HEAPF32[$1_1 + 8 >> 2];
    $12_1 = HEAPF32[$4_1 + 136 >> 2];
    $3_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 - HEAPF32[$2_1 >> 2]) * $8_1) + Math_fround(Math_fround($9_1 - HEAPF32[$7_1 >> 2]) * $10_1)) + Math_fround($11_1 * Math_fround($12_1 - HEAPF32[$5_1 >> 2])));
    HEAPF32[$4_1 + 152 >> 2] = $12_1 - Math_fround($11_1 * $3_1);
    HEAPF32[$4_1 + 148 >> 2] = $9_1 - Math_fround($10_1 * $3_1);
    HEAPF32[$4_1 + 144 >> 2] = $6_1 - Math_fround($8_1 * $3_1);
    break label$1;
   }
   $463($4_1, $0_1 + 104 | 0);
   $464($4_1 - -64 | 0, $0_1 + 168 | 0, $4_1);
   $146($4_1 + 128 | 0, $4_1 - -64 | 0, HEAPF32[$2_1 >> 2], HEAPF32[$7_1 >> 2], HEAPF32[$5_1 >> 2]);
   $5_1 = $4_1 + 136 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $4_1 + 152 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$4_1 + 132 >> 2];
   HEAP32[$4_1 + 144 >> 2] = HEAP32[$4_1 + 128 >> 2];
   HEAP32[$4_1 + 148 >> 2] = $5_1;
   $3_1 = Math_fround(Math_fround(Math_fround(Math_fround($3_1 - HEAPF32[$4_1 + 144 >> 2]) * HEAPF32[$1_1 >> 2]) + Math_fround(Math_fround($8_1 - HEAPF32[$4_1 + 148 >> 2]) * HEAPF32[$1_1 + 4 >> 2])) + Math_fround(Math_fround($6_1 - HEAPF32[$2_1 >> 2]) * HEAPF32[$1_1 + 8 >> 2]));
  }
  $0_1 = HEAP32[$0_1 + 36 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1, $1_1, $4_1 + 144 | 0, $3_1);
  global$0 = $4_1 + 160 | 0;
 }
 
 function $463($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $439($2_1 + 16 | 0, $1_1);
  $431($2_1, $2_1 + 16 | 0, Math_fround(-HEAPF32[$1_1 + 48 >> 2]), Math_fround(-HEAPF32[$1_1 + 52 >> 2]), Math_fround(-HEAPF32[$1_1 + 56 >> 2]));
  $3_1 = $2_1 + 24 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$2_1 + 36 >> 2];
  HEAP32[$0_1 + 16 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$0_1 + 20 >> 2] = $1_1;
  $3_1 = $2_1 + 40 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 + 52 >> 2];
  HEAP32[$0_1 + 32 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$0_1 + 36 >> 2] = $1_1;
  $3_1 = $2_1 + 56 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 40 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 + 48 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 52 >> 2] = $1_1;
  $1_1 = $2_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 56 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  global$0 = $2_1 - -64 | 0;
 }
 
 function $464($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $455($3_1 + 16 | 0, $1_1, $2_1);
  $146($3_1, $1_1, HEAPF32[$2_1 + 48 >> 2], HEAPF32[$2_1 + 52 >> 2], HEAPF32[$2_1 + 56 >> 2]);
  $2_1 = $3_1 + 24 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$0_1 + 16 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$0_1 + 20 >> 2] = $1_1;
  $2_1 = $3_1 + 40 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$0_1 + 32 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$0_1 + 36 >> 2] = $1_1;
  $2_1 = $3_1 + 56 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 40 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0_1 + 48 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 52 >> 2] = $1_1;
  $1_1 = $3_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 56 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  global$0 = $3_1 - -64 | 0;
 }
 
 function $465($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[$0_1 + 32 >> 2] = $3_1;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 12 >> 2] = $5_1;
  $5_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $7_1 = $0_1 + 16 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $9_1 = HEAPF32[$5_1 >> 2];
  $10_1 = HEAPF32[$2_1 >> 2];
  $11_1 = HEAPF32[$1_1 >> 2];
  $12_1 = HEAPF32[$2_1 + 4 >> 2];
  $13_1 = HEAPF32[$1_1 + 4 >> 2];
  $14_1 = HEAPF32[$2_1 + 8 >> 2];
  $6_1 = HEAPF32[$0_1 + 28 >> 2];
  $3_1 = Math_fround(Math_fround($6_1 + HEAPF32[$0_1 + 24 >> 2]) + $3_1);
  HEAPF32[$0_1 + 32 >> 2] = $3_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = $14_1 - Math_fround($6_1 * $9_1);
  HEAPF32[$4_1 + 4 >> 2] = $12_1 - Math_fround($6_1 * $13_1);
  HEAPF32[$4_1 >> 2] = $10_1 - Math_fround($11_1 * $6_1);
  if ($3_1 < Math_fround(0.0)) {
   HEAP8[$0_1 + 36 | 0] = 1
  }
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1, $1_1, $4_1, $3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $466($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0);
  $6_1 = global$0 - 208 | 0;
  global$0 = $6_1;
  $409(HEAP32[$0_1 + 4 >> 2]);
  $10_1 = HEAPF32[$1_1 + 52 >> 2];
  $11_1 = HEAPF32[$2_1 + 52 >> 2];
  $12_1 = HEAPF32[$3_1 + 52 >> 2];
  $13_1 = HEAPF32[$4_1 + 52 >> 2];
  $7_1 = $1_1 + 56 | 0;
  $20_1 = HEAPF32[$7_1 >> 2];
  $21_1 = HEAPF32[$2_1 + 56 >> 2];
  $22_1 = $3_1 + 56 | 0;
  $23_1 = HEAPF32[$22_1 >> 2];
  $24_1 = HEAPF32[$4_1 + 56 >> 2];
  $14_1 = HEAPF32[$1_1 + 48 >> 2];
  $17_1 = HEAPF32[$2_1 + 48 >> 2];
  $18_1 = HEAPF32[$3_1 + 48 >> 2];
  $19_1 = HEAPF32[$4_1 + 48 >> 2];
  $9_1 = $1_1 + 8 | 0;
  $15_1 = HEAP32[$9_1 + 4 >> 2];
  $8_1 = $6_1 + 152 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $15_1;
  $9_1 = $1_1 + 24 | 0;
  $15_1 = HEAP32[$9_1 + 4 >> 2];
  $8_1 = $6_1 + 168 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $15_1;
  $9_1 = $1_1 + 40 | 0;
  $15_1 = HEAP32[$9_1 + 4 >> 2];
  $8_1 = $6_1 + 184 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $15_1;
  $9_1 = HEAP32[$7_1 + 4 >> 2];
  $8_1 = $6_1 + 200 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$6_1 + 144 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 148 >> 2] = $7_1;
  $7_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$6_1 + 160 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$6_1 + 164 >> 2] = $7_1;
  $7_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$6_1 + 176 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$6_1 + 180 >> 2] = $7_1;
  $7_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$6_1 + 192 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$6_1 + 196 >> 2] = $7_1;
  $8_1 = $3_1 + 8 | 0;
  $9_1 = HEAP32[$8_1 + 4 >> 2];
  $7_1 = $6_1 + 88 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $9_1;
  $8_1 = $3_1 + 24 | 0;
  $9_1 = HEAP32[$8_1 + 4 >> 2];
  $7_1 = $6_1 + 104 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $9_1;
  $8_1 = $3_1 + 40 | 0;
  $9_1 = HEAP32[$8_1 + 4 >> 2];
  $7_1 = $6_1 + 120 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $9_1;
  $8_1 = HEAP32[$22_1 + 4 >> 2];
  $7_1 = $6_1 + 136 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$22_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $7_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$6_1 + 80 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 84 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$6_1 + 96 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$6_1 + 100 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$6_1 + 112 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$6_1 + 116 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$6_1 + 128 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$6_1 + 132 >> 2] = $7_1;
  $7_1 = HEAP32[$0_1 + 8 >> 2];
  $17_1 = Math_fround(Math_fround($17_1 - $14_1) - Math_fround($19_1 - $18_1));
  $18_1 = Math_fround(Math_fround($11_1 - $10_1) - Math_fround($13_1 - $12_1));
  $19_1 = Math_fround(Math_fround($21_1 - $20_1) - Math_fround($24_1 - $23_1));
  $145($6_1 + 32 | 0, Math_fround(-$17_1), Math_fround(-$18_1), Math_fround(-$19_1), $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 64 >> 2]]($6_1 + 48 | 0, $7_1, $6_1 + 32 | 0);
  $146($6_1 - -64 | 0, $1_1, HEAPF32[$6_1 + 48 >> 2], HEAPF32[$6_1 + 52 >> 2], HEAPF32[$6_1 + 56 >> 2]);
  $7_1 = HEAP32[$0_1 + 12 >> 2];
  $145($6_1 + 16 | 0, $17_1, $18_1, $19_1, $3_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 64 >> 2]]($6_1 + 32 | 0, $7_1, $6_1 + 16 | 0);
  $146($6_1 + 48 | 0, $3_1, HEAPF32[$6_1 + 32 >> 2], HEAPF32[$6_1 + 36 >> 2], HEAPF32[$6_1 + 40 >> 2]);
  $7_1 = $3_1 + 48 | 0;
  $4_1 = $4_1 + 48 | 0;
  $22_1 = $1_1 + 48 | 0;
  $8_1 = $2_1 + 48 | 0;
  $1_1 = HEAP32[$5_1 + 176 >> 2];
  $12_1 = Math_fround(HEAPF32[$6_1 + 64 >> 2] - HEAPF32[$6_1 + 48 >> 2]);
  $10_1 = Math_fround(HEAPF32[$6_1 + 68 >> 2] - HEAPF32[$6_1 + 52 >> 2]);
  $11_1 = Math_fround(HEAPF32[$6_1 + 72 >> 2] - HEAPF32[$6_1 + 56 >> 2]);
  $16_1 = $149($12_1, $10_1, $11_1);
  $9_1 = $6_1 + 128 | 0;
  $15_1 = $6_1 + 192 | 0;
  $23_1 = Math_fround(0.0);
  $13_1 = Math_fround(0.0);
  $20_1 = Math_fround(0.0);
  $21_1 = Math_fround(0.0);
  $24_1 = Math_fround(0.0);
  $14_1 = Math_fround(0.0);
  label$1 : {
   while (1) {
    if (!(!$1_1 | !(HEAPF32[$5_1 + 180 >> 2] < $16_1))) {
     $2_1 = HEAP32[$0_1 + 8 >> 2];
     $145($6_1, Math_fround(-$12_1), Math_fround(-$10_1), Math_fround(-$11_1), $6_1 + 144 | 0);
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 64 >> 2]]($6_1 + 32 | 0, $2_1, $6_1);
     $146($6_1 - -64 | 0, $6_1 + 144 | 0, HEAPF32[$6_1 + 32 >> 2], HEAPF32[$6_1 + 36 >> 2], HEAPF32[$6_1 + 40 >> 2]);
     $2_1 = HEAP32[$0_1 + 12 >> 2];
     $145($6_1, $12_1, $10_1, $11_1, $6_1 + 80 | 0);
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 64 >> 2]]($6_1 + 32 | 0, $2_1, $6_1);
     $146($6_1 + 48 | 0, $6_1 + 80 | 0, HEAPF32[$6_1 + 32 >> 2], HEAPF32[$6_1 + 36 >> 2], HEAPF32[$6_1 + 40 >> 2]);
     $3_1 = 0;
     HEAP32[$6_1 + 28 >> 2] = 0;
     $16_1 = Math_fround(HEAPF32[$6_1 + 72 >> 2] - HEAPF32[$6_1 + 56 >> 2]);
     HEAPF32[$6_1 + 24 >> 2] = $16_1;
     $25_1 = Math_fround(HEAPF32[$6_1 + 68 >> 2] - HEAPF32[$6_1 + 52 >> 2]);
     HEAPF32[$6_1 + 20 >> 2] = $25_1;
     $26_1 = Math_fround(HEAPF32[$6_1 + 64 >> 2] - HEAPF32[$6_1 + 48 >> 2]);
     HEAPF32[$6_1 + 16 >> 2] = $26_1;
     if ($14_1 > Math_fround(1.0)) {
      break label$1
     }
     $27_1 = Math_fround(Math_fround(Math_fround($26_1 * $12_1) + Math_fround($25_1 * $10_1)) + Math_fround($16_1 * $11_1));
     if ($27_1 > Math_fround(0.0)) {
      $13_1 = Math_fround(Math_fround(Math_fround($12_1 * $17_1) + Math_fround($10_1 * $18_1)) + Math_fround($11_1 * $19_1));
      if ($13_1 >= Math_fround(-1.4210854715202004e-14)) {
       break label$1
      }
      $14_1 = Math_fround($14_1 - Math_fround($27_1 / $13_1));
      $435($15_1, $22_1, $8_1, $14_1);
      $435($9_1, $7_1, $4_1, $14_1);
      HEAP32[$6_1 + 28 >> 2] = 0;
      HEAPF32[$6_1 + 24 >> 2] = $16_1;
      HEAPF32[$6_1 + 20 >> 2] = $25_1;
      HEAPF32[$6_1 + 16 >> 2] = $26_1;
      $23_1 = $24_1;
      $20_1 = $10_1;
      $21_1 = $12_1;
      $13_1 = $11_1;
     }
     if (!$414(HEAP32[$0_1 + 4 >> 2], $6_1 + 16 | 0)) {
      $410(HEAP32[$0_1 + 4 >> 2], $6_1 + 16 | 0, $6_1 - -64 | 0, $6_1 + 48 | 0)
     }
     $1_1 = $1_1 - 1 | 0;
     $2_1 = HEAP32[$0_1 + 4 >> 2];
     $3_1 = $411($2_1);
     $24_1 = HEAPF32[$2_1 + 288 >> 2];
     $11_1 = HEAPF32[$2_1 + 284 >> 2];
     $10_1 = HEAPF32[$2_1 + 280 >> 2];
     $12_1 = HEAPF32[$2_1 + 276 >> 2];
     $16_1 = Math_fround(0.0);
     if (!$3_1) {
      continue
     }
     $16_1 = $149($12_1, $10_1, $11_1);
     continue;
    }
    break;
   };
   HEAPF32[$5_1 + 164 >> 2] = $14_1;
   HEAPF32[$6_1 + 44 >> 2] = $23_1;
   HEAPF32[$6_1 + 40 >> 2] = $13_1;
   HEAPF32[$6_1 + 36 >> 2] = $20_1;
   HEAPF32[$6_1 + 32 >> 2] = $21_1;
   label$6 : {
    if ($149($21_1, $20_1, $13_1) >= Math_fround(1.4210854715202004e-14)) {
     $185($6_1, $6_1 + 32 | 0);
     $3_1 = $6_1 + 8 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $1_1 = $5_1 + 140 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $4_1;
     $2_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$5_1 + 132 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$5_1 + 136 >> 2] = $2_1;
     $11_1 = HEAPF32[$5_1 + 132 >> 2];
     $12_1 = HEAPF32[$1_1 >> 2];
     $10_1 = HEAPF32[$5_1 + 136 >> 2];
     break label$6;
    }
    HEAP32[$5_1 + 132 >> 2] = 0;
    HEAP32[$5_1 + 136 >> 2] = 0;
    $1_1 = $5_1 + 140 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $11_1 = Math_fround(0.0);
    $12_1 = Math_fround(0.0);
    $10_1 = Math_fround(0.0);
   }
   $3_1 = 0;
   if (Math_fround(-HEAPF32[$5_1 + 172 >> 2]) <= Math_fround(Math_fround(Math_fround($11_1 * $17_1) + Math_fround($10_1 * $18_1)) + Math_fround($12_1 * $19_1))) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 + 4 >> 2];
   $411($0_1);
   $1_1 = HEAP32[$0_1 + 260 >> 2];
   $2_1 = HEAP32[$0_1 + 264 >> 2];
   $0_1 = $0_1 + 268 | 0;
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   $3_1 = $5_1 + 156 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $4_1;
   HEAP32[$5_1 + 148 >> 2] = $1_1;
   HEAP32[$5_1 + 152 >> 2] = $2_1;
   $3_1 = 1;
  }
  global$0 = $6_1 + 208 | 0;
  return $3_1 | 0;
 }
 
 function $467($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0;
  HEAP32[$0_1 + 8 >> 2] = 14660;
  HEAP32[$0_1 >> 2] = 14632;
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP32[$0_1 + 60 >> 2] = 0;
  $5_1 = $0_1 + 56 | 0;
  HEAP32[$5_1 >> 2] = $1_1;
  $6_1 = $4_1 ? $2_1 : $3_1;
  HEAP32[$0_1 + 48 >> 2] = $6_1;
  $2_1 = $4_1 ? $3_1 : $2_1;
  HEAP32[$0_1 + 44 >> 2] = $2_1;
  $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$6_1 + 8 >> 2]) | 0;
  HEAP32[$0_1 + 72 >> 2] = $1_1;
  $2_1 = HEAP32[$5_1 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $1_1);
  HEAP8[$0_1 + 76 | 0] = $4_1;
 }
 
 function $468($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 14660;
  $1_1 = HEAP32[$0_1 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1, HEAP32[$0_1 + 64 >> 2]);
  $1_1 = HEAP32[$0_1 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, HEAP32[$0_1 + 64 >> 2]);
  return $0_1 | 0;
 }
 
 function $469($0_1) {
  $0_1 = $0_1 | 0;
  $121($468($0_1));
 }
 
 function $470($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  if (!(!$349($1_1, HEAPF32[$0_1 + 4 >> 2], HEAPF32[$0_1 + 8 >> 2], HEAPF32[$0_1 + 12 >> 2], HEAPF32[$0_1 + 20 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 28 >> 2]) | HEAP32[HEAP32[HEAP32[$0_1 + 36 >> 2] + 4 >> 2] + 4 >> 2] > 19)) {
   $6_1 = HEAP32[$0_1 + 48 >> 2];
   $7_1 = $471($4_1 + 32 | 0, $1_1, $1_1 + 16 | 0, $1_1 + 32 | 0);
   HEAPF32[$7_1 + 48 >> 2] = HEAPF32[$0_1 + 56 >> 2];
   HEAP32[$4_1 + 24 >> 2] = $3_1;
   HEAP32[$4_1 + 20 >> 2] = $2_1;
   HEAP32[$4_1 + 16 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = $7_1;
   $1_1 = HEAP32[$0_1 + 40 >> 2];
   HEAP32[$4_1 >> 2] = $1_1;
   $5_1 = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$4_1 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2];
   HEAP32[$4_1 + 8 >> 2] = $5_1;
   $1_1 = HEAP32[$0_1 + 36 >> 2];
   label$2 : {
    if (HEAPF32[HEAP32[$0_1 + 44 >> 2] + 32 >> 2] > Math_fround(0.0)) {
     $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 8 >> 2]]($6_1, $1_1, $4_1, 0, 2) | 0;
     break label$2;
    }
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 8 >> 2]]($6_1, $1_1, $4_1, HEAP32[$0_1 + 64 >> 2], 1) | 0;
   }
   $5_1 = HEAP32[$0_1 + 44 >> 2];
   $8_1 = HEAP32[$5_1 + 8 >> 2];
   label$4 : {
    if (HEAP32[$8_1 + 8 >> 2] == HEAP32[HEAP32[$0_1 + 40 >> 2] + 8 >> 2]) {
     HEAP32[$5_1 + 8 >> 2] = $4_1;
     FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 8 >> 2]]($5_1, $2_1, $3_1);
     break label$4;
    }
    $8_1 = HEAP32[$5_1 + 12 >> 2];
    HEAP32[$5_1 + 12 >> 2] = $4_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2]]($5_1, $2_1, $3_1);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, HEAP32[$0_1 + 36 >> 2], $4_1, HEAP32[$0_1 + 52 >> 2], HEAP32[$0_1 + 44 >> 2]);
   $2_1 = HEAP32[$0_1 + 44 >> 2];
   HEAP32[(HEAP32[HEAP32[$2_1 + 8 >> 2] + 8 >> 2] == HEAP32[HEAP32[$0_1 + 40 >> 2] + 8 >> 2] ? 8 : 12) + $2_1 >> 2] = $8_1;
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 60 >> 2]]($6_1, $1_1);
   $191($7_1);
  }
  global$0 = $4_1 + 144 | 0;
 }
 
 function $471($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $190($0_1);
  HEAP32[$0_1 + 4 >> 2] = 1;
  HEAP32[$0_1 >> 2] = 14692;
  $5_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 68 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 60 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 64 >> 2] = $4_1;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 76 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $2_1 = $2_1 + 8 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 84 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 92 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $2_1 = $3_1 + 8 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 100 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  return $0_1;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  return 14836;
 }
 
 function $473($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAPF32[$2_1 >> 2];
  $5_1 = HEAPF32[$2_1 + 4 >> 2];
  $6_1 = HEAPF32[$2_1 + 8 >> 2];
  $2_1 = $1_1 + 60 | 0;
  $148($3_1, $4_1, $5_1, $6_1, HEAPF32[$2_1 >> 2], HEAPF32[$1_1 - -64 >> 2], HEAPF32[$1_1 + 68 >> 2], HEAPF32[$1_1 + 76 >> 2], HEAPF32[$1_1 + 80 >> 2], HEAPF32[$1_1 + 84 >> 2], HEAPF32[$1_1 + 92 >> 2], HEAPF32[$1_1 + 96 >> 2], HEAPF32[$1_1 + 100 >> 2]);
  $4_1 = HEAPF32[$3_1 >> 2];
  $5_1 = HEAPF32[$3_1 + 4 >> 2];
  $1_1 = $4_1 < $5_1;
  $1_1 = $2_1 + ((HEAPF32[$3_1 + 8 >> 2] > ($1_1 ? $5_1 : $4_1) ? 2 : $1_1) << 4) | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $474($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  $9_1 = $0_1 + 100 | 0;
  $10_1 = $0_1 + 96 | 0;
  $11_1 = $0_1 + 84 | 0;
  $12_1 = $0_1 + 80 | 0;
  $13_1 = $0_1 + 68 | 0;
  $14_1 = $0_1 - -64 | 0;
  $15_1 = $0_1 + 60 | 0;
  while (1) {
   if ($3_1) {
    $148($5_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2], HEAPF32[$0_1 + 60 >> 2], HEAPF32[$14_1 >> 2], HEAPF32[$13_1 >> 2], HEAPF32[$0_1 + 76 >> 2], HEAPF32[$12_1 >> 2], HEAPF32[$11_1 >> 2], HEAPF32[$0_1 + 92 >> 2], HEAPF32[$10_1 >> 2], HEAPF32[$9_1 >> 2]);
    $7_1 = HEAPF32[$5_1 >> 2];
    $8_1 = HEAPF32[$5_1 + 4 >> 2];
    $4_1 = $7_1 < $8_1;
    $4_1 = ((HEAPF32[$5_1 + 8 >> 2] > ($4_1 ? $8_1 : $7_1) ? 2 : $4_1) << 4) + $15_1 | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $6_1;
    $4_1 = $4_1 + 8 | 0;
    $16_1 = HEAP32[$4_1 + 4 >> 2];
    $6_1 = $2_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $16_1;
    $3_1 = $3_1 - 1 | 0;
    $2_1 = $2_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    continue;
   } else {
    global$0 = $5_1 + 16 | 0
   }
   break;
  };
 }
 
 function $475($0_1) {
  $0_1 = $0_1 | 0;
  return 2;
 }
 
 function $476($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $477($0_1, $2_1);
  if ($1_1) {
   HEAP32[$3_1 + 12 >> 2] = -1082130432;
   $218($2_1, $3_1 + 12 | 0);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $477($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $5_1 = HEAPF32[$0_1 + 84 >> 2];
  $8_1 = HEAPF32[$0_1 + 100 >> 2];
  $2_1 = HEAPF32[$0_1 + 68 >> 2];
  $6_1 = HEAPF32[$0_1 + 76 >> 2];
  $7_1 = HEAPF32[$0_1 + 96 >> 2];
  $9_1 = HEAPF32[$0_1 + 92 >> 2];
  $3_1 = HEAPF32[$0_1 - -64 >> 2];
  $10_1 = HEAPF32[$0_1 + 80 >> 2];
  $4_1 = HEAPF32[$0_1 + 60 >> 2];
  HEAP32[$1_1 + 12 >> 2] = 0;
  $6_1 = Math_fround($6_1 - $4_1);
  $7_1 = Math_fround($7_1 - $3_1);
  $3_1 = Math_fround($10_1 - $3_1);
  $4_1 = Math_fround($9_1 - $4_1);
  HEAPF32[$1_1 + 8 >> 2] = Math_fround($6_1 * $7_1) - Math_fround($3_1 * $4_1);
  $5_1 = Math_fround($5_1 - $2_1);
  $2_1 = Math_fround($8_1 - $2_1);
  HEAPF32[$1_1 + 4 >> 2] = Math_fround($5_1 * $4_1) - Math_fround($6_1 * $2_1);
  HEAPF32[$1_1 >> 2] = Math_fround($3_1 * $2_1) - Math_fround($5_1 * $7_1);
  $153($1_1);
 }
 
 function $478($0_1) {
  $0_1 = $0_1 | 0;
  return 3;
 }
 
 function $479($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 112 >> 2]]($0_1, $1_1, $2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 112 >> 2]]($0_1, ($1_1 + 1 | 0) % 3 | 0, $3_1);
 }
 
 function $480($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $0_1 = ($1_1 << 4) + $0_1 | 0;
  $1_1 = $0_1 + 68 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $2_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $0_1 = $0_1 + 60 | 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
 }
 
 function $481($0_1) {
  $0_1 = $0_1 | 0;
  return 1;
 }
 
 function $482($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 128 >> 2]]($0_1, $3_1, $1_1, $2_1);
 }
 
 function $483($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $477($0_1, $3_1 + 48 | 0);
  $4_1 = HEAPF32[$3_1 + 48 >> 2];
  $7_1 = HEAPF32[$3_1 + 52 >> 2];
  $5_1 = HEAPF32[$3_1 + 56 >> 2];
  $4_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $4_1) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * $7_1)) + Math_fround(HEAPF32[$1_1 + 8 >> 2] * $5_1)) - Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$0_1 + 60 >> 2]) + Math_fround($7_1 * HEAPF32[$0_1 - -64 >> 2])) + Math_fround($5_1 * HEAPF32[$0_1 + 68 >> 2])));
  $7_1 = Math_fround(-$2_1);
  if (!(!($4_1 >= $7_1) | !($2_1 >= $4_1))) {
   $6_1 = -1;
   while (1) {
    label$3 : {
     if (($6_1 | 0) == 2) {
      $6_1 = 3;
      break label$3;
     }
     $6_1 = $6_1 + 1 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 108 >> 2]]($0_1, $6_1, $3_1 + 32 | 0, $3_1 + 16 | 0);
     $2_1 = HEAPF32[$3_1 + 40 >> 2];
     $4_1 = HEAPF32[$3_1 + 24 >> 2];
     $5_1 = HEAPF32[$3_1 + 32 >> 2];
     $8_1 = HEAPF32[$3_1 + 16 >> 2];
     $9_1 = HEAPF32[$3_1 + 36 >> 2];
     $10_1 = HEAPF32[$3_1 + 20 >> 2];
     HEAP32[$3_1 + 12 >> 2] = 0;
     $5_1 = Math_fround($8_1 - $5_1);
     $8_1 = HEAPF32[$3_1 + 52 >> 2];
     $9_1 = Math_fround($10_1 - $9_1);
     $10_1 = HEAPF32[$3_1 + 48 >> 2];
     HEAPF32[$3_1 + 8 >> 2] = Math_fround($5_1 * $8_1) - Math_fround($9_1 * $10_1);
     $2_1 = Math_fround($4_1 - $2_1);
     $4_1 = HEAPF32[$3_1 + 56 >> 2];
     HEAPF32[$3_1 + 4 >> 2] = Math_fround($10_1 * $2_1) - Math_fround($5_1 * $4_1);
     HEAPF32[$3_1 >> 2] = Math_fround($9_1 * $4_1) - Math_fround($2_1 * $8_1);
     $153($3_1);
     $2_1 = HEAPF32[$3_1 >> 2];
     $4_1 = HEAPF32[$3_1 + 4 >> 2];
     $5_1 = HEAPF32[$3_1 + 8 >> 2];
     if (!($7_1 > Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $2_1) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * $4_1)) + Math_fround(HEAPF32[$1_1 + 8 >> 2] * $5_1)) - Math_fround(Math_fround(Math_fround($2_1 * HEAPF32[$3_1 + 32 >> 2]) + Math_fround($4_1 * HEAPF32[$3_1 + 36 >> 2])) + Math_fround($5_1 * HEAPF32[$3_1 + 40 >> 2]))))) {
      continue
     }
    }
    break;
   };
   $6_1 = $6_1 >>> 0 > 2;
  }
  global$0 = $3_1 - -64 | 0;
  return $6_1 | 0;
 }
 
 function $484($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $477($0_1, $2_1);
  $2_1 = $0_1 + 68 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $3_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$0_1 + 64 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$0_1 + 60 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
 }
 
 function $485($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 14632;
  $468($0_1 + 8 | 0);
  return $0_1 | 0;
 }
 
 function $486($0_1) {
  $0_1 = $0_1 | 0;
  $121($485($0_1));
 }
 
 function $487($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0.0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0.0, $28_1 = 0, $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = 0, $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = 0, $36_1 = 0, $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = 0, $45_1 = 0.0, $46_1 = 0, $47_1 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54 = Math_fround(0), $55_1 = Math_fround(0), $56_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $59_1 = Math_fround(0), $60 = 0, $61_1 = 0, $62_1 = 0.0;
  $5_1 = global$0 - 880 | 0;
  global$0 = $5_1;
  $12_1 = HEAPU8[$0_1 + 76 | 0];
  $35_1 = $12_1 ? $1_1 : $2_1;
  $36_1 = HEAP32[$35_1 + 4 >> 2];
  $17_1 = HEAP32[$36_1 + 4 >> 2];
  label$1 : {
   if ($17_1 - 21 >>> 0 > 8) {
    break label$1
   }
   $44_1 = $12_1 ? $2_1 : $1_1;
   label$2 : {
    if (($17_1 | 0) == 29) {
     $12_1 = HEAP32[$44_1 + 4 >> 2];
     $1_1 = HEAP32[$12_1 + 4 >> 2];
     if (($1_1 | 0) > 19) {
      break label$1
     }
     $2_1 = 0;
     HEAP32[$5_1 + 828 >> 2] = 0;
     HEAP8[$5_1 + 832 | 0] = 1;
     HEAP32[$5_1 + 820 >> 2] = 0;
     HEAP32[$5_1 + 824 >> 2] = 0;
     $49_1 = Math_fround(1.1920928955078125e-07);
     if (($1_1 | 0) <= 6) {
      while (1) {
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 100 >> 2]]($12_1) | 0) > ($2_1 | 0)) {
        FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 112 >> 2]]($12_1, $2_1, $5_1 + 304 | 0);
        $2_1 = $2_1 + 1 | 0;
        $200($5_1 + 816 | 0, $5_1 + 304 | 0);
        continue;
       }
       break;
      };
      $1_1 = HEAP32[$12_1 + 4 >> 2];
     }
     if (($1_1 | 0) == 8) {
      $1_1 = $5_1 + 312 | 0;
      HEAP32[$1_1 >> 2] = 0;
      HEAP32[$1_1 + 4 >> 2] = 0;
      HEAP32[$5_1 + 304 >> 2] = 0;
      HEAP32[$5_1 + 308 >> 2] = 0;
      $200($5_1 + 816 | 0, $5_1 + 304 | 0);
      $49_1 = Math_fround(Math_fround(HEAPF32[$12_1 + 32 >> 2] * HEAPF32[$12_1 + 16 >> 2]) + Math_fround(1.1920928955078125e-07));
     }
     $2_1 = HEAP32[$5_1 + 820 >> 2];
     if (!$2_1) {
      break label$2
     }
     HEAP32[$4_1 + 4 >> 2] = HEAP32[$0_1 + 72 >> 2];
     $17_1 = 0;
     while (1) if (($2_1 | 0) <= ($17_1 | 0)) {
      $451($4_1);
      break label$2;
     } else {
      $0_1 = HEAP32[$5_1 + 828 >> 2] + ($17_1 << 4) | 0;
      $146($5_1 + 32 | 0, HEAP32[$44_1 + 12 >> 2], HEAPF32[$0_1 >> 2], HEAPF32[$0_1 + 4 >> 2], HEAPF32[$0_1 + 8 >> 2]);
      $438($5_1 + 16 | 0, HEAP32[$35_1 + 12 >> 2], HEAPF32[$5_1 + 32 >> 2], HEAPF32[$5_1 + 36 >> 2], HEAPF32[$5_1 + 40 >> 2]);
      $3_1 = HEAP32[$36_1 + 20 >> 2];
      label$12 : {
       if (!HEAPU8[$3_1 + 104 | 0]) {
        break label$12
       }
       $10_1 = HEAPF32[$3_1 + 20 >> 2];
       $6_1 = HEAPF32[$5_1 + 16 >> 2];
       $0_1 = 0;
       label$13 : {
        if ($10_1 > $6_1) {
         break label$13
        }
        $0_1 = 0;
        if ($6_1 > HEAPF32[$3_1 + 36 >> 2]) {
         break label$13
        }
        $0_1 = 1;
       }
       $9_1 = HEAPF32[$3_1 + 24 >> 2];
       $13_1 = HEAPF32[$5_1 + 20 >> 2];
       $15_1 = HEAPF32[$3_1 + 28 >> 2];
       $7_1 = HEAPF32[$5_1 + 24 >> 2];
       if ($9_1 > $13_1 | (($15_1 > $7_1 | $7_1 > HEAPF32[$3_1 + 44 >> 2] ? 0 : $0_1) ^ 1 | $13_1 > HEAPF32[$3_1 + 40 >> 2])) {
        break label$12
       }
       $60 = HEAP32[HEAP32[$3_1 + 160 >> 2] + 12 >> 2];
       $0_1 = HEAP32[$3_1 + 52 >> 2];
       $28_1 = $0_1;
       $11_1 = Math_fround(Math_fround($13_1 - $9_1) * HEAPF32[$3_1 + 84 >> 2]);
       label$15 : {
        if ($11_1 < Math_fround(4294967296.0) & $11_1 >= Math_fround(0.0)) {
         $1_1 = ~~$11_1 >>> 0;
         break label$15;
        }
        $1_1 = 0;
       }
       $2_1 = HEAP32[$3_1 + 56 >> 2];
       $61_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $1_1 : $2_1 - 1 | 0;
       $46_1 = $2_1;
       $11_1 = Math_fround(Math_fround($7_1 - $15_1) * HEAPF32[$3_1 + 88 >> 2]);
       label$17 : {
        if ($11_1 < Math_fround(4294967296.0) & $11_1 >= Math_fround(0.0)) {
         $1_1 = ~~$11_1 >>> 0;
         break label$17;
        }
        $1_1 = 0;
       }
       $31_1 = HEAP32[$3_1 + 60 >> 2];
       $28_1 = Math_imul($28_1, $61_1 + Math_imul($46_1, $1_1 >>> 0 < $31_1 >>> 0 ? $1_1 : $31_1 - 1 | 0) | 0);
       $11_1 = Math_fround(Math_fround($6_1 - $10_1) * HEAPF32[$3_1 + 80 >> 2]);
       label$19 : {
        if ($11_1 < Math_fround(4294967296.0) & $11_1 >= Math_fround(0.0)) {
         $1_1 = ~~$11_1 >>> 0;
         break label$19;
        }
        $1_1 = 0;
       }
       $1_1 = $28_1 + ($0_1 >>> 0 > $1_1 >>> 0 ? $1_1 : $0_1 - 1 | 0) | 0;
       $31_1 = HEAP32[$60 + ($1_1 << 2) >> 2];
       if (($31_1 | 0) == -1) {
        break label$12
       }
       $46_1 = HEAP32[HEAP32[$3_1 + 140 >> 2] + 12 >> 2];
       $28_1 = Math_imul($0_1, $2_1);
       $2_1 = ($1_1 >>> 0) / ($28_1 >>> 0) | 0;
       $28_1 = $1_1 - Math_imul($2_1, $28_1) | 0;
       $1_1 = ($28_1 >>> 0) / ($0_1 >>> 0) | 0;
       $11_1 = HEAPF32[$3_1 - -64 >> 2];
       $10_1 = Math_fround($10_1 + Math_fround(+$11_1 * +($28_1 - Math_imul($0_1, $1_1) >>> 0)));
       $11_1 = Math_fround($11_1 + $10_1);
       $8_1 = Math_fround($11_1 - $10_1);
       $50_1 = Math_fround(Math_fround(2.0) / $8_1);
       $11_1 = Math_fround(Math_fround($50_1 * $6_1) - Math_fround(Math_fround($11_1 + $10_1) / $8_1));
       $10_1 = Math_fround($11_1 + Math_fround(1.0));
       $6_1 = $9_1;
       $9_1 = HEAPF32[$3_1 + 68 >> 2];
       $6_1 = Math_fround($6_1 + Math_fround(+$9_1 * +($1_1 >>> 0)));
       $9_1 = Math_fround($6_1 + $9_1);
       $8_1 = Math_fround($9_1 - $6_1);
       $51_1 = Math_fround(Math_fround(2.0) / $8_1);
       $8_1 = Math_fround(Math_fround($51_1 * $13_1) - Math_fround(Math_fround($9_1 + $6_1) / $8_1));
       $13_1 = Math_fround($8_1 + Math_fround(1.0));
       $16_1 = Math_fround($10_1 * $13_1);
       $6_1 = $15_1;
       $15_1 = HEAPF32[$3_1 + 72 >> 2];
       $6_1 = Math_fround($6_1 + Math_fround(+$15_1 * +($2_1 >>> 0)));
       $15_1 = Math_fround($6_1 + $15_1);
       $9_1 = Math_fround($15_1 - $6_1);
       $52_1 = Math_fround(Math_fround(2.0) / $9_1);
       $18_1 = Math_fround(Math_fround($52_1 * $7_1) - Math_fround(Math_fround($15_1 + $6_1) / $9_1));
       $24_1 = Math_fround($18_1 * $18_1);
       $37_1 = Math_fround(Math_fround(1.0) - $24_1);
       $7_1 = Math_fround($37_1 * Math_fround(.140625));
       $20_1 = +$18_1 * 3.0;
       $53_1 = Math_fround($20_1 + 1.0);
       $6_1 = Math_fround($7_1 * $53_1);
       HEAPF64[$5_1 + 296 >> 3] = Math_fround($16_1 * $6_1);
       $54 = Math_fround(1.0 - $20_1);
       $7_1 = Math_fround($7_1 * $54);
       HEAPF64[$5_1 + 288 >> 3] = Math_fround($16_1 * $7_1);
       $15_1 = Math_fround(Math_fround(1.0) - $8_1);
       $23_1 = Math_fround($10_1 * $15_1);
       HEAPF64[$5_1 + 280 >> 3] = Math_fround($23_1 * $6_1);
       HEAPF64[$5_1 + 272 >> 3] = Math_fround($23_1 * $7_1);
       $9_1 = Math_fround(Math_fround(1.0) - $11_1);
       $32_1 = Math_fround($9_1 * $13_1);
       HEAPF64[$5_1 + 264 >> 3] = Math_fround($32_1 * $6_1);
       HEAPF64[$5_1 + 256 >> 3] = Math_fround($32_1 * $7_1);
       $33_1 = Math_fround($9_1 * $15_1);
       HEAPF64[$5_1 + 248 >> 3] = Math_fround($33_1 * $6_1);
       HEAPF64[$5_1 + 240 >> 3] = Math_fround($33_1 * $7_1);
       $6_1 = Math_fround($18_1 + Math_fround(1.0));
       $38_1 = Math_fround($10_1 * $6_1);
       $21_1 = Math_fround($8_1 * $8_1);
       $47_1 = Math_fround(Math_fround(1.0) - $21_1);
       $7_1 = Math_fround($47_1 * Math_fround(.140625));
       $20_1 = +$8_1 * 3.0;
       $55_1 = Math_fround($20_1 + 1.0);
       $26_1 = Math_fround($7_1 * $55_1);
       HEAPF64[$5_1 + 232 >> 3] = Math_fround($38_1 * $26_1);
       $56_1 = Math_fround(1.0 - $20_1);
       $25_1 = Math_fround($7_1 * $56_1);
       HEAPF64[$5_1 + 224 >> 3] = Math_fround($38_1 * $25_1);
       $39_1 = Math_fround($9_1 * $6_1);
       HEAPF64[$5_1 + 216 >> 3] = Math_fround($39_1 * $26_1);
       HEAPF64[$5_1 + 208 >> 3] = Math_fround($39_1 * $25_1);
       $7_1 = Math_fround(Math_fround(1.0) - $18_1);
       $40_1 = Math_fround($10_1 * $7_1);
       HEAPF64[$5_1 + 200 >> 3] = Math_fround($40_1 * $26_1);
       HEAPF64[$5_1 + 192 >> 3] = Math_fround($40_1 * $25_1);
       $41_1 = Math_fround($9_1 * $7_1);
       HEAPF64[$5_1 + 184 >> 3] = Math_fround($41_1 * $26_1);
       HEAPF64[$5_1 + 176 >> 3] = Math_fround($41_1 * $25_1);
       $26_1 = Math_fround($13_1 * $6_1);
       $22_1 = Math_fround($11_1 * $11_1);
       $48_1 = Math_fround(Math_fround(1.0) - $22_1);
       $25_1 = Math_fround($48_1 * Math_fround(.140625));
       $20_1 = +$11_1 * 3.0;
       $57_1 = Math_fround($20_1 + 1.0);
       $14_1 = Math_fround($25_1 * $57_1);
       HEAPF64[$5_1 + 168 >> 3] = Math_fround($26_1 * $14_1);
       $58_1 = Math_fround(1.0 - $20_1);
       $19_1 = Math_fround($25_1 * $58_1);
       HEAPF64[$5_1 + 160 >> 3] = Math_fround($26_1 * $19_1);
       $25_1 = Math_fround($13_1 * $7_1);
       HEAPF64[$5_1 + 152 >> 3] = Math_fround($25_1 * $14_1);
       HEAPF64[$5_1 + 144 >> 3] = Math_fround($25_1 * $19_1);
       $42_1 = Math_fround($15_1 * $6_1);
       HEAPF64[$5_1 + 136 >> 3] = Math_fround($42_1 * $14_1);
       HEAPF64[$5_1 + 128 >> 3] = Math_fround($42_1 * $19_1);
       $43_1 = Math_fround($15_1 * $7_1);
       HEAPF64[$5_1 + 120 >> 3] = Math_fround($43_1 * $14_1);
       HEAPF64[$5_1 + 112 >> 3] = Math_fround($43_1 * $19_1);
       $19_1 = Math_fround($22_1 + $21_1);
       $14_1 = Math_fround((+Math_fround($19_1 + $24_1) * 9.0 + -19.0) * .015625);
       $29_1 = Math_fround($16_1 * $14_1);
       HEAPF64[$5_1 + 104 >> 3] = Math_fround($6_1 * $29_1);
       $30_1 = Math_fround($32_1 * $14_1);
       HEAPF64[$5_1 + 96 >> 3] = Math_fround($6_1 * $30_1);
       $34_1 = Math_fround($23_1 * $14_1);
       HEAPF64[$5_1 + 88 >> 3] = Math_fround($6_1 * $34_1);
       $14_1 = Math_fround($33_1 * $14_1);
       HEAPF64[$5_1 + 80 >> 3] = Math_fround($6_1 * $14_1);
       HEAPF64[$5_1 + 72 >> 3] = Math_fround($7_1 * $29_1);
       HEAPF64[$5_1 + 64 >> 3] = Math_fround($7_1 * $30_1);
       HEAPF64[$5_1 + 56 >> 3] = Math_fround($7_1 * $34_1);
       HEAPF64[$5_1 + 48 >> 3] = Math_fround($7_1 * $14_1);
       $29_1 = Math_fround($18_1 * Math_fround(18.0));
       $20_1 = +$24_1;
       $30_1 = Math_fround(($20_1 * 3.0 + +$19_1) * 9.0 + -19.0);
       $14_1 = Math_fround($29_1 + $30_1);
       HEAPF32[$5_1 + 424 >> 2] = $16_1 * $14_1;
       $34_1 = Math_fround($8_1 * Math_fround(18.0));
       $27_1 = +$21_1;
       $45_1 = +$22_1;
       $22_1 = Math_fround(($27_1 * 3.0 + $45_1 + $20_1) * 9.0 + -19.0);
       $19_1 = Math_fround($34_1 + $22_1);
       HEAPF32[$5_1 + 420 >> 2] = $38_1 * $19_1;
       $21_1 = Math_fround($11_1 * Math_fround(18.0));
       $59_1 = Math_fround(($45_1 * 3.0 + $27_1 + $20_1) * 9.0 + -19.0);
       $24_1 = Math_fround($21_1 + $59_1);
       HEAPF32[$5_1 + 416 >> 2] = $26_1 * $24_1;
       HEAPF32[$5_1 + 408 >> 2] = $32_1 * $14_1;
       HEAPF32[$5_1 + 404 >> 2] = $39_1 * $19_1;
       $21_1 = Math_fround($21_1 - $59_1);
       HEAPF32[$5_1 + 400 >> 2] = $26_1 * $21_1;
       HEAPF32[$5_1 + 392 >> 2] = $23_1 * $14_1;
       $22_1 = Math_fround($34_1 - $22_1);
       HEAPF32[$5_1 + 388 >> 2] = $38_1 * $22_1;
       HEAPF32[$5_1 + 384 >> 2] = $42_1 * $24_1;
       HEAPF32[$5_1 + 376 >> 2] = $33_1 * $14_1;
       HEAPF32[$5_1 + 372 >> 2] = $39_1 * $22_1;
       HEAPF32[$5_1 + 368 >> 2] = $42_1 * $21_1;
       $14_1 = Math_fround($29_1 - $30_1);
       HEAPF32[$5_1 + 360 >> 2] = $16_1 * $14_1;
       HEAPF32[$5_1 + 356 >> 2] = $40_1 * $19_1;
       HEAPF32[$5_1 + 352 >> 2] = $25_1 * $24_1;
       HEAPF32[$5_1 + 344 >> 2] = $32_1 * $14_1;
       HEAPF32[$5_1 + 340 >> 2] = $41_1 * $19_1;
       HEAPF32[$5_1 + 336 >> 2] = $25_1 * $21_1;
       HEAPF32[$5_1 + 328 >> 2] = $23_1 * $14_1;
       HEAPF32[$5_1 + 324 >> 2] = $40_1 * $22_1;
       HEAPF32[$5_1 + 320 >> 2] = $43_1 * $24_1;
       HEAPF32[$5_1 + 312 >> 2] = $33_1 * $14_1;
       HEAPF32[$5_1 + 308 >> 2] = $41_1 * $22_1;
       HEAPF32[$5_1 + 304 >> 2] = $43_1 * $21_1;
       $45_1 = 3.0 - $45_1 * 9.0;
       $27_1 = 3.0 - $27_1 * 9.0;
       $29_1 = Math_fround($8_1 + $8_1);
       $30_1 = Math_fround(3.0 - $20_1 * 9.0);
       $2_1 = 0;
       while (1) {
        if (($2_1 | 0) != 128) {
         $167(($5_1 + 304 | 0) + $2_1 | 0, Math_fround(64.0));
         $2_1 = $2_1 + 16 | 0;
         continue;
        }
        break;
       };
       $8_1 = Math_fround($37_1 * $53_1);
       HEAPF32[$5_1 + 804 >> 2] = $10_1 * $8_1;
       HEAPF32[$5_1 + 800 >> 2] = $13_1 * $8_1;
       $14_1 = Math_fround($37_1 * $54);
       HEAPF32[$5_1 + 788 >> 2] = $10_1 * $14_1;
       HEAPF32[$5_1 + 784 >> 2] = $13_1 * $14_1;
       HEAPF32[$5_1 + 768 >> 2] = $15_1 * $8_1;
       HEAPF32[$5_1 + 752 >> 2] = $15_1 * $14_1;
       HEAPF32[$5_1 + 740 >> 2] = $9_1 * $8_1;
       HEAPF32[$5_1 + 724 >> 2] = $9_1 * $14_1;
       $19_1 = Math_fround($47_1 * $55_1);
       HEAPF32[$5_1 + 680 >> 2] = $10_1 * $19_1;
       HEAPF32[$5_1 + 672 >> 2] = $6_1 * $19_1;
       $24_1 = Math_fround($47_1 * $56_1);
       HEAPF32[$5_1 + 664 >> 2] = $10_1 * $24_1;
       HEAPF32[$5_1 + 656 >> 2] = $6_1 * $24_1;
       HEAPF32[$5_1 + 648 >> 2] = $9_1 * $19_1;
       HEAPF32[$5_1 + 632 >> 2] = $9_1 * $24_1;
       HEAPF32[$5_1 + 608 >> 2] = $7_1 * $19_1;
       HEAPF32[$5_1 + 592 >> 2] = $7_1 * $24_1;
       $21_1 = Math_fround($48_1 * $57_1);
       HEAPF32[$5_1 + 552 >> 2] = $13_1 * $21_1;
       HEAPF32[$5_1 + 548 >> 2] = $6_1 * $21_1;
       $22_1 = Math_fround($48_1 * $58_1);
       HEAPF32[$5_1 + 536 >> 2] = $13_1 * $22_1;
       HEAPF32[$5_1 + 532 >> 2] = $6_1 * $22_1;
       HEAPF32[$5_1 + 516 >> 2] = $7_1 * $21_1;
       HEAPF32[$5_1 + 500 >> 2] = $7_1 * $22_1;
       HEAPF32[$5_1 + 488 >> 2] = $15_1 * $21_1;
       HEAPF32[$5_1 + 472 >> 2] = $15_1 * $22_1;
       $37_1 = Math_fround($18_1 + $18_1);
       $18_1 = Math_fround($30_1 - $37_1);
       HEAPF32[$5_1 + 808 >> 2] = $16_1 * $18_1;
       $34_1 = $16_1;
       $16_1 = Math_fround(Math_fround(-$30_1) - $37_1);
       HEAPF32[$5_1 + 792 >> 2] = $34_1 * $16_1;
       HEAPF32[$5_1 + 776 >> 2] = $23_1 * $18_1;
       $8_1 = Math_fround(-$8_1);
       HEAPF32[$5_1 + 772 >> 2] = $10_1 * $8_1;
       HEAPF32[$5_1 + 760 >> 2] = $23_1 * $16_1;
       $23_1 = Math_fround(-$14_1);
       HEAPF32[$5_1 + 756 >> 2] = $10_1 * $23_1;
       HEAPF32[$5_1 + 744 >> 2] = $32_1 * $18_1;
       HEAPF32[$5_1 + 736 >> 2] = $13_1 * $8_1;
       HEAPF32[$5_1 + 728 >> 2] = $32_1 * $16_1;
       HEAPF32[$5_1 + 720 >> 2] = $13_1 * $23_1;
       HEAPF32[$5_1 + 712 >> 2] = $33_1 * $18_1;
       HEAPF32[$5_1 + 708 >> 2] = $9_1 * $8_1;
       HEAPF32[$5_1 + 704 >> 2] = $15_1 * $8_1;
       HEAPF32[$5_1 + 696 >> 2] = $33_1 * $16_1;
       HEAPF32[$5_1 + 692 >> 2] = $9_1 * $23_1;
       HEAPF32[$5_1 + 688 >> 2] = $15_1 * $23_1;
       $23_1 = Math_fround($27_1);
       $8_1 = Math_fround($23_1 - $29_1);
       HEAPF32[$5_1 + 676 >> 2] = $38_1 * $8_1;
       HEAPF32[$5_1 + 644 >> 2] = $39_1 * $8_1;
       $18_1 = Math_fround(-$19_1);
       HEAPF32[$5_1 + 640 >> 2] = $6_1 * $18_1;
       $16_1 = Math_fround(-$24_1);
       HEAPF32[$5_1 + 624 >> 2] = $6_1 * $16_1;
       HEAPF32[$5_1 + 616 >> 2] = $10_1 * $18_1;
       HEAPF32[$5_1 + 612 >> 2] = $40_1 * $8_1;
       HEAPF32[$5_1 + 600 >> 2] = $10_1 * $16_1;
       HEAPF32[$5_1 + 584 >> 2] = $9_1 * $18_1;
       HEAPF32[$5_1 + 580 >> 2] = $41_1 * $8_1;
       HEAPF32[$5_1 + 576 >> 2] = $7_1 * $18_1;
       HEAPF32[$5_1 + 568 >> 2] = $9_1 * $16_1;
       HEAPF32[$5_1 + 560 >> 2] = $7_1 * $16_1;
       $8_1 = Math_fround($45_1);
       $11_1 = Math_fround($11_1 + $11_1);
       $10_1 = Math_fround($8_1 - $11_1);
       HEAPF32[$5_1 + 544 >> 2] = $26_1 * $10_1;
       $9_1 = Math_fround(-$21_1);
       HEAPF32[$5_1 + 520 >> 2] = $13_1 * $9_1;
       HEAPF32[$5_1 + 512 >> 2] = $25_1 * $10_1;
       $16_1 = $13_1;
       $13_1 = Math_fround(-$22_1);
       HEAPF32[$5_1 + 504 >> 2] = $16_1 * $13_1;
       HEAPF32[$5_1 + 484 >> 2] = $6_1 * $9_1;
       HEAPF32[$5_1 + 480 >> 2] = $42_1 * $10_1;
       HEAPF32[$5_1 + 468 >> 2] = $6_1 * $13_1;
       HEAPF32[$5_1 + 456 >> 2] = $15_1 * $9_1;
       HEAPF32[$5_1 + 452 >> 2] = $7_1 * $9_1;
       HEAPF32[$5_1 + 448 >> 2] = $43_1 * $10_1;
       HEAPF32[$5_1 + 440 >> 2] = $15_1 * $13_1;
       HEAPF32[$5_1 + 436 >> 2] = $7_1 * $13_1;
       $6_1 = Math_fround(Math_fround(-$23_1) - $29_1);
       HEAPF32[$5_1 + 660 >> 2] = $38_1 * $6_1;
       HEAPF32[$5_1 + 628 >> 2] = $39_1 * $6_1;
       HEAPF32[$5_1 + 596 >> 2] = $40_1 * $6_1;
       HEAPF32[$5_1 + 564 >> 2] = $41_1 * $6_1;
       $6_1 = Math_fround(Math_fround(-$8_1) - $11_1);
       HEAPF32[$5_1 + 528 >> 2] = $26_1 * $6_1;
       HEAPF32[$5_1 + 496 >> 2] = $25_1 * $6_1;
       HEAPF32[$5_1 + 464 >> 2] = $42_1 * $6_1;
       HEAPF32[$5_1 + 432 >> 2] = $43_1 * $6_1;
       $2_1 = 128;
       while (1) {
        if (($2_1 | 0) != 512) {
         HEAP32[$5_1 >> 2] = 1041235968;
         $218(($5_1 + 304 | 0) + $2_1 | 0, $5_1);
         $2_1 = $2_1 + 16 | 0;
         continue;
        }
        break;
       };
       $1_1 = ($31_1 << 7) + $46_1 | 0;
       $31_1 = HEAP32[HEAP32[$3_1 + 120 >> 2] + 12 >> 2];
       $0_1 = 0;
       $20_1 = 0.0;
       $6_1 = Math_fround(0.0);
       $2_1 = $5_1 + 304 | 0;
       $3_1 = $5_1 + 48 | 0;
       $7_1 = Math_fround(0.0);
       $10_1 = Math_fround(0.0);
       label$25 : {
        while (1) {
         if (($0_1 | 0) != 32) {
          $27_1 = HEAPF64[$31_1 + (HEAP32[$1_1 >> 2] << 3) >> 3];
          if ($27_1 == 1797693134862315708145274.0e284) {
           $7_1 = Math_fround(0.0);
           $13_1 = Math_fround(0.0);
           $6_1 = Math_fround(0.0);
           break label$25;
          } else {
           $1_1 = $1_1 + 4 | 0;
           $0_1 = $0_1 + 1 | 0;
           $20_1 = $20_1 + $27_1 * HEAPF64[$3_1 >> 3];
           $10_1 = Math_fround($27_1 * +HEAPF32[$2_1 >> 2] + +$10_1);
           $6_1 = Math_fround($27_1 * +HEAPF32[$2_1 + 8 >> 2] + +$6_1);
           $7_1 = Math_fround($27_1 * +HEAPF32[$2_1 + 4 >> 2] + +$7_1);
           $3_1 = $3_1 + 8 | 0;
           $2_1 = $2_1 + 16 | 0;
           continue;
          }
         }
         break;
        };
        $13_1 = Math_fround($52_1 * $6_1);
        $7_1 = Math_fround($51_1 * $7_1);
        $0_1 = 32;
        $62_1 = $20_1;
        $6_1 = Math_fround($50_1 * $10_1);
       }
       if ($0_1 >>> 0 < 32) {
        break label$12
       }
       HEAP32[$5_1 + 316 >> 2] = 0;
       HEAPF32[$5_1 + 312 >> 2] = $13_1;
       HEAPF32[$5_1 + 308 >> 2] = $7_1;
       HEAPF32[$5_1 + 304 >> 2] = $6_1;
       $6_1 = Math_fround($62_1);
       if (!($49_1 >= $6_1)) {
        break label$12
       }
       $488($5_1 + 304 | 0);
       $431($5_1 + 48 | 0, HEAP32[$35_1 + 12 >> 2], HEAPF32[$5_1 + 304 >> 2], HEAPF32[$5_1 + 308 >> 2], HEAPF32[$5_1 + 312 >> 2]);
       label$30 : {
        if (HEAP32[$12_1 + 4 >> 2] != 8) {
         $10_1 = HEAPF32[$5_1 + 40 >> 2];
         $13_1 = HEAPF32[$5_1 + 36 >> 2];
         $15_1 = HEAPF32[$5_1 + 32 >> 2];
         $9_1 = HEAPF32[$5_1 + 56 >> 2];
         $11_1 = HEAPF32[$5_1 + 52 >> 2];
         $8_1 = HEAPF32[$5_1 + 48 >> 2];
         break label$30;
        }
        $7_1 = Math_fround(HEAPF32[$12_1 + 32 >> 2] * HEAPF32[$12_1 + 16 >> 2]);
        $8_1 = HEAPF32[$5_1 + 48 >> 2];
        $15_1 = Math_fround(HEAPF32[$5_1 + 32 >> 2] - Math_fround($7_1 * $8_1));
        HEAPF32[$5_1 + 32 >> 2] = $15_1;
        $11_1 = HEAPF32[$5_1 + 52 >> 2];
        $13_1 = Math_fround(HEAPF32[$5_1 + 36 >> 2] - Math_fround($7_1 * $11_1));
        HEAPF32[$5_1 + 36 >> 2] = $13_1;
        $9_1 = HEAPF32[$5_1 + 56 >> 2];
        $10_1 = Math_fround(HEAPF32[$5_1 + 40 >> 2] - Math_fround($7_1 * $9_1));
        HEAPF32[$5_1 + 40 >> 2] = $10_1;
        $6_1 = Math_fround($6_1 - $7_1);
       }
       HEAP32[$5_1 + 12 >> 2] = 0;
       HEAPF32[$5_1 + 8 >> 2] = $10_1 - Math_fround($6_1 * $9_1);
       HEAPF32[$5_1 + 4 >> 2] = $13_1 - Math_fround($6_1 * $11_1);
       HEAPF32[$5_1 >> 2] = $15_1 - Math_fround($8_1 * $6_1);
       FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $5_1 + 48 | 0, $5_1, $6_1);
      }
      $17_1 = $17_1 + 1 | 0;
      $2_1 = HEAP32[$5_1 + 820 >> 2];
      continue;
     };
    }
    if (HEAP32[HEAP32[$44_1 + 4 >> 2] + 4 >> 2] > 19) {
     break label$1
    }
    $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$36_1 >> 2] + 48 >> 2]]($36_1));
    HEAPF32[$0_1 - -64 >> 2] = $6_1;
    HEAP32[$0_1 + 60 >> 2] = $3_1;
    HEAP32[$0_1 + 48 >> 2] = $35_1;
    $1_1 = $0_1 + 44 | 0;
    HEAP32[$1_1 >> 2] = $44_1;
    HEAP32[$0_1 + 52 >> 2] = $4_1;
    $2_1 = $0_1 + 72 | 0;
    HEAP32[$4_1 + 4 >> 2] = HEAP32[$2_1 >> 2];
    $463($5_1 + 816 | 0, HEAP32[$35_1 + 12 >> 2]);
    $464($5_1 + 48 | 0, $5_1 + 816 | 0, HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]);
    $12_1 = $5_1 + 56 | 0;
    $17_1 = HEAP32[$12_1 + 4 >> 2];
    $3_1 = $5_1 + 312 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $17_1;
    $12_1 = $5_1 + 72 | 0;
    $17_1 = HEAP32[$12_1 + 4 >> 2];
    $3_1 = $5_1 + 328 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $17_1;
    $12_1 = $5_1 + 88 | 0;
    $17_1 = HEAP32[$12_1 + 4 >> 2];
    $3_1 = $5_1 + 344 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $17_1;
    $12_1 = $5_1 + 104 | 0;
    $17_1 = HEAP32[$12_1 + 4 >> 2];
    $3_1 = $5_1 + 360 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $17_1;
    $3_1 = HEAP32[$5_1 + 52 >> 2];
    HEAP32[$5_1 + 304 >> 2] = HEAP32[$5_1 + 48 >> 2];
    HEAP32[$5_1 + 308 >> 2] = $3_1;
    $3_1 = HEAP32[$5_1 + 68 >> 2];
    HEAP32[$5_1 + 320 >> 2] = HEAP32[$5_1 + 64 >> 2];
    HEAP32[$5_1 + 324 >> 2] = $3_1;
    $3_1 = HEAP32[$5_1 + 84 >> 2];
    HEAP32[$5_1 + 336 >> 2] = HEAP32[$5_1 + 80 >> 2];
    HEAP32[$5_1 + 340 >> 2] = $3_1;
    $3_1 = HEAP32[$5_1 + 100 >> 2];
    HEAP32[$5_1 + 352 >> 2] = HEAP32[$5_1 + 96 >> 2];
    HEAP32[$5_1 + 356 >> 2] = $3_1;
    $3_1 = HEAP32[HEAP32[$1_1 >> 2] + 4 >> 2];
    $12_1 = $0_1 + 12 | 0;
    $17_1 = $0_1 + 28 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $5_1 + 304 | 0, $12_1, $17_1);
    $7_1 = HEAPF32[$4_1 + 32 >> 2];
    HEAP32[$5_1 + 60 >> 2] = 0;
    $6_1 = Math_fround($7_1 + $6_1);
    HEAPF32[$5_1 + 56 >> 2] = $6_1;
    HEAPF32[$5_1 + 52 >> 2] = $6_1;
    HEAPF32[$5_1 + 48 >> 2] = $6_1;
    $3_1 = $158($17_1, $5_1 + 48 | 0);
    $12_1 = $489($12_1, $5_1 + 48 | 0);
    $2_1 = HEAP32[$2_1 >> 2];
    HEAP32[$2_1 + 824 >> 2] = HEAP32[$35_1 + 8 >> 2];
    HEAP32[$2_1 + 820 >> 2] = HEAP32[$44_1 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$36_1 >> 2] + 64 >> 2]]($36_1, $0_1 + 8 | 0, $12_1, $3_1);
    $451($4_1);
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    break label$1;
   }
   $124($5_1 + 816 | 0);
  }
  global$0 = $5_1 + 880 | 0;
 }
 
 function $488($0_1) {
  var $1_1 = 0, $2_1 = Math_fround(0);
  $1_1 = $0_1 + 8 | 0;
  $2_1 = $149(HEAPF32[$0_1 >> 2], HEAPF32[$0_1 + 4 >> 2], HEAPF32[$1_1 >> 2]);
  if ($2_1 >= Math_fround(1.4210854715202004e-14)) {
   $167($0_1, Math_fround(Math_sqrt($2_1)));
   return;
  }
  HEAP32[$0_1 >> 2] = 1065353216;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
 }
 
 function $489($0_1, $1_1) {
  HEAPF32[$0_1 >> 2] = HEAPF32[$0_1 >> 2] - HEAPF32[$1_1 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$0_1 + 4 >> 2] - HEAPF32[$1_1 + 4 >> 2];
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$0_1 + 8 >> 2] - HEAPF32[$1_1 + 8 >> 2];
  return $0_1;
 }
 
 function $490($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0);
  $5_1 = global$0 - 432 | 0;
  global$0 = $5_1;
  $6_1 = Math_fround(1.0);
  $0_1 = HEAPU8[$0_1 + 76 | 0];
  $7_1 = $0_1 ? $2_1 : $1_1;
  $8_1 = $149(Math_fround(HEAPF32[$7_1 + 116 >> 2] - HEAPF32[$7_1 + 52 >> 2]), Math_fround(HEAPF32[$7_1 + 120 >> 2] - HEAPF32[$7_1 + 56 >> 2]), Math_fround(HEAPF32[$7_1 + 124 >> 2] - HEAPF32[$7_1 + 60 >> 2]));
  $10_1 = HEAPF32[$7_1 + 280 >> 2];
  label$1 : {
   if ($8_1 < Math_fround($10_1 * $10_1)) {
    break label$1
   }
   $0_1 = $0_1 ? $1_1 : $2_1;
   $463($5_1 + 368 | 0, $0_1 + 4 | 0);
   $464($5_1 + 304 | 0, $5_1 + 368 | 0, $7_1 + 4 | 0);
   $464($5_1 + 240 | 0, $5_1 + 368 | 0, $7_1 + 68 | 0);
   $14_1 = HEAP32[$0_1 + 192 >> 2];
   if (HEAP32[$14_1 + 4 >> 2] - 21 >>> 0 > 8) {
    break label$1
   }
   $1_1 = $5_1 + 360 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 232 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$5_1 + 356 >> 2];
   HEAP32[$5_1 + 224 >> 2] = HEAP32[$5_1 + 352 >> 2];
   HEAP32[$5_1 + 228 >> 2] = $0_1;
   $10_1 = HEAPF32[$5_1 + 224 >> 2];
   $6_1 = HEAPF32[$5_1 + 288 >> 2];
   if ($10_1 > $6_1) {
    HEAPF32[$5_1 + 224 >> 2] = $6_1;
    $10_1 = $6_1;
   }
   $11_1 = HEAPF32[$5_1 + 296 >> 2];
   $8_1 = HEAPF32[$5_1 + 232 >> 2];
   $3_1 = $11_1 < $8_1;
   $12_1 = HEAPF32[$5_1 + 292 >> 2];
   $16_1 = HEAPF32[$5_1 + 228 >> 2];
   $17_1 = $12_1 < $16_1;
   $13_1 = HEAPF32[$5_1 + 300 >> 2];
   if ($13_1 < HEAPF32[$5_1 + 236 >> 2]) {
    HEAPF32[$5_1 + 236 >> 2] = $13_1
   }
   $4_1 = $5_1 + 352 | 0;
   $15_1 = $4_1 + 8 | 0;
   $1_1 = $15_1;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 216 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$5_1 + 208 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$5_1 + 212 >> 2] = $0_1;
   $9_1 = HEAPF32[$5_1 + 212 >> 2];
   $18_1 = $9_1 < $12_1 ? $12_1 : $9_1;
   $9_1 = HEAPF32[$5_1 + 208 >> 2];
   $9_1 = $6_1 > $9_1 ? $6_1 : $9_1;
   $6_1 = HEAPF32[$2_1 >> 2];
   $6_1 = $6_1 < $11_1 ? $11_1 : $6_1;
   if (HEAPF32[$5_1 + 220 >> 2] < $13_1) {
    HEAPF32[$5_1 + 220 >> 2] = $13_1
   }
   $11_1 = $3_1 ? $11_1 : $8_1;
   $8_1 = HEAPF32[$7_1 + 276 >> 2];
   HEAPF32[$5_1 + 232 >> 2] = $11_1 - $8_1;
   HEAPF32[$5_1 + 228 >> 2] = ($17_1 ? $12_1 : $16_1) - $8_1;
   HEAPF32[$5_1 + 224 >> 2] = $10_1 - $8_1;
   HEAPF32[$5_1 + 216 >> 2] = $8_1 + $6_1;
   HEAPF32[$5_1 + 212 >> 2] = $8_1 + $18_1;
   HEAPF32[$5_1 + 208 >> 2] = $8_1 + $9_1;
   $1_1 = $5_1 + 312 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 12 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$5_1 + 324 >> 2];
   $1_1 = $5_1 + 20 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 320 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   $1_1 = $5_1 + 328 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 28 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$5_1 + 340 >> 2];
   $1_1 = $5_1 + 36 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 336 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   $1_1 = $5_1 + 344 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 44 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$4_1 + 4 >> 2];
   $1_1 = $5_1 + 52 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$15_1 + 4 >> 2];
   $1_1 = $5_1 + 60 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$15_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   HEAP32[$5_1 >> 2] = 14912;
   $0_1 = HEAP32[$5_1 + 308 >> 2];
   HEAP32[$5_1 + 4 >> 2] = HEAP32[$5_1 + 304 >> 2];
   HEAP32[$5_1 + 8 >> 2] = $0_1;
   $1_1 = $5_1 + 248 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 76 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$5_1 + 260 >> 2];
   $1_1 = $5_1 + 84 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 256 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   $1_1 = $5_1 + 264 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 92 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$5_1 + 276 >> 2];
   $1_1 = $5_1 + 100 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 272 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   $1_1 = $5_1 + 280 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 108 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $3_1 = $5_1 + 288 | 0;
   $1_1 = $3_1 + 8 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 124 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$3_1 + 4 >> 2];
   $1_1 = $5_1 + 116 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   HEAPF32[$5_1 + 196 >> 2] = $8_1;
   $0_1 = HEAP32[$5_1 + 244 >> 2];
   HEAP32[$5_1 + 68 >> 2] = HEAP32[$5_1 + 240 >> 2];
   HEAP32[$5_1 + 72 >> 2] = $0_1;
   HEAPF32[$5_1 + 200 >> 2] = HEAPF32[$7_1 + 272 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$14_1 >> 2] + 64 >> 2]]($14_1, $5_1, $5_1 + 224 | 0, $5_1 + 208 | 0);
   $6_1 = HEAPF32[$5_1 + 200 >> 2];
   if ($6_1 < HEAPF32[$7_1 + 272 >> 2]) {
    HEAPF32[$7_1 + 272 >> 2] = $6_1;
    break label$1;
   }
   $6_1 = Math_fround(1.0);
  }
  global$0 = $5_1 + 432 | 0;
  return Math_fround($6_1);
 }
 
 function $491($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $0_1 + 72 | 0;
  if (HEAP32[$0_1 >> 2]) {
   $459($1_1, $0_1)
  }
 }
 
 function $492($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0);
  $2_1 = global$0 - 800 | 0;
  global$0 = $2_1;
  $3_1 = $2_1 + 748 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 760 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 756 >> 2] = 1065353216;
  $3_1 = $2_1 + 768 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 780 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 776 >> 2] = 1065353216;
  $3_1 = $2_1 + 788 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 796 >> 2] = 0;
  HEAP32[$2_1 + 740 >> 2] = 0;
  HEAP32[$2_1 + 744 >> 2] = 0;
  HEAP32[$2_1 + 736 >> 2] = 1065353216;
  HEAP32[$2_1 + 728 >> 2] = 32;
  HEAP32[$2_1 + 732 >> 2] = 953267991;
  HEAP32[$2_1 + 720 >> 2] = 0;
  HEAP32[$2_1 + 724 >> 2] = 0;
  HEAP32[$2_1 + 552 >> 2] = 14128;
  HEAPF32[$2_1 + 716 >> 2] = HEAPF32[$0_1 + 200 >> 2];
  $3_1 = $457($2_1 + 496 | 0, HEAPF32[$0_1 + 196 >> 2]);
  $1_1 = $471($2_1 + 384 | 0, $1_1, $1_1 + 16 | 0, $1_1 + 32 | 0);
  HEAP8[$2_1 + 356 | 0] = 0;
  HEAP32[$2_1 + 332 >> 2] = 953267991;
  HEAP32[$2_1 + 20 >> 2] = $1_1;
  HEAP32[$2_1 + 16 >> 2] = $3_1;
  HEAP32[$2_1 + 8 >> 2] = 14572;
  HEAP32[$2_1 + 12 >> 2] = $2_1 + 24;
  label$1 : {
   if (!$466($2_1 + 8 | 0, $0_1 + 4 | 0, $0_1 + 68 | 0, $2_1 + 736 | 0, $2_1 + 736 | 0, $2_1 + 552 | 0)) {
    break label$1
   }
   $4_1 = HEAPF32[$2_1 + 716 >> 2];
   if (!($4_1 < HEAPF32[$0_1 + 200 >> 2])) {
    break label$1
   }
   HEAPF32[$0_1 + 200 >> 2] = $4_1;
  }
  $191($1_1);
  global$0 = $2_1 + 800 | 0;
 }
 
 function $493($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  HEAP32[$0_1 >> 2] = 15140;
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP8[$0_1 + 76 | 0] = 0;
  HEAP32[$0_1 + 72 >> 2] = $2_1;
  HEAP8[$0_1 + 68 | 0] = $5_1;
  HEAP8[$0_1 + 24 | 0] = 1;
  HEAP32[$0_1 + 20 >> 2] = 0;
  HEAP8[$0_1 + 44 | 0] = 1;
  $1_1 = $0_1 + 12 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 40 >> 2] = 0;
  HEAP8[$0_1 - -64 | 0] = 1;
  $1_1 = $0_1 + 32 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 60 >> 2] = 0;
  $1_1 = $0_1 + 52 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 80 >> 2] = HEAP32[HEAP32[($5_1 ? $4_1 : $3_1) + 4 >> 2] + 72 >> 2];
  $494($0_1, $3_1, $4_1);
 }
 
 function $494($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  label$1 : {
   $11_1 = HEAPU8[$0_1 + 68 | 0];
   $8_1 = $11_1 ? $2_1 : $1_1;
   $10_1 = HEAP32[$8_1 + 4 >> 2];
   $4_1 = HEAP32[$10_1 + 20 >> 2];
   $7_1 = HEAP32[$0_1 + 52 >> 2];
   if (($4_1 | 0) < ($7_1 | 0)) {
    break label$1
   }
   if (!(($4_1 | 0) <= ($7_1 | 0) | HEAP32[$0_1 + 56 >> 2] >= ($4_1 | 0))) {
    $5_1 = $7_1;
    $12_1 = $0_1 + 48 | 0;
    if ($4_1) {
     $9_1 = $120($4_1 << 2);
     $5_1 = HEAP32[$0_1 + 52 >> 2];
    }
    $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
    while (1) {
     if ($5_1) {
      HEAP32[$6_1 + $9_1 >> 2] = HEAP32[HEAP32[$0_1 + 60 >> 2] + $6_1 >> 2];
      $5_1 = $5_1 - 1 | 0;
      $6_1 = $6_1 + 4 | 0;
      continue;
     }
     break;
    };
    $163($12_1);
    HEAP32[$0_1 + 60 >> 2] = $9_1;
    HEAP8[$0_1 - -64 | 0] = 1;
    HEAP32[$0_1 + 56 >> 2] = $4_1;
   }
   $6_1 = $4_1 - $7_1 | 0;
   $5_1 = $7_1 << 2;
   while (1) {
    if (!$6_1) {
     break label$1
    }
    HEAP32[HEAP32[$0_1 + 60 >> 2] + $5_1 >> 2] = 0;
    $6_1 = $6_1 - 1 | 0;
    $5_1 = $5_1 + 4 | 0;
    continue;
   };
  }
  $2_1 = $11_1 ? $1_1 : $2_1;
  HEAP32[$0_1 + 52 >> 2] = $4_1;
  $7_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
  $1_1 = 64;
  $5_1 = 0;
  $6_1 = 0;
  while (1) {
   if (($6_1 | 0) != ($7_1 | 0)) {
    label$9 : {
     if (HEAP32[$10_1 + 68 >> 2]) {
      HEAP32[HEAP32[$0_1 + 60 >> 2] + $5_1 >> 2] = 0;
      break label$9;
     }
     $4_1 = HEAP32[HEAP32[$10_1 + 28 >> 2] + $1_1 >> 2];
     HEAP32[$3_1 + 72 >> 2] = $6_1;
     HEAP32[$3_1 + 64 >> 2] = 0;
     HEAP32[$3_1 + 68 >> 2] = -1;
     HEAP32[$3_1 + 48 >> 2] = $8_1;
     $9_1 = HEAP32[$8_1 + 12 >> 2];
     HEAP32[$3_1 + 56 >> 2] = HEAP32[$8_1 + 8 >> 2];
     HEAP32[$3_1 + 60 >> 2] = $9_1;
     HEAP32[$3_1 + 52 >> 2] = $4_1;
     $4_1 = HEAP32[$0_1 + 4 >> 2];
     $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $3_1 + 48 | 0, $2_1, HEAP32[$0_1 + 72 >> 2], 1) | 0;
     HEAP32[HEAP32[$0_1 + 60 >> 2] + $5_1 >> 2] = $4_1;
     HEAP32[$3_1 + 36 >> 2] = 0;
     HEAP8[$3_1 + 40 | 0] = 1;
     HEAP32[$3_1 + 28 >> 2] = 0;
     HEAP32[$3_1 + 32 >> 2] = 0;
     HEAP32[$3_1 + 12 >> 2] = 0;
     HEAP8[$3_1 + 16 | 0] = 1;
     HEAP32[$3_1 + 4 >> 2] = 0;
     HEAP32[$3_1 + 8 >> 2] = 0;
     $124($3_1);
     $124($3_1 + 24 | 0);
    }
    $5_1 = $5_1 + 4 | 0;
    $1_1 = $1_1 + 80 | 0;
    $6_1 = $6_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $3_1 + 80 | 0;
 }
 
 function $495($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 15140;
  $496($0_1);
  $124($0_1 + 48 | 0);
  $124($0_1 + 28 | 0);
  $124($0_1 + 8 | 0);
  return $0_1 | 0;
 }
 
 function $496($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
  while (1) {
   if ($1_1) {
    $2_1 = HEAP32[HEAP32[$0_1 + 60 >> 2] + $3_1 >> 2];
    if ($2_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] >> 2]]($2_1) | 0;
     $2_1 = HEAP32[$0_1 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 60 >> 2]]($2_1, HEAP32[HEAP32[$0_1 + 60 >> 2] + $3_1 >> 2]);
    }
    $1_1 = $1_1 - 1 | 0;
    $3_1 = $3_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $497($0_1) {
  $0_1 = $0_1 | 0;
  $33($495($0_1));
 }
 
 function $498($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0;
  $5_1 = global$0 - 288 | 0;
  global$0 = $5_1;
  $9_1 = HEAPU8[$0_1 + 68 | 0];
  $15_1 = $9_1 ? $2_1 : $1_1;
  $13_1 = HEAP32[$15_1 + 4 >> 2];
  if (HEAP32[$13_1 + 72 >> 2] != HEAP32[$0_1 + 80 >> 2]) {
   $496($0_1);
   $494($0_1, $1_1, $2_1);
   HEAP32[$0_1 + 80 >> 2] = HEAP32[$13_1 + 72 >> 2];
  }
  label$2 : {
   if (!HEAP32[$0_1 + 52 >> 2]) {
    break label$2
   }
   $6_1 = HEAP32[$13_1 + 68 >> 2];
   HEAP32[$5_1 + 276 >> 2] = $4_1;
   HEAP32[$5_1 + 272 >> 2] = $3_1;
   $14_1 = $9_1 ? $1_1 : $2_1;
   HEAP32[$5_1 + 264 >> 2] = $14_1;
   HEAP32[$5_1 + 260 >> 2] = $15_1;
   HEAP32[$5_1 + 256 >> 2] = 15180;
   HEAP32[$5_1 + 284 >> 2] = HEAP32[$0_1 + 72 >> 2];
   HEAP32[$5_1 + 280 >> 2] = HEAP32[$0_1 + 60 >> 2];
   HEAP32[$5_1 + 268 >> 2] = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$5_1 + 160 >> 2] = 0;
   $8_1 = $0_1 + 28 | 0;
   $499($8_1, $5_1 + 160 | 0);
   $3_1 = 0;
   while (1) {
    label$4 : {
     $2_1 = HEAP32[$0_1 + 52 >> 2];
     if (($2_1 | 0) > ($3_1 | 0)) {
      $1_1 = HEAP32[HEAP32[$0_1 + 60 >> 2] + ($3_1 << 2) >> 2];
      if (!$1_1) {
       break label$4
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, $8_1);
      $2_1 = 0;
      $1_1 = 0;
      while (1) {
       if (HEAP32[$0_1 + 32 >> 2] <= ($1_1 | 0)) {
        HEAP32[$5_1 + 160 >> 2] = 0;
        $499($8_1, $5_1 + 160 | 0);
        break label$4;
       }
       $9_1 = HEAP32[HEAP32[$0_1 + 40 >> 2] + $2_1 >> 2];
       if (HEAP32[$9_1 + 828 >> 2]) {
        HEAP32[$4_1 + 4 >> 2] = $9_1;
        $451($4_1);
        HEAP32[$4_1 + 4 >> 2] = 0;
       }
       $2_1 = $2_1 + 4 | 0;
       $1_1 = $1_1 + 1 | 0;
       continue;
      };
     }
     label$9 : {
      if (!$6_1) {
       $1_1 = 0;
       $3_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
       $2_1 = 64;
       while (1) {
        if (($1_1 | 0) == ($3_1 | 0)) {
         break label$9
        }
        $500($5_1 + 256 | 0, HEAP32[HEAP32[$13_1 + 28 >> 2] + $2_1 >> 2], $1_1);
        $2_1 = $2_1 + 80 | 0;
        $1_1 = $1_1 + 1 | 0;
        continue;
       };
      }
      $463($5_1 + 32 | 0, HEAP32[$15_1 + 12 >> 2]);
      $464($5_1 + 96 | 0, $5_1 + 32 | 0, HEAP32[$14_1 + 12 >> 2]);
      $11_1 = $5_1 + 104 | 0;
      $2_1 = $11_1;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      $3_1 = $5_1 + 168 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $1_1;
      $9_1 = $5_1 + 120 | 0;
      $2_1 = $9_1;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      $3_1 = $5_1 + 184 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $1_1;
      $2_1 = $5_1 + 136 | 0;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      $3_1 = $5_1 + 200 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $1_1;
      $2_1 = $5_1 + 152 | 0;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      $3_1 = $5_1 + 216 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 100 >> 2];
      HEAP32[$5_1 + 160 >> 2] = HEAP32[$5_1 + 96 >> 2];
      HEAP32[$5_1 + 164 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 116 >> 2];
      HEAP32[$5_1 + 176 >> 2] = HEAP32[$5_1 + 112 >> 2];
      HEAP32[$5_1 + 180 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 132 >> 2];
      HEAP32[$5_1 + 192 >> 2] = HEAP32[$5_1 + 128 >> 2];
      HEAP32[$5_1 + 196 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 148 >> 2];
      HEAP32[$5_1 + 208 >> 2] = HEAP32[$5_1 + 144 >> 2];
      HEAP32[$5_1 + 212 >> 2] = $1_1;
      $1_1 = HEAP32[$14_1 + 4 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $5_1 + 160 | 0, $5_1 + 240 | 0, $5_1 + 224 | 0);
      $3_1 = $5_1 + 248 | 0;
      $12_1 = HEAPF32[$4_1 + 32 >> 2];
      HEAPF32[$3_1 >> 2] = HEAPF32[$3_1 >> 2] - $12_1;
      $7_1 = $5_1 + 232 | 0;
      HEAPF32[$7_1 >> 2] = $12_1 + HEAPF32[$7_1 >> 2];
      HEAPF32[$5_1 + 240 >> 2] = HEAPF32[$5_1 + 240 >> 2] - $12_1;
      HEAPF32[$5_1 + 244 >> 2] = HEAPF32[$5_1 + 244 >> 2] - $12_1;
      HEAPF32[$5_1 + 224 >> 2] = $12_1 + HEAPF32[$5_1 + 224 >> 2];
      HEAPF32[$5_1 + 228 >> 2] = $12_1 + HEAPF32[$5_1 + 228 >> 2];
      $1_1 = HEAP32[$3_1 + 4 >> 2];
      $4_1 = $5_1 + 40 | 0;
      $2_1 = $4_1;
      HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $1_1;
      $1_1 = HEAP32[$7_1 + 4 >> 2];
      $3_1 = $5_1 + 56 | 0;
      $2_1 = $3_1;
      HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 244 >> 2];
      HEAP32[$5_1 + 32 >> 2] = HEAP32[$5_1 + 240 >> 2];
      HEAP32[$5_1 + 36 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 228 >> 2];
      HEAP32[$5_1 + 48 >> 2] = HEAP32[$5_1 + 224 >> 2];
      HEAP32[$5_1 + 52 >> 2] = $1_1;
      $1_1 = HEAP32[$6_1 >> 2];
      HEAP32[$5_1 + 16 >> 2] = $1_1;
      if (!$1_1) {
       break label$9
      }
      $1_1 = HEAP32[$3_1 + 4 >> 2];
      HEAP32[$9_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$9_1 + 4 >> 2] = $1_1;
      $2_1 = $5_1 + 48 | 0;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      $3_1 = $5_1 + 112 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $1_1;
      $1_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$11_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$11_1 + 4 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 36 >> 2];
      HEAP32[$5_1 + 96 >> 2] = HEAP32[$5_1 + 32 >> 2];
      HEAP32[$5_1 + 100 >> 2] = $1_1;
      HEAP32[$5_1 >> 2] = 0;
      $3_1 = $0_1 + 8 | 0;
      $204($3_1, 0, $5_1);
      $217($3_1, 64);
      $297($3_1, $5_1 + 16 | 0);
      $1_1 = HEAP32[$0_1 + 12 >> 2];
      while (1) {
       $1_1 = $1_1 - 1 | 0;
       HEAP32[$0_1 + 12 >> 2] = $1_1;
       $2_1 = HEAP32[HEAP32[$0_1 + 20 >> 2] + ($1_1 << 2) >> 2];
       if ($501($2_1, $5_1 + 96 | 0)) {
        $1_1 = $2_1 + 40 | 0;
        label$14 : {
         if (HEAP32[$1_1 >> 2]) {
          $297($3_1, $2_1 + 36 | 0);
          $297($3_1, $1_1);
          break label$14;
         }
         FUNCTION_TABLE[HEAP32[HEAP32[$5_1 + 256 >> 2] + 12 >> 2]]($5_1 + 256 | 0, $2_1);
        }
        $1_1 = HEAP32[$0_1 + 12 >> 2];
       }
       if (($1_1 | 0) > 0) {
        continue
       }
       break;
      };
     }
     $1_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$5_1 + 160 >> 2] = 0;
     $499($8_1, $5_1 + 160 | 0);
     $4_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
     $16_1 = $5_1 + 144 | 0;
     $11_1 = $5_1 + 80 | 0;
     $17_1 = $5_1 + 128 | 0;
     $9_1 = $5_1 - -64 | 0;
     $18_1 = $5_1 + 112 | 0;
     $1_1 = $5_1 + 48 | 0;
     $19_1 = $5_1 + 208 | 0;
     $20_1 = $5_1 + 192 | 0;
     $21_1 = $5_1 + 176 | 0;
     $3_1 = 64;
     $2_1 = 0;
     while (1) {
      if (!$4_1) {
       break label$2
      }
      label$17 : {
       if (!HEAP32[HEAP32[$0_1 + 60 >> 2] + $2_1 >> 2]) {
        break label$17
       }
       $10_1 = HEAP32[$15_1 + 12 >> 2];
       $7_1 = $10_1;
       $6_1 = HEAP32[$7_1 + 20 >> 2];
       HEAP32[$21_1 >> 2] = HEAP32[$7_1 + 16 >> 2];
       HEAP32[$21_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$7_1 + 36 >> 2];
       HEAP32[$20_1 >> 2] = HEAP32[$7_1 + 32 >> 2];
       HEAP32[$20_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$7_1 + 52 >> 2];
       HEAP32[$19_1 >> 2] = HEAP32[$7_1 + 48 >> 2];
       HEAP32[$19_1 + 4 >> 2] = $6_1;
       $7_1 = $7_1 + 8 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $5_1 + 168 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $7_1 = $10_1 + 24 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $21_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $7_1 = $10_1 + 40 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $20_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $7_1 = $10_1 + 56 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $19_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$10_1 + 4 >> 2];
       HEAP32[$5_1 + 160 >> 2] = HEAP32[$10_1 >> 2];
       HEAP32[$5_1 + 164 >> 2] = $6_1;
       $6_1 = HEAP32[$13_1 + 28 >> 2] + $3_1 | 0;
       $10_1 = HEAP32[$6_1 >> 2];
       $464($5_1 + 32 | 0, $5_1 + 160 | 0, $6_1 + -64 | 0);
       $7_1 = $5_1 + 40 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $5_1 + 104 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$1_1 + 4 >> 2];
       HEAP32[$18_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$18_1 + 4 >> 2] = $6_1;
       $7_1 = $1_1 + 8 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $18_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$9_1 + 4 >> 2];
       HEAP32[$17_1 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$17_1 + 4 >> 2] = $6_1;
       $7_1 = $9_1 + 8 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $17_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$11_1 + 4 >> 2];
       HEAP32[$16_1 >> 2] = HEAP32[$11_1 >> 2];
       HEAP32[$16_1 + 4 >> 2] = $6_1;
       $7_1 = $11_1 + 8 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $16_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$5_1 + 36 >> 2];
       HEAP32[$5_1 + 96 >> 2] = HEAP32[$5_1 + 32 >> 2];
       HEAP32[$5_1 + 100 >> 2] = $6_1;
       FUNCTION_TABLE[HEAP32[HEAP32[$10_1 >> 2] + 8 >> 2]]($10_1, $5_1 + 96 | 0, $5_1 + 240 | 0, $5_1 + 224 | 0);
       $6_1 = HEAP32[$14_1 + 4 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 8 >> 2]]($6_1, HEAP32[$14_1 + 12 >> 2], $5_1 + 16 | 0, $5_1);
       if ($376(HEAPF32[$5_1 + 240 >> 2], HEAPF32[$5_1 + 244 >> 2], HEAPF32[$5_1 + 248 >> 2], HEAPF32[$5_1 + 224 >> 2], HEAPF32[$5_1 + 228 >> 2], HEAPF32[$5_1 + 232 >> 2], $5_1 + 16 | 0, $5_1)) {
        break label$17
       }
       $6_1 = HEAP32[HEAP32[$0_1 + 60 >> 2] + $2_1 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] >> 2]]($6_1) | 0;
       $6_1 = HEAP32[$0_1 + 4 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 60 >> 2]]($6_1, HEAP32[HEAP32[$0_1 + 60 >> 2] + $2_1 >> 2]);
       HEAP32[HEAP32[$0_1 + 60 >> 2] + $2_1 >> 2] = 0;
      }
      $4_1 = $4_1 - 1 | 0;
      $3_1 = $3_1 + 80 | 0;
      $2_1 = $2_1 + 4 | 0;
      continue;
     };
    }
    $3_1 = $3_1 + 1 | 0;
    continue;
   };
  }
  global$0 = $5_1 + 288 | 0;
 }
 
 function $499($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   if (($2_1 | 0) > 0) {
    break label$1
   }
   if (($2_1 | 0) <= -1) {
    $182($0_1, 0)
   }
   $3_1 = $2_1 << 2;
   while (1) {
    if (!$2_1) {
     break label$1
    }
    HEAP32[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 2] = HEAP32[$1_1 >> 2];
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = 0;
 }
 
 function $500($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 224 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $4_1 = HEAP32[$4_1 + 12 >> 2];
  $6_1 = $4_1 + 8 | 0;
  $9_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $3_1 + 168 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $9_1;
  $6_1 = $4_1 + 24 | 0;
  $9_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $3_1 + 184 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $9_1;
  $6_1 = $4_1 + 40 | 0;
  $9_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $3_1 + 200 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $9_1;
  $6_1 = $4_1 + 56 | 0;
  $9_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $3_1 + 216 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $9_1;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$3_1 + 160 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 164 >> 2] = $5_1;
  $5_1 = HEAP32[$4_1 + 20 >> 2];
  HEAP32[$3_1 + 176 >> 2] = HEAP32[$4_1 + 16 >> 2];
  HEAP32[$3_1 + 180 >> 2] = $5_1;
  $5_1 = HEAP32[$4_1 + 36 >> 2];
  HEAP32[$3_1 + 192 >> 2] = HEAP32[$4_1 + 32 >> 2];
  HEAP32[$3_1 + 196 >> 2] = $5_1;
  $5_1 = HEAP32[$4_1 + 52 >> 2];
  HEAP32[$3_1 + 208 >> 2] = HEAP32[$4_1 + 48 >> 2];
  HEAP32[$3_1 + 212 >> 2] = $5_1;
  $4_1 = HEAP32[$8_1 + 28 >> 2] + Math_imul($2_1, 80) | 0;
  $464($3_1 + 96 | 0, $3_1 + 160 | 0, $4_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 96 | 0, $3_1 + 80 | 0, $3_1 - -64 | 0);
  $7_1 = HEAPF32[HEAP32[$0_1 + 20 >> 2] + 32 >> 2];
  HEAPF32[$3_1 + 80 >> 2] = HEAPF32[$3_1 + 80 >> 2] - $7_1;
  HEAPF32[$3_1 + 84 >> 2] = HEAPF32[$3_1 + 84 >> 2] - $7_1;
  HEAPF32[$3_1 + 88 >> 2] = HEAPF32[$3_1 + 88 >> 2] - $7_1;
  HEAPF32[$3_1 + 64 >> 2] = $7_1 + HEAPF32[$3_1 + 64 >> 2];
  HEAPF32[$3_1 + 68 >> 2] = $7_1 + HEAPF32[$3_1 + 68 >> 2];
  HEAPF32[$3_1 + 72 >> 2] = $7_1 + HEAPF32[$3_1 + 72 >> 2];
  $8_1 = HEAP32[$0_1 + 8 >> 2];
  $5_1 = HEAP32[$8_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 8 >> 2]]($5_1, HEAP32[$8_1 + 12 >> 2], $3_1 + 48 | 0, $3_1 + 32 | 0);
  label$1 : {
   if (!$376(HEAPF32[$3_1 + 80 >> 2], HEAPF32[$3_1 + 84 >> 2], HEAPF32[$3_1 + 88 >> 2], HEAPF32[$3_1 + 64 >> 2], HEAPF32[$3_1 + 68 >> 2], HEAPF32[$3_1 + 72 >> 2], $3_1 + 48 | 0, $3_1 + 32 | 0)) {
    break label$1
   }
   HEAP32[$3_1 + 24 >> 2] = $2_1;
   HEAP32[$3_1 + 20 >> 2] = -1;
   HEAP32[$3_1 + 16 >> 2] = $4_1;
   HEAP32[$3_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$3_1 >> 2] = $1_1;
   HEAP32[$3_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
   $7_1 = HEAPF32[HEAP32[$0_1 + 20 >> 2] + 32 >> 2];
   HEAP32[$3_1 + 12 >> 2] = $3_1 + 96;
   label$2 : {
    if ($7_1 > Math_fround(0.0)) {
     $1_1 = HEAP32[$0_1 + 12 >> 2];
     $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1, HEAP32[$0_1 + 8 >> 2], 0, 2) | 0;
     break label$2;
    }
    $4_1 = $2_1 << 2;
    $1_1 = HEAP32[$4_1 + HEAP32[$0_1 + 24 >> 2] >> 2];
    if ($1_1) {
     break label$2
    }
    $1_1 = HEAP32[$0_1 + 12 >> 2];
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1, HEAP32[$0_1 + 8 >> 2], HEAP32[$0_1 + 28 >> 2], 1) | 0;
    HEAP32[$4_1 + HEAP32[$0_1 + 24 >> 2] >> 2] = $1_1;
    $1_1 = HEAP32[$4_1 + HEAP32[$0_1 + 24 >> 2] >> 2];
   }
   $4_1 = HEAP32[$0_1 + 20 >> 2];
   $8_1 = HEAP32[$4_1 + 8 >> 2];
   label$4 : {
    if (HEAP32[$8_1 + 8 >> 2] == HEAP32[HEAP32[$0_1 + 4 >> 2] + 8 >> 2]) {
     HEAP32[$4_1 + 8 >> 2] = $3_1;
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, -1, $2_1);
     break label$4;
    }
    $8_1 = HEAP32[$4_1 + 12 >> 2];
    HEAP32[$4_1 + 12 >> 2] = $3_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, -1, $2_1);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1, HEAP32[$0_1 + 8 >> 2], HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 20 >> 2]);
   $2_1 = HEAP32[$0_1 + 20 >> 2];
   HEAP32[(HEAP32[HEAP32[$2_1 + 8 >> 2] + 8 >> 2] == HEAP32[HEAP32[$0_1 + 4 >> 2] + 8 >> 2] ? 8 : 12) + $2_1 >> 2] = $8_1;
   if (!($7_1 > Math_fround(0.0))) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $0_1 = HEAP32[$0_1 + 12 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 60 >> 2]]($0_1, $1_1);
  }
  global$0 = $3_1 + 224 | 0;
 }
 
 function $501($0_1, $1_1) {
  var $2_1 = 0;
  label$1 : {
   if (!(HEAPF32[$0_1 >> 2] <= HEAPF32[$1_1 + 16 >> 2]) | !(HEAPF32[$0_1 + 16 >> 2] >= HEAPF32[$1_1 >> 2]) | (!(HEAPF32[$0_1 + 4 >> 2] <= HEAPF32[$1_1 + 20 >> 2]) | !(HEAPF32[$0_1 + 20 >> 2] >= HEAPF32[$1_1 + 4 >> 2]))) {
    break label$1
   }
   if (!(HEAPF32[$0_1 + 8 >> 2] <= HEAPF32[$1_1 + 24 >> 2])) {
    break label$1
   }
   $2_1 = HEAPF32[$0_1 + 24 >> 2] >= HEAPF32[$1_1 + 8 >> 2];
  }
  return $2_1;
 }
 
 function $502($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = Math_fround(0), $30_1 = 0, $31_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  $5_1 = HEAPU8[$0_1 + 68 | 0];
  $30_1 = $5_1 ? $1_1 : $2_1;
  $14_1 = HEAP32[$0_1 + 52 >> 2];
  $23_1 = ($14_1 | 0) > 0 ? $14_1 : 0;
  $9_1 = $5_1 ? $2_1 : $1_1;
  $10_1 = $9_1 + 52 | 0;
  $11_1 = $9_1 + 36 | 0;
  $12_1 = $9_1 + 20 | 0;
  $13_1 = $9_1 + 4 | 0;
  $31_1 = HEAP32[$9_1 + 192 >> 2];
  $14_1 = $7_1 + 48 | 0;
  $2_1 = $7_1 + 32 | 0;
  $1_1 = $7_1 + 16 | 0;
  $15_1 = $7_1 + 112 | 0;
  $16_1 = $7_1 + 96 | 0;
  $17_1 = $7_1 + 80 | 0;
  $22_1 = Math_fround(1.0);
  while (1) {
   if ($23_1) {
    $5_1 = HEAP32[$12_1 + 4 >> 2];
    HEAP32[$17_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$17_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$11_1 + 4 >> 2];
    HEAP32[$16_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$16_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$10_1 + 4 >> 2];
    HEAP32[$15_1 >> 2] = HEAP32[$10_1 >> 2];
    HEAP32[$15_1 + 4 >> 2] = $5_1;
    $18_1 = $13_1 + 8 | 0;
    $6_1 = $18_1;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $24_1 = $7_1 + 72 | 0;
    $8_1 = $24_1;
    HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $5_1;
    $19_1 = $12_1 + 8 | 0;
    $6_1 = $19_1;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $25_1 = $17_1 + 8 | 0;
    $8_1 = $25_1;
    HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $5_1;
    $20_1 = $11_1 + 8 | 0;
    $6_1 = $20_1;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $26_1 = $16_1 + 8 | 0;
    $8_1 = $26_1;
    HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $5_1;
    $21_1 = $10_1 + 8 | 0;
    $6_1 = $21_1;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $8_1 = $15_1 + 8 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$13_1 + 4 >> 2];
    HEAP32[$7_1 + 64 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$7_1 + 68 >> 2] = $5_1;
    $464($7_1, $7_1 - -64 | 0, HEAP32[$31_1 + 28 >> 2] + $27_1 | 0);
    $5_1 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$13_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $5_1;
    $6_1 = $7_1 + 8 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$18_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$18_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $5_1;
    $6_1 = $1_1 + 8 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$19_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$19_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$11_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $5_1;
    $6_1 = $2_1 + 8 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$20_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$20_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$14_1 + 4 >> 2];
    HEAP32[$10_1 >> 2] = HEAP32[$14_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $5_1;
    $6_1 = $14_1 + 8 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$21_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$21_1 + 4 >> 2] = $5_1;
    HEAP32[$9_1 + 308 >> 2] = HEAP32[$9_1 + 308 >> 2] + 1;
    $5_1 = HEAP32[HEAP32[$0_1 + 60 >> 2] + $28_1 >> 2];
    $29_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2]]($5_1, $9_1, $30_1, $3_1, $4_1));
    $5_1 = HEAP32[$7_1 + 68 >> 2];
    HEAP32[$13_1 >> 2] = HEAP32[$7_1 + 64 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$24_1 + 4 >> 2];
    HEAP32[$18_1 >> 2] = HEAP32[$24_1 >> 2];
    HEAP32[$18_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$17_1 + 4 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$25_1 + 4 >> 2];
    HEAP32[$19_1 >> 2] = HEAP32[$25_1 >> 2];
    HEAP32[$19_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$16_1 + 4 >> 2];
    HEAP32[$11_1 >> 2] = HEAP32[$16_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$26_1 + 4 >> 2];
    HEAP32[$20_1 >> 2] = HEAP32[$26_1 >> 2];
    HEAP32[$20_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$15_1 + 4 >> 2];
    HEAP32[$10_1 >> 2] = HEAP32[$15_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$8_1 + 4 >> 2];
    HEAP32[$21_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$21_1 + 4 >> 2] = $5_1;
    HEAP32[$9_1 + 308 >> 2] = HEAP32[$9_1 + 308 >> 2] + 1;
    $22_1 = $22_1 > $29_1 ? $29_1 : $22_1;
    $23_1 = $23_1 - 1 | 0;
    $28_1 = $28_1 + 4 | 0;
    $27_1 = $27_1 + 80 | 0;
    continue;
   }
   break;
  };
  global$0 = $7_1 + 128 | 0;
  return Math_fround($22_1);
 }
 
 function $503($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 52 >> 2] > ($3_1 | 0)) {
    $2_1 = HEAP32[HEAP32[$0_1 + 60 >> 2] + $4_1 >> 2];
    if ($2_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1)
    }
    $4_1 = $4_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = HEAP32[HEAP32[HEAP32[$0_1 + 4 >> 2] + 4 >> 2] + 28 >> 2];
  $0_1 = HEAP32[$1_1 + 36 >> 2];
  $500($2_1, HEAP32[($3_1 + Math_imul($0_1, 80) | 0) + 64 >> 2], $0_1);
 }
 
 function $505($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $5_1 = HEAP32[$0_1 + 28 >> 2];
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   if (($5_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   HEAP32[$3_1 + 12 >> 2] = 0;
   $204($0_1 + 24 | 0, $1_1, $3_1 + 12 | 0);
   HEAP32[$3_1 + 8 >> 2] = 0;
   $204($0_1 + 44 | 0, $1_1, $3_1 + 8 | 0);
   $2_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   $1_1 = $2_1;
   while (1) if ($1_1) {
    HEAP32[HEAP32[$0_1 + 36 >> 2] + $4_1 >> 2] = -1;
    $1_1 = $1_1 - 1 | 0;
    $4_1 = $4_1 + 4 | 0;
    continue;
   } else {
    $1_1 = 0;
    while (1) if ($2_1) {
     HEAP32[HEAP32[$0_1 + 56 >> 2] + $1_1 >> 2] = -1;
     $2_1 = $2_1 - 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue;
    } else {
     $1_1 = 0;
     $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
     $4_1 = 0;
     $2_1 = 0;
     while (1) {
      if (($2_1 | 0) == ($5_1 | 0)) {
       break label$1
      }
      $7_1 = HEAP32[$0_1 + 56 >> 2] + $1_1 | 0;
      $6_1 = HEAP32[$0_1 + 16 >> 2] + $4_1 | 0;
      $6_1 = HEAP32[$0_1 + 36 >> 2] + ((HEAP32[$0_1 + 12 >> 2] - 1 & $506(HEAP32[$6_1 >> 2], HEAP32[$6_1 + 4 >> 2])) << 2) | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$6_1 >> 2] = $2_1;
      $1_1 = $1_1 + 4 | 0;
      $4_1 = $4_1 + 12 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue;
     };
    };
   };
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $506($0_1, $1_1) {
  $0_1 = $1_1 << 16 | $0_1;
  $0_1 = ($0_1 << 15 ^ -1) + $0_1 | 0;
  $0_1 = Math_imul($0_1 >>> 10 ^ $0_1, 9);
  $0_1 = $0_1 >>> 6 ^ $0_1;
  $0_1 = ($0_1 << 11 ^ -1) + $0_1 | 0;
  return $0_1 >>> 16 ^ $0_1;
 }
 
 function $507($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 15288;
  $124($0_1 + 44 | 0);
  $124($0_1 + 24 | 0);
  $124($0_1 + 4 | 0);
  return $0_1 | 0;
 }
 
 function $508($0_1) {
  $0_1 = $0_1 | 0;
  $33($507($0_1));
 }
 
 function $509($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $4_1 = -1;
  $9_1 = HEAP32[$0_1 + 16 >> 2];
  $7_1 = HEAP32[$0_1 + 36 >> 2];
  $5_1 = HEAP32[$0_1 + 56 >> 2];
  $3_1 = $1_1;
  $1_1 = HEAP32[$0_1 + 12 >> 2] - 1 & $506($1_1, $2_1);
  $8_1 = $510($9_1, $7_1, $5_1, $3_1, $2_1, $1_1);
  if (!$8_1) {
   return 0
  }
  $6_1 = ($8_1 - $9_1 | 0) / 12 | 0;
  $11_1 = HEAP32[$8_1 + 8 >> 2];
  $3_1 = $7_1 + ($1_1 << 2) | 0;
  $2_1 = $3_1;
  while (1) {
   $1_1 = HEAP32[$2_1 >> 2];
   if (($6_1 | 0) != ($1_1 | 0)) {
    $2_1 = ($1_1 << 2) + $5_1 | 0;
    $4_1 = $1_1;
    continue;
   }
   break;
  };
  $1_1 = -1;
  HEAP32[(($4_1 | 0) == -1 ? $3_1 : ($4_1 << 2) + $5_1 | 0) >> 2] = HEAP32[($6_1 << 2) + $5_1 >> 2];
  $4_1 = $0_1;
  $3_1 = HEAP32[$0_1 + 8 >> 2] - 1 | 0;
  if (($3_1 | 0) != ($6_1 | 0)) {
   $0_1 = Math_imul($3_1, 12) + $9_1 | 0;
   $10_1 = HEAP32[$4_1 + 12 >> 2] - 1 & $506(HEAP32[$0_1 >> 2], HEAP32[$0_1 + 4 >> 2]);
   $7_1 = $7_1 + ($10_1 << 2) | 0;
   $2_1 = $7_1;
   while (1) {
    $0_1 = HEAP32[$2_1 >> 2];
    if (($3_1 | 0) != ($0_1 | 0)) {
     $2_1 = ($0_1 << 2) + $5_1 | 0;
     $1_1 = $0_1;
     continue;
    }
    break;
   };
   HEAP32[(($1_1 | 0) == -1 ? $7_1 : ($1_1 << 2) + $5_1 | 0) >> 2] = HEAP32[($3_1 << 2) + $5_1 >> 2];
   $0_1 = Math_imul($3_1, 12) + $9_1 | 0;
   HEAP32[$8_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2];
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$8_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $1_1;
   $0_1 = HEAP32[$4_1 + 36 >> 2] + ($10_1 << 2) | 0;
   HEAP32[HEAP32[$4_1 + 56 >> 2] + ($6_1 << 2) >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$0_1 >> 2] = $6_1;
   $6_1 = HEAP32[$4_1 + 8 >> 2] - 1 | 0;
  }
  HEAP32[$4_1 + 8 >> 2] = $6_1;
  return $11_1 | 0;
 }
 
 function $510($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $1_1 = ($5_1 << 2) + $1_1 | 0;
  while (1) {
   label$2 : {
    $1_1 = HEAP32[$1_1 >> 2];
    if (($1_1 | 0) == -1) {
     $5_1 = 0;
     break label$2;
    }
    $5_1 = Math_imul($1_1, 12) + $0_1 | 0;
    if (HEAP32[$5_1 + 4 >> 2] == ($4_1 | 0) ? HEAP32[$5_1 >> 2] == ($3_1 | 0) : 0) {
     break label$2
    }
    $1_1 = ($1_1 << 2) + $2_1 | 0;
    continue;
   }
   break;
  };
  return $5_1;
 }
 
 function $511($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = HEAP32[$0_1 + 12 >> 2];
  $6_1 = HEAP32[$0_1 + 16 >> 2];
  $3_1 = HEAP32[$0_1 + 36 >> 2];
  $5_1 = HEAP32[$0_1 + 56 >> 2];
  $8_1 = $506($1_1, $2_1);
  $7_1 = $8_1 & $4_1 - 1;
  $3_1 = $510($6_1, $3_1, $5_1, $1_1, $2_1, $7_1);
  if (!$3_1) {
   $9_1 = $4_1;
   $5_1 = HEAP32[$0_1 + 8 >> 2];
   $3_1 = $5_1;
   if (($4_1 | 0) == ($3_1 | 0)) {
    $189($0_1 + 4 | 0, $4_1 ? $4_1 << 1 : 1);
    $6_1 = HEAP32[$0_1 + 16 >> 2];
    $3_1 = HEAP32[$0_1 + 8 >> 2];
    $9_1 = HEAP32[$0_1 + 12 >> 2];
   }
   HEAP32[$0_1 + 8 >> 2] = $3_1 + 1;
   $3_1 = Math_imul($5_1, 12) + $6_1 | 0;
   if (($4_1 | 0) < ($9_1 | 0)) {
    $505($0_1);
    $7_1 = HEAP32[$0_1 + 12 >> 2] - 1 & $8_1;
   }
   HEAP32[$3_1 + 8 >> 2] = 0;
   HEAP32[$3_1 >> 2] = $1_1;
   HEAP32[$3_1 + 4 >> 2] = $2_1;
   $1_1 = HEAP32[$0_1 + 56 >> 2] + ($5_1 << 2) | 0;
   $0_1 = HEAP32[$0_1 + 36 >> 2] + ($7_1 << 2) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$0_1 >> 2] = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $512($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 16 >> 2];
 }
 
 function $513($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 15352;
  $514($0_1);
  $1_1 = HEAP32[$0_1 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 84 >> 2]);
  $124($0_1 + 88 | 0);
  $495($0_1);
  return $0_1 | 0;
 }
 
 function $514($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = 8;
  $4_1 = HEAP32[$0_1 + 84 >> 2];
  $2_1 = HEAP32[$4_1 + 8 >> 2];
  $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  while (1) {
   if ($2_1) {
    $3_1 = HEAP32[HEAP32[$4_1 + 16 >> 2] + $1_1 >> 2];
    if ($3_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] >> 2]]($3_1) | 0;
     $5_1 = HEAP32[$0_1 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 60 >> 2]]($5_1, $3_1);
    }
    $2_1 = $2_1 - 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue;
   }
   break;
  };
  $0_1 = HEAP32[$0_1 + 84 >> 2];
  $1_1 = $0_1 + 4 | 0;
  $124($1_1);
  $124($0_1 + 24 | 0);
  $124($0_1 + 44 | 0);
  $189($1_1, 2);
  $505($0_1);
 }
 
 function $515($0_1) {
  $0_1 = $0_1 | 0;
  $33($513($0_1));
 }
 
 function $516($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 3680 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    $29_1 = HEAP32[$1_1 + 4 >> 2];
    $16_1 = HEAP32[$29_1 + 68 >> 2];
    if ($16_1) {
     $30_1 = HEAP32[$2_1 + 4 >> 2];
     $15_1 = HEAP32[$30_1 + 68 >> 2];
     if ($15_1) {
      break label$2
     }
    }
    $498($0_1, $1_1, $2_1, $3_1, $4_1);
    break label$1;
   }
   if (!(HEAP32[$30_1 + 72 >> 2] == HEAP32[$0_1 + 112 >> 2] ? HEAP32[$29_1 + 72 >> 2] == HEAP32[$0_1 + 108 >> 2] : 0)) {
    $514($0_1);
    HEAP32[$0_1 + 108 >> 2] = HEAP32[$29_1 + 72 >> 2];
    HEAP32[$0_1 + 112 >> 2] = HEAP32[$30_1 + 72 >> 2];
   }
   HEAP32[$5_1 + 116 >> 2] = 0;
   HEAP8[$5_1 + 120 | 0] = 1;
   HEAP32[$5_1 + 108 >> 2] = 0;
   HEAP32[$5_1 + 112 >> 2] = 0;
   $8_1 = $5_1 + 3616 | 0;
   $6_1 = $5_1 + 208 | 0;
   while (1) {
    HEAP32[$6_1 >> 2] = 1025;
    $7_1 = 120;
    while (1) {
     $2($6_1 + $7_1 | 0, 0, 48);
     $7_1 = $7_1 + 204 | 0;
     if (($7_1 | 0) != 936) {
      continue
     }
     break;
    };
    HEAP32[$6_1 + 848 >> 2] = 0;
    HEAP32[$6_1 + 840 >> 2] = 0;
    HEAP32[$6_1 + 844 >> 2] = 0;
    HEAP32[$6_1 + 828 >> 2] = 0;
    HEAP32[$6_1 + 820 >> 2] = 0;
    HEAP32[$6_1 + 824 >> 2] = 0;
    $6_1 = $6_1 + 852 | 0;
    if (($8_1 | 0) != ($6_1 | 0)) {
     continue
    }
    break;
   };
   $124($5_1 + 104 | 0);
   HEAP8[$5_1 + 120 | 0] = 0;
   HEAP32[$5_1 + 108 >> 2] = 0;
   HEAP32[$5_1 + 112 >> 2] = 4;
   HEAP32[$5_1 + 116 >> 2] = $5_1 + 208;
   $9_1 = HEAP32[$0_1 + 84 >> 2];
   $8_1 = 0;
   while (1) {
    label$9 : {
     if (HEAP32[$9_1 + 8 >> 2] > ($8_1 | 0)) {
      $6_1 = HEAP32[(HEAP32[$9_1 + 16 >> 2] + Math_imul($8_1, 12) | 0) + 8 >> 2];
      if (!$6_1) {
       break label$9
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 16 >> 2]]($6_1, $5_1 + 104 | 0);
      $6_1 = 0;
      $7_1 = 0;
      while (1) {
       if (HEAP32[$5_1 + 108 >> 2] <= ($7_1 | 0)) {
        HEAP32[$5_1 + 8 >> 2] = 0;
        $499($5_1 + 104 | 0, $5_1 + 8 | 0);
        break label$9;
       }
       $11_1 = HEAP32[HEAP32[$5_1 + 116 >> 2] + $6_1 >> 2];
       if (HEAP32[$11_1 + 828 >> 2]) {
        HEAP32[$4_1 + 4 >> 2] = $11_1;
        $451($4_1);
        HEAP32[$4_1 + 4 >> 2] = 0;
       }
       $6_1 = $6_1 + 4 | 0;
       $7_1 = $7_1 + 1 | 0;
       continue;
      };
     }
     $124($5_1 + 104 | 0);
     HEAP32[$5_1 + 188 >> 2] = $3_1;
     HEAP32[$5_1 + 172 >> 2] = 0;
     HEAP32[$5_1 + 168 >> 2] = 15392;
     HEAP32[$5_1 + 200 >> 2] = HEAP32[$0_1 + 72 >> 2];
     HEAP32[$5_1 + 196 >> 2] = HEAP32[$0_1 + 84 >> 2];
     HEAP32[$5_1 + 184 >> 2] = HEAP32[$0_1 + 4 >> 2];
     HEAP32[$5_1 + 192 >> 2] = $4_1;
     HEAP32[$5_1 + 180 >> 2] = $2_1;
     HEAP32[$5_1 + 176 >> 2] = $1_1;
     $463($5_1 + 208 | 0, HEAP32[$1_1 + 12 >> 2]);
     $464($5_1 + 104 | 0, $5_1 + 208 | 0, HEAP32[$2_1 + 12 >> 2]);
     $3_1 = HEAP32[$16_1 >> 2];
     label$14 : {
      if (!$3_1) {
       break label$14
      }
      $6_1 = HEAP32[$15_1 >> 2];
      if (!$6_1) {
       break label$14
      }
      $12_1 = HEAPF32[$4_1 + 32 >> 2];
      HEAP32[$5_1 + 3636 >> 2] = 0;
      HEAP8[$5_1 + 3640 | 0] = 1;
      HEAP32[$5_1 + 3628 >> 2] = 0;
      HEAP32[$5_1 + 3632 >> 2] = 0;
      $124($5_1 + 3624 | 0);
      HEAP8[$5_1 + 3640 | 0] = 0;
      HEAP32[$5_1 + 3628 >> 2] = 128;
      HEAP32[$5_1 + 3632 >> 2] = 128;
      HEAP32[$5_1 + 212 >> 2] = $6_1;
      HEAP32[$5_1 + 208 >> 2] = $3_1;
      HEAP32[$5_1 + 3636 >> 2] = $5_1 + 208;
      $16_1 = 124;
      $15_1 = 128;
      $7_1 = $5_1 + 208 | 0;
      $8_1 = 1;
      while (1) {
       $6_1 = $8_1 - 1 | 0;
       $9_1 = $6_1 << 3;
       $7_1 = $9_1 + $7_1 | 0;
       $3_1 = HEAP32[$7_1 + 4 >> 2];
       $21_1 = HEAPF32[$3_1 >> 2];
       $22_1 = HEAPF32[$3_1 + 16 >> 2];
       $23_1 = HEAPF32[$3_1 + 8 >> 2];
       $24_1 = HEAPF32[$3_1 + 24 >> 2];
       $25_1 = HEAPF32[$3_1 + 4 >> 2];
       $26_1 = HEAPF32[$3_1 + 20 >> 2];
       $7_1 = HEAP32[$7_1 >> 2];
       $243($5_1 + 8 | 0, $5_1 + 104 | 0);
       $146($5_1 + 3664 | 0, $5_1 + 104 | 0, Math_fround(Math_fround($22_1 + $21_1) * Math_fround(.5)), Math_fround(Math_fround($26_1 + $25_1) * Math_fround(.5)), Math_fround(Math_fround($24_1 + $23_1) * Math_fround(.5)));
       $148($5_1 + 3648 | 0, Math_fround(Math_fround(Math_fround($22_1 - $21_1) * Math_fround(.5)) + Math_fround(0.0)), Math_fround(Math_fround(Math_fround($26_1 - $25_1) * Math_fround(.5)) + Math_fround(0.0)), Math_fround(Math_fround(Math_fround($24_1 - $23_1) * Math_fround(.5)) + Math_fround(0.0)), HEAPF32[$5_1 + 8 >> 2], HEAPF32[$5_1 + 12 >> 2], HEAPF32[$5_1 + 16 >> 2], HEAPF32[$5_1 + 24 >> 2], HEAPF32[$5_1 + 28 >> 2], HEAPF32[$5_1 + 32 >> 2], HEAPF32[$5_1 + 40 >> 2], HEAPF32[$5_1 + 44 >> 2], HEAPF32[$5_1 + 48 >> 2]);
       $21_1 = HEAPF32[$5_1 + 3648 >> 2];
       $22_1 = HEAPF32[$5_1 + 3664 >> 2];
       $23_1 = HEAPF32[$5_1 + 3652 >> 2];
       $24_1 = HEAPF32[$5_1 + 3668 >> 2];
       $25_1 = HEAPF32[$5_1 + 3656 >> 2];
       $26_1 = HEAPF32[$5_1 + 3672 >> 2];
       HEAP32[$5_1 + 36 >> 2] = 0;
       HEAPF32[$5_1 + 32 >> 2] = $12_1 + Math_fround($26_1 + $25_1);
       HEAPF32[$5_1 + 28 >> 2] = $12_1 + Math_fround($24_1 + $23_1);
       HEAPF32[$5_1 + 24 >> 2] = $12_1 + Math_fround($22_1 + $21_1);
       HEAP32[$5_1 + 20 >> 2] = 0;
       HEAPF32[$5_1 + 16 >> 2] = Math_fround($26_1 - $25_1) - $12_1;
       HEAPF32[$5_1 + 12 >> 2] = Math_fround($24_1 - $23_1) - $12_1;
       HEAPF32[$5_1 + 8 >> 2] = Math_fround($22_1 - $21_1) - $12_1;
       label$16 : {
        if (!$501($7_1, $5_1 + 8 | 0)) {
         break label$16
        }
        if (($6_1 | 0) > ($16_1 | 0)) {
         $517($5_1 + 3624 | 0, $15_1 << 1, $5_1 + 8 | 0);
         $15_1 = HEAP32[$5_1 + 3628 >> 2];
         $16_1 = $15_1 - 4 | 0;
        }
        $11_1 = HEAP32[$3_1 + 40 >> 2];
        if (HEAP32[$7_1 + 40 >> 2]) {
         $6_1 = HEAP32[$7_1 + 36 >> 2];
         if ($11_1) {
          $13_1 = $9_1;
          $9_1 = HEAP32[$5_1 + 3636 >> 2];
          $11_1 = $13_1 + $9_1 | 0;
          HEAP32[$11_1 + 4 >> 2] = HEAP32[$3_1 + 36 >> 2];
          HEAP32[$11_1 >> 2] = $6_1;
          $11_1 = HEAP32[$3_1 + 36 >> 2];
          $6_1 = $9_1 + ($8_1 << 3) | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$7_1 + 40 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $11_1;
          $9_1 = HEAP32[$3_1 + 40 >> 2];
          HEAP32[$6_1 + 8 >> 2] = HEAP32[$7_1 + 36 >> 2];
          HEAP32[$6_1 + 12 >> 2] = $9_1;
          $3_1 = HEAP32[$3_1 + 40 >> 2];
          HEAP32[$6_1 + 16 >> 2] = HEAP32[$7_1 + 40 >> 2];
          HEAP32[$6_1 + 20 >> 2] = $3_1;
          $6_1 = $8_1 + 3 | 0;
          break label$16;
         }
         $13_1 = $9_1;
         $9_1 = HEAP32[$5_1 + 3636 >> 2];
         $11_1 = $13_1 + $9_1 | 0;
         HEAP32[$11_1 + 4 >> 2] = $3_1;
         HEAP32[$11_1 >> 2] = $6_1;
         $6_1 = $9_1 + ($8_1 << 3) | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$7_1 + 40 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $3_1;
         $6_1 = $8_1 + 1 | 0;
         break label$16;
        }
        if ($11_1) {
         $6_1 = HEAP32[$5_1 + 3636 >> 2];
         $9_1 = $6_1 + $9_1 | 0;
         HEAP32[$9_1 + 4 >> 2] = HEAP32[$3_1 + 36 >> 2];
         HEAP32[$9_1 >> 2] = $7_1;
         $6_1 = $6_1 + ($8_1 << 3) | 0;
         HEAP32[$6_1 + 4 >> 2] = HEAP32[$3_1 + 40 >> 2];
         HEAP32[$6_1 >> 2] = $7_1;
         $6_1 = $8_1 + 1 | 0;
         break label$16;
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$5_1 + 168 >> 2] + 8 >> 2]]($5_1 + 168 | 0, $7_1, $3_1);
       }
       if ($6_1) {
        $7_1 = HEAP32[$5_1 + 3636 >> 2];
        $8_1 = $6_1;
        continue;
       }
       break;
      };
      $124($5_1 + 3624 | 0);
     }
     $31_1 = HEAP32[$0_1 + 84 >> 2];
     HEAP32[$5_1 + 3636 >> 2] = 0;
     HEAP8[$5_1 + 3640 | 0] = 1;
     HEAP32[$5_1 + 3628 >> 2] = 0;
     HEAP32[$5_1 + 3632 >> 2] = 0;
     $34_1 = $0_1 + 88 | 0;
     $3_1 = $5_1 + 256 | 0;
     $9_1 = $5_1 + 56 | 0;
     $16_1 = $5_1 + 240 | 0;
     $15_1 = $5_1 + 40 | 0;
     $11_1 = $5_1 + 224 | 0;
     $27_1 = $5_1 + 24 | 0;
     $7_1 = 0;
     $6_1 = 0;
     while (1) {
      if (HEAP32[$31_1 + 8 >> 2] <= ($6_1 | 0)) {
       $7_1 = 0;
       $6_1 = 0;
      } else {
       $14_1 = HEAP32[$31_1 + 16 >> 2] + $7_1 | 0;
       $8_1 = HEAP32[$14_1 + 8 >> 2];
       label$25 : {
        if (!$8_1) {
         break label$25
        }
        $10_1 = HEAP32[$29_1 + 28 >> 2] + Math_imul(HEAP32[$14_1 >> 2], 80) | 0;
        $14_1 = HEAP32[$10_1 + 64 >> 2];
        $464($5_1 + 8 | 0, HEAP32[$1_1 + 12 >> 2], $10_1);
        $32_1 = $5_1 + 16 | 0;
        $18_1 = $32_1;
        $13_1 = HEAP32[$18_1 + 4 >> 2];
        $10_1 = $5_1 + 216 | 0;
        HEAP32[$10_1 >> 2] = HEAP32[$18_1 >> 2];
        HEAP32[$10_1 + 4 >> 2] = $13_1;
        $28_1 = HEAP32[$27_1 + 4 >> 2];
        HEAP32[$11_1 >> 2] = HEAP32[$27_1 >> 2];
        HEAP32[$11_1 + 4 >> 2] = $28_1;
        $18_1 = $27_1 + 8 | 0;
        $19_1 = HEAP32[$18_1 + 4 >> 2];
        $28_1 = $11_1 + 8 | 0;
        $13_1 = $28_1;
        HEAP32[$13_1 >> 2] = HEAP32[$18_1 >> 2];
        HEAP32[$13_1 + 4 >> 2] = $19_1;
        $13_1 = HEAP32[$15_1 + 4 >> 2];
        HEAP32[$16_1 >> 2] = HEAP32[$15_1 >> 2];
        HEAP32[$16_1 + 4 >> 2] = $13_1;
        $33_1 = $15_1 + 8 | 0;
        $20_1 = $33_1;
        $17_1 = HEAP32[$20_1 + 4 >> 2];
        $13_1 = $16_1 + 8 | 0;
        HEAP32[$13_1 >> 2] = HEAP32[$20_1 >> 2];
        HEAP32[$13_1 + 4 >> 2] = $17_1;
        $19_1 = HEAP32[$9_1 + 4 >> 2];
        HEAP32[$3_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$3_1 + 4 >> 2] = $19_1;
        $20_1 = $9_1 + 8 | 0;
        $35_1 = HEAP32[$20_1 + 4 >> 2];
        $19_1 = $3_1 + 8 | 0;
        $17_1 = $19_1;
        HEAP32[$17_1 >> 2] = HEAP32[$20_1 >> 2];
        HEAP32[$17_1 + 4 >> 2] = $35_1;
        $17_1 = HEAP32[$5_1 + 12 >> 2];
        HEAP32[$5_1 + 208 >> 2] = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$5_1 + 212 >> 2] = $17_1;
        FUNCTION_TABLE[HEAP32[HEAP32[$14_1 >> 2] + 8 >> 2]]($14_1, $5_1 + 208 | 0, $5_1 + 3664 | 0, $5_1 + 3648 | 0);
        $12_1 = HEAPF32[$4_1 + 32 >> 2];
        HEAPF32[$5_1 + 3664 >> 2] = HEAPF32[$5_1 + 3664 >> 2] - $12_1;
        HEAPF32[$5_1 + 3668 >> 2] = HEAPF32[$5_1 + 3668 >> 2] - $12_1;
        HEAPF32[$5_1 + 3672 >> 2] = HEAPF32[$5_1 + 3672 >> 2] - $12_1;
        HEAPF32[$5_1 + 3648 >> 2] = $12_1 + HEAPF32[$5_1 + 3648 >> 2];
        HEAPF32[$5_1 + 3652 >> 2] = $12_1 + HEAPF32[$5_1 + 3652 >> 2];
        HEAPF32[$5_1 + 3656 >> 2] = $12_1 + HEAPF32[$5_1 + 3656 >> 2];
        $17_1 = HEAP32[$30_1 + 28 >> 2] + Math_imul(HEAP32[(HEAP32[$31_1 + 16 >> 2] + $7_1 | 0) + 4 >> 2], 80) | 0;
        $14_1 = HEAP32[$17_1 + 64 >> 2];
        $464($5_1 + 8 | 0, HEAP32[$2_1 + 12 >> 2], $17_1);
        $17_1 = HEAP32[$32_1 + 4 >> 2];
        HEAP32[$10_1 >> 2] = HEAP32[$32_1 >> 2];
        HEAP32[$10_1 + 4 >> 2] = $17_1;
        $10_1 = HEAP32[$27_1 + 4 >> 2];
        HEAP32[$11_1 >> 2] = HEAP32[$27_1 >> 2];
        HEAP32[$11_1 + 4 >> 2] = $10_1;
        $10_1 = HEAP32[$18_1 + 4 >> 2];
        HEAP32[$28_1 >> 2] = HEAP32[$18_1 >> 2];
        HEAP32[$28_1 + 4 >> 2] = $10_1;
        $10_1 = HEAP32[$15_1 + 4 >> 2];
        HEAP32[$16_1 >> 2] = HEAP32[$15_1 >> 2];
        HEAP32[$16_1 + 4 >> 2] = $10_1;
        $10_1 = HEAP32[$33_1 + 4 >> 2];
        HEAP32[$13_1 >> 2] = HEAP32[$33_1 >> 2];
        HEAP32[$13_1 + 4 >> 2] = $10_1;
        $10_1 = HEAP32[$9_1 + 4 >> 2];
        HEAP32[$3_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$3_1 + 4 >> 2] = $10_1;
        $10_1 = HEAP32[$20_1 + 4 >> 2];
        HEAP32[$19_1 >> 2] = HEAP32[$20_1 >> 2];
        HEAP32[$19_1 + 4 >> 2] = $10_1;
        $10_1 = HEAP32[$5_1 + 12 >> 2];
        HEAP32[$5_1 + 208 >> 2] = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$5_1 + 212 >> 2] = $10_1;
        FUNCTION_TABLE[HEAP32[HEAP32[$14_1 >> 2] + 8 >> 2]]($14_1, $5_1 + 208 | 0, $5_1 + 88 | 0, $5_1 + 72 | 0);
        HEAPF32[$5_1 + 88 >> 2] = HEAPF32[$5_1 + 88 >> 2] - $12_1;
        HEAPF32[$5_1 + 92 >> 2] = HEAPF32[$5_1 + 92 >> 2] - $12_1;
        HEAPF32[$5_1 + 96 >> 2] = HEAPF32[$5_1 + 96 >> 2] - $12_1;
        HEAPF32[$5_1 + 72 >> 2] = $12_1 + HEAPF32[$5_1 + 72 >> 2];
        HEAPF32[$5_1 + 76 >> 2] = $12_1 + HEAPF32[$5_1 + 76 >> 2];
        HEAPF32[$5_1 + 80 >> 2] = $12_1 + HEAPF32[$5_1 + 80 >> 2];
        if ($376(HEAPF32[$5_1 + 3664 >> 2], HEAPF32[$5_1 + 3668 >> 2], HEAPF32[$5_1 + 3672 >> 2], HEAPF32[$5_1 + 3648 >> 2], HEAPF32[$5_1 + 3652 >> 2], HEAPF32[$5_1 + 3656 >> 2], $5_1 + 88 | 0, $5_1 + 72 | 0)) {
         break label$25
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] >> 2]]($8_1) | 0;
        $14_1 = HEAP32[$0_1 + 4 >> 2];
        FUNCTION_TABLE[HEAP32[HEAP32[$14_1 >> 2] + 60 >> 2]]($14_1, $8_1);
        $8_1 = HEAP32[$31_1 + 16 >> 2] + $7_1 | 0;
        $14_1 = HEAP32[$8_1 >> 2];
        $10_1 = HEAP32[$8_1 + 4 >> 2];
        $8_1 = HEAP32[$0_1 + 92 >> 2];
        if (($8_1 | 0) == HEAP32[$0_1 + 96 >> 2]) {
         $189($34_1, $8_1 ? $8_1 << 1 : 1);
         $8_1 = HEAP32[$0_1 + 92 >> 2];
        }
        $8_1 = HEAP32[$0_1 + 100 >> 2] + Math_imul($8_1, 12) | 0;
        HEAP32[$8_1 + 8 >> 2] = 0;
        HEAP32[$8_1 + 4 >> 2] = $10_1;
        HEAP32[$8_1 >> 2] = $14_1;
        HEAP32[$0_1 + 92 >> 2] = HEAP32[$0_1 + 92 >> 2] + 1;
       }
       $7_1 = $7_1 + 12 | 0;
       $6_1 = $6_1 + 1 | 0;
       continue;
      }
      break;
     };
     while (1) {
      if (($7_1 | 0) < HEAP32[$0_1 + 92 >> 2]) {
       $1_1 = HEAP32[$0_1 + 84 >> 2];
       $2_1 = HEAP32[$0_1 + 100 >> 2] + $6_1 | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2]) | 0;
       $6_1 = $6_1 + 12 | 0;
       $7_1 = $7_1 + 1 | 0;
       continue;
      }
      break;
     };
     $124($34_1);
     $124($5_1 + 3624 | 0);
     break label$1;
    }
    $8_1 = $8_1 + 1 | 0;
    continue;
   };
  }
  global$0 = $5_1 + 3680 | 0;
 }
 
 function $517($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   if (($4_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   if (!(($1_1 | 0) <= ($4_1 | 0) | HEAP32[$0_1 + 8 >> 2] >= ($1_1 | 0))) {
    $3_1 = $4_1;
    if ($1_1) {
     $7_1 = $120($1_1 << 3);
     $3_1 = HEAP32[$0_1 + 4 >> 2];
    }
    $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
    while (1) {
     if ($3_1) {
      $8_1 = HEAP32[$0_1 + 12 >> 2] + $5_1 | 0;
      $6_1 = HEAP32[$8_1 + 4 >> 2];
      $9_1 = $5_1 + $7_1 | 0;
      HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$9_1 + 4 >> 2] = $6_1;
      $3_1 = $3_1 - 1 | 0;
      $5_1 = $5_1 + 8 | 0;
      continue;
     }
     break;
    };
    $163($0_1);
    HEAP32[$0_1 + 12 >> 2] = $7_1;
    HEAP8[$0_1 + 16 | 0] = 1;
    HEAP32[$0_1 + 8 >> 2] = $1_1;
   }
   $5_1 = $1_1 - $4_1 | 0;
   $3_1 = $4_1 << 3;
   while (1) {
    if (!$5_1) {
     break label$1
    }
    $4_1 = HEAP32[$2_1 + 4 >> 2];
    $6_1 = HEAP32[$0_1 + 12 >> 2] + $3_1 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $4_1;
    $5_1 = $5_1 - 1 | 0;
    $3_1 = $3_1 + 8 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $518($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $519($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[$0_1 + 84 >> 2];
  $0_1 = 0;
  $2_1 = 8;
  while (1) {
   if (HEAP32[$4_1 + 8 >> 2] > ($0_1 | 0)) {
    $3_1 = HEAP32[HEAP32[$4_1 + 16 >> 2] + $2_1 >> 2];
    if ($3_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $1_1)
    }
    $2_1 = $2_1 + 12 | 0;
    $0_1 = $0_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $520($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 384 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
  $10_1 = HEAP32[$2_1 + 36 >> 2];
  $12_1 = Math_imul($10_1, 80);
  $13_1 = HEAP32[HEAP32[$0_1 + 12 >> 2] + 4 >> 2] + 28 | 0;
  $2_1 = HEAP32[($12_1 + HEAP32[$13_1 >> 2] | 0) + 64 >> 2];
  $4_1 = HEAP32[$0_1 + 8 >> 2];
  $11_1 = HEAP32[$1_1 + 36 >> 2];
  $6_1 = HEAP32[HEAP32[$4_1 + 4 >> 2] + 28 >> 2] + Math_imul($11_1, 80) | 0;
  $7_1 = HEAP32[$6_1 + 64 >> 2];
  $1_1 = HEAP32[$4_1 + 12 >> 2];
  $4_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = $3_1 + 328 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 24 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $3_1 + 344 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 40 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $3_1 + 360 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 56 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $3_1 + 376 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 320 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 324 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$3_1 + 336 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$3_1 + 340 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$3_1 + 352 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 356 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$3_1 + 368 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 372 >> 2] = $4_1;
  $464($3_1 + 256 | 0, $3_1 + 320 | 0, $6_1);
  $1_1 = HEAP32[HEAP32[$0_1 + 12 >> 2] + 12 >> 2];
  $6_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $3_1 + 200 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $6_1 = $1_1 + 24 | 0;
  $5_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $3_1 + 216 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $6_1 = $1_1 + 40 | 0;
  $5_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $3_1 + 232 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $6_1 = $1_1 + 56 | 0;
  $5_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $3_1 + 248 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 192 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 196 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$3_1 + 208 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$3_1 + 212 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$3_1 + 224 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 228 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$3_1 + 240 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 244 >> 2] = $4_1;
  $464($3_1 + 128 | 0, $3_1 + 192 | 0, HEAP32[$13_1 >> 2] + $12_1 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 8 >> 2]]($7_1, $3_1 + 256 | 0, $3_1 + 112 | 0, $3_1 + 96 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $3_1 + 128 | 0, $3_1 + 80 | 0, $3_1 - -64 | 0);
  $9_1 = HEAPF32[HEAP32[$0_1 + 24 >> 2] + 32 >> 2];
  $14_1 = Math_fround(HEAPF32[$3_1 + 112 >> 2] - $9_1);
  HEAPF32[$3_1 + 112 >> 2] = $14_1;
  $15_1 = Math_fround(HEAPF32[$3_1 + 116 >> 2] - $9_1);
  HEAPF32[$3_1 + 116 >> 2] = $15_1;
  $16_1 = Math_fround(HEAPF32[$3_1 + 120 >> 2] - $9_1);
  HEAPF32[$3_1 + 120 >> 2] = $16_1;
  $17_1 = Math_fround($9_1 + HEAPF32[$3_1 + 96 >> 2]);
  HEAPF32[$3_1 + 96 >> 2] = $17_1;
  $18_1 = Math_fround($9_1 + HEAPF32[$3_1 + 100 >> 2]);
  HEAPF32[$3_1 + 100 >> 2] = $18_1;
  $19_1 = Math_fround($9_1 + HEAPF32[$3_1 + 104 >> 2]);
  HEAPF32[$3_1 + 104 >> 2] = $19_1;
  label$1 : {
   if (!$376($14_1, $15_1, $16_1, $17_1, $18_1, $19_1, $3_1 + 80 | 0, $3_1 - -64 | 0)) {
    break label$1
   }
   HEAP32[$3_1 + 56 >> 2] = $11_1;
   HEAP32[$3_1 + 48 >> 2] = 0;
   HEAP32[$3_1 + 52 >> 2] = -1;
   HEAP32[$3_1 + 36 >> 2] = $7_1;
   $1_1 = HEAP32[$0_1 + 8 >> 2];
   HEAP32[$3_1 + 32 >> 2] = $1_1;
   HEAP32[$3_1 + 40 >> 2] = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$3_1 + 44 >> 2] = $3_1 + 256;
   HEAP32[$3_1 + 24 >> 2] = $10_1;
   HEAP32[$3_1 + 16 >> 2] = 0;
   HEAP32[$3_1 + 20 >> 2] = -1;
   HEAP32[$3_1 + 4 >> 2] = $2_1;
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$3_1 >> 2] = $1_1;
   HEAP32[$3_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
   $7_1 = HEAP32[$0_1 + 28 >> 2];
   HEAP32[$3_1 + 12 >> 2] = $3_1 + 128;
   $1_1 = HEAP32[$7_1 + 12 >> 2] - 1 & $506($11_1, $10_1);
   label$2 : {
    label$3 : {
     if (($1_1 | 0) >= HEAP32[$7_1 + 28 >> 2]) {
      break label$3
     }
     $1_1 = HEAP32[$7_1 + 36 >> 2] + ($1_1 << 2) | 0;
     while (1) {
      $1_1 = HEAP32[$1_1 >> 2];
      if (($1_1 | 0) == -1) {
       break label$3
      }
      $2_1 = HEAP32[$7_1 + 16 >> 2] + Math_imul($1_1, 12) | 0;
      if (HEAP32[$2_1 + 4 >> 2] == ($10_1 | 0) ? HEAP32[$2_1 >> 2] == ($11_1 | 0) : 0) {
       break label$2
      }
      $1_1 = HEAP32[$7_1 + 56 >> 2] + ($1_1 << 2) | 0;
      continue;
     };
    }
    $2_1 = 0;
   }
   $7_1 = 1;
   label$6 : {
    if ($9_1 > Math_fround(0.0)) {
     $1_1 = HEAP32[$0_1 + 16 >> 2];
     $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 32 | 0, $3_1, 0, 2) | 0;
     break label$6;
    }
    label$8 : {
     if ($2_1) {
      $2_1 = HEAP32[$2_1 + 8 >> 2];
      break label$8;
     }
     $1_1 = HEAP32[$0_1 + 16 >> 2];
     $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 32 | 0, $3_1, HEAP32[$0_1 + 32 >> 2], 1) | 0;
     $1_1 = HEAP32[$0_1 + 28 >> 2];
     (wasm2js_i32$0 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $11_1, $10_1) | 0, wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    }
    $7_1 = 0;
   }
   $1_1 = HEAP32[$0_1 + 24 >> 2];
   $12_1 = HEAP32[$1_1 + 12 >> 2];
   $13_1 = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$1_1 + 12 >> 2] = $3_1;
   HEAP32[$1_1 + 8 >> 2] = $3_1 + 32;
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, -1, $11_1);
   $1_1 = HEAP32[$0_1 + 24 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, -1, $10_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $3_1 + 32 | 0, $3_1, HEAP32[$0_1 + 20 >> 2], HEAP32[$0_1 + 24 >> 2]);
   $1_1 = HEAP32[$0_1 + 24 >> 2];
   HEAP32[$1_1 + 8 >> 2] = $13_1;
   HEAP32[$1_1 + 12 >> 2] = $12_1;
   if (!$7_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] >> 2]]($2_1) | 0;
   $0_1 = HEAP32[$0_1 + 16 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 60 >> 2]]($0_1, $2_1);
  }
  global$0 = $3_1 + 384 | 0;
 }
 
 function $521($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
 }
 
 function $522($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(1.0));
 }
 
 function $523($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 15576;
  label$1 : {
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  return $0_1 | 0;
 }
 
 function $524($0_1) {
  $0_1 = $0_1 | 0;
  $33($523($0_1));
 }
 
 function $525($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $0_1 = HEAP32[$0_1 + 12 >> 2];
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[$4_1 + 4 >> 2] = $0_1;
   $10_1 = HEAP32[$1_1 + 12 >> 2];
   $11_1 = HEAP32[$2_1 + 12 >> 2];
   $12_1 = Math_fround(HEAPF32[$10_1 + 48 >> 2] - HEAPF32[$11_1 + 48 >> 2]);
   $7_1 = Math_fround(HEAPF32[$10_1 + 52 >> 2] - HEAPF32[$11_1 + 52 >> 2]);
   $8_1 = Math_fround(HEAPF32[$10_1 + 56 >> 2] - HEAPF32[$11_1 + 56 >> 2]);
   $5_1 = $137($12_1, $7_1, $8_1);
   $1_1 = HEAP32[$1_1 + 4 >> 2];
   $9_1 = HEAPF32[$1_1 + 16 >> 2];
   $6_1 = HEAPF32[$1_1 + 32 >> 2];
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   $13_1 = HEAPF32[$1_1 + 16 >> 2];
   $14_1 = HEAPF32[$1_1 + 32 >> 2];
   $526($0_1);
   $6_1 = Math_fround($6_1 * $9_1);
   $9_1 = Math_fround($14_1 * $13_1);
   $6_1 = Math_fround($6_1 + $9_1);
   if ($5_1 > Math_fround($6_1 + HEAPF32[$4_1 + 32 >> 2])) {
    break label$1
   }
   HEAP32[$3_1 + 24 >> 2] = 0;
   HEAP32[$3_1 + 28 >> 2] = 0;
   HEAP32[$3_1 + 16 >> 2] = 1065353216;
   HEAP32[$3_1 + 20 >> 2] = 0;
   $6_1 = Math_fround($5_1 - $6_1);
   label$2 : {
    if (!($5_1 > Math_fround(1.1920928955078125e-07))) {
     $5_1 = Math_fround(1.0);
     $8_1 = Math_fround(0.0);
     $7_1 = Math_fround(0.0);
     break label$2;
    }
    HEAP32[$3_1 + 28 >> 2] = 0;
    $5_1 = Math_fround(Math_fround(1.0) / $5_1);
    $8_1 = Math_fround($5_1 * $8_1);
    HEAPF32[$3_1 + 24 >> 2] = $8_1;
    $7_1 = Math_fround($5_1 * $7_1);
    HEAPF32[$3_1 + 20 >> 2] = $7_1;
    $5_1 = Math_fround($12_1 * $5_1);
    HEAPF32[$3_1 + 16 >> 2] = $5_1;
   }
   HEAP32[$3_1 + 12 >> 2] = 0;
   $0_1 = HEAP32[$2_1 + 12 >> 2];
   HEAPF32[$3_1 >> 2] = Math_fround($9_1 * $5_1) + HEAPF32[$0_1 + 48 >> 2];
   HEAPF32[$3_1 + 8 >> 2] = Math_fround($9_1 * $8_1) + HEAPF32[$0_1 + 56 >> 2];
   HEAPF32[$3_1 + 4 >> 2] = Math_fround($9_1 * $7_1) + HEAPF32[$0_1 + 52 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $3_1 + 16 | 0, $3_1, $6_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $526($0_1) {
  HEAP32[$0_1 + 828 >> 2] = 0;
 }
 
 function $527($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if (!(!HEAP32[$0_1 + 12 >> 2] | !HEAPU8[$0_1 + 8 | 0])) {
   $459($1_1, $0_1 + 12 | 0)
  }
 }
 
 function $528($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $26_1 = $1_1 - -64 | 0;
  $529($3_1 + 32 | 0, $26_1, $1_1);
  $10_1 = HEAPF32[$0_1 + 12 >> 2];
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $6_1 = HEAPF32[$1_1 + 16 >> 2];
  $7_1 = HEAPF32[$1_1 + 32 >> 2];
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$3_1 + 140 >> 2] = 0;
  $5_1 = HEAPF32[$1_1 + 60 >> 2];
  $8_1 = Math_fround(HEAPF32[$1_1 + 76 >> 2] - $5_1);
  $9_1 = HEAPF32[$1_1 - -64 >> 2];
  $11_1 = Math_fround(HEAPF32[$1_1 + 96 >> 2] - $9_1);
  $9_1 = Math_fround(HEAPF32[$1_1 + 80 >> 2] - $9_1);
  $5_1 = Math_fround(HEAPF32[$1_1 + 92 >> 2] - $5_1);
  $17_1 = Math_fround(Math_fround($8_1 * $11_1) - Math_fround($9_1 * $5_1));
  HEAPF32[$3_1 + 136 >> 2] = $17_1;
  $13_1 = HEAPF32[$1_1 + 68 >> 2];
  $18_1 = Math_fround(HEAPF32[$1_1 + 84 >> 2] - $13_1);
  $16_1 = Math_fround($18_1 * $5_1);
  $5_1 = Math_fround(HEAPF32[$1_1 + 100 >> 2] - $13_1);
  $8_1 = Math_fround($16_1 - Math_fround($8_1 * $5_1));
  HEAPF32[$3_1 + 132 >> 2] = $8_1;
  $5_1 = Math_fround(Math_fround($9_1 * $5_1) - Math_fround($18_1 * $11_1));
  HEAPF32[$3_1 + 128 >> 2] = $5_1;
  $5_1 = $149($5_1, $8_1, $17_1);
  label$1 : {
   if (!($5_1 >= Math_fround(1.4210854715202004e-14))) {
    break label$1
   }
   $17_1 = Math_fround($7_1 * $6_1);
   $10_1 = Math_fround($17_1 + $10_1);
   $167($3_1 + 128 | 0, Math_fround(Math_sqrt($5_1)));
   $18_1 = HEAPF32[$3_1 + 80 >> 2];
   $12_1 = HEAPF32[$1_1 + 60 >> 2];
   $23_1 = Math_fround($18_1 - $12_1);
   $6_1 = HEAPF32[$3_1 + 128 >> 2];
   $24_1 = HEAPF32[$3_1 + 84 >> 2];
   $14_1 = HEAPF32[$1_1 + 64 >> 2];
   $27_1 = Math_fround($24_1 - $14_1);
   $7_1 = HEAPF32[$3_1 + 132 >> 2];
   $25_1 = HEAPF32[$3_1 + 88 >> 2];
   $15_1 = HEAPF32[$1_1 + 68 >> 2];
   $28_1 = Math_fround($25_1 - $15_1);
   $5_1 = HEAPF32[$3_1 + 136 >> 2];
   $8_1 = Math_fround(Math_fround(Math_fround($23_1 * $6_1) + Math_fround($27_1 * $7_1)) + Math_fround($28_1 * $5_1));
   if ($8_1 < Math_fround(0.0)) {
    $5_1 = Math_fround(-$5_1);
    HEAPF32[$3_1 + 136 >> 2] = $5_1;
    $7_1 = Math_fround(-$7_1);
    HEAPF32[$3_1 + 132 >> 2] = $7_1;
    $6_1 = Math_fround(-$6_1);
    HEAPF32[$3_1 + 128 >> 2] = $6_1;
    $8_1 = Math_fround(-$8_1);
   }
   if (!($8_1 < $10_1)) {
    break label$1
   }
   $9_1 = HEAPF32[$1_1 + 92 >> 2];
   $11_1 = Math_fround($12_1 - $9_1);
   $13_1 = HEAPF32[$1_1 + 96 >> 2];
   $19_1 = Math_fround($14_1 - $13_1);
   $16_1 = HEAPF32[$1_1 + 100 >> 2];
   $20_1 = Math_fround($15_1 - $16_1);
   $19_1 = Math_fround(Math_fround(Math_fround(Math_fround($18_1 - $9_1) * Math_fround(Math_fround($19_1 * $5_1) - Math_fround($20_1 * $7_1))) + Math_fround(Math_fround($24_1 - $13_1) * Math_fround(Math_fround($20_1 * $6_1) - Math_fround($5_1 * $11_1)))) + Math_fround(Math_fround($25_1 - $16_1) * Math_fround(Math_fround($7_1 * $11_1) - Math_fround($19_1 * $6_1))));
   $11_1 = $9_1;
   $9_1 = HEAPF32[$1_1 + 76 >> 2];
   $20_1 = Math_fround($11_1 - $9_1);
   $21_1 = HEAPF32[$1_1 + 80 >> 2];
   $29_1 = Math_fround($13_1 - $21_1);
   $11_1 = HEAPF32[$1_1 + 84 >> 2];
   $13_1 = Math_fround($16_1 - $11_1);
   $16_1 = Math_fround(Math_fround(Math_fround(Math_fround($18_1 - $9_1) * Math_fround(Math_fround($29_1 * $5_1) - Math_fround($13_1 * $7_1))) + Math_fround(Math_fround($24_1 - $21_1) * Math_fround(Math_fround($13_1 * $6_1) - Math_fround($5_1 * $20_1)))) + Math_fround(Math_fround($25_1 - $11_1) * Math_fround(Math_fround($7_1 * $20_1) - Math_fround($29_1 * $6_1))));
   $14_1 = Math_fround($21_1 - $14_1);
   $15_1 = Math_fround($11_1 - $15_1);
   $12_1 = Math_fround($9_1 - $12_1);
   $12_1 = Math_fround(Math_fround(Math_fround($23_1 * Math_fround(Math_fround($14_1 * $5_1) - Math_fround($15_1 * $7_1))) + Math_fround($27_1 * Math_fround(Math_fround($15_1 * $6_1) - Math_fround($5_1 * $12_1)))) + Math_fround($28_1 * Math_fround(Math_fround($7_1 * $12_1) - Math_fround($14_1 * $6_1))));
   label$3 : {
    if (!(!($19_1 <= Math_fround(0.0)) | (!($12_1 <= Math_fround(0.0)) | !($16_1 <= Math_fround(0.0))) ? !($19_1 > Math_fround(0.0) ? !(!($12_1 > Math_fround(0.0)) | !($16_1 > Math_fround(0.0))) : 0) : 0)) {
     $11_1 = Math_fround($25_1 - Math_fround($8_1 * $5_1));
     $13_1 = Math_fround($24_1 - Math_fround($8_1 * $7_1));
     $9_1 = Math_fround($18_1 - Math_fround($8_1 * $6_1));
     $16_1 = Math_fround($10_1 * $10_1);
     break label$3;
    }
    $1_1 = 0;
    $16_1 = Math_fround($10_1 * $10_1);
    $10_1 = $16_1;
    while (1) {
     $22_1 = HEAP32[$0_1 + 8 >> 2];
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$22_1 >> 2] + 104 >> 2]]($22_1) | 0) > ($1_1 | 0)) {
      $22_1 = HEAP32[$0_1 + 8 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$22_1 >> 2] + 108 >> 2]]($22_1, $1_1, $3_1 + 112 | 0, $3_1 + 96 | 0);
      $8_1 = Math_fround(0.0);
      $19_1 = HEAPF32[$3_1 + 112 >> 2];
      $6_1 = Math_fround($18_1 - $19_1);
      $12_1 = Math_fround(HEAPF32[$3_1 + 96 >> 2] - $19_1);
      $20_1 = HEAPF32[$3_1 + 116 >> 2];
      $7_1 = Math_fround($24_1 - $20_1);
      $14_1 = Math_fround(HEAPF32[$3_1 + 100 >> 2] - $20_1);
      $21_1 = HEAPF32[$3_1 + 120 >> 2];
      $5_1 = Math_fround($25_1 - $21_1);
      $15_1 = Math_fround(HEAPF32[$3_1 + 104 >> 2] - $21_1);
      $23_1 = Math_fround(Math_fround(Math_fround($6_1 * $12_1) + Math_fround($7_1 * $14_1)) + Math_fround($5_1 * $15_1));
      label$7 : {
       if (!($23_1 > Math_fround(0.0))) {
        break label$7
       }
       $8_1 = Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($14_1 * $14_1)) + Math_fround($15_1 * $15_1));
       if ($8_1 > $23_1) {
        $8_1 = Math_fround($23_1 / $8_1);
        $5_1 = Math_fround($5_1 - Math_fround($15_1 * $8_1));
        $7_1 = Math_fround($7_1 - Math_fround($14_1 * $8_1));
        $6_1 = Math_fround($6_1 - Math_fround($12_1 * $8_1));
        break label$7;
       }
       $5_1 = Math_fround($5_1 - $15_1);
       $7_1 = Math_fround($7_1 - $14_1);
       $6_1 = Math_fround($6_1 - $12_1);
       $8_1 = Math_fround(1.0);
      }
      $6_1 = Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)) + Math_fround($5_1 * $5_1));
      if ($6_1 < $10_1) {
       $9_1 = Math_fround($19_1 + Math_fround($12_1 * $8_1));
       $13_1 = Math_fround($20_1 + Math_fround($14_1 * $8_1));
       $11_1 = Math_fround($21_1 + Math_fround($15_1 * $8_1));
       $30_1 = 1;
       $10_1 = $6_1;
      }
      $1_1 = $1_1 + 1 | 0;
      continue;
     }
     break;
    };
    if (!$30_1) {
     break label$1
    }
   }
   $6_1 = Math_fround($18_1 - $9_1);
   $7_1 = Math_fround($24_1 - $13_1);
   $5_1 = Math_fround($25_1 - $11_1);
   $10_1 = $149($6_1, $7_1, $5_1);
   if (!($10_1 < $16_1)) {
    break label$1
   }
   label$10 : {
    if ($10_1 > Math_fround(1.1920928955078125e-07)) {
     HEAP32[$3_1 + 124 >> 2] = 0;
     HEAPF32[$3_1 + 120 >> 2] = $5_1;
     HEAPF32[$3_1 + 116 >> 2] = $7_1;
     HEAPF32[$3_1 + 112 >> 2] = $6_1;
     $17_1 = Math_fround($17_1 - Math_fround(Math_sqrt($10_1)));
     $153($3_1 + 112 | 0);
     break label$10;
    }
    $1_1 = $3_1 + 136 | 0;
    $22_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $3_1 + 120 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $22_1;
    $0_1 = HEAP32[$3_1 + 132 >> 2];
    HEAP32[$3_1 + 112 >> 2] = HEAP32[$3_1 + 128 >> 2];
    HEAP32[$3_1 + 116 >> 2] = $0_1;
   }
   $10_1 = Math_fround(-$17_1);
   if ($4_1) {
    $431($3_1 + 128 | 0, $26_1, HEAPF32[$3_1 + 112 >> 2], HEAPF32[$3_1 + 116 >> 2], HEAPF32[$3_1 + 120 >> 2]);
    HEAP32[$3_1 + 108 >> 2] = 0;
    $6_1 = HEAPF32[$3_1 + 136 >> 2];
    HEAPF32[$3_1 + 104 >> 2] = -$6_1;
    $7_1 = HEAPF32[$3_1 + 132 >> 2];
    HEAPF32[$3_1 + 100 >> 2] = -$7_1;
    $5_1 = HEAPF32[$3_1 + 128 >> 2];
    HEAPF32[$3_1 + 96 >> 2] = -$5_1;
    $146($3_1, $26_1, $9_1, $13_1, $11_1);
    HEAP32[$3_1 + 28 >> 2] = 0;
    HEAPF32[$3_1 + 24 >> 2] = HEAPF32[$3_1 + 8 >> 2] - Math_fround($17_1 * $6_1);
    HEAPF32[$3_1 + 20 >> 2] = HEAPF32[$3_1 + 4 >> 2] - Math_fround($17_1 * $7_1);
    HEAPF32[$3_1 + 16 >> 2] = HEAPF32[$3_1 >> 2] - Math_fround($17_1 * $5_1);
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $3_1 + 96 | 0, $3_1 + 16 | 0, $10_1);
    break label$1;
   }
   $431($3_1 + 128 | 0, $26_1, HEAPF32[$3_1 + 112 >> 2], HEAPF32[$3_1 + 116 >> 2], HEAPF32[$3_1 + 120 >> 2]);
   $146($3_1 + 96 | 0, $26_1, $9_1, $13_1, $11_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $3_1 + 128 | 0, $3_1 + 96 | 0, $10_1);
  }
  global$0 = $3_1 + 144 | 0;
 }
 
 function $529($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $5_1 = HEAPF32[$1_1 + 52 >> 2];
  $6_1 = HEAPF32[$2_1 + 52 >> 2];
  $7_1 = HEAPF32[$1_1 + 56 >> 2];
  $8_1 = HEAPF32[$2_1 + 56 >> 2];
  $9_1 = HEAPF32[$1_1 + 48 >> 2];
  $10_1 = HEAPF32[$2_1 + 48 >> 2];
  $530($3_1 + 16 | 0, $1_1, $2_1);
  $145($3_1, Math_fround($10_1 - $9_1), Math_fround($6_1 - $5_1), Math_fround($8_1 - $7_1), $1_1);
  $2_1 = $3_1 + 24 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$0_1 + 16 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$0_1 + 20 >> 2] = $1_1;
  $2_1 = $3_1 + 40 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$0_1 + 32 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$0_1 + 36 >> 2] = $1_1;
  $2_1 = $3_1 + 56 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 40 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0_1 + 48 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 52 >> 2] = $1_1;
  $1_1 = $3_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 56 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  global$0 = $3_1 - -64 | 0;
 }
 
 function $530($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0);
  $3_1 = HEAPF32[$1_1 + 20 >> 2];
  $4_1 = HEAPF32[$1_1 + 36 >> 2];
  $5_1 = HEAPF32[$2_1 + 20 >> 2];
  $6_1 = HEAPF32[$2_1 + 36 >> 2];
  $7_1 = HEAPF32[$1_1 + 24 >> 2];
  $8_1 = HEAPF32[$2_1 + 24 >> 2];
  $9_1 = HEAPF32[$1_1 + 40 >> 2];
  $10_1 = HEAPF32[$2_1 + 40 >> 2];
  $11_1 = HEAPF32[$1_1 + 4 >> 2];
  $12_1 = HEAPF32[$2_1 + 4 >> 2];
  $13_1 = HEAPF32[$1_1 + 8 >> 2];
  $14_1 = HEAPF32[$2_1 + 8 >> 2];
  $15_1 = HEAPF32[$2_1 + 32 >> 2];
  $16_1 = HEAPF32[$1_1 + 32 >> 2];
  $17_1 = HEAPF32[$2_1 >> 2];
  $18_1 = HEAPF32[$1_1 >> 2];
  $19_1 = HEAPF32[$2_1 + 16 >> 2];
  $20_1 = HEAPF32[$1_1 + 16 >> 2];
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($18_1 * $17_1) + Math_fround($20_1 * $19_1)) + Math_fround($16_1 * $15_1);
  HEAPF32[$0_1 + 40 >> 2] = Math_fround(Math_fround($14_1 * $13_1) + Math_fround($8_1 * $7_1)) + Math_fround($10_1 * $9_1);
  HEAPF32[$0_1 + 36 >> 2] = Math_fround(Math_fround($12_1 * $13_1) + Math_fround($5_1 * $7_1)) + Math_fround($6_1 * $9_1);
  HEAPF32[$0_1 + 32 >> 2] = Math_fround(Math_fround($17_1 * $13_1) + Math_fround($19_1 * $7_1)) + Math_fround($15_1 * $9_1);
  HEAPF32[$0_1 + 24 >> 2] = Math_fround(Math_fround($14_1 * $11_1) + Math_fround($8_1 * $3_1)) + Math_fround($10_1 * $4_1);
  HEAPF32[$0_1 + 20 >> 2] = Math_fround(Math_fround($12_1 * $11_1) + Math_fround($5_1 * $3_1)) + Math_fround($6_1 * $4_1);
  HEAPF32[$0_1 + 16 >> 2] = Math_fround(Math_fround($17_1 * $11_1) + Math_fround($19_1 * $3_1)) + Math_fround($15_1 * $4_1);
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(Math_fround($18_1 * $14_1) + Math_fround($20_1 * $8_1)) + Math_fround($16_1 * $10_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(Math_fround($18_1 * $12_1) + Math_fround($20_1 * $5_1)) + Math_fround($16_1 * $6_1);
 }
 
 function $531($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 15712;
  label$1 : {
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  return $0_1 | 0;
 }
 
 function $532($0_1) {
  $0_1 = $0_1 | 0;
  $33($531($0_1));
 }
 
 function $533($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = global$0 - 160 | 0;
  global$0 = $6_1;
  $5_1 = HEAP32[$0_1 + 12 >> 2];
  label$1 : {
   if (!$5_1) {
    break label$1
   }
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $9_1 = HEAPU8[$0_1 + 16 | 0];
   $7_1 = $9_1 ? $2_1 : $1_1;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $2_1 = $9_1 ? $1_1 : $2_1;
   HEAP32[$6_1 + 152 >> 2] = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$6_1 + 148 >> 2] = $8_1;
   HEAP32[$6_1 + 144 >> 2] = 15652;
   HEAPF32[$6_1 + 156 >> 2] = HEAPF32[$5_1 + 832 >> 2] + HEAPF32[$4_1 + 32 >> 2];
   $1_1 = HEAP32[$7_1 + 12 >> 2];
   $7_1 = $1_1 + 8 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 16 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 24 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 32 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 40 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 48 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 56 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 - -64 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   HEAP32[$6_1 + 136 >> 2] = 1566444395;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 12 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 20 >> 2];
   HEAP32[$6_1 + 24 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$6_1 + 28 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 36 >> 2];
   HEAP32[$6_1 + 40 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$6_1 + 44 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$6_1 + 56 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$6_1 + 60 >> 2] = $5_1;
   $1_1 = HEAP32[$2_1 + 12 >> 2];
   $2_1 = $1_1 + 8 | 0;
   $7_1 = HEAP32[$2_1 + 4 >> 2];
   $5_1 = $6_1 + 80 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$1_1 + 20 >> 2];
   $2_1 = $6_1 + 88 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 24 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $6_1 + 96 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$1_1 + 36 >> 2];
   $2_1 = $6_1 + 104 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 40 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $6_1 + 112 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$1_1 + 52 >> 2];
   $2_1 = $6_1 + 120 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 56 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $6_1 + 128 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 + 72 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 76 >> 2] = $2_1;
   $528($6_1 + 144 | 0, $6_1 + 8 | 0, $4_1, HEAP32[$3_1 + 20 >> 2], $9_1);
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $451($4_1);
  }
  global$0 = $6_1 + 160 | 0;
 }
 
 function $534($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = 0, $47_1 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54 = Math_fround(0), $55_1 = Math_fround(0), $56_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $59_1 = Math_fround(0), $60 = Math_fround(0), $61_1 = 0, $62_1 = 0, $63 = 0, $64_1 = 0, $65_1 = 0, $66 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $3_1 = 0;
  label$1 : {
   $28_1 = $5_1;
   label$2 : {
    while (1) {
     if (($3_1 | 0) == 48) {
      label$5 : {
       $225($5_1 + 16 | 0, HEAP32[$0_1 + 4 >> 2]);
       $12_1 = HEAPF32[$5_1 + 16 >> 2];
       $10_1 = HEAPF32[$5_1 + 20 >> 2];
       $11_1 = HEAPF32[$5_1 + 24 >> 2];
       $225($5_1, HEAP32[$0_1 + 8 >> 2]);
       $7_1 = HEAPF32[$5_1 >> 2];
       $8_1 = HEAPF32[$5_1 + 4 >> 2];
       $6_1 = HEAPF32[$5_1 + 8 >> 2];
       $37_1 = Math_fround(Math_fround($11_1 + $11_1) * Math_fround(.5));
       HEAPF32[$5_1 + 492 >> 2] = $37_1;
       $38_1 = Math_fround(Math_fround($10_1 + $10_1) * Math_fround(.5));
       HEAPF32[$5_1 + 488 >> 2] = $38_1;
       $39_1 = Math_fround(Math_fround($12_1 + $12_1) * Math_fround(.5));
       HEAPF32[$5_1 + 484 >> 2] = $39_1;
       $40_1 = Math_fround(Math_fround($6_1 + $6_1) * Math_fround(.5));
       HEAPF32[$5_1 + 480 >> 2] = $40_1;
       $41_1 = Math_fround(Math_fround($8_1 + $8_1) * Math_fround(.5));
       HEAPF32[$5_1 + 476 >> 2] = $41_1;
       $42_1 = Math_fround(Math_fround($7_1 + $7_1) * Math_fround(.5));
       HEAPF32[$5_1 + 472 >> 2] = $42_1;
       $0_1 = $1_1 + 112 | 0;
       $56_1 = Math_fround(HEAPF32[$0_1 >> 2] - HEAPF32[$1_1 + 48 >> 2]);
       $58_1 = HEAPF32[$5_1 + 96 >> 2];
       $57_1 = Math_fround(HEAPF32[$1_1 + 116 >> 2] - HEAPF32[$1_1 + 52 >> 2]);
       $8_1 = HEAPF32[$5_1 + 112 >> 2];
       $14_1 = Math_fround(HEAPF32[$1_1 + 120 >> 2] - HEAPF32[$1_1 + 56 >> 2]);
       $6_1 = HEAPF32[$5_1 + 128 >> 2];
       $43_1 = Math_fround(Math_fround(Math_fround($56_1 * $58_1) + Math_fround($57_1 * $8_1)) + Math_fround($14_1 * $6_1));
       $22_1 = HEAPF32[$5_1 + 48 >> 2];
       $21_1 = HEAPF32[$5_1 + 64 >> 2];
       $30_1 = HEAPF32[$5_1 + 80 >> 2];
       $47_1 = Math_fround(Math_fround(Math_fround($58_1 * $22_1) + Math_fround($8_1 * $21_1)) + Math_fround($6_1 * $30_1));
       $13_1 = Math_fround(Math_abs($47_1));
       $31_1 = HEAPF32[$5_1 + 52 >> 2];
       $32_1 = HEAPF32[$5_1 + 68 >> 2];
       $33_1 = HEAPF32[$5_1 + 84 >> 2];
       $48_1 = Math_fround(Math_fround(Math_fround($58_1 * $31_1) + Math_fround($8_1 * $32_1)) + Math_fround($6_1 * $33_1));
       $12_1 = Math_fround(Math_abs($48_1));
       $34_1 = HEAPF32[$5_1 + 56 >> 2];
       $35_1 = HEAPF32[$5_1 + 72 >> 2];
       $25_1 = HEAPF32[$5_1 + 88 >> 2];
       $49_1 = Math_fround(Math_fround(Math_fround($58_1 * $34_1) + Math_fround($8_1 * $35_1)) + Math_fround($6_1 * $25_1));
       $11_1 = Math_fround(Math_abs($49_1));
       $8_1 = Math_fround(Math_fround(Math_abs($43_1)) - Math_fround(Math_fround(Math_fround($39_1 + Math_fround($42_1 * $13_1)) + Math_fround($41_1 * $12_1)) + Math_fround($40_1 * $11_1)));
       if ($8_1 > Math_fround(0.0)) {
        break label$1
       }
       $59_1 = HEAPF32[$5_1 + 100 >> 2];
       $7_1 = HEAPF32[$5_1 + 116 >> 2];
       $6_1 = HEAPF32[$5_1 + 132 >> 2];
       $44_1 = Math_fround(Math_fround(Math_fround($56_1 * $59_1) + Math_fround($57_1 * $7_1)) + Math_fround($14_1 * $6_1));
       $50_1 = Math_fround(Math_fround(Math_fround($59_1 * $34_1) + Math_fround($7_1 * $35_1)) + Math_fround($6_1 * $25_1));
       $36_1 = Math_fround(Math_abs($50_1));
       $51_1 = Math_fround(Math_fround(Math_fround($59_1 * $31_1) + Math_fround($7_1 * $32_1)) + Math_fround($6_1 * $33_1));
       $26_1 = Math_fround(Math_abs($51_1));
       $52_1 = Math_fround(Math_fround(Math_fround($59_1 * $22_1) + Math_fround($7_1 * $21_1)) + Math_fround($6_1 * $30_1));
       $29_1 = Math_fround(Math_abs($52_1));
       $6_1 = Math_fround(-3402823466385288598117041.0e14);
       if ($8_1 > Math_fround(-3402823466385288598117041.0e14)) {
        $19_1 = $43_1 < Math_fround(0.0);
        $9_1 = $5_1 + 96 | 0;
        $15_1 = 1;
        $6_1 = $8_1;
       }
       $8_1 = Math_fround(Math_fround(Math_abs($44_1)) - Math_fround(Math_fround(Math_fround($38_1 + Math_fround($42_1 * $29_1)) + Math_fround($41_1 * $26_1)) + Math_fround($40_1 * $36_1)));
       if ($8_1 > Math_fround(0.0)) {
        break label$1
       }
       $60 = HEAPF32[$5_1 + 104 >> 2];
       $10_1 = HEAPF32[$5_1 + 120 >> 2];
       $7_1 = HEAPF32[$5_1 + 136 >> 2];
       $45_1 = Math_fround(Math_fround(Math_fround($56_1 * $60) + Math_fround($57_1 * $10_1)) + Math_fround($14_1 * $7_1));
       $53_1 = Math_fround(Math_fround(Math_fround($60 * $34_1) + Math_fround($10_1 * $35_1)) + Math_fround($7_1 * $25_1));
       $24_1 = Math_fround(Math_abs($53_1));
       $54 = Math_fround(Math_fround(Math_fround($60 * $31_1) + Math_fround($10_1 * $32_1)) + Math_fround($7_1 * $33_1));
       $23_1 = Math_fround(Math_abs($54));
       $55_1 = Math_fround(Math_fround(Math_fround($60 * $22_1) + Math_fround($10_1 * $21_1)) + Math_fround($7_1 * $30_1));
       $17_1 = Math_fround(Math_abs($55_1));
       if ($6_1 < $8_1) {
        $9_1 = $5_1 + 96 | 4;
        $19_1 = $44_1 < Math_fround(0.0);
        $15_1 = 2;
        $6_1 = $8_1;
       }
       $8_1 = Math_fround(Math_fround(Math_abs($45_1)) - Math_fround(Math_fround(Math_fround($37_1 + Math_fround($42_1 * $17_1)) + Math_fround($41_1 * $23_1)) + Math_fround($40_1 * $24_1)));
       if ($8_1 > Math_fround(0.0)) {
        break label$1
       }
       if ($6_1 < $8_1) {
        $9_1 = $5_1 + 96 | 8;
        $19_1 = $45_1 < Math_fround(0.0);
        $15_1 = 3;
        $6_1 = $8_1;
       }
       $7_1 = Math_fround(Math_fround(Math_fround($56_1 * $22_1) + Math_fround($57_1 * $21_1)) + Math_fround($14_1 * $30_1));
       $8_1 = Math_fround(Math_fround(Math_abs($7_1)) - Math_fround($42_1 + Math_fround(Math_fround(Math_fround($39_1 * $13_1) + Math_fround($38_1 * $29_1)) + Math_fround($37_1 * $17_1))));
       if ($8_1 > Math_fround(0.0)) {
        break label$1
       }
       if ($6_1 < $8_1) {
        $19_1 = $7_1 < Math_fround(0.0);
        $15_1 = 4;
        $9_1 = $5_1 + 48 | 0;
        $6_1 = $8_1;
       }
       $7_1 = Math_fround(Math_fround(Math_fround($56_1 * $31_1) + Math_fround($57_1 * $32_1)) + Math_fround($14_1 * $33_1));
       $8_1 = Math_fround(Math_fround(Math_abs($7_1)) - Math_fround($41_1 + Math_fround(Math_fround(Math_fround($39_1 * $12_1) + Math_fround($38_1 * $26_1)) + Math_fround($37_1 * $23_1))));
       if ($8_1 > Math_fround(0.0)) {
        break label$1
       }
       if ($6_1 < $8_1) {
        $9_1 = $5_1 + 48 | 4;
        $19_1 = $7_1 < Math_fround(0.0);
        $15_1 = 5;
        $6_1 = $8_1;
       }
       $7_1 = Math_fround(Math_fround(Math_fround($56_1 * $34_1) + Math_fround($57_1 * $35_1)) + Math_fround($14_1 * $25_1));
       $8_1 = Math_fround(Math_fround(Math_abs($7_1)) - Math_fround($40_1 + Math_fround(Math_fround(Math_fround($39_1 * $11_1) + Math_fround($38_1 * $36_1)) + Math_fround($37_1 * $24_1))));
       if ($8_1 > Math_fround(0.0)) {
        break label$1
       }
       if ($6_1 < $8_1) {
        $9_1 = $5_1 + 48 | 8;
        $19_1 = $7_1 < Math_fround(0.0);
        $15_1 = 6;
        $6_1 = $8_1;
       }
       $10_1 = Math_fround(Math_fround($45_1 * $52_1) - Math_fround($44_1 * $55_1));
       $33_1 = Math_fround($12_1 + Math_fround(9.999999747378752e-06));
       $34_1 = Math_fround($11_1 + Math_fround(9.999999747378752e-06));
       $35_1 = Math_fround($29_1 + Math_fround(9.999999747378752e-06));
       $25_1 = Math_fround($17_1 + Math_fround(9.999999747378752e-06));
       $8_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($40_1 * $33_1) + Math_fround(Math_fround($41_1 * $34_1) + Math_fround(Math_fround($37_1 * $35_1) + Math_fround($38_1 * $25_1)))));
       if ($8_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $21_1 = Math_fround($23_1 + Math_fround(9.999999747378752e-06));
       $30_1 = Math_fround($26_1 + Math_fround(9.999999747378752e-06));
       $31_1 = Math_fround($13_1 + Math_fround(9.999999747378752e-06));
       $14_1 = Math_fround(0.0);
       $26_1 = Math_fround($52_1 * $52_1);
       $13_1 = Math_fround(Math_fround($55_1 * $55_1) + Math_fround(0.0));
       $12_1 = Math_fround(Math_sqrt(Math_fround($26_1 + $13_1)));
       label$12 : {
        if (!($12_1 > Math_fround(1.1920928955078125e-07))) {
         $11_1 = Math_fround(0.0);
         $7_1 = Math_fround(0.0);
         break label$12;
        }
        $11_1 = Math_fround(0.0);
        $8_1 = Math_fround($8_1 / $12_1);
        $7_1 = Math_fround(0.0);
        if (!(Math_fround($8_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$12
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround($52_1 / $12_1);
        $14_1 = Math_fround(Math_fround(0.0) / $12_1);
        $9_1 = 0;
        $15_1 = 7;
        $6_1 = $8_1;
        $7_1 = Math_fround(Math_fround(-$55_1) / $12_1);
       }
       $8_1 = $7_1;
       $10_1 = Math_fround(Math_fround($45_1 * $51_1) - Math_fround($44_1 * $54));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($40_1 * $31_1) + Math_fround(Math_fround($42_1 * $34_1) + Math_fround(Math_fround($37_1 * $30_1) + Math_fround($38_1 * $21_1)))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $32_1 = Math_fround($24_1 + Math_fround(9.999999747378752e-06));
       $36_1 = Math_fround($36_1 + Math_fround(9.999999747378752e-06));
       $29_1 = Math_fround($51_1 * $51_1);
       $12_1 = Math_fround(Math_fround($54 * $54) + Math_fround(0.0));
       $17_1 = Math_fround(Math_sqrt(Math_fround($29_1 + $12_1)));
       label$14 : {
        if (!($17_1 > Math_fround(1.1920928955078125e-07))) {
         break label$14
        }
        $7_1 = Math_fround($7_1 / $17_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$14
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround($51_1 / $17_1);
        $8_1 = Math_fround(Math_fround(-$54) / $17_1);
        $14_1 = Math_fround(Math_fround(0.0) / $17_1);
        $9_1 = 0;
        $15_1 = 8;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($45_1 * $50_1) - Math_fround($44_1 * $53_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($41_1 * $31_1) + Math_fround(Math_fround($42_1 * $33_1) + Math_fround(Math_fround($37_1 * $36_1) + Math_fround($38_1 * $32_1)))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $24_1 = Math_fround($50_1 * $50_1);
       $23_1 = Math_fround(Math_fround($53_1 * $53_1) + Math_fround(0.0));
       $17_1 = Math_fround(Math_sqrt(Math_fround($24_1 + $23_1)));
       label$15 : {
        if (!($17_1 > Math_fround(1.1920928955078125e-07))) {
         break label$15
        }
        $7_1 = Math_fround($7_1 / $17_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$15
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround($50_1 / $17_1);
        $8_1 = Math_fround(Math_fround(-$53_1) / $17_1);
        $14_1 = Math_fround(Math_fround(0.0) / $17_1);
        $9_1 = 0;
        $15_1 = 9;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($43_1 * $55_1) - Math_fround($45_1 * $47_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($40_1 * $30_1) + Math_fround(Math_fround($41_1 * $36_1) + Math_fround(Math_fround($37_1 * $31_1) + Math_fround($39_1 * $25_1)))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $17_1 = Math_fround($47_1 * $47_1);
       $13_1 = Math_fround(Math_sqrt(Math_fround($17_1 + $13_1)));
       label$16 : {
        if (!($13_1 > Math_fround(1.1920928955078125e-07))) {
         break label$16
        }
        $7_1 = Math_fround($7_1 / $13_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$16
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround(Math_fround(-$47_1) / $13_1);
        $8_1 = Math_fround(Math_fround(0.0) / $13_1);
        $14_1 = Math_fround($55_1 / $13_1);
        $9_1 = 0;
        $15_1 = 10;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($43_1 * $54) - Math_fround($45_1 * $48_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($40_1 * $35_1) + Math_fround(Math_fround($42_1 * $36_1) + Math_fround(Math_fround($37_1 * $33_1) + Math_fround($39_1 * $21_1)))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $13_1 = Math_fround($48_1 * $48_1);
       $12_1 = Math_fround(Math_sqrt(Math_fround($13_1 + $12_1)));
       label$17 : {
        if (!($12_1 > Math_fround(1.1920928955078125e-07))) {
         break label$17
        }
        $7_1 = Math_fround($7_1 / $12_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$17
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround(Math_fround(-$48_1) / $12_1);
        $8_1 = Math_fround(Math_fround(0.0) / $12_1);
        $14_1 = Math_fround($54 / $12_1);
        $9_1 = 0;
        $15_1 = 11;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($43_1 * $53_1) - Math_fround($45_1 * $49_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($41_1 * $35_1) + Math_fround(Math_fround($42_1 * $30_1) + Math_fround(Math_fround($37_1 * $34_1) + Math_fround($39_1 * $32_1)))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $12_1 = Math_fround($49_1 * $49_1);
       $23_1 = Math_fround(Math_sqrt(Math_fround($12_1 + $23_1)));
       label$18 : {
        if (!($23_1 > Math_fround(1.1920928955078125e-07))) {
         break label$18
        }
        $7_1 = Math_fround($7_1 / $23_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$18
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround(Math_fround(-$49_1) / $23_1);
        $8_1 = Math_fround(Math_fround(0.0) / $23_1);
        $14_1 = Math_fround($53_1 / $23_1);
        $9_1 = 0;
        $15_1 = 12;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($44_1 * $47_1) - Math_fround($43_1 * $52_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($40_1 * $21_1) + Math_fround(Math_fround(Math_fround($38_1 * $31_1) + Math_fround($39_1 * $35_1)) + Math_fround($41_1 * $32_1))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $17_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($17_1 + $26_1) + Math_fround(0.0))));
       label$19 : {
        if (!($17_1 > Math_fround(1.1920928955078125e-07))) {
         break label$19
        }
        $7_1 = Math_fround($7_1 / $17_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$19
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround(Math_fround(0.0) / $17_1);
        $8_1 = Math_fround($47_1 / $17_1);
        $14_1 = Math_fround(Math_fround(-$52_1) / $17_1);
        $9_1 = 0;
        $15_1 = 13;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($44_1 * $48_1) - Math_fround($43_1 * $51_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($40_1 * $25_1) + Math_fround(Math_fround(Math_fround($38_1 * $33_1) + Math_fround($39_1 * $30_1)) + Math_fround($42_1 * $32_1))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $13_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($13_1 + $29_1) + Math_fround(0.0))));
       label$20 : {
        if (!($13_1 > Math_fround(1.1920928955078125e-07))) {
         break label$20
        }
        $7_1 = Math_fround($7_1 / $13_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$20
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround(Math_fround(0.0) / $13_1);
        $8_1 = Math_fround($48_1 / $13_1);
        $14_1 = Math_fround(Math_fround(-$51_1) / $13_1);
        $9_1 = 0;
        $15_1 = 14;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($44_1 * $49_1) - Math_fround($43_1 * $50_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($41_1 * $25_1) + Math_fround(Math_fround(Math_fround($38_1 * $34_1) + Math_fround($39_1 * $36_1)) + Math_fround($42_1 * $21_1))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       label$21 : {
        label$22 : {
         $12_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($12_1 + $24_1) + Math_fround(0.0))));
         if (!($12_1 > Math_fround(1.1920928955078125e-07))) {
          break label$22
         }
         $7_1 = Math_fround($7_1 / $12_1);
         if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
          break label$22
         }
         $19_1 = $10_1 < Math_fround(0.0);
         $11_1 = Math_fround(Math_fround(0.0) / $12_1);
         $8_1 = Math_fround($49_1 / $12_1);
         $14_1 = Math_fround(Math_fround(-$50_1) / $12_1);
         $15_1 = 15;
         break label$21;
        }
        if (!$15_1) {
         break label$1
        }
        if ($9_1) {
         break label$5
        }
        $7_1 = $6_1;
       }
       $22_1 = Math_fround(Math_fround(Math_fround($58_1 * $14_1) + Math_fround($59_1 * $8_1)) + Math_fround($60 * $11_1));
       HEAPF32[$5_1 + 32 >> 2] = $22_1;
       $21_1 = Math_fround(Math_fround(Math_fround($14_1 * HEAPF32[$5_1 + 112 >> 2]) + Math_fround($8_1 * HEAPF32[$5_1 + 116 >> 2])) + Math_fround($11_1 * HEAPF32[$5_1 + 120 >> 2]));
       HEAPF32[$5_1 + 36 >> 2] = $21_1;
       $11_1 = Math_fround(Math_fround(Math_fround($14_1 * HEAPF32[$5_1 + 128 >> 2]) + Math_fround($8_1 * HEAPF32[$5_1 + 132 >> 2])) + Math_fround($11_1 * HEAPF32[$5_1 + 136 >> 2]));
       break label$2;
      }
     } else {
      $4_1 = ($5_1 + 96 | 0) + $3_1 | 0;
      $27_1 = $1_1 + $3_1 | 0;
      HEAPF32[$4_1 >> 2] = HEAPF32[$27_1 >> 2];
      $20_1 = ($5_1 + 48 | 0) + $3_1 | 0;
      HEAPF32[$20_1 >> 2] = HEAPF32[$27_1 - -64 >> 2];
      $16_1 = $4_1 + 4 | 0;
      $18_1 = $27_1 + 4 | 0;
      $4_1 = HEAP32[$18_1 + 4 >> 2];
      HEAP32[$16_1 >> 2] = HEAP32[$18_1 >> 2];
      HEAP32[$16_1 + 4 >> 2] = $4_1;
      $18_1 = $27_1 + 68 | 0;
      $4_1 = HEAP32[$18_1 + 4 >> 2];
      $16_1 = $20_1 + 4 | 0;
      HEAP32[$16_1 >> 2] = HEAP32[$18_1 >> 2];
      HEAP32[$16_1 + 4 >> 2] = $4_1;
      $3_1 = $3_1 + 16 | 0;
      continue;
     }
     break;
    };
    $22_1 = HEAPF32[$9_1 >> 2];
    HEAPF32[$5_1 + 32 >> 2] = $22_1;
    $21_1 = HEAPF32[$9_1 + 16 >> 2];
    HEAPF32[$5_1 + 36 >> 2] = $21_1;
    $7_1 = $6_1;
    $11_1 = HEAPF32[$9_1 + 32 >> 2];
   }
   HEAPF32[$28_1 + 40 >> 2] = $11_1;
   if ($19_1) {
    $11_1 = Math_fround(-$11_1);
    HEAPF32[$5_1 + 40 >> 2] = $11_1;
    $21_1 = Math_fround(-$21_1);
    HEAPF32[$5_1 + 36 >> 2] = $21_1;
    $22_1 = Math_fround(-$22_1);
    HEAPF32[$5_1 + 32 >> 2] = $22_1;
   }
   if (($15_1 | 0) >= 7) {
    $0_1 = $1_1 + 48 | 0;
    $3_1 = 0;
    while (1) if (($3_1 | 0) == 12) {
     $0_1 = 0;
     $27_1 = $5_1 + 96 | 0;
     while (1) {
      if (($0_1 | 0) != 3) {
       $3_1 = $0_1 << 2;
       $6_1 = HEAPF32[$3_1 + ($5_1 + 484 | 0) >> 2];
       $3_1 = $3_1 + ($5_1 + 96 | 0) | 0;
       $6_1 = Math_fround(Math_fround(Math_fround($22_1 * HEAPF32[$3_1 >> 2]) + Math_fround($21_1 * HEAPF32[$3_1 + 16 >> 2])) + Math_fround($11_1 * HEAPF32[$3_1 + 32 >> 2])) > Math_fround(0.0) ? $6_1 : Math_fround(-$6_1);
       $3_1 = 0;
       $9_1 = $27_1;
       while (1) {
        if (($3_1 | 0) != 12) {
         $4_1 = ($5_1 + 224 | 0) + $3_1 | 0;
         HEAPF32[$4_1 >> 2] = HEAPF32[$4_1 >> 2] + Math_fround($6_1 * HEAPF32[$9_1 >> 2]);
         $9_1 = $9_1 + 16 | 0;
         $3_1 = $3_1 + 4 | 0;
         continue;
        }
        break;
       };
       $27_1 = $27_1 + 4 | 0;
       $0_1 = $0_1 + 1 | 0;
       continue;
      }
      break;
     };
     $0_1 = $1_1 + 112 | 0;
     $3_1 = 0;
     while (1) if (($3_1 | 0) == 12) {
      $1_1 = 0;
      $0_1 = $5_1 + 48 | 0;
      while (1) {
       if (($1_1 | 0) != 3) {
        $3_1 = $1_1 << 2;
        $6_1 = HEAPF32[$3_1 + ($5_1 + 472 | 0) >> 2];
        $3_1 = $3_1 + ($5_1 + 48 | 0) | 0;
        $6_1 = Math_fround(Math_fround(Math_fround($22_1 * HEAPF32[$3_1 >> 2]) + Math_fround($21_1 * HEAPF32[$3_1 + 16 >> 2])) + Math_fround($11_1 * HEAPF32[$3_1 + 32 >> 2])) > Math_fround(0.0) ? Math_fround(-$6_1) : $6_1;
        $3_1 = 0;
        $9_1 = $0_1;
        while (1) {
         if (($3_1 | 0) != 12) {
          $4_1 = ($5_1 + 320 | 0) + $3_1 | 0;
          HEAPF32[$4_1 >> 2] = HEAPF32[$4_1 >> 2] + Math_fround($6_1 * HEAPF32[$9_1 >> 2]);
          $9_1 = $9_1 + 16 | 0;
          $3_1 = $3_1 + 4 | 0;
          continue;
         }
         break;
        };
        $0_1 = $0_1 + 4 | 0;
        $1_1 = $1_1 + 1 | 0;
        continue;
       }
       break;
      };
      $1_1 = $15_1 - 7 | 0;
      $0_1 = ($1_1 | 0) / 3 | 0;
      $15_1 = ($5_1 + 96 | 0) + ($0_1 << 2) | 0;
      $3_1 = 0;
      while (1) if (($3_1 | 0) == 12) {
       $15_1 = ($5_1 + 48 | 0) + ($1_1 + Math_imul($0_1, -3) << 2) | 0;
       $3_1 = 0;
       while (1) {
        if (($3_1 | 0) != 12) {
         HEAPF32[($5_1 + 496 | 0) + $3_1 >> 2] = HEAPF32[$15_1 >> 2];
         $15_1 = $15_1 + 16 | 0;
         $3_1 = $3_1 + 4 | 0;
         continue;
        }
        break;
       };
       $14_1 = Math_fround(0.0);
       $8_1 = Math_fround(0.0);
       $26_1 = HEAPF32[$5_1 + 528 >> 2];
       $29_1 = HEAPF32[$5_1 + 496 >> 2];
       $24_1 = HEAPF32[$5_1 + 532 >> 2];
       $23_1 = HEAPF32[$5_1 + 500 >> 2];
       $10_1 = HEAPF32[$5_1 + 536 >> 2];
       $17_1 = HEAPF32[$5_1 + 504 >> 2];
       $25_1 = Math_fround(Math_fround(Math_fround($26_1 * $29_1) + Math_fround($24_1 * $23_1)) + Math_fround($10_1 * $17_1));
       $6_1 = Math_fround(Math_fround(1.0) - Math_fround($25_1 * $25_1));
       if (!($6_1 <= Math_fround(9.999999747378752e-05))) {
        $13_1 = Math_fround(Math_fround(1.0) / $6_1);
        $12_1 = Math_fround(HEAPF32[$5_1 + 320 >> 2] - HEAPF32[$5_1 + 224 >> 2]);
        $8_1 = Math_fround(HEAPF32[$5_1 + 324 >> 2] - HEAPF32[$5_1 + 228 >> 2]);
        $6_1 = Math_fround(HEAPF32[$5_1 + 328 >> 2] - HEAPF32[$5_1 + 232 >> 2]);
        $10_1 = Math_fround(Math_fround(Math_fround($12_1 * $26_1) + Math_fround($8_1 * $24_1)) + Math_fround($6_1 * $10_1));
        $6_1 = Math_fround(Math_fround(Math_fround($12_1 * $29_1) + Math_fround($8_1 * $23_1)) + Math_fround($6_1 * $17_1));
        $8_1 = Math_fround($13_1 * Math_fround(Math_fround($25_1 * $10_1) - $6_1));
        $14_1 = Math_fround($13_1 * Math_fround($10_1 - Math_fround($25_1 * $6_1)));
       }
       $3_1 = 0;
       while (1) if (($3_1 | 0) == 12) {
        $3_1 = 0;
        while (1) {
         if (($3_1 | 0) != 12) {
          $0_1 = ($5_1 + 320 | 0) + $3_1 | 0;
          HEAPF32[$0_1 >> 2] = HEAPF32[$0_1 >> 2] + Math_fround(HEAPF32[($5_1 + 496 | 0) + $3_1 >> 2] * $8_1);
          $3_1 = $3_1 + 4 | 0;
          continue;
         }
         break;
        };
        HEAP32[$5_1 + 412 >> 2] = 0;
        HEAPF32[$5_1 + 408 >> 2] = -$11_1;
        HEAPF32[$5_1 + 404 >> 2] = -$21_1;
        HEAPF32[$5_1 + 400 >> 2] = -$22_1;
        FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $5_1 + 400 | 0, $5_1 + 320 | 0, $7_1);
        break label$1;
       } else {
        $0_1 = ($5_1 + 224 | 0) + $3_1 | 0;
        HEAPF32[$0_1 >> 2] = HEAPF32[$0_1 >> 2] + Math_fround(HEAPF32[($5_1 + 528 | 0) + $3_1 >> 2] * $14_1);
        $3_1 = $3_1 + 4 | 0;
        continue;
       };
      } else {
       HEAPF32[($5_1 + 528 | 0) + $3_1 >> 2] = HEAPF32[$15_1 >> 2];
       $15_1 = $15_1 + 16 | 0;
       $3_1 = $3_1 + 4 | 0;
       continue;
      };
     } else {
      HEAPF32[($5_1 + 320 | 0) + $3_1 >> 2] = HEAPF32[$0_1 + $3_1 >> 2];
      $3_1 = $3_1 + 4 | 0;
      continue;
     };
    } else {
     HEAPF32[($5_1 + 224 | 0) + $3_1 >> 2] = HEAPF32[$0_1 + $3_1 >> 2];
     $3_1 = $3_1 + 4 | 0;
     continue;
    };
   }
   $27_1 = $1_1 + 48 | 0;
   label$51 : {
    if (($15_1 | 0) < 4) {
     $9_1 = $5_1 + 48 | 0;
     $61_1 = $5_1 + 484 | 0;
     $20_1 = $5_1 + 472 | 0;
     $4_1 = $0_1;
     $16_1 = $5_1 + 96 | 0;
     break label$51;
    }
    $11_1 = Math_fround(-$11_1);
    $21_1 = Math_fround(-$21_1);
    $22_1 = Math_fround(-$22_1);
    $9_1 = $5_1 + 96 | 0;
    $20_1 = $5_1 + 484 | 0;
    $61_1 = $5_1 + 472 | 0;
    $4_1 = $27_1;
    $27_1 = $0_1;
    $16_1 = $5_1 + 48 | 0;
   }
   $7_1 = Math_fround(Math_fround(Math_fround($22_1 * HEAPF32[$9_1 >> 2]) + Math_fround($21_1 * HEAPF32[$9_1 + 16 >> 2])) + Math_fround($11_1 * HEAPF32[$9_1 + 32 >> 2]));
   HEAPF32[$5_1 + 456 >> 2] = $7_1;
   $8_1 = Math_fround(Math_fround(Math_fround($22_1 * HEAPF32[$9_1 + 4 >> 2]) + Math_fround($21_1 * HEAPF32[$9_1 + 20 >> 2])) + Math_fround($11_1 * HEAPF32[$9_1 + 36 >> 2]));
   HEAPF32[$5_1 + 460 >> 2] = $8_1;
   $1_1 = 1;
   $6_1 = Math_fround(Math_fround(Math_fround($22_1 * HEAPF32[$9_1 + 8 >> 2]) + Math_fround($21_1 * HEAPF32[$9_1 + 24 >> 2])) + Math_fround($11_1 * HEAPF32[$9_1 + 40 >> 2]));
   HEAPF32[$5_1 + 464 >> 2] = $6_1;
   $10_1 = Math_fround(Math_abs($6_1));
   $8_1 = Math_fround(Math_abs($8_1));
   $6_1 = Math_fround(Math_abs($7_1));
   label$53 : {
    label$54 : {
     if ($8_1 > $6_1) {
      $1_1 = 0;
      if ($8_1 > $10_1) {
       $18_1 = 1;
       $0_1 = 2;
       break label$53;
      }
      break label$54;
     }
     if ($6_1 > $10_1) {
      $18_1 = 0;
      $0_1 = 2;
      break label$53;
     }
     $1_1 = 0;
    }
    $18_1 = 2;
    $0_1 = 1;
   }
   $3_1 = $18_1 << 2;
   $6_1 = HEAPF32[$3_1 + $20_1 >> 2];
   label$58 : {
    if (!(HEAPF32[$3_1 + ($5_1 + 456 | 0) >> 2] < Math_fround(0.0))) {
     $3_1 = 0;
     while (1) {
      if (($3_1 | 0) == 12) {
       break label$58
      }
      HEAPF32[($5_1 + 440 | 0) + $3_1 >> 2] = Math_fround(HEAPF32[$3_1 + $4_1 >> 2] - HEAPF32[$3_1 + $27_1 >> 2]) - Math_fround($6_1 * HEAPF32[(($3_1 | $18_1) << 2) + $9_1 >> 2]);
      $3_1 = $3_1 + 4 | 0;
      continue;
     };
    }
    $3_1 = 0;
    while (1) {
     if (($3_1 | 0) == 12) {
      break label$58
     }
     HEAPF32[($5_1 + 440 | 0) + $3_1 >> 2] = Math_fround(HEAPF32[$3_1 + $4_1 >> 2] - HEAPF32[$3_1 + $27_1 >> 2]) + Math_fround($6_1 * HEAPF32[(($3_1 | $18_1) << 2) + $9_1 >> 2]);
     $3_1 = $3_1 + 4 | 0;
     continue;
    };
   }
   $3_1 = 1;
   $19_1 = 2;
   label$62 : {
    label$63 : {
     label$64 : {
      $67_1 = (($15_1 | 0) < 4 ? -1 : -4) + $15_1 | 0;
      switch ($67_1 | 0) {
      case 0:
       break label$62;
      case 1:
       break label$64;
      default:
       break label$63;
      };
     }
     $3_1 = 0;
     break label$62;
    }
    $19_1 = 1;
    $3_1 = 0;
   }
   $28_1 = $3_1 << 2;
   $3_1 = $28_1 + $16_1 | 0;
   $32_1 = HEAPF32[$3_1 >> 2];
   $36_1 = HEAPF32[$3_1 + 16 >> 2];
   $33_1 = HEAPF32[$3_1 + 32 >> 2];
   $18_1 = $1_1 << 2;
   $3_1 = $18_1 + $9_1 | 0;
   $12_1 = HEAPF32[$3_1 >> 2];
   $10_1 = HEAPF32[$3_1 + 16 >> 2];
   $6_1 = HEAPF32[$3_1 + 32 >> 2];
   $30_1 = $160($32_1, $36_1, $33_1, $12_1, $10_1, $6_1);
   $4_1 = $0_1 << 2;
   $3_1 = $4_1 + $9_1 | 0;
   $24_1 = HEAPF32[$3_1 >> 2];
   $23_1 = HEAPF32[$3_1 + 16 >> 2];
   $8_1 = HEAPF32[$3_1 + 32 >> 2];
   $31_1 = $160($32_1, $36_1, $33_1, $24_1, $23_1, $8_1);
   $17_1 = HEAPF32[$5_1 + 440 >> 2];
   $3_1 = $19_1 << 2;
   $16_1 = $3_1 + $16_1 | 0;
   $34_1 = HEAPF32[$16_1 >> 2];
   $13_1 = HEAPF32[$5_1 + 444 >> 2];
   $35_1 = HEAPF32[$16_1 + 16 >> 2];
   $7_1 = HEAPF32[$5_1 + 448 >> 2];
   $26_1 = HEAPF32[$16_1 + 32 >> 2];
   $25_1 = Math_fround(Math_fround(Math_fround($17_1 * $34_1) + Math_fround($13_1 * $35_1)) + Math_fround($7_1 * $26_1));
   $29_1 = $160($34_1, $35_1, $26_1, $12_1, $10_1, $6_1);
   $6_1 = HEAPF32[$18_1 + $20_1 >> 2];
   $12_1 = Math_fround($29_1 * $6_1);
   $10_1 = Math_fround($25_1 + $12_1);
   $23_1 = $160($34_1, $35_1, $26_1, $24_1, $23_1, $8_1);
   $8_1 = HEAPF32[$4_1 + $20_1 >> 2];
   $24_1 = Math_fround($23_1 * $8_1);
   HEAPF32[$5_1 + 428 >> 2] = $10_1 - $24_1;
   $26_1 = Math_fround(Math_fround(Math_fround($17_1 * $32_1) + Math_fround($13_1 * $36_1)) + Math_fround($7_1 * $33_1));
   $7_1 = Math_fround($30_1 * $6_1);
   $6_1 = Math_fround($26_1 + $7_1);
   $13_1 = Math_fround($31_1 * $8_1);
   HEAPF32[$5_1 + 424 >> 2] = $6_1 - $13_1;
   HEAPF32[$5_1 + 420 >> 2] = $10_1 + $24_1;
   HEAPF32[$5_1 + 416 >> 2] = $6_1 + $13_1;
   $8_1 = Math_fround($25_1 - $12_1);
   HEAPF32[$5_1 + 412 >> 2] = $8_1 + $24_1;
   $6_1 = Math_fround($26_1 - $7_1);
   HEAPF32[$5_1 + 408 >> 2] = $6_1 + $13_1;
   HEAPF32[$5_1 + 404 >> 2] = $8_1 - $24_1;
   HEAPF32[$5_1 + 400 >> 2] = $6_1 - $13_1;
   HEAPF32[$5_1 + 392 >> 2] = HEAPF32[$28_1 + $61_1 >> 2];
   HEAPF32[$5_1 + 396 >> 2] = HEAPF32[$3_1 + $61_1 >> 2];
   $18_1 = $5_1 + 320 | 0;
   $16_1 = $5_1 + 400 | 0;
   $64_1 = 4;
   $19_1 = 4;
   $20_1 = 0;
   label$65 : {
    while (1) {
     if (($62_1 | 0) == 2) {
      break label$65
     }
     $70_1 = 1 - $62_1 | 0;
     $65_1 = $62_1 << 2;
     $66 = $65_1 + ($5_1 + 392 | 0) | 0;
     $63 = -1;
     label$67 : {
      while (1) {
       if (($63 | 0) <= 1) {
        $10_1 = Math_fround($63 | 0);
        $20_1 = 0;
        $3_1 = $16_1;
        $4_1 = $18_1;
        while (1) {
         if (($19_1 | 0) >= 1) {
          $28_1 = $3_1 + $68_1 | 0;
          $7_1 = HEAPF32[$28_1 >> 2];
          $6_1 = Math_fround($7_1 * $10_1);
          $14_1 = HEAPF32[$66 >> 2];
          if ($6_1 < $14_1) {
           HEAPF32[$4_1 >> 2] = HEAPF32[$3_1 >> 2];
           HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$3_1 + 4 >> 2];
           $20_1 = $20_1 + 1 | 0;
           if ($20_1 & 8) {
            break label$67
           }
           $7_1 = HEAPF32[$28_1 >> 2];
           $6_1 = Math_fround($7_1 * $10_1);
           $14_1 = HEAPF32[$66 >> 2];
           $4_1 = $4_1 + 8 | 0;
          }
          $28_1 = $3_1 + 8 | 0;
          $69_1 = ($19_1 | 0) > 1 ? $28_1 : $16_1;
          $8_1 = HEAPF32[$69_1 + $65_1 >> 2];
          if (($6_1 < $14_1 | 0) != (Math_fround($8_1 * $10_1) < $14_1 | 0)) {
           $46_1 = $70_1 << 2;
           $6_1 = HEAPF32[$3_1 + $64_1 >> 2];
           HEAPF32[$46_1 + $4_1 >> 2] = $6_1 + Math_fround(Math_fround(Math_fround($14_1 * $10_1) - $7_1) * Math_fround(Math_fround(HEAPF32[$46_1 + $69_1 >> 2] - $6_1) / Math_fround($8_1 - $7_1)));
           HEAPF32[$4_1 + $65_1 >> 2] = HEAPF32[$66 >> 2] * $10_1;
           $20_1 = $20_1 + 1 | 0;
           if ($20_1 & 8) {
            break label$67
           }
           $4_1 = $4_1 + 8 | 0;
          }
          $19_1 = $19_1 - 1 | 0;
          $3_1 = $28_1;
          continue;
         }
         break;
        };
        $63 = $63 + 2 | 0;
        $19_1 = $20_1;
        $16_1 = $18_1;
        $18_1 = ($16_1 | 0) == ($5_1 + 320 | 0) ? $5_1 + 224 | 0 : $5_1 + 320 | 0;
        continue;
       }
       break;
      };
      $68_1 = $68_1 + 4 | 0;
      $64_1 = $64_1 - 4 | 0;
      $62_1 = $62_1 + 1 | 0;
      continue;
     }
     break;
    };
    $16_1 = $18_1;
   }
   if (($5_1 + 320 | 0) != ($16_1 | 0)) {
    $3($5_1 + 320 | 0, $16_1, $20_1 << 3)
   }
   if (($20_1 | 0) < 1) {
    break label$1
   }
   $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround($30_1 * $23_1) - Math_fround($31_1 * $29_1)));
   $29_1 = Math_fround($6_1 * Math_fround(-$29_1));
   $24_1 = Math_fround($23_1 * $6_1);
   $23_1 = Math_fround($31_1 * $6_1);
   $17_1 = Math_fround($30_1 * $6_1);
   $13_1 = HEAPF32[($67_1 << 2) + $61_1 >> 2];
   $16_1 = 0;
   $4_1 = 0;
   while (1) {
    if (($16_1 | 0) != ($20_1 | 0)) {
     $3_1 = $16_1 << 3;
     $12_1 = HEAPF32[$3_1 + ($5_1 + 320 | 0) >> 2];
     $10_1 = Math_fround($12_1 - $26_1);
     $7_1 = HEAPF32[($5_1 + 320 | 0) + ($3_1 | 4) >> 2];
     $6_1 = Math_fround($7_1 - $25_1);
     $8_1 = Math_fround(Math_fround($29_1 * $10_1) + Math_fround($17_1 * $6_1));
     $6_1 = Math_fround(Math_fround($24_1 * $10_1) - Math_fround($23_1 * $6_1));
     $18_1 = ($5_1 + 224 | 0) + (Math_imul($4_1, 3) << 2) | 0;
     $3_1 = 0;
     while (1) {
      if (($3_1 | 0) != 12) {
       HEAPF32[$3_1 + $18_1 >> 2] = Math_fround(HEAPF32[($5_1 + 440 | 0) + $3_1 >> 2] + Math_fround($6_1 * HEAPF32[(($1_1 | $3_1) << 2) + $9_1 >> 2])) + Math_fround($8_1 * HEAPF32[(($0_1 | $3_1) << 2) + $9_1 >> 2]);
       $3_1 = $3_1 + 4 | 0;
       continue;
      }
      break;
     };
     $6_1 = Math_fround($13_1 - Math_fround(Math_fround(Math_fround($22_1 * HEAPF32[$18_1 >> 2]) + Math_fround($21_1 * HEAPF32[$18_1 + 4 >> 2])) + Math_fround($11_1 * HEAPF32[$18_1 + 8 >> 2])));
     HEAPF32[($5_1 + 192 | 0) + ($4_1 << 2) >> 2] = $6_1;
     if ($6_1 >= Math_fround(0.0)) {
      $3_1 = $4_1 << 3;
      HEAPF32[$3_1 + ($5_1 + 320 | 0) >> 2] = $12_1;
      HEAPF32[($5_1 + 320 | 0) + ($3_1 | 4) >> 2] = $7_1;
      $4_1 = $4_1 + 1 | 0;
     }
     $16_1 = $16_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($4_1 | 0) < 1) {
    break label$1
   }
   label$80 : {
    $0_1 = ($4_1 | 0) < 4 ? $4_1 : 4;
    $28_1 = ($0_1 | 0) > 1 ? $0_1 : 1;
    if (($28_1 | 0) >= ($4_1 | 0)) {
     if (($15_1 | 0) < 4) {
      break label$80
     }
     $15_1 = $5_1 + 224 | 0;
     $9_1 = 0;
     while (1) {
      if (($4_1 | 0) == ($9_1 | 0)) {
       break label$1
      }
      $6_1 = HEAPF32[($5_1 + 192 | 0) + ($9_1 << 2) >> 2];
      $3_1 = 0;
      while (1) {
       if (($3_1 | 0) != 12) {
        HEAPF32[($5_1 + 528 | 0) + $3_1 >> 2] = Math_fround(HEAPF32[$3_1 + $15_1 >> 2] + HEAPF32[$3_1 + $27_1 >> 2]) - Math_fround(HEAPF32[($5_1 + 32 | 0) + $3_1 >> 2] * $6_1);
        $3_1 = $3_1 + 4 | 0;
        continue;
       }
       break;
      };
      HEAP32[$5_1 + 508 >> 2] = 0;
      HEAPF32[$5_1 + 504 >> 2] = -HEAPF32[$5_1 + 40 >> 2];
      HEAPF32[$5_1 + 500 >> 2] = -HEAPF32[$5_1 + 36 >> 2];
      HEAPF32[$5_1 + 496 >> 2] = -HEAPF32[$5_1 + 32 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $5_1 + 496 | 0, $5_1 + 528 | 0, Math_fround(-$6_1));
      $15_1 = $15_1 + 12 | 0;
      $9_1 = $9_1 + 1 | 0;
      continue;
     };
    }
    $9_1 = $5_1 + 192 | 4;
    $20_1 = 0;
    $14_1 = HEAPF32[$5_1 + 192 >> 2];
    $3_1 = 1;
    while (1) {
     if (($3_1 | 0) != ($4_1 | 0)) {
      $6_1 = HEAPF32[$9_1 >> 2];
      $0_1 = $6_1 > $14_1;
      $14_1 = $0_1 ? $6_1 : $14_1;
      $20_1 = $0_1 ? $3_1 : $20_1;
      $9_1 = $9_1 + 4 | 0;
      $3_1 = $3_1 + 1 | 0;
      continue;
     }
     break;
    };
    label$87 : {
     label$88 : {
      label$89 : {
       label$90 : {
        $9_1 = $4_1 - 1 | 0;
        switch ($9_1 | 0) {
        case 1:
         break label$89;
        case 0:
         break label$90;
        default:
         break label$88;
        };
       }
       $14_1 = HEAPF32[$5_1 + 324 >> 2];
       $6_1 = HEAPF32[$5_1 + 320 >> 2];
       break label$87;
      }
      $14_1 = Math_fround(Math_fround(HEAPF32[$5_1 + 324 >> 2] + HEAPF32[$5_1 + 332 >> 2]) * Math_fround(.5));
      $6_1 = Math_fround(Math_fround(HEAPF32[$5_1 + 320 >> 2] + HEAPF32[$5_1 + 328 >> 2]) * Math_fround(.5));
      break label$87;
     }
     $8_1 = Math_fround(0.0);
     $3_1 = $5_1 + 320 | 0;
     $6_1 = Math_fround(0.0);
     $11_1 = Math_fround(0.0);
     while (1) {
      if ($9_1) {
       $13_1 = $11_1;
       $7_1 = HEAPF32[$3_1 + 12 >> 2];
       $11_1 = HEAPF32[$3_1 + 4 >> 2];
       $14_1 = Math_fround($7_1 + $11_1);
       $10_1 = HEAPF32[$3_1 >> 2];
       $12_1 = Math_fround($10_1 * $7_1);
       $3_1 = $3_1 + 8 | 0;
       $7_1 = HEAPF32[$3_1 >> 2];
       $12_1 = Math_fround($12_1 - Math_fround($7_1 * $11_1));
       $11_1 = Math_fround($13_1 + Math_fround($14_1 * $12_1));
       $8_1 = Math_fround($8_1 + $12_1);
       $6_1 = Math_fround($6_1 + Math_fround(Math_fround($10_1 + $7_1) * $12_1));
       $9_1 = $9_1 - 1 | 0;
       continue;
      }
      break;
     };
     $22_1 = Math_fround(999999984306749440.0);
     $0_1 = ($5_1 + 320 | 0) + ($4_1 << 3) | 0;
     $13_1 = HEAPF32[$0_1 - 8 >> 2];
     $12_1 = HEAPF32[$5_1 + 324 >> 2];
     $10_1 = HEAPF32[$5_1 + 320 >> 2];
     $7_1 = HEAPF32[$0_1 - 4 >> 2];
     $17_1 = Math_fround(Math_fround($13_1 * $12_1) - Math_fround($10_1 * $7_1));
     $8_1 = Math_fround($8_1 + $17_1);
     if (Math_fround(Math_abs($8_1)) > Math_fround(1.1920928955078125e-07)) {
      $22_1 = Math_fround(Math_fround(1.0) / Math_fround($8_1 * Math_fround(3.0)))
     }
     $14_1 = Math_fround(Math_fround($11_1 + Math_fround(Math_fround($12_1 + $7_1) * $17_1)) * $22_1);
     $6_1 = Math_fround(Math_fround($6_1 + Math_fround(Math_fround($13_1 + $10_1) * $17_1)) * $22_1);
    }
    $19_1 = $5_1 + 528 | 0;
    $3_1 = $5_1 + 320 | 0;
    $9_1 = $4_1;
    while (1) {
     if ($9_1) {
      $8_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] - $14_1);
      $11_1 = Math_fround(HEAPF32[$3_1 >> 2] - $6_1);
      $7_1 = Math_fround($8_1 + $11_1);
      label$96 : {
       if (!($11_1 == $11_1 & $8_1 == $8_1)) {
        break label$96
       }
       $18_1 = (wasm2js_scratch_store_f32($11_1), wasm2js_scratch_load_i32(2));
       if (($18_1 | 0) == 1065353216) {
        $7_1 = $110($8_1);
        break label$96;
       }
       $0_1 = $18_1 >>> 30 & 2;
       $1_1 = (wasm2js_scratch_store_f32($8_1), wasm2js_scratch_load_i32(2));
       $46_1 = $0_1 | $1_1 >>> 31;
       label$98 : {
        label$99 : {
         label$100 : {
          label$101 : {
           $16_1 = $1_1 & 2147483647;
           if (!$16_1) {
            label$103 : {
             switch ($46_1 - 2 | 0) {
             case 0:
              break label$101;
             case 1:
              break label$103;
             default:
              break label$100;
             };
            }
            $7_1 = Math_fround(-3.1415927410125732);
            break label$96;
           }
           $18_1 = $18_1 & 2147483647;
           if (($18_1 | 0) != 2139095040) {
            if (!$18_1 | !($16_1 >>> 0 <= $18_1 + 218103808 >>> 0 ? ($16_1 | 0) != 2139095040 : 0)) {
             break label$98
            }
            label$105 : {
             if ($18_1 >>> 0 > $16_1 + 218103808 >>> 0) {
              $7_1 = Math_fround(0.0);
              if ($0_1) {
               break label$105
              }
             }
             $7_1 = $110(Math_fround(Math_abs(Math_fround($8_1 / $11_1))));
            }
            $8_1 = $7_1;
            if ($46_1 >>> 0 <= 2) {
             label$108 : {
              switch ($46_1 - 1 | 0) {
              case 0:
               $7_1 = Math_fround(-$8_1);
               break label$96;
              case 1:
               break label$108;
              default:
               break label$100;
              };
             }
             $7_1 = Math_fround(Math_fround(3.1415927410125732) - Math_fround($8_1 + Math_fround(8.742277657347586e-08)));
             break label$96;
            }
            $7_1 = Math_fround(Math_fround($8_1 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732));
            break label$96;
           }
           if (($16_1 | 0) == 2139095040) {
            break label$99
           }
           $7_1 = HEAPF32[($46_1 << 2) + 6256 >> 2];
           break label$96;
          }
          $8_1 = Math_fround(3.1415927410125732);
         }
         $7_1 = $8_1;
         break label$96;
        }
        $7_1 = HEAPF32[($46_1 << 2) + 6240 >> 2];
        break label$96;
       }
       $7_1 = ($1_1 | 0) < 0 ? Math_fround(-1.5707963705062866) : Math_fround(1.5707963705062866);
      }
      HEAPF32[$19_1 >> 2] = $7_1;
      $9_1 = $9_1 - 1 | 0;
      $3_1 = $3_1 + 8 | 0;
      $19_1 = $19_1 + 4 | 0;
      continue;
     }
     break;
    };
    $9_1 = $5_1 + 496 | 0;
    $3_1 = $4_1;
    while (1) {
     if ($3_1) {
      HEAP32[$9_1 >> 2] = 1;
      $3_1 = $3_1 - 1 | 0;
      $9_1 = $9_1 + 4 | 0;
      continue;
     }
     break;
    };
    HEAP32[$5_1 + 160 >> 2] = $20_1;
    $0_1 = $20_1 << 2;
    HEAP32[$0_1 + ($5_1 + 496 | 0) >> 2] = 0;
    $11_1 = Math_fround(Math_fround(6.2831854820251465) / Math_fround($28_1 | 0));
    $18_1 = $0_1 + ($5_1 + 528 | 0) | 0;
    $1_1 = $5_1 + 160 | 0;
    $16_1 = 1;
    while (1) {
     if (($16_1 | 0) != ($28_1 | 0)) {
      $1_1 = $1_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $20_1;
      $6_1 = Math_fround(Math_fround($11_1 * Math_fround($16_1 | 0)) + HEAPF32[$18_1 >> 2]);
      $7_1 = $6_1 > Math_fround(3.1415927410125732) ? Math_fround($6_1 + Math_fround(-6.2831854820251465)) : $6_1;
      $8_1 = Math_fround(1.0e9);
      $3_1 = 0;
      $19_1 = $5_1 + 528 | 0;
      $9_1 = $5_1 + 496 | 0;
      $0_1 = $20_1;
      while (1) {
       if (($3_1 | 0) != ($4_1 | 0)) {
        label$116 : {
         if (!HEAP32[$9_1 >> 2]) {
          break label$116
         }
         $6_1 = Math_fround(Math_abs(Math_fround(HEAPF32[$19_1 >> 2] - $7_1)));
         $6_1 = $6_1 > Math_fround(3.1415927410125732) ? Math_fround(Math_fround(6.2831854820251465) - $6_1) : $6_1;
         if (!($6_1 < $8_1)) {
          break label$116
         }
         HEAP32[$1_1 >> 2] = $3_1;
         $0_1 = $3_1;
         $8_1 = $6_1;
        }
        $9_1 = $9_1 + 4 | 0;
        $19_1 = $19_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        continue;
       }
       break;
      };
      HEAP32[($5_1 + 496 | 0) + ($0_1 << 2) >> 2] = 0;
      $16_1 = $16_1 + 1 | 0;
      continue;
     }
     break;
    };
    $1_1 = ($15_1 | 0) > 3;
    $9_1 = 0;
    while (1) {
     if (($9_1 | 0) == ($28_1 | 0)) {
      break label$1
     }
     $4_1 = HEAP32[($5_1 + 160 | 0) + ($9_1 << 2) >> 2];
     $0_1 = ($5_1 + 224 | 0) + Math_imul($4_1, 12) | 0;
     $3_1 = 0;
     while (1) {
      if (($3_1 | 0) != 12) {
       HEAPF32[($5_1 + 528 | 0) + $3_1 >> 2] = HEAPF32[$0_1 + $3_1 >> 2] + HEAPF32[$3_1 + $27_1 >> 2];
       $3_1 = $3_1 + 4 | 0;
       continue;
      }
      break;
     };
     label$120 : {
      if (!$1_1) {
       HEAP32[$5_1 + 508 >> 2] = 0;
       HEAPF32[$5_1 + 504 >> 2] = -HEAPF32[$5_1 + 40 >> 2];
       HEAPF32[$5_1 + 500 >> 2] = -HEAPF32[$5_1 + 36 >> 2];
       HEAPF32[$5_1 + 496 >> 2] = -HEAPF32[$5_1 + 32 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $5_1 + 496 | 0, $5_1 + 528 | 0, Math_fround(-HEAPF32[($5_1 + 192 | 0) + ($4_1 << 2) >> 2]));
       break label$120;
      }
      HEAP32[$5_1 + 508 >> 2] = 0;
      $7_1 = HEAPF32[$5_1 + 40 >> 2];
      HEAPF32[$5_1 + 504 >> 2] = -$7_1;
      $8_1 = HEAPF32[$5_1 + 36 >> 2];
      HEAPF32[$5_1 + 500 >> 2] = -$8_1;
      $6_1 = HEAPF32[$5_1 + 32 >> 2];
      HEAPF32[$5_1 + 496 >> 2] = -$6_1;
      HEAP32[$5_1 + 156 >> 2] = 0;
      $11_1 = $7_1;
      $7_1 = HEAPF32[($5_1 + 192 | 0) + ($4_1 << 2) >> 2];
      HEAPF32[$5_1 + 152 >> 2] = HEAPF32[$5_1 + 536 >> 2] - Math_fround($11_1 * $7_1);
      HEAPF32[$5_1 + 148 >> 2] = HEAPF32[$5_1 + 532 >> 2] - Math_fround($8_1 * $7_1);
      HEAPF32[$5_1 + 144 >> 2] = HEAPF32[$5_1 + 528 >> 2] - Math_fround($6_1 * $7_1);
      FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $5_1 + 496 | 0, $5_1 + 144 | 0, Math_fround(-$7_1));
     }
     $9_1 = $9_1 + 1 | 0;
     continue;
    };
   }
   $15_1 = $5_1 + 224 | 0;
   $9_1 = 0;
   while (1) {
    if (($4_1 | 0) == ($9_1 | 0)) {
     break label$1
    }
    $3_1 = 0;
    while (1) {
     if (($3_1 | 0) != 12) {
      HEAPF32[($5_1 + 528 | 0) + $3_1 >> 2] = HEAPF32[$3_1 + $15_1 >> 2] + HEAPF32[$3_1 + $27_1 >> 2];
      $3_1 = $3_1 + 4 | 0;
      continue;
     }
     break;
    };
    HEAP32[$5_1 + 508 >> 2] = 0;
    HEAPF32[$5_1 + 504 >> 2] = -HEAPF32[$5_1 + 40 >> 2];
    HEAPF32[$5_1 + 500 >> 2] = -HEAPF32[$5_1 + 36 >> 2];
    HEAPF32[$5_1 + 496 >> 2] = -HEAPF32[$5_1 + 32 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $5_1 + 496 | 0, $5_1 + 528 | 0, Math_fround(-HEAPF32[($5_1 + 192 | 0) + ($9_1 << 2) >> 2]));
    $15_1 = $15_1 + 12 | 0;
    $9_1 = $9_1 + 1 | 0;
    continue;
   };
  }
  global$0 = $5_1 + 560 | 0;
 }
 
 function $535($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 15844;
  label$1 : {
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  return $0_1 | 0;
 }
 
 function $536($0_1) {
  $0_1 = $0_1 | 0;
  $33($535($0_1));
 }
 
 function $537($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $6_1 = global$0 - 160 | 0;
  global$0 = $6_1;
  $9_1 = HEAP32[$0_1 + 12 >> 2];
  label$1 : {
   if (!$9_1) {
    break label$1
   }
   HEAP32[$4_1 + 4 >> 2] = $9_1;
   $9_1 = HEAP32[$1_1 + 4 >> 2];
   $10_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = HEAP32[$1_1 + 12 >> 2];
   $7_1 = $1_1 + 8 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 32 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 24 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 48 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 40 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 - -64 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 56 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 80 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   HEAP32[$6_1 + 152 >> 2] = 1566444395;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 + 24 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 28 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 20 >> 2];
   HEAP32[$6_1 + 40 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$6_1 + 44 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 36 >> 2];
   HEAP32[$6_1 + 56 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$6_1 + 60 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$6_1 + 72 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$6_1 + 76 >> 2] = $5_1;
   $1_1 = HEAP32[$2_1 + 12 >> 2];
   $2_1 = $1_1 + 8 | 0;
   $7_1 = HEAP32[$2_1 + 4 >> 2];
   $5_1 = $6_1 + 96 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$1_1 + 20 >> 2];
   $2_1 = $6_1 + 104 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 24 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $6_1 + 112 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$1_1 + 36 >> 2];
   $2_1 = $6_1 + 120 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 40 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $6_1 + 128 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$1_1 + 52 >> 2];
   $2_1 = $6_1 + 136 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 56 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $6_1 + 144 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 + 88 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 92 >> 2] = $2_1;
   HEAP32[$6_1 + 16 >> 2] = $10_1;
   HEAP32[$6_1 + 12 >> 2] = $9_1;
   HEAP32[$6_1 + 8 >> 2] = 15792;
   $534($6_1 + 8 | 0, $6_1 + 24 | 0, $4_1, HEAP32[$3_1 + 20 >> 2], 0);
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $451($4_1);
  }
  global$0 = $6_1 + 160 | 0;
 }
 
 function $538($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 15916;
  label$1 : {
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  return $0_1 | 0;
 }
 
 function $539($0_1) {
  $0_1 = $0_1 | 0;
  $33($538($0_1));
 }
 
 function $540($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = Math_fround(0), $48_1 = 0;
  $3_1 = global$0 - 656 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!HEAP32[$0_1 + 12 >> 2]) {
    break label$1
   }
   $7_1 = HEAPU8[$0_1 + 16 | 0];
   $16_1 = $7_1 ? $2_1 : $1_1;
   $12_1 = HEAP32[$16_1 + 4 >> 2];
   $13_1 = $7_1 ? $1_1 : $2_1;
   $23_1 = HEAP32[$13_1 + 4 >> 2];
   $463($3_1 + 528 | 0, HEAP32[$16_1 + 12 >> 2]);
   $464($3_1 + 592 | 0, $3_1 + 528 | 0, HEAP32[$13_1 + 12 >> 2]);
   $17_1 = $3_1 + 600 | 0;
   $9_1 = $17_1;
   $7_1 = HEAP32[$9_1 + 4 >> 2];
   $10_1 = $3_1 + 232 | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $7_1;
   $8_1 = $3_1 + 616 | 0;
   $9_1 = $8_1;
   $7_1 = HEAP32[$9_1 + 4 >> 2];
   $10_1 = $3_1 + 248 | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $7_1;
   $6_1 = $3_1 + 632 | 0;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $10_1 = $3_1 + 264 | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $7_1;
   $5_1 = $3_1 + 648 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $10_1 = $3_1 + 280 | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 596 >> 2];
   HEAP32[$3_1 + 224 >> 2] = HEAP32[$3_1 + 592 >> 2];
   HEAP32[$3_1 + 228 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 612 >> 2];
   HEAP32[$3_1 + 240 >> 2] = HEAP32[$3_1 + 608 >> 2];
   HEAP32[$3_1 + 244 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 628 >> 2];
   HEAP32[$3_1 + 256 >> 2] = HEAP32[$3_1 + 624 >> 2];
   HEAP32[$3_1 + 260 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 644 >> 2];
   HEAP32[$3_1 + 272 >> 2] = HEAP32[$3_1 + 640 >> 2];
   HEAP32[$3_1 + 276 >> 2] = $7_1;
   $463($3_1 + 528 | 0, HEAP32[$13_1 + 12 >> 2]);
   $464($3_1 + 592 | 0, $3_1 + 528 | 0, HEAP32[$16_1 + 12 >> 2]);
   $7_1 = HEAP32[$17_1 + 4 >> 2];
   $9_1 = $3_1 + 168 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$17_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $7_1;
   $7_1 = HEAP32[$8_1 + 4 >> 2];
   $9_1 = $3_1 + 184 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $7_1;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $9_1 = $3_1 + 200 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $7_1;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $9_1 = $3_1 + 216 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 596 >> 2];
   HEAP32[$3_1 + 160 >> 2] = HEAP32[$3_1 + 592 >> 2];
   HEAP32[$3_1 + 164 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 612 >> 2];
   HEAP32[$3_1 + 176 >> 2] = HEAP32[$3_1 + 608 >> 2];
   HEAP32[$3_1 + 180 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 628 >> 2];
   HEAP32[$3_1 + 192 >> 2] = HEAP32[$3_1 + 624 >> 2];
   HEAP32[$3_1 + 196 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 644 >> 2];
   HEAP32[$3_1 + 208 >> 2] = HEAP32[$3_1 + 640 >> 2];
   HEAP32[$3_1 + 212 >> 2] = $7_1;
   $5_1 = $23_1 + 52 | 0;
   $10_1 = $23_1 + 56 | 0;
   $9_1 = $23_1 + 60 | 0;
   $431($3_1 + 592 | 0, $3_1 + 224 | 0, Math_fround(-HEAPF32[$5_1 >> 2]), Math_fround(-HEAPF32[$10_1 >> 2]), Math_fround(-HEAPF32[$9_1 >> 2]));
   FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 64 >> 2]]($3_1 + 144 | 0, $12_1, $3_1 + 592 | 0);
   $146($3_1 + 128 | 0, $3_1 + 160 | 0, HEAPF32[$3_1 + 144 >> 2], HEAPF32[$3_1 + 148 >> 2], HEAPF32[$3_1 + 152 >> 2]);
   $18_1 = HEAPF32[$5_1 >> 2];
   $19_1 = HEAPF32[$3_1 + 128 >> 2];
   $20_1 = HEAPF32[$10_1 >> 2];
   $21_1 = HEAPF32[$3_1 + 132 >> 2];
   $22_1 = HEAPF32[$9_1 >> 2];
   $14_1 = HEAPF32[$3_1 + 136 >> 2];
   $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($18_1 * $19_1) + Math_fround($20_1 * $21_1)) + Math_fround($22_1 * $14_1)) - HEAPF32[$23_1 + 68 >> 2]);
   $146($3_1 + 112 | 0, HEAP32[$13_1 + 12 >> 2], Math_fround($19_1 - Math_fround($18_1 * $11_1)), Math_fround($21_1 - Math_fround($20_1 * $11_1)), Math_fround($14_1 - Math_fround($22_1 * $11_1)));
   $7_1 = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $7_1;
   if ($11_1 < Math_fround(HEAPF32[$7_1 + 832 >> 2] + HEAPF32[$4_1 + 32 >> 2])) {
    $431($3_1 + 592 | 0, HEAP32[$13_1 + 12 >> 2], HEAPF32[$23_1 + 52 >> 2], HEAPF32[$10_1 >> 2], HEAPF32[$9_1 >> 2]);
    $9_1 = $3_1 + 120 | 0;
    $7_1 = HEAP32[$9_1 + 4 >> 2];
    $10_1 = $3_1 + 536 | 0;
    HEAP32[$10_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $7_1;
    $7_1 = HEAP32[$3_1 + 116 >> 2];
    HEAP32[$3_1 + 528 >> 2] = HEAP32[$3_1 + 112 >> 2];
    HEAP32[$3_1 + 532 >> 2] = $7_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $3_1 + 592 | 0, $3_1 + 528 | 0, $11_1);
   }
   label$3 : {
    if (HEAP32[$12_1 + 4 >> 2] > 6 | HEAP32[HEAP32[$4_1 + 4 >> 2] + 828 >> 2] >= HEAP32[$0_1 + 24 >> 2]) {
     break label$3
    }
    $281($5_1, $3_1 + 96 | 0, $3_1 + 80 | 0);
    $14_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 16 >> 2]]($12_1));
    $452($3_1 - -64 | 0, HEAPF32[$3_1 + 96 >> 2], HEAPF32[$3_1 + 100 >> 2], HEAPF32[$3_1 + 104 >> 2], Math_fround(Math_min(Math_fround(Math_fround(.019999999552965164) / $14_1), Math_fround(.39269909262657166))));
    $24_1 = $3_1 + 512 | 0;
    $10_1 = $3_1 + 448 | 0;
    $25_1 = $3_1 + 496 | 0;
    $9_1 = $3_1 + 432 | 0;
    $26_1 = $3_1 + 480 | 0;
    $7_1 = $3_1 + 416 | 0;
    $29_1 = $3_1 + 576 | 0;
    $30_1 = $3_1 + 560 | 0;
    $31_1 = $3_1 + 544 | 0;
    $32_1 = $3_1 + 640 | 0;
    $33_1 = $3_1 + 624 | 0;
    $34_1 = $3_1 + 608 | 0;
    while (1) {
     $5_1 = HEAP32[$0_1 + 20 >> 2];
     if (($5_1 | 0) <= ($35_1 | 0)) {
      break label$3
     }
     $452($3_1 + 48 | 0, HEAPF32[$23_1 + 52 >> 2], HEAPF32[$23_1 + 56 >> 2], HEAPF32[$23_1 + 60 >> 2], Math_fround(Math_fround(Math_fround(6.2831854820251465) / Math_fround($5_1 | 0)) * Math_fround($35_1 | 0)));
     HEAPF32[$3_1 + 8 >> 2] = -HEAPF32[$3_1 + 56 >> 2];
     HEAPF32[$3_1 + 4 >> 2] = -HEAPF32[$3_1 + 52 >> 2];
     HEAPF32[$3_1 >> 2] = -HEAPF32[$3_1 + 48 >> 2];
     HEAPF32[$3_1 + 12 >> 2] = HEAPF32[$3_1 + 60 >> 2];
     $453($3_1 + 16 | 0, $3_1, $3_1 - -64 | 0);
     $453($3_1 + 32 | 0, $3_1 + 16 | 0, $3_1 + 48 | 0);
     $6_1 = HEAPU8[$0_1 + 16 | 0];
     $5_1 = $6_1 ? $2_1 : $1_1;
     $48_1 = HEAP32[$5_1 + 4 >> 2];
     $27_1 = $6_1 ? $1_1 : $2_1;
     $28_1 = HEAP32[$27_1 + 4 >> 2];
     $15_1 = HEAP32[$5_1 + 12 >> 2];
     $5_1 = $15_1;
     $12_1 = HEAP32[$5_1 >> 2];
     $13_1 = HEAP32[$5_1 + 4 >> 2];
     $5_1 = $5_1 + 8 | 0;
     $16_1 = HEAP32[$5_1 >> 2];
     $17_1 = HEAP32[$5_1 + 4 >> 2];
     $6_1 = $15_1 + 24 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $34_1 + 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$15_1 + 20 >> 2];
     HEAP32[$34_1 >> 2] = HEAP32[$15_1 + 16 >> 2];
     HEAP32[$34_1 + 4 >> 2] = $5_1;
     $36_1 = $3_1 + 600 | 0;
     $5_1 = $36_1;
     HEAP32[$5_1 >> 2] = $16_1;
     HEAP32[$5_1 + 4 >> 2] = $17_1;
     $6_1 = $15_1 + 40 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $33_1 + 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$15_1 + 36 >> 2];
     HEAP32[$33_1 >> 2] = HEAP32[$15_1 + 32 >> 2];
     HEAP32[$33_1 + 4 >> 2] = $5_1;
     $6_1 = $15_1 + 56 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $32_1 + 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$15_1 + 52 >> 2];
     HEAP32[$32_1 >> 2] = HEAP32[$15_1 + 48 >> 2];
     HEAP32[$32_1 + 4 >> 2] = $5_1;
     HEAP32[$3_1 + 592 >> 2] = $12_1;
     HEAP32[$3_1 + 596 >> 2] = $13_1;
     $463($3_1 + 400 | 0, HEAP32[$27_1 + 12 >> 2]);
     $464($3_1 + 464 | 0, $3_1 + 400 | 0, $3_1 + 592 | 0);
     $12_1 = $3_1 + 472 | 0;
     $6_1 = $12_1;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $3_1 + 536 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$26_1 + 4 >> 2];
     HEAP32[$31_1 >> 2] = HEAP32[$26_1 >> 2];
     HEAP32[$31_1 + 4 >> 2] = $5_1;
     $13_1 = $26_1 + 8 | 0;
     $6_1 = $13_1;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $31_1 + 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$25_1 + 4 >> 2];
     HEAP32[$30_1 >> 2] = HEAP32[$25_1 >> 2];
     HEAP32[$30_1 + 4 >> 2] = $5_1;
     $16_1 = $25_1 + 8 | 0;
     $6_1 = $16_1;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $30_1 + 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$24_1 + 4 >> 2];
     HEAP32[$29_1 >> 2] = HEAP32[$24_1 >> 2];
     HEAP32[$29_1 + 4 >> 2] = $5_1;
     $17_1 = $24_1 + 8 | 0;
     $6_1 = $17_1;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $29_1 + 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$3_1 + 468 >> 2];
     HEAP32[$3_1 + 528 >> 2] = HEAP32[$3_1 + 464 >> 2];
     HEAP32[$3_1 + 532 >> 2] = $5_1;
     $454($3_1 + 464 | 0, $3_1 + 32 | 0);
     $37_1 = HEAPF32[$3_1 + 616 >> 2];
     $38_1 = HEAPF32[$3_1 + 608 >> 2];
     $39_1 = HEAPF32[$3_1 + 612 >> 2];
     $40_1 = HEAPF32[$3_1 + 496 >> 2];
     $41_1 = HEAPF32[$3_1 + 464 >> 2];
     $42_1 = HEAPF32[$3_1 + 480 >> 2];
     $43_1 = HEAPF32[$3_1 + 500 >> 2];
     $44_1 = HEAPF32[$3_1 + 468 >> 2];
     $45_1 = HEAPF32[$3_1 + 484 >> 2];
     $46_1 = HEAPF32[$3_1 + 632 >> 2];
     $47_1 = HEAPF32[$3_1 + 624 >> 2];
     $11_1 = HEAPF32[$3_1 + 628 >> 2];
     $18_1 = HEAPF32[$3_1 + 472 >> 2];
     $19_1 = HEAPF32[$3_1 + 592 >> 2];
     $20_1 = HEAPF32[$3_1 + 488 >> 2];
     $21_1 = HEAPF32[$3_1 + 596 >> 2];
     $22_1 = HEAPF32[$3_1 + 504 >> 2];
     $14_1 = HEAPF32[$36_1 >> 2];
     HEAPF32[$36_1 >> 2] = Math_fround(Math_fround($18_1 * $19_1) + Math_fround($20_1 * $21_1)) + Math_fround($22_1 * $14_1);
     HEAP32[$3_1 + 636 >> 2] = 0;
     HEAP32[$3_1 + 620 >> 2] = 0;
     HEAP32[$3_1 + 604 >> 2] = 0;
     HEAPF32[$3_1 + 632 >> 2] = Math_fround(Math_fround($18_1 * $47_1) + Math_fround($20_1 * $11_1)) + Math_fround($22_1 * $46_1);
     HEAPF32[$3_1 + 628 >> 2] = Math_fround(Math_fround($44_1 * $47_1) + Math_fround($45_1 * $11_1)) + Math_fround($43_1 * $46_1);
     HEAPF32[$3_1 + 624 >> 2] = Math_fround(Math_fround($41_1 * $47_1) + Math_fround($42_1 * $11_1)) + Math_fround($40_1 * $46_1);
     HEAPF32[$3_1 + 616 >> 2] = Math_fround(Math_fround($18_1 * $38_1) + Math_fround($20_1 * $39_1)) + Math_fround($22_1 * $37_1);
     HEAPF32[$3_1 + 612 >> 2] = Math_fround(Math_fround($44_1 * $38_1) + Math_fround($45_1 * $39_1)) + Math_fround($43_1 * $37_1);
     HEAPF32[$3_1 + 608 >> 2] = Math_fround(Math_fround($41_1 * $38_1) + Math_fround($42_1 * $39_1)) + Math_fround($40_1 * $37_1);
     HEAPF32[$3_1 + 596 >> 2] = Math_fround(Math_fround($44_1 * $19_1) + Math_fround($45_1 * $21_1)) + Math_fround($43_1 * $14_1);
     HEAPF32[$3_1 + 592 >> 2] = Math_fround(Math_fround($41_1 * $19_1) + Math_fround($42_1 * $21_1)) + Math_fround($40_1 * $14_1);
     $463($3_1 + 336 | 0, $3_1 + 592 | 0);
     $464($3_1 + 400 | 0, $3_1 + 336 | 0, HEAP32[$27_1 + 12 >> 2]);
     $6_1 = $3_1 + 408 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$12_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$26_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$26_1 + 4 >> 2] = $5_1;
     $6_1 = $7_1 + 8 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$13_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$13_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$9_1 + 4 >> 2];
     HEAP32[$25_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$25_1 + 4 >> 2] = $5_1;
     $6_1 = $9_1 + 8 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$16_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$16_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$10_1 + 4 >> 2];
     HEAP32[$24_1 >> 2] = HEAP32[$10_1 >> 2];
     HEAP32[$24_1 + 4 >> 2] = $5_1;
     $6_1 = $10_1 + 8 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$17_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$17_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$3_1 + 404 >> 2];
     HEAP32[$3_1 + 464 >> 2] = HEAP32[$3_1 + 400 >> 2];
     HEAP32[$3_1 + 468 >> 2] = $5_1;
     $5_1 = $28_1 + 52 | 0;
     $8_1 = $28_1 + 56 | 0;
     $6_1 = $28_1 + 60 | 0;
     $431($3_1 + 336 | 0, $3_1 + 464 | 0, Math_fround(-HEAPF32[$5_1 >> 2]), Math_fround(-HEAPF32[$8_1 >> 2]), Math_fround(-HEAPF32[$6_1 >> 2]));
     FUNCTION_TABLE[HEAP32[HEAP32[$48_1 >> 2] + 64 >> 2]]($3_1 + 400 | 0, $48_1, $3_1 + 336 | 0);
     $146($3_1 + 336 | 0, $3_1 + 528 | 0, HEAPF32[$3_1 + 400 >> 2], HEAPF32[$3_1 + 404 >> 2], HEAPF32[$3_1 + 408 >> 2]);
     $18_1 = HEAPF32[$5_1 >> 2];
     $19_1 = HEAPF32[$3_1 + 336 >> 2];
     $20_1 = HEAPF32[$8_1 >> 2];
     $21_1 = HEAPF32[$3_1 + 340 >> 2];
     $22_1 = HEAPF32[$6_1 >> 2];
     $14_1 = HEAPF32[$3_1 + 344 >> 2];
     $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($18_1 * $19_1) + Math_fround($20_1 * $21_1)) + Math_fround($22_1 * $14_1)) - HEAPF32[$28_1 + 68 >> 2]);
     $146($3_1 + 320 | 0, HEAP32[$27_1 + 12 >> 2], Math_fround($19_1 - Math_fround($18_1 * $11_1)), Math_fround($21_1 - Math_fround($20_1 * $11_1)), Math_fround($14_1 - Math_fround($22_1 * $11_1)));
     $5_1 = HEAP32[$0_1 + 12 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     if ($11_1 < HEAPF32[$5_1 + 832 >> 2]) {
      $431($3_1 + 304 | 0, HEAP32[$27_1 + 12 >> 2], HEAPF32[$28_1 + 52 >> 2], HEAPF32[$8_1 >> 2], HEAPF32[$6_1 >> 2]);
      $6_1 = $3_1 + 328 | 0;
      $5_1 = HEAP32[$6_1 + 4 >> 2];
      $8_1 = $3_1 + 296 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $5_1;
      $5_1 = HEAP32[$3_1 + 324 >> 2];
      HEAP32[$3_1 + 288 >> 2] = HEAP32[$3_1 + 320 >> 2];
      HEAP32[$3_1 + 292 >> 2] = $5_1;
      FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $3_1 + 304 | 0, $3_1 + 288 | 0, $11_1);
     }
     $35_1 = $35_1 + 1 | 0;
     continue;
    };
   }
   if (!HEAPU8[$0_1 + 8 | 0] | !HEAP32[HEAP32[$0_1 + 12 >> 2] + 828 >> 2]) {
    break label$1
   }
   $451($4_1);
  }
  global$0 = $3_1 + 656 | 0;
 }
 
 function $541($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 + -64 | 0;
  global$0 = $7_1;
  $2($4_1, 0, 36);
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = $0_1;
  $530($7_1, $3_1, $1_1);
  $0_1 = $7_1 + 8 | 0;
  $8_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = $5_1 + 16 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $8_1;
  $2_1 = HEAP32[$7_1 + 4 >> 2];
  HEAP32[$5_1 + 8 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$5_1 + 12 >> 2] = $2_1;
  $4_1 = HEAP32[$7_1 + 20 >> 2];
  $2_1 = $5_1 + 24 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$7_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = $7_1 + 24 | 0;
  $8_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $5_1 + 32 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $8_1 = HEAP32[$7_1 + 36 >> 2];
  $4_1 = $5_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$7_1 + 32 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $4_1 = $7_1 + 40 | 0;
  $9_1 = HEAP32[$4_1 + 4 >> 2];
  $8_1 = $5_1 + 48 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $529($7_1, $1_1, $3_1);
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = $5_1 - -64 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $0_1 = HEAP32[$7_1 + 4 >> 2];
  HEAP32[$5_1 + 56 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$5_1 + 60 >> 2] = $0_1;
  $1_1 = HEAP32[$7_1 + 20 >> 2];
  $0_1 = $5_1 + 72 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $0_1 = $5_1 + 80 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$7_1 + 36 >> 2];
  $0_1 = $5_1 + 88 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 + 32 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  $0_1 = $5_1 + 96 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$7_1 + 52 >> 2];
  $0_1 = $5_1 + 104 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 + 48 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = $7_1 + 56 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $5_1 + 112 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$5_1 + 124 >> 2] = 0;
  HEAP32[$5_1 + 120 >> 2] = $6_1 ? 68 : 69;
  global$0 = $7_1 - -64 | 0;
 }
 
 function $542($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = Math_fround(0), $28_1 = 0, $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = 0, $32_1 = 0, $33_1 = Math_fround(0), $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = Math_fround(0), $42_1 = 0, $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = 0, $46_1 = 0, $47_1 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $3_1 = global$0 - 208 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 + 376 >> 2] = 0;
  HEAP32[$0_1 + 364 >> 2] = 4;
  HEAP32[$0_1 + 368 >> 2] = 0;
  HEAP32[$0_1 + 360 >> 2] = $0_1 + 316;
  HEAP32[$0_1 + 356 >> 2] = $0_1 + 284;
  HEAP32[$0_1 + 352 >> 2] = $0_1 + 252;
  HEAP32[$0_1 + 348 >> 2] = $0_1 + 220;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $5_1 = $1_1 + 16 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 16 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$1_1 + 12 >> 2];
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$0_1 + 12 >> 2] = $4_1;
  $5_1 = $1_1 + 32 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 32 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $5_1 = $1_1 + 24 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 24 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $5_1 = $1_1 + 48 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 48 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $5_1 = $1_1 + 40 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $5_1 = $1_1 - -64 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 - -64 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$1_1 + 60 >> 2];
  HEAP32[$0_1 + 56 >> 2] = HEAP32[$1_1 + 56 >> 2];
  HEAP32[$0_1 + 60 >> 2] = $4_1;
  $5_1 = $1_1 + 80 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 80 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $5_1 = $1_1 + 72 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 72 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $5_1 = $1_1 + 96 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 96 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $5_1 = $1_1 + 88 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 88 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $5_1 = $1_1 + 104 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 104 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $5_1 = $1_1 + 112 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 112 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$1_1 + 124 >> 2];
  $1_1 = HEAP32[$1_1 + 120 >> 2];
  HEAP32[$0_1 + 144 >> 2] = 0;
  HEAP32[$0_1 + 180 >> 2] = 0;
  HEAP32[$0_1 + 120 >> 2] = $1_1;
  HEAP32[$0_1 + 124 >> 2] = $4_1;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $0_1 + 128 | 0;
  $1_1 = $5_1;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $2_1 = $2_1 + 8 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $6_1 = $0_1 + 136 | 0;
  $1_1 = $6_1;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $9_1 = HEAPF32[$1_1 >> 2];
  $31_1 = $0_1 + 132 | 0;
  $7_1 = HEAPF32[$31_1 >> 2];
  $8_1 = HEAPF32[$5_1 >> 2];
  HEAP32[$3_1 + 44 >> 2] = 0;
  $10_1 = Math_fround(-$9_1);
  $9_1 = $149($8_1, $7_1, $9_1);
  $1_1 = $9_1 > Math_fround(0.0);
  HEAPF32[$3_1 + 40 >> 2] = $1_1 ? $10_1 : Math_fround(0.0);
  HEAPF32[$3_1 + 36 >> 2] = $1_1 ? Math_fround(-$7_1) : Math_fround(0.0);
  HEAPF32[$3_1 + 32 >> 2] = $1_1 ? Math_fround(-$8_1) : Math_fround(1.0);
  $32_1 = $0_1 + 148 | 0;
  $543($0_1, $32_1, $3_1 + 32 | 0);
  HEAP32[$0_1 + 164 >> 2] = 1065353216;
  $11_1 = HEAP32[$32_1 >> 2];
  $1_1 = $11_1;
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $2_1 = $1_1 + 24 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $12_1 = $3_1 + 88 | 0;
  $4_1 = HEAP32[$2_1 >> 2];
  HEAP32[$12_1 >> 2] = $4_1;
  HEAP32[$12_1 + 4 >> 2] = $1_1;
  $2_1 = $3_1 + 72 | 0;
  HEAP32[$2_1 >> 2] = $4_1;
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $2_1 = $3_1 + 56 | 0;
  HEAP32[$2_1 >> 2] = $4_1;
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $2_1 = HEAP32[$11_1 + 20 >> 2];
  $11_1 = HEAP32[$11_1 + 16 >> 2];
  HEAP32[$3_1 + 80 >> 2] = $11_1;
  HEAP32[$3_1 + 84 >> 2] = $2_1;
  HEAP32[$3_1 + 64 >> 2] = $11_1;
  HEAP32[$3_1 + 68 >> 2] = $2_1;
  HEAP32[$3_1 + 48 >> 2] = $11_1;
  HEAP32[$3_1 + 52 >> 2] = $2_1;
  HEAP32[$3_1 + 32 >> 2] = $11_1;
  HEAP32[$3_1 + 36 >> 2] = $2_1;
  HEAP32[$3_1 + 40 >> 2] = $4_1;
  HEAP32[$3_1 + 44 >> 2] = $1_1;
  label$1 : {
   while (1) {
    label$3 : {
     $15_1 = HEAP32[$0_1 + 368 >> 2];
     $8_1 = HEAPF32[$0_1 + 128 >> 2];
     $14_1 = HEAPF32[$31_1 >> 2];
     $10_1 = HEAPF32[$6_1 >> 2];
     $7_1 = $137($8_1, $14_1, $10_1);
     if ($7_1 < Math_fround(9.999999747378752e-05)) {
      HEAP32[$0_1 + 376 >> 2] = 1;
      break label$3;
     }
     $2_1 = 0;
     HEAP32[$3_1 + 156 >> 2] = 0;
     HEAPF32[$3_1 + 152 >> 2] = -$10_1;
     HEAPF32[$3_1 + 148 >> 2] = -$14_1;
     HEAPF32[$3_1 + 144 >> 2] = -$8_1;
     $35_1 = Math_imul($15_1, 36);
     $4_1 = $35_1 + $0_1 | 0;
     $13_1 = $4_1 + 148 | 0;
     $543($0_1, $13_1, $3_1 + 144 | 0);
     $36_1 = $4_1 + 180 | 0;
     $18_1 = HEAP32[$36_1 >> 2];
     $1_1 = HEAP32[($4_1 + ($18_1 << 2) | 0) + 144 >> 2];
     $8_1 = HEAPF32[$1_1 + 24 >> 2];
     $14_1 = HEAPF32[$1_1 + 20 >> 2];
     $11_1 = $1_1 + 16 | 0;
     $10_1 = HEAPF32[$11_1 >> 2];
     label$5 : {
      while (1) {
       $1_1 = $2_1 + 16 | 0;
       if (($1_1 | 0) == 80) {
        break label$5
       }
       $12_1 = ($3_1 + 32 | 0) + $2_1 | 0;
       $2_1 = $1_1;
       if (!($149(Math_fround($10_1 - HEAPF32[$12_1 >> 2]), Math_fround($14_1 - HEAPF32[$12_1 + 4 >> 2]), Math_fround($8_1 - HEAPF32[$12_1 + 8 >> 2])) < Math_fround(9.999999747378752e-05))) {
        continue
       }
       break;
      };
      $544($0_1, (Math_imul(HEAP32[$0_1 + 368 >> 2], 36) + $0_1 | 0) + 148 | 0);
      break label$3;
     }
     $12_1 = $11_1 + 8 | 0;
     $26_1 = HEAP32[$12_1 + 4 >> 2];
     $37_1 = $37_1 + 1 & 3;
     $1_1 = ($3_1 + 32 | 0) + ($37_1 << 4) | 0;
     HEAP32[$1_1 + 8 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$1_1 + 12 >> 2] = $26_1;
     $2_1 = HEAP32[$11_1 + 4 >> 2];
     HEAP32[$1_1 >> 2] = HEAP32[$11_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $2_1;
     $8_1 = Math_fround($160(HEAPF32[$0_1 + 128 >> 2], HEAPF32[$31_1 >> 2], HEAPF32[$6_1 >> 2], $10_1, $14_1, $8_1) / $7_1);
     $33_1 = $8_1 > $33_1 ? $8_1 : $33_1;
     if (Math_fround(Math_fround($7_1 - $33_1) + Math_fround($7_1 * Math_fround(-9.999999747378752e-05))) <= Math_fround(0.0)) {
      $544($0_1, (Math_imul(HEAP32[$0_1 + 368 >> 2], 36) + $0_1 | 0) + 148 | 0);
      break label$3;
     }
     $26_1 = 1 - $15_1 | 0;
     HEAP32[$3_1 + 12 >> 2] = 0;
     label$8 : {
      label$9 : {
       switch ($18_1 - 2 | 0) {
       case 1:
        $9_1 = $545(HEAP32[$13_1 >> 2] + 16 | 0, HEAP32[$4_1 + 152 >> 2] + 16 | 0, HEAP32[$4_1 + 156 >> 2] + 16 | 0, $3_1 + 16 | 0, $3_1 + 12 | 0);
        break label$8;
       case 2:
        $11_1 = HEAP32[$4_1 + 152 >> 2];
        $12_1 = HEAP32[$4_1 + 156 >> 2];
        $13_1 = HEAP32[$13_1 >> 2];
        $4_1 = HEAP32[$4_1 + 160 >> 2];
        $18_1 = $4_1 + 16 | 0;
        HEAP32[$3_1 + 204 >> 2] = $18_1;
        $1_1 = $12_1 + 16 | 0;
        HEAP32[$3_1 + 200 >> 2] = $1_1;
        $2_1 = $11_1 + 16 | 0;
        HEAP32[$3_1 + 196 >> 2] = $2_1;
        $15_1 = $13_1 + 16 | 0;
        HEAP32[$3_1 + 192 >> 2] = $15_1;
        HEAP32[$3_1 + 156 >> 2] = 0;
        HEAP32[$3_1 + 172 >> 2] = 0;
        $38_1 = $13_1 + 24 | 0;
        $7_1 = HEAPF32[$38_1 >> 2];
        $16_1 = $4_1 + 24 | 0;
        $9_1 = HEAPF32[$16_1 >> 2];
        $19_1 = Math_fround($7_1 - $9_1);
        HEAPF32[$3_1 + 152 >> 2] = $19_1;
        $39_1 = $13_1 + 20 | 0;
        $14_1 = HEAPF32[$39_1 >> 2];
        $34_1 = $4_1 + 20 | 0;
        $8_1 = HEAPF32[$34_1 >> 2];
        $23_1 = Math_fround($14_1 - $8_1);
        HEAPF32[$3_1 + 148 >> 2] = $23_1;
        $10_1 = HEAPF32[$15_1 >> 2];
        $17_1 = HEAPF32[$18_1 >> 2];
        $29_1 = Math_fround($10_1 - $17_1);
        HEAPF32[$3_1 + 144 >> 2] = $29_1;
        $40_1 = $11_1 + 24 | 0;
        $27_1 = HEAPF32[$40_1 >> 2];
        $41_1 = Math_fround($27_1 - $9_1);
        HEAPF32[$3_1 + 168 >> 2] = $41_1;
        $42_1 = $11_1 + 20 | 0;
        $20_1 = HEAPF32[$42_1 >> 2];
        $43_1 = Math_fround($20_1 - $8_1);
        HEAPF32[$3_1 + 164 >> 2] = $43_1;
        $21_1 = HEAPF32[$2_1 >> 2];
        $44_1 = Math_fround($21_1 - $17_1);
        HEAPF32[$3_1 + 160 >> 2] = $44_1;
        $22_1 = HEAPF32[$1_1 >> 2];
        $45_1 = $12_1 + 20 | 0;
        $30_1 = HEAPF32[$45_1 >> 2];
        $46_1 = $12_1 + 24 | 0;
        $47_1 = HEAPF32[$46_1 >> 2];
        $48_1 = Math_fround($47_1 - $9_1);
        HEAPF32[$3_1 + 184 >> 2] = $48_1;
        $8_1 = Math_fround($30_1 - $8_1);
        HEAPF32[$3_1 + 180 >> 2] = $8_1;
        $17_1 = Math_fround($22_1 - $17_1);
        HEAPF32[$3_1 + 176 >> 2] = $17_1;
        $9_1 = Math_fround(-1.0);
        $8_1 = $546($29_1, $23_1, $19_1, $44_1, $43_1, $41_1, $17_1, $8_1, $48_1);
        if (!($8_1 > Math_fround(0.0) | $8_1 < Math_fround(0.0))) {
         break label$8
        }
        $17_1 = Math_fround($21_1 - $22_1);
        $22_1 = Math_fround($14_1 - $20_1);
        $20_1 = Math_fround($20_1 - $30_1);
        $21_1 = Math_fround($10_1 - $21_1);
        $23_1 = Math_fround($7_1 * Math_fround(Math_fround($17_1 * $22_1) - Math_fround($20_1 * $21_1)));
        $19_1 = $10_1;
        $7_1 = Math_fround($7_1 - $27_1);
        $10_1 = Math_fround($27_1 - $47_1);
        if (!(Math_fround($8_1 * Math_fround($23_1 + Math_fround(Math_fround($19_1 * Math_fround(Math_fround($20_1 * $7_1) - Math_fround($10_1 * $22_1))) + Math_fround($14_1 * Math_fround(Math_fround($10_1 * $21_1) - Math_fround($17_1 * $7_1)))))) <= Math_fround(0.0))) {
         break label$8
        }
        $2_1 = 0;
        HEAP32[$3_1 + 136 >> 2] = 0;
        HEAP32[$3_1 + 128 >> 2] = 0;
        HEAP32[$3_1 + 132 >> 2] = 0;
        HEAP32[$3_1 + 124 >> 2] = 0;
        $1_1 = 0;
        $28_1 = 0;
        $15_1 = 0;
        while (1) if (($1_1 | 0) == 48) {
         HEAP32[$3_1 + 12 >> 2] = $28_1;
         if (!($9_1 < Math_fround(0.0))) {
          break label$8
         }
         HEAP32[$3_1 + 12 >> 2] = 15;
         $10_1 = HEAPF32[$12_1 + 16 >> 2];
         $17_1 = HEAPF32[$45_1 >> 2];
         $27_1 = HEAPF32[$46_1 >> 2];
         $20_1 = HEAPF32[$11_1 + 16 >> 2];
         $21_1 = HEAPF32[$42_1 >> 2];
         $22_1 = HEAPF32[$40_1 >> 2];
         $9_1 = HEAPF32[$4_1 + 16 >> 2];
         $7_1 = HEAPF32[$34_1 >> 2];
         $14_1 = HEAPF32[$16_1 >> 2];
         $30_1 = Math_fround($546($10_1, $17_1, $27_1, $20_1, $21_1, $22_1, $9_1, $7_1, $14_1) / $8_1);
         HEAPF32[$3_1 + 16 >> 2] = $30_1;
         $19_1 = HEAPF32[$13_1 + 16 >> 2];
         $23_1 = HEAPF32[$39_1 >> 2];
         $29_1 = HEAPF32[$38_1 >> 2];
         $10_1 = Math_fround($546($19_1, $23_1, $29_1, $10_1, $17_1, $27_1, $9_1, $7_1, $14_1) / $8_1);
         HEAPF32[$3_1 + 20 >> 2] = $10_1;
         $9_1 = Math_fround($546($20_1, $21_1, $22_1, $19_1, $23_1, $29_1, $9_1, $7_1, $14_1) / $8_1);
         HEAPF32[$3_1 + 24 >> 2] = $9_1;
         HEAPF32[$3_1 + 28 >> 2] = Math_fround(1.0) - Math_fround($9_1 + Math_fround($30_1 + $10_1));
         $9_1 = Math_fround(0.0);
         break label$8;
        } else {
         $24_1 = ($3_1 + 144 | 0) + $1_1 | 0;
         $7_1 = HEAPF32[$24_1 >> 2];
         $10_1 = HEAPF32[$24_1 + 4 >> 2];
         $19_1 = HEAPF32[$24_1 + 8 >> 2];
         $24_1 = HEAP32[$2_1 + 15984 >> 2];
         $25_1 = ($3_1 + 144 | 0) + ($24_1 << 4) | 0;
         $201($3_1 + 104 | 0, $7_1, $10_1, $19_1, HEAPF32[$25_1 >> 2], HEAPF32[$25_1 + 4 >> 2], HEAPF32[$25_1 + 8 >> 2]);
         label$15 : {
          if (!(Math_fround($8_1 * Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 16 >> 2] * HEAPF32[$3_1 + 104 >> 2]) + Math_fround(HEAPF32[$34_1 >> 2] * HEAPF32[$3_1 + 108 >> 2])) + Math_fround(HEAPF32[$16_1 >> 2] * HEAPF32[$3_1 + 112 >> 2]))) > Math_fround(0.0))) {
           break label$15
          }
          $25_1 = $24_1 << 2;
          $7_1 = $545(HEAP32[($3_1 + 192 | 0) + $2_1 >> 2], HEAP32[$25_1 + ($3_1 + 192 | 0) >> 2], $18_1, $3_1 + 128 | 0, $3_1 + 124 | 0);
          if ($7_1 < $9_1 ? 0 : !($9_1 < Math_fround(0.0))) {
           break label$15
          }
          HEAPF32[($3_1 + 16 | 0) + $2_1 >> 2] = HEAPF32[$3_1 + 128 >> 2];
          HEAPF32[$25_1 + ($3_1 + 16 | 0) >> 2] = HEAPF32[$3_1 + 132 >> 2];
          HEAP32[($3_1 + 16 | 0) + (HEAP32[$25_1 + 15984 >> 2] << 2) >> 2] = 0;
          HEAPF32[$3_1 + 28 >> 2] = HEAPF32[$3_1 + 136 >> 2];
          $28_1 = HEAP32[$3_1 + 124 >> 2];
          $28_1 = ((1 << $24_1 & $28_1 << 30 >> 31) + ($28_1 << 1 & 8) | 0) + (0 - ($28_1 & 1) & 1 << $15_1) | 0;
          $9_1 = $7_1;
         }
         $2_1 = $2_1 + 4 | 0;
         $1_1 = $1_1 + 16 | 0;
         $15_1 = $15_1 + 1 | 0;
         continue;
        };
       case 0:
        break label$9;
       default:
        break label$8;
       };
      }
      $9_1 = $547(HEAP32[$13_1 >> 2] + 16 | 0, HEAP32[$4_1 + 152 >> 2] + 16 | 0, $3_1 + 16 | 0, $3_1 + 12 | 0);
     }
     $15_1 = !($9_1 >= Math_fround(0.0));
     label$16 : {
      if (!$15_1) {
       $1_1 = 0;
       $18_1 = Math_imul($26_1, 36) + $0_1 | 0;
       $11_1 = $18_1 + 180 | 0;
       HEAP32[$11_1 >> 2] = 0;
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$5_1 + 4 >> 2] = 0;
       HEAP32[$0_1 + 368 >> 2] = $26_1;
       $2_1 = $5_1 + 8 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $32_1 + $35_1 | 0;
       $26_1 = HEAP32[$36_1 >> 2];
       $4_1 = $3_1 + 16 | 0;
       $12_1 = HEAP32[$3_1 + 12 >> 2];
       while (1) if (($1_1 | 0) == ($26_1 | 0)) {
        if (($12_1 | 0) == 15) {
         HEAP32[$0_1 + 376 >> 2] = 1
        }
        $49_1 = $49_1 + 1 | 0;
        HEAP32[$0_1 + 376 >> 2] = $49_1 >>> 0 <= 127 ? HEAP32[$0_1 + 376 >> 2] : 2;
        break label$16;
       } else {
        $13_1 = HEAP32[$2_1 >> 2];
        label$24 : {
         if ($12_1 >>> $1_1 & 1) {
          $16_1 = HEAP32[$11_1 >> 2];
          HEAP32[$11_1 >> 2] = $16_1 + 1;
          $16_1 = $18_1 + ($16_1 << 2) | 0;
          HEAP32[$16_1 + 148 >> 2] = $13_1;
          $7_1 = HEAPF32[$4_1 >> 2];
          HEAPF32[$16_1 + 164 >> 2] = $7_1;
          HEAP32[$3_1 + 156 >> 2] = 0;
          $13_1 = HEAP32[$2_1 >> 2];
          HEAPF32[$3_1 + 144 >> 2] = $7_1 * HEAPF32[$13_1 + 16 >> 2];
          HEAPF32[$3_1 + 152 >> 2] = $7_1 * HEAPF32[$13_1 + 24 >> 2];
          HEAPF32[$3_1 + 148 >> 2] = $7_1 * HEAPF32[$13_1 + 20 >> 2];
          $158($5_1, $3_1 + 144 | 0);
          break label$24;
         }
         $16_1 = HEAP32[$0_1 + 364 >> 2];
         HEAP32[$0_1 + 364 >> 2] = $16_1 + 1;
         HEAP32[(($16_1 << 2) + $0_1 | 0) + 348 >> 2] = $13_1;
        }
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $1_1 = $1_1 + 1 | 0;
        continue;
       };
      }
      $544($0_1, (Math_imul(HEAP32[$0_1 + 368 >> 2], 36) + $0_1 | 0) + 148 | 0);
     }
     if ($15_1) {
      break label$3
     }
     $1_1 = HEAP32[$0_1 + 376 >> 2];
     if (!$1_1) {
      continue
     }
     break label$1;
    }
    break;
   };
   $1_1 = HEAP32[$0_1 + 376 >> 2];
  }
  HEAP32[$0_1 + 372 >> 2] = (Math_imul(HEAP32[$0_1 + 368 >> 2], 36) + $0_1 | 0) + 148;
  label$26 : {
   label$27 : {
    switch ($1_1 | 0) {
    case 0:
     (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = $137(HEAPF32[$0_1 + 128 >> 2], HEAPF32[$0_1 + 132 >> 2], HEAPF32[$0_1 + 136 >> 2])), HEAPF32[wasm2js_i32$0 + 144 >> 2] = wasm2js_f32$0;
     $1_1 = 0;
     break label$26;
    case 1:
     break label$27;
    default:
     break label$26;
    };
   }
   HEAP32[$0_1 + 144 >> 2] = 0;
   $1_1 = 1;
  }
  global$0 = $3_1 + 208 | 0;
  return $1_1;
 }
 
 function $543($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[$1_1 + 32 >> 2];
  $4_1 = ($3_1 << 2) + $1_1 | 0;
  HEAP32[$4_1 + 16 >> 2] = 0;
  $5_1 = HEAP32[$0_1 + 364 >> 2] - 1 | 0;
  HEAP32[$0_1 + 364 >> 2] = $5_1;
  HEAP32[$1_1 + 32 >> 2] = $3_1 + 1;
  $1_1 = HEAP32[(($5_1 << 2) + $0_1 | 0) + 348 >> 2];
  HEAP32[$4_1 >> 2] = $1_1;
  $550($0_1, HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], $1_1);
 }
 
 function $544($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$1_1 + 32 >> 2] - 1 | 0;
  HEAP32[$1_1 + 32 >> 2] = $2_1;
  $3_1 = HEAP32[$0_1 + 364 >> 2];
  HEAP32[$0_1 + 364 >> 2] = $3_1 + 1;
  HEAP32[(($3_1 << 2) + $0_1 | 0) + 348 >> 2] = HEAP32[($2_1 << 2) + $1_1 >> 2];
 }
 
 function $545($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24_1 = Math_fround(0), $25_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 92 >> 2] = $2_1;
  HEAP32[$5_1 + 88 >> 2] = $1_1;
  HEAP32[$5_1 + 84 >> 2] = $0_1;
  HEAP32[$5_1 + 60 >> 2] = 0;
  $7_1 = HEAPF32[$2_1 + 8 >> 2];
  $10_1 = HEAPF32[$0_1 + 8 >> 2];
  $20_1 = Math_fround($7_1 - $10_1);
  HEAPF32[$5_1 + 72 >> 2] = $20_1;
  $6_1 = HEAPF32[$2_1 + 4 >> 2];
  $9_1 = HEAPF32[$0_1 + 4 >> 2];
  $21_1 = Math_fround($6_1 - $9_1);
  HEAPF32[$5_1 + 68 >> 2] = $21_1;
  $15_1 = HEAPF32[$1_1 + 8 >> 2];
  $11_1 = Math_fround($15_1 - $7_1);
  HEAPF32[$5_1 + 56 >> 2] = $11_1;
  $7_1 = HEAPF32[$1_1 + 4 >> 2];
  $12_1 = Math_fround($7_1 - $6_1);
  HEAPF32[$5_1 + 52 >> 2] = $12_1;
  HEAP32[$5_1 + 44 >> 2] = 0;
  $6_1 = HEAPF32[$2_1 >> 2];
  $8_1 = HEAPF32[$0_1 >> 2];
  $22_1 = Math_fround($6_1 - $8_1);
  HEAPF32[$5_1 + 64 >> 2] = $22_1;
  $17_1 = HEAPF32[$1_1 >> 2];
  $13_1 = Math_fround($17_1 - $6_1);
  HEAPF32[$5_1 + 48 >> 2] = $13_1;
  $6_1 = Math_fround($9_1 - $7_1);
  HEAPF32[$5_1 + 36 >> 2] = $6_1;
  $8_1 = Math_fround($8_1 - $17_1);
  HEAPF32[$5_1 + 32 >> 2] = $8_1;
  $9_1 = Math_fround($10_1 - $15_1);
  HEAPF32[$5_1 + 40 >> 2] = $9_1;
  $7_1 = Math_fround(-1.0);
  $10_1 = Math_fround(Math_fround($6_1 * $11_1) - Math_fround($9_1 * $12_1));
  $9_1 = Math_fround(Math_fround($9_1 * $13_1) - Math_fround($8_1 * $11_1));
  $8_1 = Math_fround(Math_fround($8_1 * $12_1) - Math_fround($6_1 * $13_1));
  $15_1 = $149($10_1, $9_1, $8_1);
  label$1 : {
   if (!($15_1 > Math_fround(0.0))) {
    break label$1
   }
   HEAP32[$5_1 + 24 >> 2] = 0;
   HEAP32[$5_1 + 28 >> 2] = 0;
   HEAP32[$5_1 + 20 >> 2] = 0;
   while (1) {
    if (($23_1 | 0) == 48) {
     if (!($7_1 < Math_fround(0.0))) {
      break label$1
     }
     $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 >> 2] * $10_1) + Math_fround(HEAPF32[$0_1 + 4 >> 2] * $9_1)) + Math_fround(HEAPF32[$0_1 + 8 >> 2] * $8_1)) / $15_1);
     $6_1 = Math_fround($10_1 * $7_1);
     $10_1 = Math_fround($9_1 * $7_1);
     $9_1 = Math_fround($8_1 * $7_1);
     $7_1 = $149($6_1, $10_1, $9_1);
     HEAP32[$4_1 >> 2] = 7;
     $8_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] - $9_1);
     $17_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - $10_1);
     $24_1 = Math_fround(HEAPF32[$1_1 >> 2] - $6_1);
     $8_1 = $137(Math_fround(Math_fround($8_1 * $12_1) - Math_fround($17_1 * $11_1)), Math_fround(Math_fround($24_1 * $11_1) - Math_fround($8_1 * $13_1)), Math_fround(Math_fround($17_1 * $13_1) - Math_fround($24_1 * $12_1)));
     $11_1 = Math_fround(Math_sqrt($15_1));
     $12_1 = Math_fround($8_1 / $11_1);
     HEAPF32[$3_1 >> 2] = $12_1;
     $13_1 = Math_fround(HEAPF32[$2_1 + 8 >> 2] - $9_1);
     $10_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] - $10_1);
     $6_1 = Math_fround(HEAPF32[$2_1 >> 2] - $6_1);
     $6_1 = Math_fround($137(Math_fround(Math_fround($13_1 * $21_1) - Math_fround($10_1 * $20_1)), Math_fround(Math_fround($6_1 * $20_1) - Math_fround($13_1 * $22_1)), Math_fround(Math_fround($10_1 * $22_1) - Math_fround($6_1 * $21_1))) / $11_1);
     HEAPF32[$3_1 + 4 >> 2] = $6_1;
     HEAPF32[$3_1 + 8 >> 2] = Math_fround(1.0) - Math_fround($6_1 + $12_1);
    } else {
     $14_1 = HEAP32[($5_1 + 84 | 0) + $18_1 >> 2];
     $16_1 = ($5_1 + 32 | 0) + $23_1 | 0;
     $201($5_1, HEAPF32[$16_1 >> 2], HEAPF32[$16_1 + 4 >> 2], HEAPF32[$16_1 + 8 >> 2], $10_1, $9_1, $8_1);
     label$5 : {
      if (!(Math_fround(Math_fround(Math_fround(HEAPF32[$14_1 >> 2] * HEAPF32[$5_1 >> 2]) + Math_fround(HEAPF32[$14_1 + 4 >> 2] * HEAPF32[$5_1 + 4 >> 2])) + Math_fround(HEAPF32[$14_1 + 8 >> 2] * HEAPF32[$5_1 + 8 >> 2])) > Math_fround(0.0))) {
       break label$5
      }
      $19_1 = $14_1;
      $16_1 = HEAP32[$18_1 + 15984 >> 2];
      $14_1 = $16_1 << 2;
      $6_1 = $547($19_1, HEAP32[$14_1 + ($5_1 + 84 | 0) >> 2], $5_1 + 24 | 0, $5_1 + 20 | 0);
      if ($6_1 < $7_1 ? 0 : !($7_1 < Math_fround(0.0))) {
       break label$5
      }
      HEAPF32[$3_1 + $18_1 >> 2] = HEAPF32[$5_1 + 24 >> 2];
      HEAPF32[$3_1 + $14_1 >> 2] = HEAPF32[$5_1 + 28 >> 2];
      $19_1 = HEAP32[$5_1 + 20 >> 2];
      HEAP32[$4_1 >> 2] = (0 - ($19_1 & 1) & 1 << $25_1) + (1 << $16_1 & $19_1 << 30 >> 31);
      HEAP32[(HEAP32[$14_1 + 15984 >> 2] << 2) + $3_1 >> 2] = 0;
      $7_1 = $6_1;
     }
     $18_1 = $18_1 + 4 | 0;
     $23_1 = $23_1 + 16 | 0;
     $25_1 = $25_1 + 1 | 0;
     continue;
    }
    break;
   };
  }
  global$0 = $5_1 + 96 | 0;
  return $7_1;
 }
 
 function $546($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($1_1 * $5_1) * $6_1) + Math_fround(Math_fround($2_1 * $3_1) * $7_1)) - Math_fround(Math_fround($5_1 * $0_1) * $7_1)) - Math_fround(Math_fround($1_1 * $3_1) * $8_1)) + Math_fround(Math_fround($0_1 * $4_1) * $8_1)) - Math_fround(Math_fround($2_1 * $4_1) * $6_1));
 }
 
 function $547($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $4_1 = HEAPF32[$0_1 >> 2];
  $5_1 = Math_fround(HEAPF32[$1_1 >> 2] - $4_1);
  $8_1 = HEAPF32[$0_1 + 4 >> 2];
  $6_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - $8_1);
  $9_1 = HEAPF32[$0_1 + 8 >> 2];
  $7_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] - $9_1);
  $10_1 = $149($5_1, $6_1, $7_1);
  if ($10_1 > Math_fround(0.0)) {
   $4_1 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($4_1 * $5_1) + Math_fround($8_1 * $6_1)) + Math_fround($9_1 * $7_1))) / $10_1);
   if ($4_1 >= Math_fround(1.0)) {
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 1065353216;
    HEAP32[$3_1 >> 2] = 2;
    return $149(HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
   }
   if ($4_1 <= Math_fround(0.0)) {
    HEAP32[$2_1 >> 2] = 1065353216;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP32[$3_1 >> 2] = 1;
    return $149(HEAPF32[$0_1 >> 2], HEAPF32[$0_1 + 4 >> 2], HEAPF32[$0_1 + 8 >> 2]);
   }
   HEAPF32[$2_1 + 4 >> 2] = $4_1;
   HEAPF32[$2_1 >> 2] = Math_fround(1.0) - $4_1;
   HEAP32[$3_1 >> 2] = 3;
   $4_1 = $149(Math_fround(Math_fround($5_1 * $4_1) + HEAPF32[$0_1 >> 2]), Math_fround(Math_fround($6_1 * $4_1) + HEAPF32[$0_1 + 4 >> 2]), Math_fround(Math_fround($7_1 * $4_1) + HEAPF32[$0_1 + 8 >> 2]));
  } else {
   $4_1 = Math_fround(-1.0)
  }
  return $4_1;
 }
 
 function $548($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$1_1 + 120 >> 2];
  $3_1 = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$1_1 + 124 >> 2];
  $3_1 = $3_1 + ($1_1 >> 1) | 0;
  $5_1 = $3_1;
  if ($1_1 & 1) {
   $4_1 = HEAP32[$4_1 + HEAP32[$3_1 >> 2] >> 2]
  }
  FUNCTION_TABLE[$4_1 | 0]($0_1, $5_1, $2_1);
 }
 
 function $549($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $7_1 = HEAP32[$1_1 + 124 >> 2];
  $8_1 = HEAP32[$1_1 + 4 >> 2] + ($7_1 >> 1) | 0;
  $6_1 = HEAP32[$1_1 + 120 >> 2];
  $6_1 = $7_1 & 1 ? HEAP32[HEAP32[$8_1 >> 2] + $6_1 >> 2] : $6_1;
  $431($5_1, $1_1 + 8 | 0, $2_1, $3_1, $4_1);
  FUNCTION_TABLE[$6_1 | 0]($5_1 + 16 | 0, $8_1, $5_1);
  $146($0_1, $1_1 + 56 | 0, HEAPF32[$5_1 + 16 >> 2], HEAPF32[$5_1 + 20 >> 2], HEAPF32[$5_1 + 24 >> 2]);
  global$0 = $5_1 + 32 | 0;
 }
 
 function $550($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $7_1 = $137($1_1, $2_1, $3_1);
  $6_1 = $5_1 + 16 | 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  $7_1 = Math_fround(Math_fround(1.0) / $7_1);
  HEAPF32[$6_1 + 8 >> 2] = $7_1 * $3_1;
  HEAPF32[$6_1 + 4 >> 2] = $7_1 * $2_1;
  HEAPF32[$6_1 >> 2] = $7_1 * $1_1;
  $8_1 = $5_1 + 24 | 0;
  $9_1 = HEAP32[$8_1 + 4 >> 2];
  $6_1 = $4_1 + 8 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $9_1;
  $8_1 = HEAP32[$5_1 + 20 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $548($5_1 + 16 | 0, $0_1, $4_1);
  $549($5_1, $0_1, Math_fround(-HEAPF32[$4_1 >> 2]), Math_fround(-HEAPF32[$4_1 + 4 >> 2]), Math_fround(-HEAPF32[$6_1 >> 2]));
  $1_1 = HEAPF32[$5_1 >> 2];
  $2_1 = HEAPF32[$5_1 + 16 >> 2];
  $3_1 = HEAPF32[$5_1 + 4 >> 2];
  $7_1 = HEAPF32[$5_1 + 20 >> 2];
  $10_1 = HEAPF32[$5_1 + 8 >> 2];
  $11_1 = HEAPF32[$5_1 + 24 >> 2];
  HEAP32[$4_1 + 28 >> 2] = 0;
  HEAPF32[$4_1 + 24 >> 2] = $11_1 - $10_1;
  HEAPF32[$4_1 + 20 >> 2] = $7_1 - $3_1;
  HEAPF32[$4_1 + 16 >> 2] = $2_1 - $1_1;
  global$0 = $5_1 + 32 | 0;
 }
 
 function $551($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0);
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $2_1 = HEAP32[$0_1 + 372 >> 2];
         switch (HEAP32[$2_1 + 32 >> 2] - 1 | 0) {
         case 3:
          break label$4;
         case 2:
          break label$5;
         case 1:
          break label$6;
         case 0:
          break label$7;
         default:
          break label$3;
         };
        }
        $3_1 = $1_1 + 40 | 0;
        $2_1 = 0;
        while (1) {
         if (($2_1 | 0) == 12) {
          break label$3
         }
         HEAP32[$3_1 >> 2] = 0;
         HEAP32[$3_1 + 4 >> 2] = 0;
         HEAP32[$1_1 + 32 >> 2] = 0;
         HEAP32[$1_1 + 36 >> 2] = 0;
         HEAP32[($1_1 + 32 | 0) + $2_1 >> 2] = 1065353216;
         $543($0_1, HEAP32[$0_1 + 372 >> 2], $1_1 + 32 | 0);
         if ($551($0_1)) {
          break label$2
         }
         $544($0_1, HEAP32[$0_1 + 372 >> 2]);
         $8_1 = HEAP32[$0_1 + 372 >> 2];
         HEAP32[$1_1 + 28 >> 2] = 0;
         HEAPF32[$1_1 + 24 >> 2] = -HEAPF32[$1_1 + 40 >> 2];
         HEAPF32[$1_1 + 20 >> 2] = -HEAPF32[$1_1 + 36 >> 2];
         HEAPF32[$1_1 + 16 >> 2] = -HEAPF32[$1_1 + 32 >> 2];
         $543($0_1, $8_1, $1_1 + 16 | 0);
         if ($551($0_1)) {
          break label$2
         }
         $544($0_1, HEAP32[$0_1 + 372 >> 2]);
         $2_1 = $2_1 + 4 | 0;
         continue;
        };
       }
       $3_1 = HEAP32[$2_1 + 4 >> 2];
       $2_1 = HEAP32[$2_1 >> 2];
       $4_1 = Math_fround(HEAPF32[$3_1 + 24 >> 2] - HEAPF32[$2_1 + 24 >> 2]);
       $7_1 = Math_fround(HEAPF32[$3_1 + 20 >> 2] - HEAPF32[$2_1 + 20 >> 2]);
       $5_1 = Math_fround(HEAPF32[$3_1 + 16 >> 2] - HEAPF32[$2_1 + 16 >> 2]);
       $3_1 = $1_1 + 40 | 0;
       $2_1 = 0;
       while (1) {
        if (($2_1 | 0) == 12) {
         break label$3
        }
        HEAP32[$3_1 >> 2] = 0;
        HEAP32[$3_1 + 4 >> 2] = 0;
        HEAP32[$1_1 + 32 >> 2] = 0;
        HEAP32[$1_1 + 36 >> 2] = 0;
        HEAP32[($1_1 + 32 | 0) + $2_1 >> 2] = 1065353216;
        HEAP32[$1_1 + 28 >> 2] = 0;
        $9_1 = HEAPF32[$1_1 + 36 >> 2];
        $6_1 = HEAPF32[$1_1 + 32 >> 2];
        $10_1 = Math_fround(Math_fround($5_1 * $9_1) - Math_fround($7_1 * $6_1));
        HEAPF32[$1_1 + 24 >> 2] = $10_1;
        $11_1 = HEAPF32[$3_1 >> 2];
        $6_1 = Math_fround(Math_fround($4_1 * $6_1) - Math_fround($5_1 * $11_1));
        HEAPF32[$1_1 + 20 >> 2] = $6_1;
        $9_1 = Math_fround(Math_fround($7_1 * $11_1) - Math_fround($4_1 * $9_1));
        HEAPF32[$1_1 + 16 >> 2] = $9_1;
        if ($149($9_1, $6_1, $10_1) > Math_fround(0.0)) {
         $543($0_1, HEAP32[$0_1 + 372 >> 2], $1_1 + 16 | 0);
         if ($551($0_1)) {
          break label$2
         }
         $544($0_1, HEAP32[$0_1 + 372 >> 2]);
         $8_1 = HEAP32[$0_1 + 372 >> 2];
         HEAP32[$1_1 + 12 >> 2] = 0;
         HEAPF32[$1_1 + 8 >> 2] = -$10_1;
         HEAPF32[$1_1 + 4 >> 2] = -$6_1;
         HEAPF32[$1_1 >> 2] = -$9_1;
         $543($0_1, $8_1, $1_1);
         if ($551($0_1)) {
          break label$2
         }
         $544($0_1, HEAP32[$0_1 + 372 >> 2]);
        }
        $2_1 = $2_1 + 4 | 0;
        continue;
       };
      }
      HEAP32[$1_1 + 44 >> 2] = 0;
      $3_1 = HEAP32[$2_1 + 4 >> 2];
      $8_1 = HEAP32[$2_1 >> 2];
      $4_1 = HEAPF32[$8_1 + 16 >> 2];
      $7_1 = Math_fround(HEAPF32[$3_1 + 16 >> 2] - $4_1);
      $12_1 = HEAP32[$2_1 + 8 >> 2];
      $5_1 = HEAPF32[$8_1 + 20 >> 2];
      $10_1 = Math_fround(HEAPF32[$12_1 + 20 >> 2] - $5_1);
      $5_1 = Math_fround(HEAPF32[$3_1 + 20 >> 2] - $5_1);
      $6_1 = Math_fround(HEAPF32[$12_1 + 16 >> 2] - $4_1);
      $4_1 = Math_fround(Math_fround($7_1 * $10_1) - Math_fround($5_1 * $6_1));
      HEAPF32[$1_1 + 40 >> 2] = $4_1;
      $9_1 = HEAPF32[$8_1 + 24 >> 2];
      $11_1 = Math_fround(HEAPF32[$3_1 + 24 >> 2] - $9_1);
      $13_1 = Math_fround($11_1 * $6_1);
      $6_1 = Math_fround(HEAPF32[$12_1 + 24 >> 2] - $9_1);
      $7_1 = Math_fround($13_1 - Math_fround($7_1 * $6_1));
      HEAPF32[$1_1 + 36 >> 2] = $7_1;
      $5_1 = Math_fround(Math_fround($5_1 * $6_1) - Math_fround($11_1 * $10_1));
      HEAPF32[$1_1 + 32 >> 2] = $5_1;
      if (!($149($5_1, $7_1, $4_1) > Math_fround(0.0))) {
       break label$3
      }
      $543($0_1, $2_1, $1_1 + 32 | 0);
      if ($551($0_1)) {
       break label$2
      }
      $544($0_1, HEAP32[$0_1 + 372 >> 2]);
      $2_1 = HEAP32[$0_1 + 372 >> 2];
      HEAP32[$1_1 + 28 >> 2] = 0;
      HEAPF32[$1_1 + 24 >> 2] = -$4_1;
      HEAPF32[$1_1 + 20 >> 2] = -$7_1;
      HEAPF32[$1_1 + 16 >> 2] = -$5_1;
      $543($0_1, $2_1, $1_1 + 16 | 0);
      if ($551($0_1)) {
       break label$2
      }
      $544($0_1, HEAP32[$0_1 + 372 >> 2]);
      break label$3;
     }
     $3_1 = HEAP32[$2_1 >> 2];
     $8_1 = HEAP32[$2_1 + 12 >> 2];
     $4_1 = HEAPF32[$8_1 + 16 >> 2];
     $6_1 = Math_fround(HEAPF32[$3_1 + 16 >> 2] - $4_1);
     $7_1 = HEAPF32[$8_1 + 20 >> 2];
     $9_1 = Math_fround(HEAPF32[$3_1 + 20 >> 2] - $7_1);
     $5_1 = HEAPF32[$8_1 + 24 >> 2];
     $10_1 = Math_fround(HEAPF32[$3_1 + 24 >> 2] - $5_1);
     $3_1 = HEAP32[$2_1 + 4 >> 2];
     $2_1 = HEAP32[$2_1 + 8 >> 2];
     $4_1 = $546($6_1, $9_1, $10_1, Math_fround(HEAPF32[$3_1 + 16 >> 2] - $4_1), Math_fround(HEAPF32[$3_1 + 20 >> 2] - $7_1), Math_fround(HEAPF32[$3_1 + 24 >> 2] - $5_1), Math_fround(HEAPF32[$2_1 + 16 >> 2] - $4_1), Math_fround(HEAPF32[$2_1 + 20 >> 2] - $7_1), Math_fround(HEAPF32[$2_1 + 24 >> 2] - $5_1));
     $0_1 = 1;
     if ($4_1 > Math_fround(0.0) | $4_1 < Math_fround(0.0)) {
      break label$1
     }
    }
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 1;
  }
  global$0 = $1_1 + 48 | 0;
  return $0_1;
 }
 
 function $552($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 48 >> 2];
  if ($2_1) {
   HEAP32[$2_1 + 44 >> 2] = HEAP32[$1_1 + 44 >> 2]
  }
  $2_1 = HEAP32[$1_1 + 44 >> 2];
  if ($2_1) {
   HEAP32[$2_1 + 48 >> 2] = HEAP32[$1_1 + 48 >> 2]
  }
  if (HEAP32[$0_1 >> 2] == ($1_1 | 0)) {
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 48 >> 2]
  }
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - 1;
 }
 
 function $553($0_1, $1_1) {
  var $2_1 = 0;
  HEAP32[$1_1 + 44 >> 2] = 0;
  HEAP32[$1_1 + 48 >> 2] = HEAP32[$0_1 >> 2];
  $2_1 = HEAP32[$0_1 >> 2];
  if ($2_1) {
   HEAP32[$2_1 + 44 >> 2] = $1_1
  }
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
 }
 
 function $554($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   $5_1 = HEAP32[$0_1 + 18504 >> 2];
   if ($5_1) {
    $14_1 = $0_1 + 18504 | 0;
    $552($14_1, $5_1);
    $15_1 = $0_1 + 18496 | 0;
    $553($15_1, $5_1);
    HEAP32[$5_1 + 28 >> 2] = $3_1;
    HEAP32[$5_1 + 24 >> 2] = $2_1;
    HEAP32[$5_1 + 20 >> 2] = $1_1;
    HEAP8[$5_1 + 55 | 0] = 0;
    $6_1 = HEAPF32[$1_1 + 16 >> 2];
    $10_1 = HEAPF32[$2_1 + 20 >> 2];
    $8_1 = HEAPF32[$3_1 + 24 >> 2];
    $11_1 = HEAPF32[$2_1 + 24 >> 2];
    $7_1 = HEAPF32[$1_1 + 24 >> 2];
    $9_1 = HEAPF32[$1_1 + 20 >> 2];
    $13_1 = HEAPF32[$3_1 + 20 >> 2];
    $17_1 = HEAPF32[$3_1 + 16 >> 2];
    $18_1 = HEAPF32[$2_1 + 16 >> 2];
    HEAP32[$5_1 + 12 >> 2] = 0;
    $10_1 = Math_fround($10_1 - $9_1);
    $8_1 = Math_fround($8_1 - $7_1);
    $7_1 = Math_fround($11_1 - $7_1);
    $9_1 = Math_fround($13_1 - $9_1);
    $11_1 = Math_fround(Math_fround($10_1 * $8_1) - Math_fround($7_1 * $9_1));
    HEAPF32[$5_1 >> 2] = $11_1;
    $13_1 = $7_1;
    $7_1 = Math_fround($17_1 - $6_1);
    $6_1 = Math_fround($18_1 - $6_1);
    $8_1 = Math_fround(Math_fround($13_1 * $7_1) - Math_fround($6_1 * $8_1));
    HEAPF32[$5_1 + 4 >> 2] = $8_1;
    $6_1 = Math_fround(Math_fround($6_1 * $9_1) - Math_fround($10_1 * $7_1));
    HEAPF32[$5_1 + 8 >> 2] = $6_1;
    $16_1 = 2;
    $6_1 = $137($11_1, $8_1, $6_1);
    if ($6_1 > Math_fround(9.999999747378752e-05)) {
     $12_1 = $5_1 + 16 | 0;
     label$4 : {
      if ($555($5_1, $1_1, $2_1, $12_1)) {
       break label$4
      }
      if ($555($5_1, $2_1, $3_1, $12_1)) {
       break label$4
      }
      if ($555($5_1, $3_1, $1_1, $12_1)) {
       break label$4
      }
      (wasm2js_i32$0 = $5_1, wasm2js_f32$0 = Math_fround($160(HEAPF32[$1_1 + 16 >> 2], HEAPF32[$1_1 + 20 >> 2], HEAPF32[$1_1 + 24 >> 2], HEAPF32[$5_1 >> 2], HEAPF32[$5_1 + 4 >> 2], HEAPF32[$5_1 + 8 >> 2]) / $6_1)), HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
     }
     $167($5_1, $6_1);
     if ($4_1) {
      break label$1
     }
     $16_1 = 3;
     if (HEAPF32[$12_1 >> 2] >= Math_fround(-9.999999747378752e-06)) {
      break label$1
     }
    }
    HEAP32[$0_1 >> 2] = $16_1;
    $552($15_1, $5_1);
    $553($14_1, $5_1);
    return 0;
   }
   HEAP32[$0_1 >> 2] = 5;
   return 0;
  }
  return $5_1;
 }
 
 function $555($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0);
  $9_1 = global$0 - 16 | 0;
  global$0 = $9_1;
  $12_1 = $1_1 + 16 | 0;
  $4_1 = Math_fround(HEAPF32[$2_1 + 16 >> 2] - HEAPF32[$12_1 >> 2]);
  $13_1 = $1_1 + 20 | 0;
  $5_1 = Math_fround(HEAPF32[$2_1 + 20 >> 2] - HEAPF32[$13_1 >> 2]);
  $1_1 = $1_1 + 24 | 0;
  $6_1 = Math_fround(HEAPF32[$2_1 + 24 >> 2] - HEAPF32[$1_1 >> 2]);
  $201($9_1, $4_1, $5_1, $6_1, HEAPF32[$0_1 >> 2], HEAPF32[$0_1 + 4 >> 2], HEAPF32[$0_1 + 8 >> 2]);
  $7_1 = HEAPF32[$12_1 >> 2];
  $10_1 = HEAPF32[$13_1 >> 2];
  $11_1 = HEAPF32[$1_1 >> 2];
  $0_1 = Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$9_1 >> 2]) + Math_fround($10_1 * HEAPF32[$9_1 + 4 >> 2])) + Math_fround($11_1 * HEAPF32[$9_1 + 8 >> 2])) < Math_fround(0.0);
  if ($0_1) {
   $14_1 = $149($4_1, $5_1, $6_1);
   label$2 : {
    if (Math_fround(Math_fround(Math_fround($7_1 * $4_1) + Math_fround($10_1 * $5_1)) + Math_fround($11_1 * $6_1)) > Math_fround(0.0)) {
     $8_1 = $137($7_1, $10_1, $11_1);
     break label$2;
    }
    $15_1 = $4_1;
    $4_1 = HEAPF32[$2_1 + 16 >> 2];
    $16_1 = $5_1;
    $5_1 = HEAPF32[$2_1 + 20 >> 2];
    $8_1 = $6_1;
    $6_1 = HEAPF32[$2_1 + 24 >> 2];
    if (Math_fround(Math_fround(Math_fround($15_1 * $4_1) + Math_fround($16_1 * $5_1)) + Math_fround($8_1 * $6_1)) < Math_fround(0.0)) {
     $8_1 = $137($4_1, $5_1, $6_1);
     break label$2;
    }
    $8_1 = $160($7_1, $10_1, $11_1, $4_1, $5_1, $6_1);
    $7_1 = Math_fround(Math_fround(Math_fround($149($7_1, $10_1, $11_1) * $149($4_1, $5_1, $6_1)) - Math_fround($8_1 * $8_1)) / $14_1);
    $8_1 = Math_fround(Math_sqrt($7_1 > Math_fround(0.0) ? $7_1 : Math_fround(0.0)));
   }
   HEAPF32[$3_1 >> 2] = $8_1;
  }
  global$0 = $9_1 + 16 | 0;
  return $0_1;
 }
 
 function $556($0_1) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3_1 = 0, $4_1 = 0;
  $1_1 = HEAPF32[$0_1 + 16 >> 2];
  $1_1 = Math_fround($1_1 * $1_1);
  $3_1 = $0_1;
  while (1) {
   $0_1 = HEAP32[$0_1 + 48 >> 2];
   if ($0_1) {
    $2_1 = HEAPF32[$0_1 + 16 >> 2];
    $2_1 = Math_fround($2_1 * $2_1);
    $4_1 = $2_1 < $1_1;
    $3_1 = $4_1 ? $0_1 : $3_1;
    $1_1 = $4_1 ? $2_1 : $1_1;
    continue;
   }
   break;
  };
  return $3_1;
 }
 
 function $557($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   if (HEAPU8[$3_1 + 55 | 0] == ($1_1 | 0)) {
    break label$1
   }
   $6_1 = $4_1 << 2;
   $7_1 = HEAP32[$6_1 + 15984 >> 2];
   if (Math_fround($160(HEAPF32[$3_1 >> 2], HEAPF32[$3_1 + 4 >> 2], HEAPF32[$3_1 + 8 >> 2], HEAPF32[$2_1 + 16 >> 2], HEAPF32[$2_1 + 20 >> 2], HEAPF32[$2_1 + 24 >> 2]) - HEAPF32[$3_1 + 16 >> 2]) < Math_fround(-9.999999747378752e-06)) {
    $1_1 = $0_1;
    $0_1 = $3_1 + 20 | 0;
    $0_1 = $554($1_1, HEAP32[$0_1 + ($7_1 << 2) >> 2], HEAP32[$0_1 + $6_1 >> 2], $2_1, 0);
    if (!$0_1) {
     break label$1
    }
    HEAP32[$0_1 + 32 >> 2] = $3_1;
    HEAP8[$0_1 + 52 | 0] = $4_1;
    HEAP8[($3_1 + $4_1 | 0) + 52 | 0] = 0;
    HEAP32[(($4_1 << 2) + $3_1 | 0) + 32 >> 2] = $0_1;
    $1_1 = HEAP32[$5_1 >> 2];
    label$3 : {
     if ($1_1) {
      HEAP32[$1_1 + 36 >> 2] = $0_1;
      HEAP8[$1_1 + 53 | 0] = 2;
      HEAP32[$0_1 + 40 >> 2] = $1_1;
      HEAP8[$0_1 + 54 | 0] = 1;
      break label$3;
     }
     HEAP32[$5_1 + 4 >> 2] = $0_1;
    }
    HEAP32[$5_1 >> 2] = $0_1;
    HEAP32[$5_1 + 8 >> 2] = HEAP32[$5_1 + 8 >> 2] + 1;
    return 1;
   }
   HEAP8[$3_1 + 55 | 0] = $1_1;
   if (!$557($0_1, $1_1, $2_1, HEAP32[(($7_1 << 2) + $3_1 | 0) + 32 >> 2], HEAPU8[($3_1 + $7_1 | 0) + 52 | 0], $5_1)) {
    break label$1
   }
   $4_1 = $1_1;
   $1_1 = HEAP32[$6_1 + 15996 >> 2];
   if (!$557($0_1, $4_1, $2_1, HEAP32[(($1_1 << 2) + $3_1 | 0) + 32 >> 2], HEAPU8[($1_1 + $3_1 | 0) + 52 | 0], $5_1)) {
    break label$1
   }
   $552($0_1 + 18496 | 0, $3_1);
   $553($0_1 + 18504 | 0, $3_1);
   $8_1 = 1;
  }
  return $8_1;
 }
 
 function $558($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = 0, $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = Math_fround(0), $38_1 = 0, $39_1 = 0, $40_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 19264 | 0;
  global$0 = $10_1;
  $0_1 = $10_1 + 248 | 0;
  $9_1 = $5_1 + 56 | 0;
  $12_1 = $4_1 + 56 | 0;
  HEAPF32[$0_1 >> 2] = HEAPF32[$9_1 >> 2] - HEAPF32[$12_1 >> 2];
  HEAP32[$10_1 + 252 >> 2] = 0;
  $11_1 = $5_1 + 52 | 0;
  $32_1 = $4_1 + 52 | 0;
  HEAPF32[$10_1 + 244 >> 2] = HEAPF32[$11_1 >> 2] - HEAPF32[$32_1 >> 2];
  HEAPF32[$10_1 + 240 >> 2] = HEAPF32[$5_1 + 48 >> 2] - HEAPF32[$4_1 + 48 >> 2];
  $488($10_1 + 240 | 0);
  $30_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$10_1 + 88 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$10_1 + 92 >> 2] = $30_1;
  $0_1 = HEAP32[$10_1 + 244 >> 2];
  HEAP32[$10_1 + 80 >> 2] = HEAP32[$10_1 + 240 >> 2];
  HEAP32[$10_1 + 84 >> 2] = $0_1;
  $0_1 = $10_1 + 18760 | 0;
  HEAPF32[$0_1 >> 2] = HEAPF32[$12_1 >> 2] - HEAPF32[$9_1 >> 2];
  HEAP32[$10_1 + 18764 >> 2] = 0;
  HEAPF32[$10_1 + 18756 >> 2] = HEAPF32[$32_1 >> 2] - HEAPF32[$11_1 >> 2];
  HEAPF32[$10_1 + 18752 >> 2] = HEAPF32[$4_1 + 48 >> 2] - HEAPF32[$5_1 + 48 >> 2];
  $488($10_1 + 18752 | 0);
  $9_1 = $10_1 + 216 | 0;
  HEAP32[$9_1 >> 2] = 1065353216;
  HEAP32[$9_1 + 4 >> 2] = 0;
  $9_1 = $10_1 + 200 | 0;
  HEAP32[$9_1 >> 2] = 1065353216;
  HEAP32[$9_1 + 4 >> 2] = 0;
  $9_1 = $10_1 + 184 | 0;
  HEAP32[$9_1 >> 2] = 1065353216;
  HEAP32[$9_1 + 4 >> 2] = 0;
  $9_1 = $10_1 + 168 | 0;
  HEAP32[$9_1 >> 2] = 0;
  HEAP32[$9_1 + 4 >> 2] = 0;
  $9_1 = $10_1 + 152 | 0;
  HEAP32[$9_1 >> 2] = 0;
  HEAP32[$9_1 + 4 >> 2] = 0;
  $9_1 = $10_1 + 136 | 0;
  HEAP32[$9_1 >> 2] = 0;
  HEAP32[$9_1 + 4 >> 2] = 0;
  $9_1 = $10_1 + 120 | 0;
  HEAP32[$9_1 >> 2] = 1065353216;
  HEAP32[$9_1 + 4 >> 2] = 0;
  $12_1 = HEAP32[$0_1 + 4 >> 2];
  $9_1 = $10_1 + 104 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $12_1;
  HEAP32[$10_1 + 208 >> 2] = 1065353216;
  HEAP32[$10_1 + 212 >> 2] = 0;
  HEAP32[$10_1 + 192 >> 2] = 0;
  HEAP32[$10_1 + 196 >> 2] = 1065353216;
  HEAP32[$10_1 + 176 >> 2] = 1065353216;
  HEAP32[$10_1 + 180 >> 2] = 1065353216;
  HEAP32[$10_1 + 160 >> 2] = 1065353216;
  HEAP32[$10_1 + 164 >> 2] = 1065353216;
  HEAP32[$10_1 + 144 >> 2] = 1065353216;
  HEAP32[$10_1 + 148 >> 2] = 0;
  HEAP32[$10_1 + 128 >> 2] = 0;
  HEAP32[$10_1 + 132 >> 2] = 1065353216;
  HEAP32[$10_1 + 112 >> 2] = 0;
  HEAP32[$10_1 + 116 >> 2] = 0;
  $0_1 = HEAP32[$10_1 + 18756 >> 2];
  HEAP32[$10_1 + 96 >> 2] = HEAP32[$10_1 + 18752 >> 2];
  HEAP32[$10_1 + 100 >> 2] = $0_1;
  $32_1 = $10_1 + 260 | 0;
  $30_1 = $10_1 + 368 | 0;
  $31_1 = $10_1 + 18736 | 0;
  $33_1 = $10_1 + 280 | 0;
  $35_1 = $10_1 + 18880 | 0;
  $34_1 = $10_1 + 44 | 0;
  $23_1 = $10_1 + 28 | 0;
  $24_1 = $10_1 + 8 | 4;
  while (1) {
   label$2 : {
    $40_1 = $10_1;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            if (($36_1 | 0) != 9) {
             $409($1_1);
             $0_1 = ($10_1 + 80 | 0) + ($36_1 << 4) | 0;
             $11_1 = HEAP32[$0_1 + 12 >> 2];
             $12_1 = $10_1 + 72 | 0;
             $9_1 = $12_1;
             HEAP32[$9_1 >> 2] = HEAP32[$0_1 + 8 >> 2];
             HEAP32[$9_1 + 4 >> 2] = $11_1;
             $9_1 = HEAP32[$0_1 + 4 >> 2];
             HEAP32[$10_1 + 64 >> 2] = HEAP32[$0_1 >> 2];
             HEAP32[$10_1 + 68 >> 2] = $9_1;
             $541($2_1, $4_1, $3_1, $5_1, $10_1 + 8 | 0, $10_1 + 19136 | 0, 1);
             HEAP32[$35_1 >> 2] = 0;
             HEAP32[$35_1 + 4 >> 2] = 0;
             $0_1 = $35_1 + 8 | 0;
             HEAP32[$0_1 >> 2] = 0;
             HEAP32[$0_1 + 4 >> 2] = 0;
             HEAP32[$10_1 + 19116 >> 2] = 0;
             HEAP32[$10_1 + 19120 >> 2] = 0;
             HEAP32[$10_1 + 19128 >> 2] = 2;
             $9_1 = 0;
             HEAP32[$10_1 + 18896 >> 2] = 0;
             HEAP32[$10_1 + 252 >> 2] = 0;
             $15_1 = HEAPF32[$12_1 >> 2];
             HEAPF32[$10_1 + 248 >> 2] = -$15_1;
             $17_1 = HEAPF32[$10_1 + 68 >> 2];
             HEAPF32[$10_1 + 244 >> 2] = -$17_1;
             $19_1 = HEAPF32[$10_1 + 64 >> 2];
             HEAPF32[$10_1 + 240 >> 2] = -$19_1;
             label$12 : {
              switch ($542($10_1 + 18752 | 0, $10_1 + 19136 | 0, $10_1 + 240 | 0) - 1 | 0) {
              case 1:
               break label$10;
              case 0:
               break label$12;
              default:
               break label$3;
              };
             }
             HEAP32[$31_1 >> 2] = 0;
             HEAP32[$31_1 + 4 >> 2] = 0;
             HEAP32[$33_1 >> 2] = 0;
             HEAP32[$33_1 + 4 >> 2] = 0;
             $13_1 = 0;
             HEAP32[$31_1 + 8 >> 2] = 0;
             $0_1 = $33_1 + 8 | 0;
             HEAP32[$0_1 >> 2] = 0;
             HEAP32[$0_1 + 4 >> 2] = 0;
             HEAP32[$33_1 + 16 >> 2] = 0;
             HEAP32[$10_1 + 18732 >> 2] = 0;
             HEAP32[$10_1 + 240 >> 2] = 9;
             $0_1 = 14336;
             $11_1 = 0;
             while (1) {
              if ($0_1) {
               $9_1 = ($10_1 + 240 | 0) + $0_1 | 0;
               HEAP32[$9_1 + 4148 >> 2] = $13_1;
               HEAP32[$9_1 + 4144 >> 2] = 0;
               $9_1 = $9_1 + 4100 | 0;
               if ($13_1) {
                HEAP32[$13_1 + 44 >> 2] = $9_1
               }
               $13_1 = (Math_imul(0 - $11_1 | 0, 56) + $10_1 | 0) + 18676 | 0;
               HEAP32[$10_1 + 18744 >> 2] = $9_1;
               $0_1 = $0_1 - 56 | 0;
               $11_1 = $11_1 + 1 | 0;
               continue;
              }
              break;
             };
             HEAP32[$10_1 + 18748 >> 2] = 256;
             $11_1 = HEAP32[$10_1 + 19124 >> 2];
             if (HEAPU32[$11_1 + 32 >> 2] < 2) {
              break label$9
             }
             if (!$551($10_1 + 18752 | 0)) {
              break label$9
             }
             while (1) {
              $0_1 = HEAP32[$10_1 + 18736 >> 2];
              if ($0_1) {
               $552($31_1, $0_1);
               HEAP32[$0_1 + 44 >> 2] = 0;
               HEAP32[$0_1 + 48 >> 2] = HEAP32[$10_1 + 18744 >> 2];
               $9_1 = HEAP32[$10_1 + 18744 >> 2];
               if ($9_1) {
                HEAP32[$9_1 + 44 >> 2] = $0_1
               }
               HEAP32[$10_1 + 18744 >> 2] = $0_1;
               HEAP32[$10_1 + 18748 >> 2] = HEAP32[$10_1 + 18748 >> 2] + 1;
               continue;
              }
              break;
             };
             HEAP32[$10_1 + 18732 >> 2] = 0;
             HEAP32[$10_1 + 240 >> 2] = 0;
             $9_1 = HEAP32[$11_1 >> 2];
             $0_1 = HEAP32[$11_1 + 12 >> 2];
             $14_1 = HEAPF32[$0_1 + 16 >> 2];
             $16_1 = HEAPF32[$0_1 + 20 >> 2];
             $18_1 = HEAPF32[$0_1 + 24 >> 2];
             $0_1 = HEAP32[$11_1 + 4 >> 2];
             $13_1 = HEAP32[$11_1 + 8 >> 2];
             label$19 : {
              if (!($546(Math_fround(HEAPF32[$9_1 + 16 >> 2] - $14_1), Math_fround(HEAPF32[$9_1 + 20 >> 2] - $16_1), Math_fround(HEAPF32[$9_1 + 24 >> 2] - $18_1), Math_fround(HEAPF32[$0_1 + 16 >> 2] - $14_1), Math_fround(HEAPF32[$0_1 + 20 >> 2] - $16_1), Math_fround(HEAPF32[$0_1 + 24 >> 2] - $18_1), Math_fround(HEAPF32[$13_1 + 16 >> 2] - $14_1), Math_fround(HEAPF32[$13_1 + 20 >> 2] - $16_1), Math_fround(HEAPF32[$13_1 + 24 >> 2] - $18_1)) < Math_fround(0.0))) {
               $12_1 = $0_1;
               $0_1 = $9_1;
               break label$19;
              }
              HEAP32[$11_1 + 4 >> 2] = $9_1;
              HEAP32[$11_1 >> 2] = $0_1;
              (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = __wasm_rotl_i64(HEAP32[$11_1 + 16 >> 2], HEAP32[$11_1 + 20 >> 2])), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
              HEAP32[$11_1 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
              $12_1 = $9_1;
             }
             $0_1 = $554($10_1 + 240 | 0, $0_1, $12_1, $13_1, 1);
             $9_1 = $554($10_1 + 240 | 0, HEAP32[$11_1 + 4 >> 2], HEAP32[$11_1 >> 2], HEAP32[$11_1 + 12 >> 2], 1);
             $21_1 = $554($10_1 + 240 | 0, HEAP32[$11_1 + 8 >> 2], HEAP32[$11_1 + 4 >> 2], HEAP32[$11_1 + 12 >> 2], 1);
             $13_1 = $554($10_1 + 240 | 0, HEAP32[$11_1 >> 2], HEAP32[$11_1 + 8 >> 2], HEAP32[$11_1 + 12 >> 2], 1);
             if (HEAP32[$10_1 + 18740 >> 2] != 4) {
              break label$9
             }
             $11_1 = $556(HEAP32[$10_1 + 18736 >> 2]);
             $27_1 = HEAP32[$11_1 + 28 >> 2];
             $28_1 = HEAP32[$11_1 + 24 >> 2];
             $29_1 = HEAP32[$11_1 + 20 >> 2];
             $18_1 = HEAPF32[$11_1 + 16 >> 2];
             $16_1 = HEAPF32[$11_1 + 12 >> 2];
             $15_1 = HEAPF32[$11_1 + 8 >> 2];
             $17_1 = HEAPF32[$11_1 + 4 >> 2];
             $14_1 = HEAPF32[$11_1 >> 2];
             HEAP32[$0_1 + 32 >> 2] = $9_1;
             $12_1 = 0;
             HEAP8[$0_1 + 52 | 0] = 0;
             HEAP32[$9_1 + 32 >> 2] = $0_1;
             HEAP8[$9_1 + 52 | 0] = 0;
             HEAP32[$0_1 + 36 >> 2] = $21_1;
             HEAP8[$0_1 + 53 | 0] = 0;
             HEAP32[$21_1 + 32 >> 2] = $0_1;
             HEAP8[$21_1 + 52 | 0] = 1;
             HEAP32[$0_1 + 40 >> 2] = $13_1;
             HEAP8[$0_1 + 54 | 0] = 0;
             HEAP32[$13_1 + 32 >> 2] = $0_1;
             HEAP8[$13_1 + 52 | 0] = 2;
             HEAP32[$9_1 + 36 >> 2] = $13_1;
             HEAP8[$9_1 + 53 | 0] = 2;
             HEAP32[$13_1 + 40 >> 2] = $9_1;
             HEAP8[$13_1 + 54 | 0] = 1;
             HEAP32[$9_1 + 40 >> 2] = $21_1;
             HEAP8[$9_1 + 54 | 0] = 1;
             HEAP32[$21_1 + 36 >> 2] = $9_1;
             $0_1 = $21_1 + 53 | 0;
             HEAP8[$0_1 | 0] = 2;
             HEAP8[$0_1 + 1 | 0] = 1;
             HEAP32[$21_1 + 40 >> 2] = $13_1;
             HEAP32[$13_1 + 36 >> 2] = $21_1;
             HEAP8[$13_1 + 53 | 0] = 2;
             HEAP32[$10_1 + 240 >> 2] = 0;
             label$21 : while (1) {
              if (($12_1 | 0) == 255) {
               break label$8
              }
              $0_1 = HEAP32[$10_1 + 18732 >> 2];
              if ($0_1 >>> 0 > 127) {
               break label$7
              }
              $12_1 = $12_1 + 1 | 0;
              HEAP8[$11_1 + 55 | 0] = $12_1;
              HEAP32[$10_1 + 232 >> 2] = 0;
              HEAP32[$10_1 + 224 >> 2] = 0;
              HEAP32[$10_1 + 228 >> 2] = 0;
              HEAP32[$10_1 + 18732 >> 2] = $0_1 + 1;
              $13_1 = $11_1 + 4 | 0;
              $21_1 = $11_1 + 8 | 0;
              $9_1 = ($10_1 + 240 | 0) + ($0_1 << 5) | 0;
              $38_1 = $9_1 + 60 | 0;
              $550($10_1 + 18752 | 0, HEAPF32[$11_1 >> 2], HEAPF32[$13_1 >> 2], HEAPF32[$21_1 >> 2], $38_1);
              $0_1 = 7;
              if (!(Math_fround($160(HEAPF32[$11_1 >> 2], HEAPF32[$13_1 >> 2], HEAPF32[$21_1 >> 2], HEAPF32[$9_1 + 76 >> 2], HEAPF32[$9_1 + 80 >> 2], HEAPF32[$9_1 + 84 >> 2]) - HEAPF32[$11_1 + 16 >> 2]) > Math_fround(9.999999747378752e-05))) {
               break label$6
              }
              $0_1 = 0;
              $9_1 = 1;
              $13_1 = 32;
              while (1) if ($0_1 >>> 0 < 3 ? $9_1 & 1 : 0) {
               $9_1 = $557($10_1 + 240 | 0, $12_1, $38_1, HEAP32[$11_1 + $13_1 >> 2], HEAPU8[($0_1 + $11_1 | 0) + 52 | 0], $10_1 + 224 | 0);
               $13_1 = $13_1 + 4 | 0;
               $0_1 = $0_1 + 1 | 0;
               continue;
              } else {
               $0_1 = 4;
               if (!(HEAPU32[$10_1 + 232 >> 2] > 2 & $9_1)) {
                break label$6
               }
               $0_1 = HEAP32[$10_1 + 224 >> 2];
               HEAP8[$0_1 + 53 | 0] = 2;
               $9_1 = HEAP32[$10_1 + 228 >> 2];
               HEAP32[$0_1 + 36 >> 2] = $9_1;
               HEAP32[$9_1 + 40 >> 2] = $0_1;
               HEAP8[$9_1 + 54 | 0] = 1;
               $552($31_1, $11_1);
               HEAP32[$11_1 + 44 >> 2] = 0;
               HEAP32[$11_1 + 48 >> 2] = HEAP32[$10_1 + 18744 >> 2];
               $0_1 = HEAP32[$10_1 + 18744 >> 2];
               if ($0_1) {
                HEAP32[$0_1 + 44 >> 2] = $11_1
               }
               HEAP32[$10_1 + 18744 >> 2] = $11_1;
               HEAP32[$10_1 + 18748 >> 2] = HEAP32[$10_1 + 18748 >> 2] + 1;
               $11_1 = $556(HEAP32[$10_1 + 18736 >> 2]);
               $27_1 = HEAP32[$11_1 + 28 >> 2];
               $28_1 = HEAP32[$11_1 + 24 >> 2];
               $29_1 = HEAP32[$11_1 + 20 >> 2];
               $18_1 = HEAPF32[$11_1 + 16 >> 2];
               $16_1 = HEAPF32[$11_1 + 12 >> 2];
               $15_1 = HEAPF32[$11_1 + 8 >> 2];
               $17_1 = HEAPF32[$11_1 + 4 >> 2];
               $14_1 = HEAPF32[$11_1 >> 2];
               continue label$21;
              };
             };
            }
            HEAP32[$7_1 >> 2] = 0;
            HEAP32[$7_1 + 4 >> 2] = 0;
            $0_1 = $7_1 + 8 | 0;
            HEAP32[$0_1 >> 2] = 0;
            HEAP32[$0_1 + 4 >> 2] = 0;
            $0_1 = $8_1 + 8 | 0;
            HEAP32[$0_1 >> 2] = 0;
            HEAP32[$0_1 + 4 >> 2] = 0;
            HEAP32[$8_1 >> 2] = 0;
            HEAP32[$8_1 + 4 >> 2] = 0;
            $0_1 = $6_1 + 8 | 0;
            HEAP32[$0_1 >> 2] = 0;
            HEAP32[$0_1 + 4 >> 2] = 0;
            HEAP32[$6_1 >> 2] = 0;
            HEAP32[$6_1 + 4 >> 2] = 0;
            $39_1 = 0;
            break label$2;
           }
           HEAP32[$10_1 + 8 >> 2] = 2;
           break label$3;
          }
          HEAP32[$10_1 + 240 >> 2] = 8;
          $14_1 = Math_fround(0.0);
          $16_1 = Math_fround(1.0);
          $18_1 = Math_fround(0.0);
          $20_1 = $137($19_1, $17_1, $15_1);
          if ($20_1 > Math_fround(0.0)) {
           $16_1 = Math_fround(Math_fround(1.0) / $20_1);
           $18_1 = Math_fround($16_1 * $15_1);
           $14_1 = Math_fround($16_1 * $17_1);
           $16_1 = Math_fround($19_1 * $16_1);
          }
          HEAP32[$10_1 + 292 >> 2] = 0;
          HEAP32[$10_1 + 296 >> 2] = 0;
          HEAPF32[$10_1 + 288 >> 2] = $18_1;
          HEAPF32[$10_1 + 284 >> 2] = $14_1;
          HEAPF32[$10_1 + 280 >> 2] = $16_1;
          HEAP32[$10_1 + 276 >> 2] = 1;
          HEAP32[$10_1 + 260 >> 2] = 1065353216;
          HEAP32[$10_1 + 244 >> 2] = HEAP32[$11_1 >> 2];
          $0_1 = 8;
          $11_1 = 1;
          break label$4;
         }
         $0_1 = HEAP32[$10_1 + 240 >> 2];
         break label$5;
        }
        $0_1 = 6;
       }
       HEAP32[$40_1 + 240 >> 2] = $0_1;
      }
      HEAPF32[$10_1 + 292 >> 2] = $16_1;
      HEAP32[$10_1 + 276 >> 2] = 3;
      HEAPF32[$10_1 + 284 >> 2] = $17_1;
      HEAPF32[$10_1 + 296 >> 2] = $18_1;
      HEAP32[$10_1 + 252 >> 2] = $27_1;
      HEAPF32[$10_1 + 280 >> 2] = $14_1;
      HEAPF32[$10_1 + 288 >> 2] = $15_1;
      $9_1 = $27_1 + 20 | 0;
      $19_1 = HEAPF32[$9_1 >> 2];
      HEAP32[$10_1 + 248 >> 2] = $28_1;
      $12_1 = $28_1 + 24 | 0;
      $20_1 = HEAPF32[$12_1 >> 2];
      $16_1 = HEAPF32[$27_1 + 24 >> 2];
      $11_1 = $28_1 + 20 | 0;
      $22_1 = HEAPF32[$11_1 >> 2];
      $25_1 = HEAPF32[$27_1 + 16 >> 2];
      $26_1 = HEAPF32[$28_1 + 16 >> 2];
      HEAP32[$10_1 + 244 >> 2] = $29_1;
      $17_1 = Math_fround($17_1 * $18_1);
      $22_1 = Math_fround($22_1 - $17_1);
      $15_1 = Math_fround($15_1 * $18_1);
      $16_1 = Math_fround($16_1 - $15_1);
      $20_1 = Math_fround($20_1 - $15_1);
      $19_1 = Math_fround($19_1 - $17_1);
      $37_1 = Math_fround(Math_fround($22_1 * $16_1) - Math_fround($20_1 * $19_1));
      $14_1 = Math_fround($14_1 * $18_1);
      $18_1 = Math_fround($25_1 - $14_1);
      $25_1 = Math_fround($20_1 * $18_1);
      $20_1 = Math_fround($26_1 - $14_1);
      $18_1 = $137($37_1, Math_fround($25_1 - Math_fround($20_1 * $16_1)), Math_fround(Math_fround($20_1 * $19_1) - Math_fround($22_1 * $18_1)));
      HEAPF32[$10_1 + 260 >> 2] = $18_1;
      $19_1 = Math_fround(HEAPF32[$9_1 >> 2] - $17_1);
      $9_1 = $29_1 + 24 | 0;
      $20_1 = Math_fround(HEAPF32[$9_1 >> 2] - $15_1);
      $13_1 = $29_1 + 20 | 0;
      $22_1 = Math_fround(HEAPF32[$13_1 >> 2] - $17_1);
      $37_1 = Math_fround(Math_fround($19_1 * $20_1) - Math_fround($16_1 * $22_1));
      $26_1 = $16_1;
      $16_1 = Math_fround(HEAPF32[$29_1 + 16 >> 2] - $14_1);
      $25_1 = Math_fround(HEAPF32[$27_1 + 16 >> 2] - $14_1);
      $16_1 = $137($37_1, Math_fround(Math_fround($26_1 * $16_1) - Math_fround($25_1 * $20_1)), Math_fround(Math_fround($25_1 * $22_1) - Math_fround($19_1 * $16_1)));
      HEAPF32[$10_1 + 264 >> 2] = $16_1;
      $19_1 = Math_fround(HEAPF32[$13_1 >> 2] - $17_1);
      $20_1 = Math_fround(HEAPF32[$12_1 >> 2] - $15_1);
      $15_1 = Math_fround(HEAPF32[$9_1 >> 2] - $15_1);
      $17_1 = Math_fround(HEAPF32[$11_1 >> 2] - $17_1);
      $22_1 = Math_fround(Math_fround($19_1 * $20_1) - Math_fround($15_1 * $17_1));
      $26_1 = $15_1;
      $15_1 = Math_fround(HEAPF32[$28_1 + 16 >> 2] - $14_1);
      $14_1 = Math_fround(HEAPF32[$29_1 + 16 >> 2] - $14_1);
      $15_1 = $137($22_1, Math_fround(Math_fround($26_1 * $15_1) - Math_fround($14_1 * $20_1)), Math_fround(Math_fround($14_1 * $17_1) - Math_fround($19_1 * $15_1)));
      $14_1 = Math_fround($15_1 + Math_fround($18_1 + $16_1));
      HEAPF32[$10_1 + 268 >> 2] = $15_1 / $14_1;
      HEAPF32[$10_1 + 264 >> 2] = $16_1 / $14_1;
      HEAPF32[$10_1 + 260 >> 2] = $18_1 / $14_1;
      $11_1 = 3;
     }
     label$27 : {
      if (($0_1 | 0) != 9) {
       $13_1 = 0;
       $15_1 = Math_fround(0.0);
       $0_1 = $32_1;
       $17_1 = Math_fround(0.0);
       $14_1 = Math_fround(0.0);
       while (1) {
        if ($11_1 >>> 0 <= $13_1 >>> 0) {
         break label$27
        }
        $548($10_1 + 224 | 0, $10_1 + 19136 | 0, HEAP32[$0_1 - 16 >> 2]);
        $13_1 = $13_1 + 1 | 0;
        $16_1 = HEAPF32[$0_1 >> 2];
        $14_1 = Math_fround(Math_fround($16_1 * HEAPF32[$10_1 + 232 >> 2]) + $14_1);
        $17_1 = Math_fround(Math_fround($16_1 * HEAPF32[$10_1 + 228 >> 2]) + $17_1);
        $15_1 = Math_fround(Math_fround(HEAPF32[$10_1 + 224 >> 2] * $16_1) + $15_1);
        $11_1 = HEAP32[$10_1 + 276 >> 2];
        $0_1 = $0_1 + 4 | 0;
        continue;
       };
      }
      HEAP32[$10_1 + 8 >> 2] = 3;
      $9_1 = 0;
      break label$3;
     }
     $9_1 = 1;
     HEAP32[$10_1 + 8 >> 2] = 1;
     $146($10_1 + 224 | 0, $4_1, $15_1, $17_1, $14_1);
     $0_1 = $10_1 + 232 | 0;
     $11_1 = HEAP32[$0_1 + 4 >> 2];
     $12_1 = $24_1 + 8 | 0;
     HEAP32[$12_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $11_1;
     $12_1 = HEAP32[$10_1 + 228 >> 2];
     HEAP32[$24_1 >> 2] = HEAP32[$10_1 + 224 >> 2];
     HEAP32[$24_1 + 4 >> 2] = $12_1;
     $16_1 = $15_1;
     $15_1 = HEAPF32[$10_1 + 296 >> 2];
     $146($10_1 + 224 | 0, $4_1, Math_fround($16_1 - Math_fround(HEAPF32[$10_1 + 280 >> 2] * $15_1)), Math_fround($17_1 - Math_fround($15_1 * HEAPF32[$10_1 + 284 >> 2])), Math_fround($14_1 - Math_fround($15_1 * HEAPF32[$10_1 + 288 >> 2])));
     $11_1 = HEAP32[$0_1 + 4 >> 2];
     $12_1 = $23_1 + 8 | 0;
     HEAP32[$12_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $11_1;
     $0_1 = HEAP32[$10_1 + 228 >> 2];
     HEAP32[$23_1 >> 2] = HEAP32[$10_1 + 224 >> 2];
     HEAP32[$23_1 + 4 >> 2] = $0_1;
     HEAP32[$10_1 + 56 >> 2] = 0;
     HEAPF32[$10_1 + 52 >> 2] = -HEAPF32[$10_1 + 288 >> 2];
     HEAPF32[$10_1 + 48 >> 2] = -HEAPF32[$10_1 + 284 >> 2];
     HEAPF32[$10_1 + 44 >> 2] = -HEAPF32[$10_1 + 280 >> 2];
     HEAPF32[$10_1 + 60 >> 2] = -HEAPF32[$10_1 + 296 >> 2];
    }
    label$30 : {
     label$31 : {
      if ($9_1) {
       break label$31
      }
      $541($2_1, $4_1, $3_1, $5_1, $10_1 + 8 | 0, $10_1 + 18752 | 0, 0);
      HEAP32[$30_1 >> 2] = 0;
      HEAP32[$30_1 + 4 >> 2] = 0;
      $0_1 = $30_1 + 8 | 0;
      HEAP32[$0_1 >> 2] = 0;
      HEAP32[$0_1 + 4 >> 2] = 0;
      HEAP32[$10_1 + 604 >> 2] = 0;
      HEAP32[$10_1 + 608 >> 2] = 0;
      HEAP32[$10_1 + 616 >> 2] = 2;
      HEAP32[$10_1 + 384 >> 2] = 0;
      $11_1 = $542($10_1 + 240 | 0, $10_1 + 18752 | 0, $10_1 - -64 | 0);
      if (!$11_1) {
       $15_1 = Math_fround(0.0);
       $0_1 = 0;
       $17_1 = Math_fround(0.0);
       $14_1 = Math_fround(0.0);
       $16_1 = Math_fround(0.0);
       $18_1 = Math_fround(0.0);
       $20_1 = Math_fround(0.0);
       $13_1 = 0;
       while (1) {
        $12_1 = HEAP32[$10_1 + 612 >> 2];
        if (HEAPU32[$12_1 + 32 >> 2] <= $13_1 >>> 0) {
         $146($10_1 + 19136 | 0, $4_1, $20_1, $18_1, $16_1);
         $0_1 = $10_1 + 19144 | 0;
         $13_1 = HEAP32[$0_1 + 4 >> 2];
         $12_1 = $24_1 + 8 | 0;
         HEAP32[$12_1 >> 2] = HEAP32[$0_1 >> 2];
         HEAP32[$12_1 + 4 >> 2] = $13_1;
         $12_1 = HEAP32[$10_1 + 19140 >> 2];
         HEAP32[$24_1 >> 2] = HEAP32[$10_1 + 19136 >> 2];
         HEAP32[$24_1 + 4 >> 2] = $12_1;
         $146($10_1 + 19136 | 0, $4_1, $14_1, $17_1, $15_1);
         $13_1 = HEAP32[$0_1 + 4 >> 2];
         $12_1 = $23_1 + 8 | 0;
         HEAP32[$12_1 >> 2] = HEAP32[$0_1 >> 2];
         HEAP32[$12_1 + 4 >> 2] = $13_1;
         $0_1 = HEAP32[$10_1 + 19140 >> 2];
         HEAP32[$23_1 >> 2] = HEAP32[$10_1 + 19136 >> 2];
         HEAP32[$23_1 + 4 >> 2] = $0_1;
         HEAP32[$10_1 + 56 >> 2] = 0;
         $15_1 = Math_fround($16_1 - $15_1);
         HEAPF32[$10_1 + 52 >> 2] = $15_1;
         $17_1 = Math_fround($18_1 - $17_1);
         HEAPF32[$10_1 + 48 >> 2] = $17_1;
         $14_1 = Math_fround($20_1 - $14_1);
         HEAPF32[$10_1 + 44 >> 2] = $14_1;
         $14_1 = $137($14_1, $17_1, $15_1);
         HEAPF32[$10_1 + 60 >> 2] = $14_1;
         $167($34_1, $14_1 > Math_fround(9.999999747378752e-05) ? $14_1 : Math_fround(1.0));
         $0_1 = 1;
         if ($11_1) {
          break label$30
         }
         break label$31;
        } else {
         $12_1 = $0_1 + $12_1 | 0;
         $19_1 = HEAPF32[$12_1 + 16 >> 2];
         $548($10_1 + 19136 | 0, $10_1 + 18752 | 0, HEAP32[$12_1 >> 2]);
         $22_1 = HEAPF32[$10_1 + 19136 >> 2];
         $25_1 = HEAPF32[$10_1 + 19140 >> 2];
         $26_1 = HEAPF32[$10_1 + 19144 >> 2];
         $12_1 = HEAP32[HEAP32[$10_1 + 612 >> 2] + $0_1 >> 2];
         $549($10_1 + 19136 | 0, $10_1 + 18752 | 0, Math_fround(-HEAPF32[$12_1 >> 2]), Math_fround(-HEAPF32[$12_1 + 4 >> 2]), Math_fround(-HEAPF32[$12_1 + 8 >> 2]));
         $0_1 = $0_1 + 4 | 0;
         $13_1 = $13_1 + 1 | 0;
         $16_1 = Math_fround(Math_fround($19_1 * $26_1) + $16_1);
         $18_1 = Math_fround(Math_fround($19_1 * $25_1) + $18_1);
         $20_1 = Math_fround(Math_fround($19_1 * $22_1) + $20_1);
         $15_1 = Math_fround(Math_fround($19_1 * HEAPF32[$10_1 + 19144 >> 2]) + $15_1);
         $17_1 = Math_fround(Math_fround($19_1 * HEAPF32[$10_1 + 19140 >> 2]) + $17_1);
         $14_1 = Math_fround(Math_fround($19_1 * HEAPF32[$10_1 + 19136 >> 2]) + $14_1);
         continue;
        }
       };
      }
      $0_1 = 1;
      break label$30;
     }
     $0_1 = HEAP32[$24_1 + 4 >> 2];
     HEAP32[$7_1 >> 2] = HEAP32[$24_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $0_1;
     $12_1 = $24_1 + 8 | 0;
     $11_1 = HEAP32[$12_1 + 4 >> 2];
     $0_1 = $7_1 + 8 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $11_1;
     $0_1 = HEAP32[$23_1 + 4 >> 2];
     HEAP32[$8_1 >> 2] = HEAP32[$23_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $0_1;
     $12_1 = $23_1 + 8 | 0;
     $11_1 = HEAP32[$12_1 + 4 >> 2];
     $0_1 = $8_1 + 8 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $11_1;
     $0_1 = HEAP32[$34_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$34_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $0_1;
     $12_1 = $34_1 + 8 | 0;
     $11_1 = HEAP32[$12_1 + 4 >> 2];
     $0_1 = $6_1 + 8 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $11_1;
     $39_1 = $9_1;
     $0_1 = 0;
    }
    $36_1 = $36_1 + 1 | 0;
    if ($0_1) {
     continue
    }
   }
   break;
  };
  global$0 = $10_1 + 19264 | 0;
  return $39_1 & 1;
 }
 
 function $559($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  HEAP32[$0_1 + 20 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 4096;
  HEAP32[$0_1 >> 2] = $1_1;
  $1_1 = $120($1_1 << 12);
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 + 16 >> 2] = $1_1;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $2_1;
  $2_1 = $2_1 - 1 | 0;
  while (1) {
   if ($2_1) {
    $3_1 = $1_1;
    $1_1 = HEAP32[$0_1 >> 2] + $1_1 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
    $2_1 = $2_1 - 1 | 0;
    continue;
   }
   break;
  };
  HEAP32[$1_1 >> 2] = 0;
 }
 
 function $560($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 56 >> 2]]($4_1, 28) | 0;
  $5_1 = HEAP32[$0_1 + 12 >> 2];
  $6_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$4_1 >> 2] = 15916;
  HEAP8[$4_1 + 8 | 0] = 0;
  HEAP32[$4_1 + 20 >> 2] = $6_1;
  HEAP32[$4_1 + 24 >> 2] = $5_1;
  $5_1 = HEAPU8[$0_1 + 4 | 0];
  HEAP8[$4_1 + 16 | 0] = $5_1;
  $0_1 = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = $0_1;
  $1_1 = $5_1 ? $3_1 : $2_1;
  $2_1 = $5_1 ? $2_1 : $3_1;
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, HEAP32[$1_1 + 8 >> 2], HEAP32[$2_1 + 8 >> 2]) | 0) {
   $0_1 = HEAP32[$4_1 + 4 >> 2];
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, HEAP32[$1_1 + 8 >> 2], HEAP32[$2_1 + 8 >> 2]) | 0;
   HEAP8[$4_1 + 8 | 0] = 1;
   HEAP32[$4_1 + 12 >> 2] = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $561($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 16) | 0;
  HEAP32[$0_1 >> 2] = 15844;
  HEAP8[$0_1 + 8 | 0] = 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP32[$0_1 + 12 >> 2] = 0;
  if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($1_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$3_1 + 8 >> 2]) | 0) {
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$3_1 + 8 >> 2]) | 0;
   HEAP8[$0_1 + 8 | 0] = 1;
   HEAP32[$0_1 + 12 >> 2] = $1_1;
  }
  return $0_1 | 0;
 }
 
 function $562($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 56 >> 2]]($4_1, 20) | 0;
  HEAP8[$4_1 + 8 | 0] = 0;
  HEAP32[$4_1 >> 2] = 15712;
  $5_1 = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  HEAP8[$4_1 + 16 | 0] = HEAPU8[$0_1 + 4 | 0];
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $0_1;
  if (!$0_1) {
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2]]($5_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$3_1 + 8 >> 2]) | 0;
   HEAP8[$4_1 + 8 | 0] = 1;
   HEAP32[$4_1 + 12 >> 2] = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $563($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 16) | 0;
  HEAP32[$0_1 >> 2] = 15576;
  HEAP8[$0_1 + 8 | 0] = 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP32[$0_1 + 12 >> 2] = 0;
  $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$3_1 + 8 >> 2]) | 0;
  HEAP8[$0_1 + 8 | 0] = 1;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $564($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 8) | 0;
  HEAP32[$0_1 >> 2] = 15516;
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
  return $0_1 | 0;
 }
 
 function $565($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 84) | 0;
  $493($0_1, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], $2_1, $3_1, 1);
  return $0_1 | 0;
 }
 
 function $566($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 116) | 0;
  $493($0_1, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], $2_1, $3_1, 0);
  HEAP8[$0_1 + 104 | 0] = 1;
  HEAP32[$0_1 >> 2] = 15352;
  HEAP32[$0_1 + 100 >> 2] = 0;
  HEAP32[$0_1 + 92 >> 2] = 0;
  HEAP32[$0_1 + 96 >> 2] = 0;
  $1_1 = $120(64);
  HEAP8[$1_1 + 20 | 0] = 1;
  HEAP32[$1_1 >> 2] = 15288;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP8[$1_1 + 40 | 0] = 1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 36 >> 2] = 0;
  HEAP8[$1_1 + 60 | 0] = 1;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 + 32 >> 2] = 0;
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = 0;
  $189($1_1 + 4 | 0, 2);
  $505($1_1);
  HEAP32[$0_1 + 84 >> 2] = $1_1;
  HEAP32[$0_1 + 108 >> 2] = HEAP32[HEAP32[$2_1 + 4 >> 2] + 72 >> 2];
  HEAP32[$0_1 + 112 >> 2] = HEAP32[HEAP32[$3_1 + 4 >> 2] + 72 >> 2];
  return $0_1 | 0;
 }
 
 function $567($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 84) | 0;
  $493($0_1, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], $2_1, $3_1, 0);
  return $0_1 | 0;
 }
 
 function $568($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 80) | 0;
  $467($0_1, HEAP32[$1_1 >> 2], $2_1, $3_1, 1);
  return $0_1 | 0;
 }
 
 function $569($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 80) | 0;
  $467($0_1, HEAP32[$1_1 >> 2], $2_1, $3_1, 0);
  return $0_1 | 0;
 }
 
 function $570($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 16128;
  if (HEAPU8[$0_1 + 20 | 0]) {
   $571(HEAP32[$0_1 + 16 >> 2]);
   $121(HEAP32[$0_1 + 16 >> 2]);
  }
  if (HEAPU8[$0_1 + 12 | 0]) {
   $571(HEAP32[$0_1 + 8 >> 2]);
   $121(HEAP32[$0_1 + 8 >> 2]);
  }
  $1_1 = HEAP32[$0_1 + 28 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 28 >> 2]);
  $1_1 = HEAP32[$0_1 + 32 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 32 >> 2]);
  $1_1 = HEAP32[$0_1 + 36 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 36 >> 2]);
  $1_1 = HEAP32[$0_1 + 40 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 40 >> 2]);
  $1_1 = HEAP32[$0_1 + 44 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 44 >> 2]);
  $1_1 = HEAP32[$0_1 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 48 >> 2]);
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 52 >> 2]);
  $1_1 = HEAP32[$0_1 + 56 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 56 >> 2]);
  $1_1 = HEAP32[$0_1 + 72 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 72 >> 2]);
  $1_1 = HEAP32[$0_1 + 76 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 76 >> 2]);
  $1_1 = HEAP32[$0_1 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 68 >> 2]);
  $1_1 = HEAP32[$0_1 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 84 >> 2]);
  $1_1 = HEAP32[$0_1 + 80 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 80 >> 2]);
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $121(HEAP32[$0_1 + 24 >> 2]);
  return $0_1 | 0;
 }
 
 function $571($0_1) {
  $121(HEAP32[$0_1 + 16 >> 2]);
 }
 
 function $572($0_1) {
  $0_1 = $0_1 | 0;
  $33($570($0_1));
 }
 
 function $573($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 8 >> 2];
 }
 
 function $574($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 16 >> 2];
 }
 
 function $575($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $4_1 = ($1_1 | 0) != 8;
  $3_1 = $0_1 + 56 | 0;
  label$1 : {
   if (!($4_1 | ($2_1 | 0) != 8)) {
    break label$1
   }
   $3_1 = $0_1 + 72 | 0;
   if (!(($2_1 | 0) != 1 | $4_1)) {
    break label$1
   }
   $3_1 = $0_1 + 76 | 0;
   if (!(($1_1 | 0) != 1 | ($2_1 | 0) != 8)) {
    break label$1
   }
   $3_1 = $0_1 + 68 | 0;
   if (!($1_1 | $2_1)) {
    break label$1
   }
   $3_1 = $0_1 + 84 | 0;
   if (!(($2_1 | 0) != 28 | ($1_1 | 0) > 19)) {
    break label$1
   }
   $3_1 = $0_1 + 80 | 0;
   if (!(($1_1 | 0) != 28 | ($2_1 | 0) > 19)) {
    break label$1
   }
   label$2 : {
    if (($1_1 | 0) <= 19) {
     $3_1 = $0_1 + 28 | 0;
     if (($2_1 | 0) <= 19) {
      break label$1
     }
     if ($2_1 - 21 >>> 0 > 8) {
      break label$2
     }
     $3_1 = $0_1 + 32 | 0;
     break label$1;
    }
    $3_1 = $0_1 + 36 | 0;
    if (!(($2_1 | 0) > 19 | $1_1 - 21 >>> 0 > 8)) {
     break label$1
    }
    if (($1_1 | 0) != 31) {
     break label$2
    }
    $3_1 = $0_1 + 44 | 0;
    if (($2_1 | 0) == 31) {
     break label$1
    }
    $3_1 = $0_1 + 40 | 0;
    break label$1;
   }
   $3_1 = $0_1 + 48 | 0;
   if (($2_1 | 0) == 31) {
    break label$1
   }
   $3_1 = $0_1 + 52 | 0;
  }
  return HEAP32[$3_1 >> 2];
 }
 
 function $576($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $4_1 = ($1_1 | 0) != 8;
  $3_1 = $0_1 + 56 | 0;
  label$1 : {
   if (!($4_1 | ($2_1 | 0) != 8)) {
    break label$1
   }
   $3_1 = $0_1 + 72 | 0;
   if (!(($2_1 | 0) != 1 | $4_1)) {
    break label$1
   }
   $3_1 = $0_1 + 76 | 0;
   if (!(($1_1 | 0) != 1 | ($2_1 | 0) != 8)) {
    break label$1
   }
   $3_1 = $0_1 + 84 | 0;
   if (!(($2_1 | 0) != 28 | ($1_1 | 0) > 19)) {
    break label$1
   }
   $3_1 = $0_1 + 80 | 0;
   if (!(($1_1 | 0) != 28 | ($2_1 | 0) > 19)) {
    break label$1
   }
   label$2 : {
    if (($1_1 | 0) <= 19) {
     $3_1 = $0_1 + 28 | 0;
     if (($2_1 | 0) <= 19) {
      break label$1
     }
     if ($2_1 - 21 >>> 0 > 8) {
      break label$2
     }
     $3_1 = $0_1 + 32 | 0;
     break label$1;
    }
    $3_1 = $0_1 + 36 | 0;
    if (!(($2_1 | 0) > 19 | $1_1 - 21 >>> 0 > 8)) {
     break label$1
    }
    if (($1_1 | 0) != 31) {
     break label$2
    }
    $3_1 = $0_1 + 44 | 0;
    if (($2_1 | 0) == 31) {
     break label$1
    }
    $3_1 = $0_1 + 40 | 0;
    break label$1;
   }
   $3_1 = $0_1 + 48 | 0;
   if (($2_1 | 0) == 31) {
    break label$1
   }
   $3_1 = $0_1 + 52 | 0;
  }
  return HEAP32[$3_1 >> 2];
 }
 
 function $577($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 112 | 0;
  global$0 = $3_1;
  $5_1 = HEAP32[HEAP32[$0_1 >> 2] >> 2];
  $6_1 = HEAP32[HEAP32[$0_1 + 4 >> 2] >> 2];
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($1_1, $5_1, $6_1) | 0)) {
    break label$1
   }
   HEAP32[$3_1 + 104 >> 2] = -1;
   HEAP32[$3_1 + 96 >> 2] = 0;
   HEAP32[$3_1 + 100 >> 2] = -1;
   HEAP32[$3_1 + 80 >> 2] = 0;
   HEAP32[$3_1 + 88 >> 2] = $5_1;
   HEAP32[$3_1 + 92 >> 2] = $5_1 + 4;
   HEAP32[$3_1 + 84 >> 2] = HEAP32[$5_1 + 192 >> 2];
   HEAP32[$3_1 + 72 >> 2] = -1;
   HEAP32[$3_1 + 64 >> 2] = 0;
   HEAP32[$3_1 + 68 >> 2] = -1;
   HEAP32[$3_1 + 48 >> 2] = 0;
   HEAP32[$3_1 + 56 >> 2] = $6_1;
   HEAP32[$3_1 + 60 >> 2] = $6_1 + 4;
   HEAP32[$3_1 + 52 >> 2] = HEAP32[$6_1 + 192 >> 2];
   $4_1 = HEAP32[$0_1 + 8 >> 2];
   if (!$4_1) {
    $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 80 | 0, $3_1 + 48 | 0, 0, 1) | 0;
    HEAP32[$0_1 + 8 >> 2] = $4_1;
    if (!$4_1) {
     break label$1
    }
   }
   HEAP32[$3_1 + 40 >> 2] = 0;
   HEAP32[$3_1 + 12 >> 2] = 0;
   HEAP32[$3_1 + 8 >> 2] = 13860;
   $0_1 = HEAP32[$2_1 + 8 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $3_1 + 48;
   HEAP32[$3_1 + 16 >> 2] = $3_1 + 80;
   if (($0_1 | 0) == 1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $3_1 + 80 | 0, $3_1 + 48 | 0, $2_1, $3_1 + 8 | 0);
    break label$1;
   }
   $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $5_1, $6_1, $2_1, $3_1 + 8 | 0));
   if (!($7_1 < HEAPF32[$2_1 + 12 >> 2])) {
    break label$1
   }
   HEAPF32[$2_1 + 12 >> 2] = $7_1;
  }
  global$0 = $3_1 + 112 | 0;
 }
 
 function $578($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 17132;
  $124($0_1 + 8 | 0);
  return $0_1 | 0;
 }
 
 function $579($0_1) {
  $0_1 = $0_1 | 0;
  $33($578($0_1));
 }
 
 function $580($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $3_1;
  HEAP32[$5_1 + 8 >> 2] = $0_1;
  $3_1 = HEAP32[HEAP32[$2_1 + 4 >> 2] + 4 >> 2];
  $6_1 = HEAP32[HEAP32[$1_1 + 4 >> 2] + 4 >> 2];
  label$1 : {
   if (($4_1 | 0) == 1) {
    $0_1 = HEAP32[((Math_imul($6_1, 144) + $0_1 | 0) + ($3_1 << 2) | 0) + 76 >> 2];
    $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $5_1 + 8 | 0, $1_1, $2_1) | 0;
    break label$1;
   }
   $0_1 = HEAP32[((Math_imul($6_1, 144) + $0_1 | 0) + ($3_1 << 2) | 0) + 5260 >> 2];
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $5_1 + 8 | 0, $1_1, $2_1) | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $581($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  if (HEAP32[$0_1 + 4 >> 2] & 2) {
   $3_1 = HEAP32[$1_1 + 192 >> 2];
   $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 20 >> 2]]($3_1, Math_fround(.019999999552965164)));
   HEAPF32[$5_1 + 12 >> 2] = $6_1;
   $3_1 = HEAP32[$2_1 + 192 >> 2];
   $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 20 >> 2]]($3_1, Math_fround(.019999999552965164)));
   HEAPF32[$5_1 + 8 >> 2] = $7_1;
   $3_1 = $6_1 < $7_1 ? $5_1 + 12 | 0 : $5_1 + 8 | 0;
  } else {
   $3_1 = 13612
  }
  $8_1 = HEAPF32[$3_1 >> 2];
  $6_1 = HEAPF32[$2_1 + 184 >> 2];
  $7_1 = HEAPF32[$1_1 + 184 >> 2];
  $4_1 = HEAP32[$0_1 + 72 >> 2];
  $3_1 = HEAP32[$4_1 + 12 >> 2];
  label$3 : {
   label$4 : {
    if ($3_1) {
     HEAP32[$4_1 + 12 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 8 >> 2] - 1;
     break label$4;
    }
    $3_1 = 0;
    if (HEAPU8[$0_1 + 4 | 0] & 4) {
     break label$3
    }
    $3_1 = $120(852);
   }
   $6_1 = $6_1 > $7_1 ? $7_1 : $6_1;
   HEAP32[$3_1 >> 2] = 1025;
   $4_1 = 120;
   while (1) {
    $2($3_1 + $4_1 | 0, 0, 48);
    $4_1 = $4_1 + 204 | 0;
    if (($4_1 | 0) != 936) {
     continue
    }
    break;
   };
   HEAP32[$3_1 + 840 >> 2] = 0;
   HEAP32[$3_1 + 844 >> 2] = 0;
   HEAPF32[$3_1 + 836 >> 2] = $6_1;
   HEAPF32[$3_1 + 832 >> 2] = $8_1;
   HEAP32[$3_1 + 828 >> 2] = 0;
   HEAP32[$3_1 + 824 >> 2] = $2_1;
   HEAP32[$3_1 + 820 >> 2] = $1_1;
   HEAP32[$3_1 + 848 >> 2] = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $3_1;
   $459($0_1 + 8 | 0, $5_1 + 4 | 0);
  }
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $582($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, $1_1);
  $4_1 = $0_1 + 20 | 0;
  $2_1 = HEAP32[$4_1 >> 2];
  $5_1 = HEAP32[$1_1 + 848 >> 2];
  $6_1 = $5_1 << 2;
  $3_1 = $2_1 + $6_1 | 0;
  $8_1 = HEAP32[$3_1 >> 2];
  $9_1 = $3_1;
  $10_1 = $2_1;
  $2_1 = $0_1 + 12 | 0;
  $3_1 = HEAP32[$2_1 >> 2] - 1 | 0;
  $7_1 = $3_1 << 2;
  HEAP32[$9_1 >> 2] = HEAP32[$10_1 + $7_1 >> 2];
  HEAP32[HEAP32[$4_1 >> 2] + $7_1 >> 2] = $8_1;
  HEAP32[$2_1 >> 2] = $3_1;
  HEAP32[HEAP32[HEAP32[$4_1 >> 2] + $6_1 >> 2] + 848 >> 2] = $5_1;
  $0_1 = HEAP32[$0_1 + 72 >> 2];
  if ($583($0_1, $1_1)) {
   HEAP32[$1_1 >> 2] = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$0_1 + 12 >> 2] = $1_1;
   HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] + 1;
   return;
  }
  $121($1_1);
 }
 
 function $583($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    $3_1 = HEAP32[$0_1 + 16 >> 2];
    if ($3_1 >>> 0 > $1_1 >>> 0) {
     break label$2
    }
    $2_1 = 1;
    if (Math_imul(HEAP32[$0_1 >> 2], HEAP32[$0_1 + 4 >> 2]) + $3_1 >>> 0 > $1_1 >>> 0) {
     break label$1
    }
   }
   $2_1 = 0;
  }
  return $2_1;
 }
 
 function $584($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $526($1_1);
 }
 
 function $585($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch (HEAP32[$1_1 + 220 >> 2] - 2 | 0) {
     case 0:
     case 3:
      break label$3;
     default:
      break label$2;
     };
    }
    $0_1 = 0;
    switch (HEAP32[$2_1 + 220 >> 2] - 2 | 0) {
    case 0:
    case 3:
     break label$1;
    default:
     break label$2;
    };
   }
   label$4 : {
    if (HEAP32[$1_1 + 284 >> 2]) {
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $2_1) | 0)) {
      break label$4
     }
    }
    $0_1 = 1;
    if (!HEAP32[$2_1 + 284 >> 2]) {
     break label$1
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $1_1) | 0) {
     break label$1
    }
   }
   $0_1 = 0;
  }
  return $0_1 | 0;
 }
 
 function $586($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $0_1 = 0;
  $1_1 = HEAP32[$1_1 + 204 >> 2];
  label$1 : {
   if ($1_1 & 4) {
    break label$1
   }
   $2_1 = HEAP32[$2_1 + 204 >> 2];
   if ($2_1 & 4) {
    break label$1
   }
   if (!($1_1 & 3)) {
    return 1
   }
   $0_1 = !($2_1 & 3);
  }
  return $0_1 | 0;
 }
 
 function $587($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $0_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = 17216;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 52 >> 2]]($1_1, $4_1, $3_1, $2_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $588($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 12 >> 2];
 }
 
 function $589($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[HEAP32[$0_1 + 20 >> 2] + ($1_1 << 2) >> 2];
 }
 
 function $590($0_1) {
  $0_1 = $0_1 | 0;
  if (!HEAP32[$0_1 + 12 >> 2]) {
   return 0
  }
  return HEAP32[$0_1 + 20 >> 2];
 }
 
 function $591($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 72 >> 2];
 }
 
 function $592($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $0_1 = HEAP32[$0_1 + 68 >> 2];
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  if ($2_1) {
   HEAP32[$0_1 + 12 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] - 1;
   return $2_1 | 0;
  }
  return $120($1_1) | 0;
 }
 
 function $593($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $0_1 = HEAP32[$0_1 + 68 >> 2];
   if ($583($0_1, $1_1)) {
    if (!$1_1) {
     break label$1
    }
    HEAP32[$1_1 >> 2] = HEAP32[$0_1 + 12 >> 2];
    HEAP32[$0_1 + 12 >> 2] = $1_1;
    HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] + 1;
    return;
   }
   $121($1_1);
  }
 }
 
 function $594($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1_1;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[$1_1 + 64 >> 2]]($2_1, $1_1, HEAP32[$0_1 + 4 >> 2]);
  return 0;
 }
 
 function $595($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $5_1 = HEAP32[$0_1 + 32 >> 2];
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   if (($5_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   HEAP32[$3_1 + 12 >> 2] = 0;
   $204($0_1 + 28 | 0, $1_1, $3_1 + 12 | 0);
   HEAP32[$3_1 + 8 >> 2] = 0;
   $204($0_1 + 48 | 0, $1_1, $3_1 + 8 | 0);
   $2_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   $1_1 = $2_1;
   while (1) if ($1_1) {
    HEAP32[HEAP32[$0_1 + 40 >> 2] + $4_1 >> 2] = -1;
    $1_1 = $1_1 - 1 | 0;
    $4_1 = $4_1 + 4 | 0;
    continue;
   } else {
    $1_1 = 0;
    while (1) if ($2_1) {
     HEAP32[HEAP32[$0_1 + 60 >> 2] + $1_1 >> 2] = -1;
     $2_1 = $2_1 - 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue;
    } else {
     $1_1 = 0;
     $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
     $4_1 = 0;
     $2_1 = 0;
     while (1) {
      if (($2_1 | 0) == ($5_1 | 0)) {
       break label$1
      }
      $7_1 = HEAP32[$0_1 + 60 >> 2] + $1_1 | 0;
      $6_1 = HEAP32[$0_1 + 16 >> 2] + $4_1 | 0;
      $6_1 = HEAP32[$0_1 + 40 >> 2] + ((HEAP32[$0_1 + 12 >> 2] - 1 & $506(HEAP32[HEAP32[$6_1 >> 2] + 12 >> 2], HEAP32[HEAP32[$6_1 + 4 >> 2] + 12 >> 2])) << 2) | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$6_1 >> 2] = $2_1;
      $1_1 = $1_1 + 4 | 0;
      $4_1 = $4_1 + 16 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue;
     };
    };
   };
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $596($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 17328;
  $124($0_1 + 48 | 0);
  $124($0_1 + 28 | 0);
  $124($0_1 + 4 | 0);
  return $0_1 | 0;
 }
 
 function $597($0_1) {
  $0_1 = $0_1 | 0;
  $121($596($0_1));
 }
 
 function $598($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $3_1 = HEAP32[$0_1 + 24 >> 2];
  label$1 : {
   label$2 : {
    if ($3_1) {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $1_1, $2_1) | 0) {
      break label$2
     }
     break label$1;
    }
    if (!(HEAP32[$2_1 + 8 >> 2] & HEAP32[$1_1 + 4 >> 2]) | !(HEAP32[$1_1 + 8 >> 2] & HEAP32[$2_1 + 4 >> 2])) {
     break label$1
    }
   }
   $5_1 = HEAP32[$1_1 + 12 >> 2] > HEAP32[$2_1 + 12 >> 2];
   $7_1 = $5_1 ? $1_1 : $2_1;
   $4_1 = HEAP32[$7_1 + 12 >> 2];
   $10_1 = HEAP32[$0_1 + 16 >> 2];
   $6_1 = HEAP32[$0_1 + 40 >> 2];
   $3_1 = HEAP32[$0_1 + 60 >> 2];
   $8_1 = HEAP32[$0_1 + 12 >> 2];
   $9_1 = $5_1 ? $2_1 : $1_1;
   $1_1 = HEAP32[$9_1 + 12 >> 2];
   $2_1 = $506($1_1, $4_1);
   $5_1 = $8_1 - 1 & $2_1;
   $6_1 = $599($10_1, $6_1, $3_1, $1_1, $4_1, $5_1);
   if ($6_1) {
    break label$1
   }
   $4_1 = HEAP32[$0_1 + 8 >> 2];
   $1_1 = $4_1;
   if (($1_1 | 0) == ($8_1 | 0)) {
    $383($0_1 + 4 | 0, $8_1 ? $8_1 << 1 : 1);
    $10_1 = HEAP32[$0_1 + 16 >> 2];
    $1_1 = HEAP32[$0_1 + 8 >> 2];
   }
   HEAP32[$0_1 + 8 >> 2] = $1_1 + 1;
   $1_1 = HEAP32[$0_1 + 68 >> 2];
   if ($1_1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $9_1, $7_1) | 0
   }
   $6_1 = ($4_1 << 4) + $10_1 | 0;
   if (($8_1 | 0) < HEAP32[$0_1 + 12 >> 2]) {
    $595($0_1);
    $5_1 = $2_1 & HEAP32[$0_1 + 12 >> 2] - 1;
   }
   $2_1 = HEAP32[$7_1 + 12 >> 2];
   $1_1 = HEAP32[$9_1 + 12 >> 2];
   $3_1 = ($4_1 << 4) + $10_1 | 0;
   HEAP32[$3_1 + 8 >> 2] = 0;
   HEAP32[$3_1 + 12 >> 2] = 0;
   $1_1 = ($1_1 | 0) < ($2_1 | 0);
   HEAP32[$3_1 + 4 >> 2] = $1_1 ? $7_1 : $9_1;
   HEAP32[$6_1 >> 2] = $1_1 ? $9_1 : $7_1;
   $1_1 = HEAP32[$0_1 + 60 >> 2] + ($4_1 << 2) | 0;
   $0_1 = HEAP32[$0_1 + 40 >> 2] + ($5_1 << 2) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$0_1 >> 2] = $4_1;
  }
  return $6_1 | 0;
 }
 
 function $599($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0;
  $1_1 = ($5_1 << 2) + $1_1 | 0;
  while (1) {
   label$2 : {
    $1_1 = HEAP32[$1_1 >> 2];
    if (($1_1 | 0) == -1) {
     $5_1 = 0;
     break label$2;
    }
    $6_1 = $1_1 << 4;
    $5_1 = $6_1 + $0_1 | 0;
    if (HEAP32[HEAP32[($0_1 + $6_1 | 0) + 4 >> 2] + 12 >> 2] == ($4_1 | 0) ? HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2] == ($3_1 | 0) : 0) {
     break label$2
    }
    $1_1 = ($1_1 << 2) + $2_1 | 0;
    continue;
   }
   break;
  };
  return $5_1;
 }
 
 function $600($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $5_1 = HEAP32[$1_1 + 12 >> 2] > HEAP32[$2_1 + 12 >> 2];
  $7_1 = $5_1 ? $1_1 : $2_1;
  $6_1 = HEAP32[$7_1 + 12 >> 2];
  $4_1 = -1;
  $10_1 = $0_1 + 16 | 0;
  $8_1 = HEAP32[$10_1 >> 2];
  $9_1 = $0_1 + 40 | 0;
  $12_1 = HEAP32[$9_1 >> 2];
  $11_1 = $0_1 + 60 | 0;
  $13_1 = HEAP32[$11_1 >> 2];
  $5_1 = $5_1 ? $2_1 : $1_1;
  $1_1 = HEAP32[$5_1 + 12 >> 2];
  $2_1 = HEAP32[$0_1 + 12 >> 2] - 1 & $506($1_1, $6_1);
  $1_1 = $599($8_1, $12_1, $13_1, $1_1, $6_1, $2_1);
  if (!$1_1) {
   return 0
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 32 >> 2]]($0_1, $1_1, $3_1);
  $6_1 = $1_1 - HEAP32[$10_1 >> 2] >> 4;
  $10_1 = HEAP32[$1_1 + 12 >> 2];
  $8_1 = HEAP32[$9_1 >> 2] + ($2_1 << 2) | 0;
  $2_1 = $8_1;
  while (1) {
   $1_1 = HEAP32[$2_1 >> 2];
   if (($6_1 | 0) != ($1_1 | 0)) {
    $2_1 = HEAP32[$11_1 >> 2] + ($1_1 << 2) | 0;
    $4_1 = $1_1;
    continue;
   }
   break;
  };
  $1_1 = HEAP32[$0_1 + 60 >> 2];
  HEAP32[(($4_1 | 0) == -1 ? $8_1 : $1_1 + ($4_1 << 2) | 0) >> 2] = HEAP32[$1_1 + ($6_1 << 2) >> 2];
  $4_1 = HEAP32[$0_1 + 8 >> 2] - 1 | 0;
  $1_1 = HEAP32[$0_1 + 68 >> 2];
  if ($1_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $5_1, $7_1, $3_1) | 0
  }
  if (($4_1 | 0) != ($6_1 | 0)) {
   $1_1 = -1;
   $7_1 = $0_1 + 60 | 0;
   $3_1 = HEAP32[$0_1 + 40 >> 2];
   $5_1 = HEAP32[$0_1 + 16 >> 2];
   $2_1 = $5_1 + ($4_1 << 4) | 0;
   $8_1 = HEAP32[$0_1 + 12 >> 2] - 1 & $506(HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2], HEAP32[HEAP32[$2_1 + 4 >> 2] + 12 >> 2]);
   $9_1 = $3_1 + ($8_1 << 2) | 0;
   $2_1 = $9_1;
   while (1) {
    $3_1 = HEAP32[$2_1 >> 2];
    if (($4_1 | 0) != ($3_1 | 0)) {
     $2_1 = HEAP32[$7_1 >> 2] + ($3_1 << 2) | 0;
     $1_1 = $3_1;
     continue;
    }
    break;
   };
   $3_1 = $0_1 + 60 | 0;
   $2_1 = HEAP32[$3_1 >> 2];
   HEAP32[(($1_1 | 0) == -1 ? $9_1 : $2_1 + ($1_1 << 2) | 0) >> 2] = HEAP32[$2_1 + ($4_1 << 2) >> 2];
   $1_1 = $5_1 + ($6_1 << 4) | 0;
   $7_1 = $1_1 + 8 | 0;
   $2_1 = $5_1 + ($4_1 << 4) | 0;
   $4_1 = $2_1 + 8 | 0;
   $5_1 = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $5_1;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   $1_1 = HEAP32[$0_1 + 40 >> 2] + ($8_1 << 2) | 0;
   HEAP32[HEAP32[$3_1 >> 2] + ($6_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$1_1 >> 2] = $6_1;
  }
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] - 1;
  return $10_1 | 0;
 }
 
 function $601($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  HEAP32[$3_1 + 8 >> 2] = 17564;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1, $3_1 + 8 | 0, $2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $602($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 4 | 0;
 }
 
 function $603($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0_1 = HEAP32[$1_1 + 8 >> 2];
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] >> 2]]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 60 >> 2]]($2_1, HEAP32[$1_1 + 8 >> 2]);
   HEAP32[$1_1 + 8 >> 2] = 0;
  }
 }
 
 function $604($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 8 >> 2];
 }
 
 function $605($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $2_1;
  HEAP32[$3_1 + 8 >> 2] = $0_1;
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = 17420;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1, $3_1, $2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $606($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 24 >> 2] = $1_1;
 }
 
 function $607($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 8 >> 2] > ($3_1 | 0)) {
    $4_1 = HEAP32[$0_1 + 16 >> 2] + ($3_1 << 4) | 0;
    if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $4_1) | 0) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, HEAP32[$4_1 >> 2], HEAP32[$4_1 + 4 >> 2], $2_1) | 0
    } else {
     $3_1 = $3_1 + 1 | 0
    }
    continue;
   }
   break;
  };
 }
 
 function $608($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  label$1 : {
   if (HEAPU8[$3_1 + 40 | 0]) {
    $11_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
    HEAP32[$4_1 + 36 >> 2] = 0;
    HEAP8[$4_1 + 40 | 0] = 1;
    HEAP32[$4_1 + 28 >> 2] = 0;
    HEAP32[$4_1 + 32 >> 2] = 0;
    $5_1 = HEAP32[$11_1 + 4 >> 2];
    HEAP32[$4_1 + 16 >> 2] = 0;
    HEAP32[$4_1 + 8 >> 2] = 0;
    HEAP32[$4_1 + 12 >> 2] = 0;
    $3_1 = 0;
    label$3 : {
     if (($5_1 | 0) < 0) {
      break label$3
     }
     if ($5_1) {
      $3_1 = $120(Math_imul($5_1, 12));
      $163($4_1 + 24 | 0);
      HEAP32[$4_1 + 36 >> 2] = $3_1;
      HEAP8[$4_1 + 40 | 0] = 1;
      HEAP32[$4_1 + 32 >> 2] = $5_1;
     }
     $6_1 = $5_1;
     while (1) {
      $3_1 = HEAP32[$4_1 + 36 >> 2];
      if (!$6_1) {
       break label$3
      }
      $10_1 = HEAP32[$4_1 + 12 >> 2];
      $3_1 = $3_1 + $8_1 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 + 8 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $10_1;
      HEAP32[$3_1 + 8 >> 2] = HEAP32[$4_1 + 16 >> 2];
      $6_1 = $6_1 - 1 | 0;
      $8_1 = $8_1 + 12 | 0;
      continue;
     };
    }
    HEAP32[$4_1 + 28 >> 2] = $5_1;
    $12_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
    $6_1 = HEAP32[$11_1 + 12 >> 2];
    while (1) {
     if (($7_1 | 0) == ($12_1 | 0)) {
      if (($5_1 | 0) >= 2) {
       $609($4_1 + 24 | 0, 0, $5_1 - 1 | 0)
      }
      $7_1 = 0;
     } else {
      $8_1 = -1;
      $10_1 = -1;
      $9_1 = HEAP32[$6_1 >> 2];
      if ($9_1) {
       $10_1 = HEAP32[$9_1 + 12 >> 2]
      }
      $9_1 = HEAP32[$6_1 + 4 >> 2];
      if ($9_1) {
       $8_1 = HEAP32[$9_1 + 12 >> 2]
      }
      HEAP32[$3_1 >> 2] = $7_1;
      HEAP32[$3_1 + 8 >> 2] = $8_1;
      HEAP32[$3_1 + 4 >> 2] = $10_1;
      $3_1 = $3_1 + 12 | 0;
      $6_1 = $6_1 + 16 | 0;
      $7_1 = $7_1 + 1 | 0;
      continue;
     }
     break;
    };
    while (1) {
     if (HEAP32[$4_1 + 28 >> 2] > ($7_1 | 0)) {
      $3_1 = HEAP32[$11_1 + 12 >> 2] + (HEAP32[HEAP32[$4_1 + 36 >> 2] + Math_imul($7_1, 12) >> 2] << 4) | 0;
      if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1) | 0) {
       FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, HEAP32[$3_1 >> 2], HEAP32[$3_1 + 4 >> 2], $2_1) | 0
      } else {
       $7_1 = $7_1 + 1 | 0
      }
      continue;
     }
     break;
    };
    $163($4_1 + 24 | 0);
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1, $1_1, $2_1);
  }
  global$0 = $4_1 + 48 | 0;
 }
 
 function $609($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = HEAP32[$0_1 + 12 >> 2];
  $3_1 = $8_1 + Math_imul(($1_1 + $2_1 | 0) / 2 | 0, 12) | 0;
  $13_1 = HEAP32[$3_1 + 8 >> 2];
  $10_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $1_1;
  $5_1 = $2_1;
  label$1 : while (1) {
   $4_1 = Math_imul($3_1, 12) + $8_1 | 0;
   while (1) {
    label$3 : {
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     if (($6_1 | 0) > ($10_1 | 0)) {
      break label$3
     }
     $12_1 = $4_1 + 8 | 0;
     if (HEAP32[$12_1 >> 2] > ($13_1 | 0) ? ($6_1 | 0) == ($10_1 | 0) : 0) {
      break label$3
     }
     $6_1 = Math_imul($5_1, 12);
     while (1) {
      label$6 : {
       $11_1 = $6_1 + $8_1 | 0;
       $9_1 = HEAP32[$11_1 + 4 >> 2];
       if (($9_1 | 0) >= ($10_1 | 0)) {
        $14_1 = $11_1 + 8 | 0;
        if (($9_1 | 0) != ($10_1 | 0) | HEAP32[$14_1 >> 2] >= ($13_1 | 0)) {
         break label$6
        }
       }
       $6_1 = $6_1 - 12 | 0;
       $5_1 = $5_1 - 1 | 0;
       continue;
      }
      break;
     };
     if (($3_1 | 0) <= ($5_1 | 0)) {
      $8_1 = $7_1 + 8 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$12_1 >> 2];
      $9_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $9_1;
      $9_1 = HEAP32[$11_1 + 4 >> 2];
      HEAP32[$4_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $9_1;
      HEAP32[$12_1 >> 2] = HEAP32[$14_1 >> 2];
      $4_1 = HEAP32[$0_1 + 12 >> 2] + $6_1 | 0;
      $6_1 = HEAP32[$7_1 + 4 >> 2];
      HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $6_1;
      HEAP32[$4_1 + 8 >> 2] = HEAP32[$8_1 >> 2];
      $5_1 = $5_1 - 1 | 0;
      $3_1 = $3_1 + 1 | 0;
     }
     if (($3_1 | 0) <= ($5_1 | 0)) {
      $8_1 = HEAP32[$0_1 + 12 >> 2];
      continue label$1;
     }
     if (($1_1 | 0) < ($5_1 | 0)) {
      $609($0_1, $1_1, $5_1)
     }
     if (($2_1 | 0) > ($3_1 | 0)) {
      $609($0_1, $3_1, $2_1)
     }
     global$0 = $7_1 + 16 | 0;
     return;
    }
    $4_1 = $4_1 + 12 | 0;
    $3_1 = $3_1 + 1 | 0;
    continue;
   };
  };
 }
 
 function $610($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$1_1 + 12 >> 2] > HEAP32[$2_1 + 12 >> 2];
  $4_1 = HEAP32[($3_1 ? $2_1 : $1_1) + 12 >> 2];
  $3_1 = HEAP32[($3_1 ? $1_1 : $2_1) + 12 >> 2];
  $1_1 = HEAP32[$0_1 + 12 >> 2] - 1 & $506($4_1, $3_1);
  label$1 : {
   label$2 : {
    if (($1_1 | 0) >= HEAP32[$0_1 + 32 >> 2]) {
     break label$2
    }
    $1_1 = HEAP32[$0_1 + 40 >> 2] + ($1_1 << 2) | 0;
    while (1) {
     $1_1 = HEAP32[$1_1 >> 2];
     if (($1_1 | 0) == -1) {
      break label$2
     }
     $5_1 = HEAP32[$0_1 + 16 >> 2];
     $6_1 = $1_1 << 4;
     $2_1 = $5_1 + $6_1 | 0;
     if (($3_1 | 0) == HEAP32[HEAP32[($5_1 + $6_1 | 0) + 4 >> 2] + 12 >> 2] ? HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2] == ($4_1 | 0) : 0) {
      break label$1
     }
     $1_1 = HEAP32[$0_1 + 60 >> 2] + ($1_1 << 2) | 0;
     continue;
    };
   }
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $611($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 68 >> 2] = $1_1;
 }
 
 function $612($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 20 >> 2] = 0;
  HEAP8[$3_1 + 24 | 0] = 1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 + 16 >> 2] = 0;
  while (1) {
   if (HEAP32[$0_1 + 8 >> 2] <= ($8_1 | 0)) {
    $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0
   } else {
    $5_1 = HEAP32[$0_1 + 16 >> 2];
    if (HEAP32[$3_1 + 16 >> 2] == ($2_1 | 0)) {
     $383($3_1 + 8 | 0, $2_1 ? $2_1 << 1 : 1);
     $4_1 = HEAP32[$3_1 + 20 >> 2];
     $2_1 = HEAP32[$3_1 + 12 >> 2];
    }
    $5_1 = $5_1 + $9_1 | 0;
    $7_1 = HEAP32[$5_1 + 4 >> 2];
    $6_1 = ($2_1 << 4) + $4_1 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $7_1;
    $5_1 = $5_1 + 8 | 0;
    $7_1 = HEAP32[$5_1 + 4 >> 2];
    $6_1 = $6_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $7_1;
    $2_1 = $2_1 + 1 | 0;
    HEAP32[$3_1 + 12 >> 2] = $2_1;
    $9_1 = $9_1 + 16 | 0;
    $8_1 = $8_1 + 1 | 0;
    continue;
   }
   break;
  };
  while (1) {
   if ($2_1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, HEAP32[$4_1 >> 2], HEAP32[$4_1 + 4 >> 2], $1_1) | 0;
    $4_1 = $4_1 + 16 | 0;
    $2_1 = $2_1 - 1 | 0;
    continue;
   }
   break;
  };
  $4_1 = 0;
  $2_1 = 0;
  while (1) {
   if (($2_1 | 0) < HEAP32[$0_1 + 52 >> 2]) {
    HEAP32[HEAP32[$0_1 + 60 >> 2] + $4_1 >> 2] = -1;
    $4_1 = $4_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
  $613($3_1 + 8 | 0);
  $4_1 = 0;
  $2_1 = 0;
  while (1) {
   if (($2_1 | 0) < HEAP32[$3_1 + 12 >> 2]) {
    $1_1 = HEAP32[$3_1 + 20 >> 2] + $4_1 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]) | 0;
    $4_1 = $4_1 + 16 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
  $124($3_1 + 8 | 0);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $613($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  if (($1_1 | 0) >= 2) {
   $635($0_1, 0, $1_1 - 1 | 0)
  }
 }
 
 function $614($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (!(($2_1 | 0) != HEAP32[$1_1 + 4 >> 2] ? ($2_1 | 0) != HEAP32[$1_1 >> 2] : 0)) {
   $2_1 = HEAP32[$0_1 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 32 >> 2]]($2_1, $1_1, HEAP32[$0_1 + 12 >> 2]);
  }
  return 0;
 }
 
 function $615($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  return ($0_1 | 0) == HEAP32[$1_1 >> 2] | ($0_1 | 0) == HEAP32[$1_1 + 4 >> 2];
 }
 
 function $616($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP8[$0_1 + 16 | 0] = 1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  $204($0_1, $3_1, $2_1 + 12 | 0);
  $216($1_1, $3_1, HEAP32[$0_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $617($0_1, $1_1) {
  var $2_1 = 0;
  $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
  while (1) {
   if ($1_1) {
    $124(HEAP32[$0_1 + 12 >> 2] + $2_1 | 0);
    $1_1 = $1_1 - 1 | 0;
    $2_1 = $2_1 + 20 | 0;
    continue;
   }
   break;
  };
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP32[$0_1 >> 2] = 17832;
  if (HEAPU8[$0_1 + 152 | 0]) {
   $1_1 = HEAP32[$0_1 + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $121(HEAP32[$0_1 + 96 >> 2]);
  }
  $2_1 = $0_1 + 156 | 0;
  $1_1 = $0_1 + 160 | 0;
  $617($2_1, HEAP32[$1_1 >> 2]);
  $163($2_1);
  HEAP32[$0_1 + 168 >> 2] = 0;
  HEAP8[$0_1 + 172 | 0] = 1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 44 | 0;
  $2_1 = $0_1 + 4 | 0;
  while (1) {
   $3_1 = $283($1_1);
   $1_1 = $1_1 - 40 | 0;
   if (($2_1 | 0) != ($3_1 | 0)) {
    continue
   }
   break;
  };
  return $0_1 | 0;
 }
 
 function $619($0_1) {
  $0_1 = $0_1 | 0;
  $33($618($0_1));
 }
 
 function $620($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $3_1 = $120(64);
  HEAP32[$3_1 + 8 >> 2] = $6_1;
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  HEAP32[$3_1 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 20 >> 2] = $4_1;
  $4_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = $3_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $8_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3_1 + 32 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 36 >> 2] = $5_1;
  $5_1 = $2_1 + 8 | 0;
  $9_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = $3_1 + 40 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $9_1;
  HEAP32[$3_1 + 52 >> 2] = 0;
  HEAP32[$3_1 + 56 >> 2] = 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $6_1 = $7_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $8_1;
  $4_1 = HEAP32[$5_1 >> 2];
  $5_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = HEAP32[$2_1 >> 2];
  $2_1 = HEAP32[$2_1 + 4 >> 2];
  $8_1 = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 60 >> 2] = HEAP32[$0_1 + 104 >> 2];
  $9_1 = $7_1 + 40 | 0;
  HEAP32[$9_1 >> 2] = $4_1;
  HEAP32[$9_1 + 4 >> 2] = $5_1;
  $4_1 = HEAP32[$0_1 + 148 >> 2] + 1 | 0;
  HEAP32[$3_1 + 12 >> 2] = $4_1;
  HEAP32[$0_1 + 148 >> 2] = $4_1;
  HEAP32[$7_1 + 16 >> 2] = $8_1;
  HEAP32[$7_1 + 20 >> 2] = $1_1;
  HEAP32[$7_1 + 32 >> 2] = $6_1;
  HEAP32[$7_1 + 36 >> 2] = $2_1;
  $1_1 = $294($0_1 + 4 | 0, $7_1 + 16 | 0, $3_1);
  HEAP32[$3_1 + 52 >> 2] = 0;
  HEAP32[$3_1 + 48 >> 2] = $1_1;
  $1_1 = ((HEAP32[$0_1 + 104 >> 2] << 2) + $0_1 | 0) + 84 | 0;
  HEAP32[$3_1 + 56 >> 2] = HEAP32[$1_1 >> 2];
  $2_1 = HEAP32[$1_1 >> 2];
  if ($2_1) {
   HEAP32[$2_1 + 52 >> 2] = $3_1
  }
  HEAP32[$1_1 >> 2] = $3_1;
  if (!HEAPU8[$0_1 + 153 | 0]) {
   HEAP32[$7_1 + 8 >> 2] = $3_1;
   HEAP32[$7_1 >> 2] = 17908;
   HEAP32[$7_1 + 4 >> 2] = $0_1;
   $621(HEAP32[$0_1 + 4 >> 2], $7_1 + 16 | 0, $7_1);
   $621(HEAP32[$0_1 + 44 >> 2], $7_1 + 16 | 0, $7_1);
  }
  global$0 = $7_1 + 48 | 0;
  return $3_1 | 0;
 }
 
 function $621($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 320 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 316 >> 2] = $0_1;
  if ($0_1) {
   $4_1 = $1_1 + 24 | 0;
   $5_1 = HEAP32[$4_1 + 4 >> 2];
   $0_1 = $3_1 + 304 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $5_1;
   $4_1 = $1_1 + 16 | 0;
   $5_1 = HEAP32[$4_1 + 4 >> 2];
   $0_1 = $3_1 + 296 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $5_1;
   $4_1 = $1_1 + 8 | 0;
   $5_1 = HEAP32[$4_1 + 4 >> 2];
   $0_1 = $3_1 + 288 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $5_1;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$3_1 + 280 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$3_1 + 284 >> 2] = $0_1;
   HEAP32[$3_1 + 268 >> 2] = 0;
   HEAP8[$3_1 + 272 | 0] = 1;
   HEAP32[$3_1 + 260 >> 2] = 0;
   HEAP32[$3_1 + 264 >> 2] = 0;
   HEAP32[$3_1 >> 2] = 0;
   $204($3_1 + 256 | 0, 0, $3_1);
   $355($3_1 + 256 | 0, $3_1, 0, 64);
   $297($3_1 + 256 | 0, $3_1 + 316 | 0);
   $1_1 = HEAP32[$3_1 + 260 >> 2];
   while (1) {
    $1_1 = $1_1 - 1 | 0;
    HEAP32[$3_1 + 260 >> 2] = $1_1;
    $0_1 = HEAP32[HEAP32[$3_1 + 268 >> 2] + ($1_1 << 2) >> 2];
    label$3 : {
     if (!$501($0_1, $3_1 + 280 | 0)) {
      break label$3
     }
     $4_1 = $0_1 + 40 | 0;
     if (HEAP32[$4_1 >> 2]) {
      $297($3_1 + 256 | 0, $0_1 + 36 | 0);
      $297($3_1 + 256 | 0, $4_1);
      $1_1 = HEAP32[$3_1 + 260 >> 2];
      break label$3;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $0_1);
    }
    if (($1_1 | 0) > 0) {
     continue
    }
    break;
   };
   $124($3_1 + 256 | 0);
  }
  global$0 = $3_1 + 320 | 0;
 }
 
 function $622($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = $1_1 + 60 | 0;
  $296(HEAP32[$3_1 >> 2] == 2 ? $0_1 + 44 | 0 : $0_1 + 4 | 0, HEAP32[$1_1 + 48 >> 2]);
  $623($1_1, ((HEAP32[$3_1 >> 2] << 2) + $0_1 | 0) + 84 | 0);
  $3_1 = HEAP32[$0_1 + 96 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $1_1, $2_1);
  $121($1_1);
  HEAP8[$0_1 + 154 | 0] = 1;
 }
 
 function $623($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 52 >> 2];
  $2_1 = $2_1 ? $2_1 + 56 | 0 : $1_1;
  $1_1 = $0_1 + 56 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$1_1 >> 2];
  if ($1_1) {
   HEAP32[$1_1 + 52 >> 2] = HEAP32[$0_1 + 52 >> 2]
  }
 }
 
 function $624($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $7_1 = $2_1 + 8 | 0;
  $5_1 = HEAP32[$7_1 + 4 >> 2];
  $6_1 = $4_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $5_1;
  $7_1 = $3_1 + 8 | 0;
  $5_1 = HEAP32[$7_1 + 4 >> 2];
  $6_1 = $4_1 + 40 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $5_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $6_1;
  $6_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$4_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 36 >> 2] = $6_1;
  label$1 : {
   if (HEAP32[$1_1 + 60 >> 2] == 2) {
    $296($0_1 + 44 | 0, HEAP32[$1_1 + 48 >> 2]);
    (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $294($0_1 + 4 | 0, $4_1 + 16 | 0, $1_1)), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
    $6_1 = 1;
    break label$1;
   }
   $6_1 = 1;
   HEAP32[$0_1 + 128 >> 2] = HEAP32[$0_1 + 128 >> 2] + 1;
   $7_1 = HEAP32[$1_1 + 48 >> 2];
   if ($501($7_1, $4_1 + 16 | 0)) {
    $8_1 = HEAPF32[$1_1 + 16 >> 2];
    $20_1 = HEAPF32[$2_1 >> 2];
    $10_1 = HEAPF32[$1_1 + 32 >> 2];
    $9_1 = HEAPF32[$0_1 + 100 >> 2];
    $12_1 = HEAPF32[$1_1 + 24 >> 2];
    $21_1 = HEAPF32[$1_1 + 40 >> 2];
    $22_1 = HEAPF32[$2_1 + 8 >> 2];
    $13_1 = HEAPF32[$1_1 + 20 >> 2];
    $23_1 = HEAPF32[$1_1 + 36 >> 2];
    $24_1 = HEAPF32[$2_1 + 4 >> 2];
    $6_1 = $293($7_1, $4_1 + 16 | 0);
    if (!$6_1) {
     $5_1 = $4_1 + 36 | 0;
     $14_1 = Math_fround(HEAPF32[$5_1 >> 2] + Math_fround(.05000000074505806));
     HEAPF32[$5_1 >> 2] = $14_1;
     $5_1 = $4_1 + 40 | 0;
     $15_1 = Math_fround(HEAPF32[$5_1 >> 2] + Math_fround(.05000000074505806));
     HEAPF32[$5_1 >> 2] = $15_1;
     $16_1 = Math_fround(HEAPF32[$4_1 + 32 >> 2] + Math_fround(.05000000074505806));
     HEAPF32[$4_1 + 32 >> 2] = $16_1;
     $17_1 = Math_fround(HEAPF32[$4_1 + 16 >> 2] + Math_fround(-.05000000074505806));
     HEAPF32[$4_1 + 16 >> 2] = $17_1;
     $18_1 = Math_fround(HEAPF32[$4_1 + 24 >> 2] + Math_fround(-.05000000074505806));
     HEAPF32[$4_1 + 24 >> 2] = $18_1;
     $19_1 = Math_fround(HEAPF32[$4_1 + 20 >> 2] + Math_fround(-.05000000074505806));
     HEAPF32[$4_1 + 20 >> 2] = $19_1;
     $10_1 = Math_fround(Math_fround(Math_fround($10_1 - $8_1) * Math_fround(.5)) * $9_1);
     $8_1 = Math_fround($20_1 - $8_1) < Math_fround(0.0) ? Math_fround(-$10_1) : $10_1;
     $5_1 = $8_1 > Math_fround(0.0);
     HEAPF32[($4_1 + 16 | 0) + ($5_1 << 4) >> 2] = $8_1 + ($5_1 ? $16_1 : $17_1);
     $8_1 = Math_fround($9_1 * Math_fround(Math_fround($23_1 - $13_1) * Math_fround(.5)));
     $8_1 = Math_fround($24_1 - $13_1) < Math_fround(0.0) ? Math_fround(-$8_1) : $8_1;
     $5_1 = $8_1 > Math_fround(0.0);
     HEAPF32[($4_1 + 16 | 0) + ($5_1 ? 20 : 4) >> 2] = ($5_1 ? $14_1 : $19_1) + $8_1;
     $9_1 = Math_fround($9_1 * Math_fround(Math_fround($21_1 - $12_1) * Math_fround(.5)));
     $9_1 = Math_fround($22_1 - $12_1) < Math_fround(0.0) ? Math_fround(-$9_1) : $9_1;
     $5_1 = $9_1 > Math_fround(0.0);
     HEAPF32[($4_1 + 16 | 0) + ($5_1 ? 24 : 8) >> 2] = ($5_1 ? $15_1 : $18_1) + $9_1;
     $295($0_1 + 4 | 0, $7_1, $4_1 + 16 | 0);
     HEAP32[$0_1 + 132 >> 2] = HEAP32[$0_1 + 132 >> 2] + 1;
    }
    $6_1 = $6_1 ^ 1;
    break label$1;
   }
   $295($0_1 + 4 | 0, $7_1, $4_1 + 16 | 0);
   HEAP32[$0_1 + 132 >> 2] = HEAP32[$0_1 + 132 >> 2] + 1;
  }
  $7_1 = $0_1 + 84 | 0;
  $623($1_1, $7_1 + (HEAP32[$1_1 + 60 >> 2] << 2) | 0);
  $11_1 = $2_1 + 8 | 0;
  $25_1 = HEAP32[$11_1 + 4 >> 2];
  $5_1 = $1_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $25_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 20 >> 2] = $5_1;
  $5_1 = $3_1 + 8 | 0;
  $11_1 = HEAP32[$5_1 + 4 >> 2];
  $2_1 = $1_1 + 40 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $11_1;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 36 >> 2] = $2_1;
  HEAP32[$1_1 + 52 >> 2] = 0;
  $3_1 = HEAP32[$0_1 + 104 >> 2];
  $2_1 = $7_1 + ($3_1 << 2) | 0;
  HEAP32[$1_1 + 56 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 60 >> 2] = $3_1;
  $3_1 = HEAP32[$2_1 >> 2];
  if ($3_1) {
   HEAP32[$3_1 + 52 >> 2] = $1_1
  }
  HEAP32[$2_1 >> 2] = $1_1;
  label$6 : {
   if (!$6_1) {
    break label$6
   }
   HEAP8[$0_1 + 154 | 0] = 1;
   if (HEAPU8[$0_1 + 153 | 0]) {
    break label$6
   }
   HEAP32[$4_1 >> 2] = 17908;
   HEAP32[$4_1 + 4 >> 2] = $0_1;
   $2_1 = $0_1 + 44 | 0;
   $625($2_1, HEAP32[$2_1 >> 2], HEAP32[$1_1 + 48 >> 2], $4_1);
   $625($0_1 + 4 | 0, HEAP32[$0_1 + 4 >> 2], HEAP32[$1_1 + 48 >> 2], $4_1);
  }
  global$0 = $4_1 + 48 | 0;
 }
 
 function $625($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  if (!(!$1_1 | !$2_1)) {
   $9_1 = $0_1 + 20 | 0;
   $517($9_1, 128, $8_1 + 8 | 0);
   $4_1 = HEAP32[$0_1 + 32 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $2_1;
   HEAP32[$4_1 >> 2] = $1_1;
   $10_1 = 124;
   $2_1 = 1;
   while (1) {
    $1_1 = $2_1;
    $2_1 = $2_1 - 1 | 0;
    $6_1 = $2_1 << 3;
    $4_1 = $6_1 + HEAP32[$0_1 + 32 >> 2] | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $4_1 = HEAP32[$4_1 >> 2];
    if (($2_1 | 0) > ($10_1 | 0)) {
     $517($9_1, HEAP32[$0_1 + 24 >> 2] << 1, $8_1 + 8 | 0);
     $10_1 = HEAP32[$0_1 + 24 >> 2] - 4 | 0;
    }
    label$4 : {
     if (($4_1 | 0) == ($5_1 | 0)) {
      if (!HEAP32[$4_1 + 40 >> 2]) {
       break label$4
      }
      $2_1 = $6_1 + HEAP32[$0_1 + 32 >> 2] | 0;
      $5_1 = HEAP32[$4_1 + 36 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $5_1;
      HEAP32[$2_1 >> 2] = $5_1;
      $2_1 = $1_1 << 3;
      $5_1 = $2_1 + HEAP32[$0_1 + 32 >> 2] | 0;
      $6_1 = HEAP32[$4_1 + 40 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $6_1;
      HEAP32[$5_1 >> 2] = $6_1;
      $5_1 = HEAP32[$4_1 + 40 >> 2];
      $2_1 = ($2_1 + HEAP32[$0_1 + 32 >> 2] | 0) + 8 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 36 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $5_1;
      $2_1 = $1_1 + 2 | 0;
      break label$4;
     }
     if (!$501($4_1, $5_1)) {
      break label$4
     }
     $7_1 = HEAP32[$5_1 + 40 >> 2];
     if (HEAP32[$4_1 + 40 >> 2]) {
      $2_1 = HEAP32[$4_1 + 36 >> 2];
      if ($7_1) {
       $6_1 = $6_1 + HEAP32[$0_1 + 32 >> 2] | 0;
       HEAP32[$6_1 + 4 >> 2] = HEAP32[$5_1 + 36 >> 2];
       HEAP32[$6_1 >> 2] = $2_1;
       $6_1 = HEAP32[$4_1 + 40 >> 2];
       $2_1 = $1_1 << 3;
       $7_1 = $2_1 + HEAP32[$0_1 + 32 >> 2] | 0;
       HEAP32[$7_1 + 4 >> 2] = HEAP32[$5_1 + 36 >> 2];
       HEAP32[$7_1 >> 2] = $6_1;
       $6_1 = HEAP32[$4_1 + 36 >> 2];
       $7_1 = $2_1 + HEAP32[$0_1 + 32 >> 2] | 0;
       HEAP32[$7_1 + 12 >> 2] = HEAP32[$5_1 + 40 >> 2];
       HEAP32[$7_1 + 8 >> 2] = $6_1;
       $4_1 = HEAP32[$4_1 + 40 >> 2];
       $2_1 = $2_1 + HEAP32[$0_1 + 32 >> 2] | 0;
       HEAP32[$2_1 + 20 >> 2] = HEAP32[$5_1 + 40 >> 2];
       HEAP32[$2_1 + 16 >> 2] = $4_1;
       $2_1 = $1_1 + 3 | 0;
       break label$4;
      }
      $6_1 = $6_1 + HEAP32[$0_1 + 32 >> 2] | 0;
      HEAP32[$6_1 + 4 >> 2] = $5_1;
      HEAP32[$6_1 >> 2] = $2_1;
      $2_1 = HEAP32[$4_1 + 40 >> 2];
      $4_1 = HEAP32[$0_1 + 32 >> 2] + ($1_1 << 3) | 0;
      HEAP32[$4_1 + 4 >> 2] = $5_1;
      HEAP32[$4_1 >> 2] = $2_1;
      $2_1 = $1_1 + 1 | 0;
      break label$4;
     }
     if ($7_1) {
      $2_1 = $6_1 + HEAP32[$0_1 + 32 >> 2] | 0;
      HEAP32[$2_1 + 4 >> 2] = HEAP32[$5_1 + 36 >> 2];
      HEAP32[$2_1 >> 2] = $4_1;
      $2_1 = HEAP32[$0_1 + 32 >> 2] + ($1_1 << 3) | 0;
      HEAP32[$2_1 + 4 >> 2] = HEAP32[$5_1 + 40 >> 2];
      HEAP32[$2_1 >> 2] = $4_1;
      $2_1 = $1_1 + 1 | 0;
      break label$4;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $4_1, $5_1);
    }
    if ($2_1) {
     continue
    }
    break;
   };
  }
  global$0 = $8_1 + 16 | 0;
 }
 
 function $626($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $0_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $0_1;
  $0_1 = $2_1 + 8 | 0;
  $2_1 = $1_1 + 24 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $2_1 = $1_1 + 40 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $0_1 = $3_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $0_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $0_1;
 }
 
 function $627($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = 18060;
  HEAP32[$2_1 + 12 >> 2] = $3_1;
  $6_1 = $3_1 + 4 | 0;
  $7_1 = $3_1 + 20 | 0;
  $8_1 = HEAP32[$0_1 + 168 >> 2];
  $628(HEAP32[$0_1 + 4 >> 2], $1_1, $6_1, $7_1, HEAPF32[$3_1 + 32 >> 2], $4_1, $5_1, $8_1, $2_1 + 8 | 0);
  $628(HEAP32[$0_1 + 44 >> 2], $1_1, $6_1, $7_1, HEAPF32[$3_1 + 32 >> 2], $4_1, $5_1, $8_1, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $628($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  $9_1 = global$0 - 48 | 0;
  global$0 = $9_1;
  if ($0_1) {
   HEAP32[$9_1 + 16 >> 2] = 0;
   $204($7_1, 128, $9_1 + 16 | 0);
   HEAP32[HEAP32[$7_1 + 12 >> 2] >> 2] = $0_1;
   $12_1 = 126;
   $0_1 = 1;
   while (1) {
    HEAP32[$9_1 + 28 >> 2] = 0;
    $11_1 = $0_1 - 1 | 0;
    $13_1 = $11_1 << 2;
    $10_1 = HEAP32[$13_1 + HEAP32[$7_1 + 12 >> 2] >> 2];
    HEAPF32[$9_1 + 24 >> 2] = HEAPF32[$10_1 + 8 >> 2] - HEAPF32[$6_1 + 8 >> 2];
    HEAPF32[$9_1 + 20 >> 2] = HEAPF32[$10_1 + 4 >> 2] - HEAPF32[$6_1 + 4 >> 2];
    HEAPF32[$9_1 + 16 >> 2] = HEAPF32[$10_1 >> 2] - HEAPF32[$6_1 >> 2];
    $14_1 = HEAPF32[$10_1 + 16 >> 2];
    $15_1 = HEAPF32[$10_1 + 20 >> 2];
    $16_1 = HEAPF32[$10_1 + 24 >> 2];
    $17_1 = HEAPF32[$5_1 >> 2];
    $18_1 = HEAPF32[$5_1 + 4 >> 2];
    $19_1 = HEAPF32[$5_1 + 8 >> 2];
    HEAP32[$9_1 + 44 >> 2] = 0;
    HEAPF32[$9_1 + 40 >> 2] = $16_1 - $19_1;
    HEAPF32[$9_1 + 36 >> 2] = $15_1 - $18_1;
    HEAPF32[$9_1 + 32 >> 2] = $14_1 - $17_1;
    HEAP32[$9_1 + 12 >> 2] = 1065353216;
    label$3 : {
     if ($377($1_1, $2_1, $3_1, $9_1 + 16 | 0, $9_1 + 12 | 0, $4_1)) {
      if (HEAP32[$10_1 + 40 >> 2]) {
       if (($11_1 | 0) > ($12_1 | 0)) {
        $11_1 = HEAP32[$7_1 + 4 >> 2];
        HEAP32[$9_1 + 8 >> 2] = 0;
        $204($7_1, $11_1 << 1, $9_1 + 8 | 0);
        $12_1 = HEAP32[$7_1 + 4 >> 2] - 2 | 0;
       }
       HEAP32[HEAP32[$7_1 + 12 >> 2] + $13_1 >> 2] = HEAP32[$10_1 + 36 >> 2];
       HEAP32[HEAP32[$7_1 + 12 >> 2] + ($0_1 << 2) >> 2] = HEAP32[$10_1 + 40 >> 2];
       $0_1 = $0_1 + 1 | 0;
       break label$3;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 12 >> 2]]($8_1, $10_1);
     }
     $0_1 = $11_1;
    }
    if ($0_1) {
     continue
    }
    break;
   };
  }
  global$0 = $9_1 + 48 | 0;
 }
 
 function $629($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 44 >> 2] = $3_1;
  HEAP32[$4_1 + 40 >> 2] = 17984;
  $5_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $3_1 = $4_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $3_1 = $4_1 + 32 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $3_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 24 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 28 >> 2] = $1_1;
  $621(HEAP32[$0_1 + 4 >> 2], $4_1 + 8 | 0, $4_1 + 40 | 0);
  $621(HEAP32[$0_1 + 44 >> 2], $4_1 + 8 | 0, $4_1 + 40 | 0);
  global$0 = $4_1 + 48 | 0;
 }
 
 function $630($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $4_1 = $0_1 + 4 | 0;
  $287($4_1, ((Math_imul(HEAP32[$0_1 + 112 >> 2], HEAP32[$0_1 + 16 >> 2]) | 0) / 100 | 0) + 1 | 0);
  if (HEAP32[$0_1 + 124 >> 2]) {
   $2_1 = ((Math_imul(HEAP32[$0_1 + 108 >> 2], HEAP32[$0_1 + 56 >> 2]) | 0) / 100 | 0) + 1 | 0;
   $287($0_1 + 44 | 0, $2_1);
   $2_1 = HEAP32[$0_1 + 124 >> 2] - $2_1 | 0;
   HEAP32[$0_1 + 124 >> 2] = ($2_1 | 0) > 0 ? $2_1 : 0;
  }
  $2_1 = (HEAP32[$0_1 + 104 >> 2] + 1 | 0) % 2 | 0;
  HEAP32[$0_1 + 104 >> 2] = $2_1;
  $2_1 = HEAP32[(($2_1 << 2) + $0_1 | 0) + 84 >> 2];
  if ($2_1) {
   $8_1 = $0_1 + 44 | 0;
   $7_1 = $5_1 + 16 | 0;
   while (1) {
    $3_1 = $2_1 + 56 | 0;
    $6_1 = HEAP32[$3_1 >> 2];
    $623($2_1, ((HEAP32[$2_1 + 60 >> 2] << 2) + $0_1 | 0) + 84 | 0);
    HEAP32[$2_1 + 52 >> 2] = 0;
    HEAP32[$3_1 >> 2] = HEAP32[$0_1 + 92 >> 2];
    $3_1 = HEAP32[$0_1 + 92 >> 2];
    if ($3_1) {
     HEAP32[$3_1 + 52 >> 2] = $2_1
    }
    HEAP32[$0_1 + 92 >> 2] = $2_1;
    $296($4_1, HEAP32[$2_1 + 48 >> 2]);
    $9_1 = $2_1 + 24 | 0;
    $10_1 = HEAP32[$9_1 + 4 >> 2];
    $3_1 = $5_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $10_1;
    $3_1 = HEAP32[$2_1 + 36 >> 2];
    HEAP32[$7_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $3_1;
    $9_1 = $2_1 + 40 | 0;
    $10_1 = HEAP32[$9_1 + 4 >> 2];
    $3_1 = $7_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $10_1;
    $3_1 = HEAP32[$2_1 + 20 >> 2];
    HEAP32[$5_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $3_1;
    $3_1 = $294($8_1, $5_1, $2_1);
    HEAP32[$2_1 + 60 >> 2] = 2;
    HEAP32[$2_1 + 48 >> 2] = $3_1;
    $2_1 = $6_1;
    if ($2_1) {
     continue
    }
    break;
   };
   HEAP8[$0_1 + 154 | 0] = 1;
   HEAP32[$0_1 + 124 >> 2] = HEAP32[$0_1 + 56 >> 2];
  }
  HEAP32[$5_1 >> 2] = 17908;
  HEAP32[$5_1 + 4 >> 2] = $0_1;
  label$5 : {
   if (!HEAPU8[$0_1 + 153 | 0]) {
    break label$5
   }
   $625($4_1, HEAP32[$0_1 + 4 >> 2], HEAP32[$0_1 + 44 >> 2], $5_1);
   if (!HEAPU8[$0_1 + 153 | 0]) {
    break label$5
   }
   $2_1 = HEAP32[$4_1 >> 2];
   $625($4_1, $2_1, $2_1, $5_1);
  }
  label$6 : {
   if (!HEAPU8[$0_1 + 154 | 0]) {
    break label$6
   }
   $2_1 = HEAP32[$0_1 + 96 >> 2];
   $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1) | 0;
   $2_1 = HEAP32[$6_1 + 4 >> 2];
   if (($2_1 | 0) < 1) {
    break label$6
   }
   $4_1 = HEAP32[$0_1 + 120 >> 2];
   $7_1 = (Math_imul($2_1, HEAP32[$0_1 + 116 >> 2]) | 0) / 100 | 0;
   $4_1 = ($4_1 | 0) > ($7_1 | 0) ? $4_1 : $7_1;
   $7_1 = ($2_1 | 0) < ($4_1 | 0) ? $2_1 : $4_1;
   $2_1 = 0;
   while (1) {
    if (($2_1 | 0) >= ($7_1 | 0)) {
     $2_1 = HEAP32[$6_1 + 4 >> 2];
     if (($2_1 | 0) > 0) {
      HEAP32[$0_1 + 144 >> 2] = (HEAP32[$0_1 + 144 >> 2] + $7_1 | 0) % ($2_1 | 0);
      break label$6;
     }
    } else {
     $4_1 = HEAP32[$6_1 + 12 >> 2] + ((HEAP32[$0_1 + 144 >> 2] + $2_1 | 0) % HEAP32[$6_1 + 4 >> 2] << 4) | 0;
     $8_1 = HEAP32[$4_1 >> 2];
     $4_1 = HEAP32[$4_1 + 4 >> 2];
     if (!$501(HEAP32[$8_1 + 48 >> 2], HEAP32[$4_1 + 48 >> 2])) {
      $3_1 = HEAP32[$0_1 + 96 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $8_1, $4_1, $1_1) | 0;
      $7_1 = $7_1 - 1 | 0;
      $2_1 = $2_1 - 1 | 0;
     }
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   HEAP32[$0_1 + 144 >> 2] = 0;
  }
  HEAP8[$0_1 + 154 | 0] = 0;
  HEAP32[$0_1 + 120 >> 2] = 1;
  HEAP32[$0_1 + 140 >> 2] = HEAP32[$0_1 + 140 >> 2] + 1;
  $2_1 = HEAP32[$0_1 + 132 >> 2];
  $4_1 = $0_1;
  $0_1 = HEAP32[$0_1 + 128 >> 2];
  $11_1 = Math_fround(0.0);
  label$13 : {
   if (!$0_1) {
    break label$13
   }
   $11_1 = Math_fround(Math_fround($2_1 >>> 0) / Math_fround($0_1 >>> 0));
  }
  HEAPF32[$4_1 + 136 >> 2] = $11_1;
  HEAP32[$4_1 + 132 >> 2] = $2_1 >>> 1;
  HEAP32[$4_1 + 128 >> 2] = $0_1 >>> 1;
  $0_1 = HEAP32[$4_1 + 96 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 60 >> 2]]($0_1) | 0) {
   $0_1 = HEAP32[$4_1 + 96 >> 2];
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
   $613($3_1);
   $2_1 = 0;
   $6_1 = 0;
   $7_1 = 0;
   $8_1 = 0;
   while (1) {
    if (($7_1 | 0) < HEAP32[$3_1 + 4 >> 2]) {
     $9_1 = HEAP32[$3_1 + 12 >> 2] + $12_1 | 0;
     $10_1 = $9_1 + 4 | 0;
     $0_1 = HEAP32[$10_1 >> 2];
     $13_1 = $2_1;
     $2_1 = HEAP32[$9_1 >> 2];
     label$17 : {
      if (!(($0_1 | 0) == ($6_1 | 0) ? ($13_1 | 0) == ($2_1 | 0) : 0)) {
       if ($501(HEAP32[$2_1 + 48 >> 2], HEAP32[$0_1 + 48 >> 2])) {
        break label$17
       }
      }
      $6_1 = HEAP32[$4_1 + 96 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 32 >> 2]]($6_1, $9_1, $1_1);
      HEAP32[$10_1 >> 2] = 0;
      HEAP32[$9_1 >> 2] = 0;
      $8_1 = $8_1 + 1 | 0;
     }
     $12_1 = $12_1 + 16 | 0;
     $7_1 = $7_1 + 1 | 0;
     $6_1 = $0_1;
     continue;
    }
    break;
   };
   $613($3_1);
   $0_1 = HEAP32[$3_1 + 4 >> 2];
   $1_1 = $5_1 + 8 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$5_1 >> 2] = 0;
   HEAP32[$5_1 + 4 >> 2] = 0;
   $1_1 = $0_1 - $8_1 | 0;
   label$19 : {
    if (($8_1 | 0) > 0) {
     break label$19
    }
    if (($8_1 | 0) <= -1) {
     $383($3_1, $1_1)
    }
    $2_1 = $0_1 << 4;
    while (1) {
     if (!$8_1) {
      break label$19
     }
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $0_1 = HEAP32[$3_1 + 12 >> 2] + $2_1 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $6_1;
     $6_1 = $5_1 + 8 | 0;
     $4_1 = HEAP32[$6_1 + 4 >> 2];
     $0_1 = $0_1 + 8 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $4_1;
     $8_1 = $8_1 + 1 | 0;
     $2_1 = $2_1 + 16 | 0;
     continue;
    };
   }
   HEAP32[$3_1 + 4 >> 2] = $1_1;
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $631($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 96 >> 2];
 }
 
 function $632($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[$0_1 + 44 >> 2];
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if ($0_1) {
    if ($4_1) {
     $290($0_1, $4_1, $3_1);
     break label$1;
    }
    $5_1 = $0_1 + 24 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $4_1 = $3_1 + 24 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $5_1 = $0_1 + 16 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $4_1 = $3_1 + 16 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $5_1 = $0_1 + 8 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $4_1 = $3_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $4_1 = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    break label$1;
   }
   if ($4_1) {
    $5_1 = $4_1 + 24 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $0_1 = $3_1 + 24 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $6_1;
    $5_1 = $4_1 + 16 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $0_1 = $3_1 + 16 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $6_1;
    $5_1 = $4_1 + 8 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $0_1 = $3_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $6_1;
    $0_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $0_1;
    break label$1;
   }
   $0_1 = $3_1 + 24 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $0_1 = $3_1 + 16 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $0_1 = $3_1 + 8 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
  }
  $0_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $0_1;
  $0_1 = $1_1 + 8 | 0;
  $1_1 = $3_1 + 8 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $0_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $0_1;
  $0_1 = $2_1 + 8 | 0;
  $1_1 = $3_1 + 24 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  global$0 = $3_1 + 32 | 0;
 }
 
 function $633($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAP32[$0_1 + 16 >> 2] != (0 - HEAP32[$0_1 + 56 >> 2] | 0)) {
    break label$1
   }
   $284($0_1 + 4 | 0);
   $284($0_1 + 44 | 0);
   HEAP8[$0_1 + 153 | 0] = 0;
   HEAP8[$0_1 + 154 | 0] = 1;
   HEAP32[$0_1 + 124 >> 2] = 0;
   HEAP32[$0_1 + 104 >> 2] = 0;
   HEAP32[$0_1 + 128 >> 2] = 0;
   HEAP32[$0_1 + 132 >> 2] = 0;
   HEAP32[$0_1 + 116 >> 2] = 10;
   HEAP32[$0_1 + 120 >> 2] = 1;
   HEAP32[$0_1 + 108 >> 2] = 1;
   HEAP32[$0_1 + 112 >> 2] = 0;
   $1_1 = $0_1 + 136 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 144 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 84 | 0;
   $0_1 = 0;
   while (1) {
    if (($0_1 | 0) == 12) {
     break label$1
    }
    HEAP32[$0_1 + $1_1 >> 2] = 0;
    $0_1 = $0_1 + 4 | 0;
    continue;
   };
  }
 }
 
 function $634($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $635($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $10_1 = HEAP32[$0_1 + 12 >> 2];
  $3_1 = $10_1 + (($1_1 + $2_1 | 0) / 2 << 4) | 0;
  $8_1 = $3_1 + 8 | 0;
  $6_1 = HEAP32[$8_1 + 4 >> 2];
  $4_1 = $5_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $6_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  $8_1 = $1_1;
  $6_1 = $2_1;
  while (1) {
   $3_1 = ($8_1 << 4) + $10_1 | 0;
   while (1) {
    $8_1 = $8_1 + 1 | 0;
    $4_1 = $636($3_1, $5_1);
    $9_1 = $3_1 + 16 | 0;
    $3_1 = $9_1;
    if ($4_1) {
     continue
    }
    break;
   };
   $4_1 = $8_1 - 1 | 0;
   $3_1 = ($6_1 << 4) + 16 | 0;
   while (1) {
    $6_1 = $6_1 - 1 | 0;
    $7_1 = $3_1 + $10_1 | 0;
    $12_1 = $3_1 - 16 | 0;
    $3_1 = $12_1;
    if ($636($5_1, $7_1 - 16 | 0)) {
     continue
    }
    break;
   };
   $3_1 = $6_1 + 1 | 0;
   if (($3_1 | 0) >= ($4_1 | 0)) {
    $4_1 = $9_1 - 16 | 0;
    $9_1 = $4_1 + 8 | 0;
    $7_1 = $9_1;
    $3_1 = HEAP32[$7_1 + 4 >> 2];
    $11_1 = $5_1 + 24 | 0;
    HEAP32[$11_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $3_1;
    $3_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$5_1 + 16 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$5_1 + 20 >> 2] = $3_1;
    $7_1 = $10_1 + $12_1 | 0;
    $3_1 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $3_1 = $7_1 + 8 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$9_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$9_1 + 4 >> 2] = $4_1;
    $4_1 = HEAP32[$5_1 + 20 >> 2];
    $7_1 = HEAP32[$0_1 + 12 >> 2] + $12_1 | 0;
    $3_1 = $7_1;
    HEAP32[$3_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $4_1 = HEAP32[$11_1 + 4 >> 2];
    $3_1 = $3_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $3_1 = $6_1;
    $4_1 = $8_1;
   }
   if (($3_1 | 0) >= ($4_1 | 0)) {
    $10_1 = HEAP32[$0_1 + 12 >> 2];
    $8_1 = $4_1;
    $6_1 = $3_1;
    continue;
   }
   break;
  };
  if (($1_1 | 0) < ($3_1 | 0)) {
   $635($0_1, $1_1, $3_1)
  }
  if (($2_1 | 0) > ($4_1 | 0)) {
   $635($0_1, $4_1, $2_1)
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $636($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $2_1 = -1;
  $8_1 = -1;
  $3_1 = HEAP32[$0_1 >> 2];
  if ($3_1) {
   $8_1 = HEAP32[$3_1 + 12 >> 2]
  }
  $4_1 = HEAP32[$1_1 >> 2];
  if ($4_1) {
   $2_1 = HEAP32[$4_1 + 12 >> 2]
  }
  $9_1 = -1;
  $10_1 = -1;
  $6_1 = HEAP32[$0_1 + 4 >> 2];
  if ($6_1) {
   $10_1 = HEAP32[$6_1 + 12 >> 2]
  }
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  if ($7_1) {
   $9_1 = HEAP32[$7_1 + 12 >> 2]
  }
  $5_1 = 1;
  label$5 : {
   if (($2_1 | 0) < ($8_1 | 0)) {
    break label$5
   }
   $2_1 = ($9_1 | 0) < ($10_1 | 0);
   $5_1 = $2_1 & ($3_1 | 0) == ($4_1 | 0);
   if ($2_1 | ($3_1 | 0) != ($4_1 | 0)) {
    break label$5
   }
   $5_1 = 0;
   if (($6_1 | 0) != ($7_1 | 0)) {
    break label$5
   }
   $5_1 = HEAPU32[$0_1 + 8 >> 2] > HEAPU32[$1_1 + 8 >> 2];
  }
  return $5_1;
 }
 
 function $637($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  if (($1_1 | 0) != ($2_1 | 0)) {
   $3_1 = HEAP32[HEAP32[$0_1 + 4 >> 2] + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, HEAP32[$1_1 + 36 >> 2], HEAP32[$2_1 + 36 >> 2]) | 0;
   $0_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$0_1 + 120 >> 2] = HEAP32[$0_1 + 120 >> 2] + 1;
  }
 }
 
 function $638($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1, HEAP32[HEAP32[$0_1 + 8 >> 2] + 48 >> 2]);
 }
 
 function $639($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, HEAP32[$1_1 + 36 >> 2]) | 0;
 }
 
 function $640($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[$3_1 + 8 >> 2] = $2_1;
  HEAPF32[$3_1 + 12 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAPF32[$0_1 + 508 >> 2] = HEAPF32[($1_1 < Math_fround(0.0) ? $3_1 + 4 | 0 : $1_1 > Math_fround(1.0) ? $3_1 : $3_1 + 12 | 0) >> 2];
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAPF32[$0_1 + 512 >> 2] = HEAPF32[($2_1 < Math_fround(0.0) ? $3_1 + 4 | 0 : $2_1 > Math_fround(1.0) ? $3_1 : $3_1 + 8 | 0) >> 2];
 }
 
 function $641($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $4_1 = HEAP32[$0_1 + 204 >> 2];
  label$1 : {
   if ($1_1 == Math_fround(0.0)) {
    HEAP32[$0_1 + 204 >> 2] = $4_1 | 1;
    break label$1;
   }
   HEAP32[$0_1 + 204 >> 2] = $4_1 & -2;
   $3_1 = Math_fround(Math_fround(1.0) / $1_1);
  }
  HEAPF32[$0_1 + 408 >> 2] = $3_1;
  HEAP32[$0_1 + 440 >> 2] = 0;
  HEAPF32[$0_1 + 428 >> 2] = HEAPF32[$0_1 + 444 >> 2] * $1_1;
  HEAPF32[$0_1 + 436 >> 2] = HEAPF32[$0_1 + 452 >> 2] * $1_1;
  HEAPF32[$0_1 + 432 >> 2] = HEAPF32[$0_1 + 448 >> 2] * $1_1;
  $1_1 = HEAPF32[$2_1 + 8 >> 2];
  $5_1 = HEAPF32[$2_1 + 4 >> 2];
  $6_1 = HEAPF32[$2_1 >> 2];
  HEAPF32[$0_1 + 624 >> 2] = HEAPF32[$0_1 + 412 >> 2] * $3_1;
  HEAPF32[$0_1 + 628 >> 2] = $3_1 * HEAPF32[$0_1 + 416 >> 2];
  HEAPF32[$0_1 + 632 >> 2] = $3_1 * HEAPF32[$0_1 + 420 >> 2];
  HEAP32[$0_1 + 636 >> 2] = 0;
  HEAP32[$0_1 + 472 >> 2] = 0;
  HEAPF32[$0_1 + 460 >> 2] = $6_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $6_1) : Math_fround(0.0);
  HEAPF32[$0_1 + 464 >> 2] = $5_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $5_1) : Math_fround(0.0);
  HEAPF32[$0_1 + 468 >> 2] = $1_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $1_1) : Math_fround(0.0);
 }
 
 function $642($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  $1_1 = $0_1 + 4 | 0;
  $643($2_1 + 48 | 0, $1_1, HEAPF32[$0_1 + 460 >> 2], HEAPF32[$0_1 + 464 >> 2], HEAPF32[$0_1 + 468 >> 2]);
  $439($2_1, $1_1);
  $455($2_1 + 96 | 0, $2_1 + 48 | 0, $2_1);
  $3_1 = $2_1 + 104 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 336 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 + 100 >> 2];
  HEAP32[$0_1 + 328 >> 2] = HEAP32[$2_1 + 96 >> 2];
  HEAP32[$0_1 + 332 >> 2] = $1_1;
  $3_1 = HEAP32[$2_1 + 116 >> 2];
  $1_1 = $0_1 + 344 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 112 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $3_1 = $2_1 + 120 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 352 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $3_1 = HEAP32[$2_1 + 132 >> 2];
  $1_1 = $0_1 + 360 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 128 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $1_1 = $2_1 + 136 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 368 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  global$0 = $2_1 + 144 | 0;
 }
 
 function $643($0_1, $1_1, $2_1, $3_1, $4_1) {
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAPF32[$0_1 + 32 >> 2] = HEAPF32[$1_1 + 32 >> 2] * $2_1;
  HEAPF32[$0_1 + 16 >> 2] = HEAPF32[$1_1 + 16 >> 2] * $2_1;
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$1_1 + 8 >> 2] * $4_1;
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$1_1 + 4 >> 2] * $3_1;
  HEAPF32[$0_1 >> 2] = HEAPF32[$1_1 >> 2] * $2_1;
  HEAPF32[$0_1 + 40 >> 2] = HEAPF32[$1_1 + 40 >> 2] * $4_1;
  HEAPF32[$0_1 + 36 >> 2] = HEAPF32[$1_1 + 36 >> 2] * $3_1;
  HEAPF32[$0_1 + 24 >> 2] = HEAPF32[$1_1 + 24 >> 2] * $4_1;
  HEAPF32[$0_1 + 20 >> 2] = HEAPF32[$1_1 + 20 >> 2] * $3_1;
 }
 
 function $644($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 18188;
  $124($0_1 + 548 | 0);
  $123($0_1);
  return $0_1 | 0;
 }
 
 function $645($0_1) {
  $0_1 = $0_1 | 0;
  $121($644($0_1));
 }
 
 function $646($0_1) {
  $0_1 = $0_1 | 0;
  return 504;
 }
 
 function $647($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $130($0_1, $1_1, $2_1);
  $134($0_1 + 328 | 0, $1_1 + 272 | 0);
  $132($0_1 + 376 | 0, $1_1 + 320 | 0);
  $132($0_1 + 392 | 0, $1_1 + 336 | 0);
  HEAPF32[$1_1 + 464 >> 2] = HEAPF32[$0_1 + 408 >> 2];
  $132($0_1 + 608 | 0, $1_1 + 352 | 0);
  $132($0_1 + 412 | 0, $1_1 + 368 | 0);
  $132($0_1 + 428 | 0, $1_1 + 384 | 0);
  $132($0_1 + 444 | 0, $1_1 + 400 | 0);
  $132($0_1 + 460 | 0, $1_1 + 416 | 0);
  $132($0_1 + 476 | 0, $1_1 + 432 | 0);
  $132($0_1 + 492 | 0, $1_1 + 448 | 0);
  $2_1 = HEAP32[$0_1 + 512 >> 2];
  HEAP32[$1_1 + 468 >> 2] = HEAP32[$0_1 + 508 >> 2];
  HEAP32[$1_1 + 472 >> 2] = $2_1;
  HEAP32[$1_1 + 500 >> 2] = HEAPU8[$0_1 + 516 | 0];
  $2_1 = HEAP32[$0_1 + 524 >> 2];
  HEAP32[$1_1 + 476 >> 2] = HEAP32[$0_1 + 520 >> 2];
  HEAP32[$1_1 + 480 >> 2] = $2_1;
  $2_1 = HEAP32[$0_1 + 532 >> 2];
  HEAP32[$1_1 + 484 >> 2] = HEAP32[$0_1 + 528 >> 2];
  HEAP32[$1_1 + 488 >> 2] = $2_1;
  $2_1 = HEAP32[$0_1 + 540 >> 2];
  HEAP32[$1_1 + 492 >> 2] = HEAP32[$0_1 + 536 >> 2];
  HEAP32[$1_1 + 496 >> 2] = $2_1;
  return 18228;
 }
 
 function $648($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1497645650), wasm2js_i32$5 = $0_1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function $649($0_1, $1_1, $2_1) {
  $650($0_1 + 4 | 0, HEAPF32[$0_1 + 376 >> 2], HEAPF32[$0_1 + 380 >> 2], HEAPF32[$0_1 + 384 >> 2], $0_1 + 392 | 0, $1_1, $2_1);
 }
 
 function $650($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $12_1 = HEAPF32[$0_1 + 52 >> 2];
  $8_1 = HEAPF32[$0_1 + 56 >> 2];
  $11_1 = HEAPF32[$0_1 + 48 >> 2];
  HEAP32[$6_1 + 60 >> 2] = 0;
  HEAPF32[$6_1 + 48 >> 2] = $11_1 + Math_fround($1_1 * $5_1);
  HEAPF32[$6_1 + 56 >> 2] = $8_1 + Math_fround($3_1 * $5_1);
  HEAPF32[$6_1 + 52 >> 2] = $12_1 + Math_fround($2_1 * $5_1);
  $9_1 = $7_1;
  $11_1 = HEAPF32[$4_1 >> 2];
  $3_1 = HEAPF32[$4_1 + 4 >> 2];
  $2_1 = HEAPF32[$4_1 + 8 >> 2];
  $1_1 = $149($11_1, $3_1, $2_1);
  $1_1 = $1_1 > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_sqrt($1_1)) : Math_fround(0.0);
  $8_1 = Math_fround($1_1 * $5_1) > Math_fround(.7853981852531433) ? Math_fround(Math_fround(.7853981852531433) / $5_1) : $1_1;
  label$1 : {
   if ($8_1 < Math_fround(1.0000000474974513e-03)) {
    $1_1 = Math_fround(Math_fround($5_1 * Math_fround(.5)) + Math_fround($8_1 * Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $5_1) * $5_1) * Math_fround(-.02083333395421505)) * $8_1)));
    break label$1;
   }
   $1_1 = Math_fround($116(Math_fround(Math_fround($8_1 * Math_fround(.5)) * $5_1)) / $8_1);
  }
  HEAPF32[$9_1 + 40 >> 2] = $1_1 * $2_1;
  HEAPF32[$7_1 + 36 >> 2] = $1_1 * $3_1;
  HEAPF32[$7_1 + 32 >> 2] = $1_1 * $11_1;
  (wasm2js_i32$0 = $7_1, wasm2js_f32$0 = $115(Math_fround(Math_fround($8_1 * $5_1) * Math_fround(.5)))), HEAPF32[wasm2js_i32$0 + 44 >> 2] = wasm2js_f32$0;
  $651($0_1, $7_1 + 16 | 0);
  $453($7_1, $7_1 + 32 | 0, $7_1 + 16 | 0);
  $1_1 = HEAPF32[$7_1 >> 2];
  $2_1 = Math_fround($1_1 * $1_1);
  $1_1 = HEAPF32[$7_1 + 4 >> 2];
  $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  $1_1 = HEAPF32[$7_1 + 8 >> 2];
  $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  $1_1 = HEAPF32[$7_1 + 12 >> 2];
  $1_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  if ($1_1 > Math_fround(1.1920928955078125e-07)) {
   $652($7_1);
   $1_1 = HEAPF32[$7_1 >> 2];
   $2_1 = Math_fround($1_1 * $1_1);
   $1_1 = HEAPF32[$7_1 + 4 >> 2];
   $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
   $1_1 = HEAPF32[$7_1 + 8 >> 2];
   $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
   $1_1 = HEAPF32[$7_1 + 12 >> 2];
   $1_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  }
  label$3 : {
   if ($1_1 > Math_fround(1.1920928955078125e-07)) {
    $454($6_1, $7_1);
    break label$3;
   }
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$6_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $4_1;
   $10_1 = $0_1 + 8 | 0;
   $4_1 = HEAP32[$10_1 + 4 >> 2];
   $9_1 = $6_1 + 8 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$10_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $4_1;
   $4_1 = HEAP32[$0_1 + 20 >> 2];
   HEAP32[$6_1 + 16 >> 2] = HEAP32[$0_1 + 16 >> 2];
   HEAP32[$6_1 + 20 >> 2] = $4_1;
   $10_1 = $0_1 + 24 | 0;
   $4_1 = HEAP32[$10_1 + 4 >> 2];
   $9_1 = $6_1 + 24 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$10_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $4_1;
   $4_1 = HEAP32[$0_1 + 36 >> 2];
   HEAP32[$6_1 + 32 >> 2] = HEAP32[$0_1 + 32 >> 2];
   HEAP32[$6_1 + 36 >> 2] = $4_1;
   $4_1 = $0_1 + 40 | 0;
   $0_1 = HEAP32[$4_1 + 4 >> 2];
   $6_1 = $6_1 + 40 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $0_1;
  }
  global$0 = $7_1 + 48 | 0;
 }
 
 function $651($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  $2_1 = HEAPF32[$0_1 >> 2];
  $7_1 = HEAPF32[$0_1 + 20 >> 2];
  $8_1 = HEAPF32[$0_1 + 40 >> 2];
  $4_1 = Math_fround(Math_fround($2_1 + $7_1) + $8_1);
  label$1 : {
   if ($4_1 > Math_fround(0.0)) {
    $4_1 = Math_fround(Math_sqrt(Math_fround($4_1 + Math_fround(1.0))));
    $2_1 = Math_fround(Math_fround(.5) / $4_1);
    $7_1 = Math_fround($2_1 * Math_fround(HEAPF32[$0_1 + 16 >> 2] - HEAPF32[$0_1 + 4 >> 2]));
    $8_1 = Math_fround($2_1 * Math_fround(HEAPF32[$0_1 + 8 >> 2] - HEAPF32[$0_1 + 32 >> 2]));
    $4_1 = Math_fround($4_1 * Math_fround(.5));
    $2_1 = Math_fround($2_1 * Math_fround(HEAPF32[$0_1 + 36 >> 2] - HEAPF32[$0_1 + 24 >> 2]));
    break label$1;
   }
   $5_1 = $2_1 < $7_1 ? ($7_1 < $8_1 ? 2 : 1) : ($2_1 < $8_1) << 1;
   $9_1 = $5_1 << 2;
   $10_1 = ($5_1 << 4) + $0_1 | 0;
   $6_1 = ($5_1 + 1 >>> 0) % 3 | 0;
   $11_1 = ($6_1 << 4) + $0_1 | 0;
   $6_1 = $6_1 << 2;
   $12_1 = $0_1;
   $0_1 = ($5_1 + 2 >>> 0) % 3 | 0;
   $5_1 = $12_1 + ($0_1 << 4) | 0;
   $0_1 = $0_1 << 2;
   $2_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround(HEAPF32[$10_1 + $9_1 >> 2] - HEAPF32[$11_1 + $6_1 >> 2]) - HEAPF32[$5_1 + $0_1 >> 2]) + Math_fround(1.0))));
   HEAPF32[($9_1 | $3_1) >> 2] = $2_1 * Math_fround(.5);
   $2_1 = Math_fround(Math_fround(.5) / $2_1);
   HEAPF32[$3_1 + 12 >> 2] = Math_fround(HEAPF32[$5_1 + $6_1 >> 2] - HEAPF32[$0_1 + $11_1 >> 2]) * $2_1;
   HEAPF32[($3_1 | $6_1) >> 2] = $2_1 * Math_fround(HEAPF32[$9_1 + $11_1 >> 2] + HEAPF32[$6_1 + $10_1 >> 2]);
   HEAPF32[($0_1 | $3_1) >> 2] = $2_1 * Math_fround(HEAPF32[$5_1 + $9_1 >> 2] + HEAPF32[$0_1 + $10_1 >> 2]);
   $4_1 = HEAPF32[$3_1 + 12 >> 2];
   $7_1 = HEAPF32[$3_1 + 8 >> 2];
   $8_1 = HEAPF32[$3_1 + 4 >> 2];
   $2_1 = HEAPF32[$3_1 >> 2];
  }
  HEAPF32[$1_1 + 12 >> 2] = $4_1;
  HEAPF32[$1_1 + 8 >> 2] = $7_1;
  HEAPF32[$1_1 + 4 >> 2] = $8_1;
  HEAPF32[$1_1 >> 2] = $2_1;
 }
 
 function $652($0_1) {
  var $1_1 = Math_fround(0);
  $1_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($653($0_1))));
  HEAPF32[$0_1 >> 2] = $1_1 * HEAPF32[$0_1 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = $1_1 * HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$0_1 + 8 >> 2] = $1_1 * HEAPF32[$0_1 + 8 >> 2];
  HEAPF32[$0_1 + 12 >> 2] = $1_1 * HEAPF32[$0_1 + 12 >> 2];
  return $0_1;
 }
 
 function $653($0_1) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0);
  $1_1 = HEAPF32[$0_1 >> 2];
  $2_1 = Math_fround($1_1 * $1_1);
  $1_1 = HEAPF32[$0_1 + 4 >> 2];
  $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  $1_1 = HEAPF32[$0_1 + 8 >> 2];
  $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  $1_1 = HEAPF32[$0_1 + 12 >> 2];
  return Math_fround($2_1 + Math_fround($1_1 * $1_1));
 }
 
 function $654($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  $5_1 = HEAPF32[$0_1 + 52 >> 2];
  $7_1 = HEAPF32[$1_1 + 52 >> 2];
  $8_1 = HEAPF32[$0_1 + 56 >> 2];
  $10_1 = HEAPF32[$1_1 + 56 >> 2];
  $11_1 = HEAPF32[$0_1 + 48 >> 2];
  $9_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 12 >> 2] = 0;
  $16_1 = Math_fround(1.0);
  $9_1 = Math_fround($9_1 - $11_1);
  $11_1 = Math_fround(Math_fround(1.0) / $2_1);
  HEAPF32[$3_1 >> 2] = $9_1 * $11_1;
  HEAPF32[$3_1 + 8 >> 2] = $11_1 * Math_fround($10_1 - $8_1);
  HEAPF32[$3_1 + 4 >> 2] = $11_1 * Math_fround($7_1 - $5_1);
  HEAP32[$6_1 + 60 >> 2] = 0;
  HEAP32[$6_1 + 44 >> 2] = 0;
  $10_1 = HEAPF32[$0_1 + 20 >> 2];
  $9_1 = HEAPF32[$0_1 + 40 >> 2];
  $12_1 = HEAPF32[$0_1 + 24 >> 2];
  $13_1 = HEAPF32[$0_1 + 36 >> 2];
  $17_1 = Math_fround(Math_fround($10_1 * $9_1) - Math_fround($12_1 * $13_1));
  $5_1 = HEAPF32[$0_1 >> 2];
  $7_1 = HEAPF32[$0_1 + 4 >> 2];
  $14_1 = HEAPF32[$0_1 + 32 >> 2];
  $15_1 = HEAPF32[$0_1 + 16 >> 2];
  $18_1 = Math_fround(Math_fround($12_1 * $14_1) - Math_fround($9_1 * $15_1));
  $19_1 = Math_fround(Math_fround($13_1 * $15_1) - Math_fround($10_1 * $14_1));
  $8_1 = HEAPF32[$0_1 + 8 >> 2];
  $2_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround($17_1 * $5_1) + Math_fround($7_1 * $18_1)) + Math_fround($19_1 * $8_1)));
  HEAPF32[$6_1 + 56 >> 2] = $2_1 * Math_fround(Math_fround($10_1 * $5_1) - Math_fround($15_1 * $7_1));
  HEAPF32[$6_1 + 52 >> 2] = $2_1 * Math_fround(Math_fround($14_1 * $7_1) - Math_fround($13_1 * $5_1));
  HEAPF32[$6_1 + 40 >> 2] = $2_1 * Math_fround(Math_fround($15_1 * $8_1) - Math_fround($12_1 * $5_1));
  HEAPF32[$6_1 + 36 >> 2] = $2_1 * Math_fround(Math_fround($9_1 * $5_1) - Math_fround($14_1 * $8_1));
  HEAP32[$6_1 + 28 >> 2] = 0;
  HEAPF32[$6_1 + 48 >> 2] = $19_1 * $2_1;
  HEAPF32[$6_1 + 32 >> 2] = $18_1 * $2_1;
  HEAPF32[$6_1 + 24 >> 2] = Math_fround(Math_fround($12_1 * $7_1) - Math_fround($10_1 * $8_1)) * $2_1;
  HEAPF32[$6_1 + 20 >> 2] = Math_fround(Math_fround($13_1 * $8_1) - Math_fround($9_1 * $7_1)) * $2_1;
  HEAPF32[$6_1 + 16 >> 2] = $17_1 * $2_1;
  $455($6_1 - -64 | 0, $1_1, $6_1 + 16 | 0);
  $651($6_1 - -64 | 0, $6_1 + 16 | 0);
  $0_1 = $652($6_1 + 16 | 0);
  $2_1 = HEAPF32[$0_1 + 12 >> 2];
  HEAP32[$6_1 + 12 >> 2] = 0;
  $8_1 = HEAPF32[$0_1 + 8 >> 2];
  HEAPF32[$6_1 + 8 >> 2] = $8_1;
  $10_1 = HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$6_1 + 4 >> 2] = $10_1;
  $9_1 = HEAPF32[$0_1 >> 2];
  HEAPF32[$6_1 >> 2] = $9_1;
  $5_1 = Math_fround(Math_min(Math_fround(Math_max($2_1, Math_fround(-1.0))), Math_fround(1.0)));
  $1_1 = (wasm2js_scratch_store_f32($5_1), wasm2js_scratch_load_i32(2));
  $0_1 = $1_1 & 2147483647;
  label$1 : {
   if ($0_1 >>> 0 >= 1065353216) {
    $2_1 = ($1_1 | 0) < 0 ? Math_fround(3.141592502593994) : Math_fround(0.0);
    if (($0_1 | 0) == 1065353216) {
     break label$1
    }
    $2_1 = Math_fround(Math_fround(0.0) / Math_fround($5_1 - $5_1));
    break label$1;
   }
   label$3 : {
    if ($0_1 >>> 0 <= 1056964607) {
     $2_1 = Math_fround(1.570796251296997);
     if ($0_1 >>> 0 < 847249409) {
      break label$3
     }
     $2_1 = Math_fround($5_1 * $5_1);
     $2_1 = Math_fround(Math_fround(Math_fround(Math_fround(7.549789415861596e-08) - Math_fround(Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($2_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0))) * $5_1)) - $5_1) + Math_fround(1.570796251296997));
     break label$1;
    }
    if (($1_1 | 0) <= -1) {
     $2_1 = Math_fround(Math_fround($5_1 + Math_fround(1.0)) * Math_fround(.5));
     $5_1 = Math_fround(Math_sqrt($2_1));
     $2_1 = Math_fround(Math_fround(1.570796251296997) - Math_fround($5_1 + Math_fround(Math_fround($5_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($2_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0)))) + Math_fround(-7.549789415861596e-08))));
     $2_1 = Math_fround($2_1 + $2_1);
     break label$1;
    }
    $2_1 = Math_fround(Math_fround(Math_fround(1.0) - $5_1) * Math_fround(.5));
    $7_1 = Math_fround(Math_sqrt($2_1));
    $5_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($7_1), wasm2js_scratch_load_i32(2)) & -4096), wasm2js_scratch_load_f32());
    $2_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($2_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0)))) + Math_fround(Math_fround($2_1 - Math_fround($5_1 * $5_1)) / Math_fround($7_1 + $5_1))) + $5_1);
    $2_1 = Math_fround($2_1 + $2_1);
   }
  }
  $2_1 = Math_fround($2_1 + $2_1);
  $5_1 = Math_fround(0.0);
  $7_1 = Math_fround(0.0);
  $8_1 = $149($9_1, $10_1, $8_1);
  if (!($8_1 < Math_fround(1.4210854715202004e-14))) {
   $167($6_1, Math_fround(Math_sqrt($8_1)));
   $7_1 = HEAPF32[$6_1 + 4 >> 2];
   $16_1 = HEAPF32[$6_1 >> 2];
   $5_1 = HEAPF32[$6_1 + 8 >> 2];
  }
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = $11_1 * Math_fround($2_1 * $5_1);
  HEAPF32[$4_1 + 4 >> 2] = $11_1 * Math_fround($2_1 * $7_1);
  HEAPF32[$4_1 >> 2] = Math_fround($16_1 * $2_1) * $11_1;
  global$0 = $6_1 + 112 | 0;
 }
 
 function $655($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $2_1 = HEAPF32[$0_1 + 408 >> 2];
  if ($2_1 != Math_fround(0.0)) {
   $4_1 = HEAPF32[$1_1 >> 2];
   $5_1 = HEAPF32[$1_1 + 4 >> 2];
   $6_1 = HEAPF32[$1_1 + 8 >> 2];
   HEAP32[$0_1 + 440 >> 2] = 0;
   $2_1 = Math_fround(Math_fround(1.0) / $2_1);
   HEAPF32[$0_1 + 436 >> 2] = $6_1 * $2_1;
   HEAPF32[$0_1 + 432 >> 2] = $2_1 * $5_1;
   HEAPF32[$0_1 + 428 >> 2] = $2_1 * $4_1;
  }
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 444 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 448 >> 2] = $3_1;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 452 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
 }
 
 function $656($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   if (HEAPU8[$0_1 + 204 | 0] & 2) {
    $2_1 = HEAP32[$0_1 + 8 >> 2];
    HEAP32[$0_1 + 68 >> 2] = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$0_1 + 72 >> 2] = $2_1;
    $3_1 = $0_1 + 12 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 76 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0_1 + 20 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 84 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0_1 + 28 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 92 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0_1 + 36 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 100 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0_1 + 44 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 108 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0_1 + 52 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 116 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0_1 + 60 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 124 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    break label$1;
   }
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$0_1 + 68 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 72 >> 2] = $2_1;
   $3_1 = $1_1 + 8 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0_1 + 76 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $1_1 + 24 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0_1 + 92 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[$1_1 + 20 >> 2];
   $2_1 = $0_1 + 84 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $3_1 = HEAP32[$1_1 + 36 >> 2];
   $2_1 = $0_1 + 100 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $3_1 = $1_1 + 40 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0_1 + 108 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $1_1 + 56 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0_1 + 124 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[$1_1 + 52 >> 2];
   $2_1 = $0_1 + 116 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
  }
  $2_1 = HEAP32[$0_1 + 396 >> 2];
  HEAP32[$0_1 + 148 >> 2] = HEAP32[$0_1 + 392 >> 2];
  HEAP32[$0_1 + 152 >> 2] = $2_1;
  $2_1 = HEAP32[$0_1 + 380 >> 2];
  HEAP32[$0_1 + 132 >> 2] = HEAP32[$0_1 + 376 >> 2];
  HEAP32[$0_1 + 136 >> 2] = $2_1;
  $3_1 = $0_1 + 400 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 156 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $0_1 + 384 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 140 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 12 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $2_1;
  $3_1 = $1_1 + 24 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 28 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = HEAP32[$1_1 + 20 >> 2];
  $2_1 = $0_1 + 20 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $3_1 = $1_1 + 40 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 44 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = HEAP32[$1_1 + 36 >> 2];
  $2_1 = $0_1 + 36 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $3_1 = $1_1 + 56 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 60 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = HEAP32[$1_1 + 52 >> 2];
  $2_1 = $0_1 + 52 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $642($0_1);
 }
 
 function $657($0_1, $1_1, $2_1, $3_1) {
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = $3_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3_1) : Math_fround(0.0);
  HEAPF32[$0_1 + 4 >> 2] = $2_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $2_1) : Math_fround(0.0);
  HEAPF32[$0_1 >> 2] = $1_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $1_1) : Math_fround(0.0);
 }
 
 function $658($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  HEAP32[$0_1 + 12 >> 2] = 0;
  $5_1 = HEAPF32[$1_1 + 12 >> 2];
  $6_1 = HEAPF32[$1_1 >> 2];
  $7_1 = HEAPF32[$1_1 + 4 >> 2];
  $9_1 = Math_fround(Math_fround(Math_fround($5_1 * $4_1) + Math_fround($6_1 * $3_1)) - Math_fround($7_1 * $2_1));
  $8_1 = HEAPF32[$1_1 + 8 >> 2];
  $10_1 = Math_fround(Math_fround(Math_fround(Math_fround(-$6_1) * $2_1) - Math_fround($7_1 * $3_1)) - Math_fround($8_1 * $4_1));
  $11_1 = Math_fround(Math_fround(Math_fround($5_1 * $2_1) + Math_fround($7_1 * $4_1)) - Math_fround($8_1 * $3_1));
  $2_1 = Math_fround(Math_fround(Math_fround($8_1 * $2_1) + Math_fround($5_1 * $3_1)) - Math_fround($6_1 * $4_1));
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * $9_1) - Math_fround($8_1 * $10_1)) - Math_fround($7_1 * $11_1)) + Math_fround($6_1 * $2_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * $2_1) - Math_fround($7_1 * $10_1)) - Math_fround($6_1 * $9_1)) + Math_fround($8_1 * $11_1);
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround($11_1 * $5_1) - Math_fround($6_1 * $10_1)) - Math_fround($8_1 * $2_1)) + Math_fround($7_1 * $9_1);
 }
 
 function $659($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $8_1 = HEAPF32[$1_1 + 20 >> 2];
  $9_1 = HEAPF32[$1_1 + 40 >> 2];
  $10_1 = HEAPF32[$1_1 + 36 >> 2];
  $11_1 = HEAPF32[$1_1 + 24 >> 2];
  $5_1 = Math_fround(Math_fround($8_1 * $9_1) - Math_fround($10_1 * $11_1));
  $12_1 = HEAPF32[$1_1 + 8 >> 2];
  $13_1 = HEAPF32[$1_1 + 4 >> 2];
  $6_1 = Math_fround(Math_fround($10_1 * $12_1) - Math_fround($13_1 * $9_1));
  $14_1 = HEAPF32[$1_1 + 32 >> 2];
  $7_1 = Math_fround(Math_fround($13_1 * $11_1) - Math_fround($8_1 * $12_1));
  $15_1 = HEAPF32[$1_1 >> 2];
  $16_1 = HEAPF32[$1_1 + 16 >> 2];
  $4_1 = Math_fround(Math_fround($14_1 * $7_1) + Math_fround(Math_fround($15_1 * $5_1) + Math_fround($16_1 * $6_1)));
  $4_1 = Math_fround(Math_abs($4_1)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $4_1) : $4_1;
  $18_1 = $5_1;
  $5_1 = HEAPF32[$2_1 >> 2];
  $19_1 = $6_1;
  $1_1 = $2_1 + 4 | 0;
  $6_1 = HEAPF32[$1_1 >> 2];
  $20_1 = $7_1;
  $17_1 = $2_1 + 8 | 0;
  $7_1 = HEAPF32[$17_1 >> 2];
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $5_1) + Math_fround($19_1 * $6_1)) + Math_fround($20_1 * $7_1)) * $4_1;
  $201($3_1, $5_1, $6_1, $7_1, $12_1, $11_1, $9_1);
  HEAPF32[$0_1 + 4 >> 2] = $4_1 * Math_fround(Math_fround(Math_fround($15_1 * HEAPF32[$3_1 >> 2]) + Math_fround($16_1 * HEAPF32[$3_1 + 4 >> 2])) + Math_fround($14_1 * HEAPF32[$3_1 + 8 >> 2]));
  $201($3_1, $13_1, $8_1, $10_1, HEAPF32[$2_1 >> 2], HEAPF32[$1_1 >> 2], HEAPF32[$17_1 >> 2]);
  HEAPF32[$0_1 + 8 >> 2] = $4_1 * Math_fround(Math_fround(Math_fround($15_1 * HEAPF32[$3_1 >> 2]) + Math_fround($16_1 * HEAPF32[$3_1 + 4 >> 2])) + Math_fround($14_1 * HEAPF32[$3_1 + 8 >> 2]));
  global$0 = $3_1 + 16 | 0;
 }
 
 function $660($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  $2_1 = $0_1 + 548 | 0;
  label$1 : {
   if (($661($2_1, $1_1) | 0) != HEAP32[$0_1 + 552 >> 2]) {
    break label$1
   }
   $459($2_1, $3_1 + 12 | 0);
   $2_1 = HEAP32[$1_1 + 32 >> 2];
   $4_1 = $0_1;
   $0_1 = HEAP32[$1_1 + 28 >> 2];
   if (($4_1 | 0) == ($0_1 | 0)) {
    $662($0_1, $2_1, 1);
    break label$1;
   }
   $662($2_1, $0_1, 1);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $661($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $5_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  while (1) {
   label$2 : {
    if (($3_1 | 0) != ($5_1 | 0)) {
     if (HEAP32[HEAP32[$0_1 + 12 >> 2] + $4_1 >> 2] != ($1_1 | 0)) {
      break label$2
     }
     $0_1 = $3_1;
    } else {
     $0_1 = $2_1
    }
    return $0_1;
   }
   $4_1 = $4_1 + 4 | 0;
   $3_1 = $3_1 + 1 | 0;
   continue;
  };
 }
 
 function $662($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  label$1 : {
   if ($2_1) {
    $663($0_1 + 288 | 0, $3_1 + 12 | 0);
    $2_1 = HEAP32[$0_1 + 292 >> 2];
    break label$1;
   }
   $5_1 = $0_1 + 292 | 0;
   $2_1 = HEAP32[$5_1 >> 2];
   $6_1 = $0_1 + 300 | 0;
   $4_1 = HEAP32[$6_1 >> 2];
   $1_1 = $128($2_1, $4_1, $1_1);
   if (($1_1 | 0) >= ($2_1 | 0)) {
    break label$1
   }
   $1_1 = ($1_1 << 2) + $4_1 | 0;
   $7_1 = HEAP32[$1_1 >> 2];
   $8_1 = $1_1;
   $2_1 = $2_1 - 1 | 0;
   $1_1 = $2_1 << 2;
   HEAP32[$8_1 >> 2] = HEAP32[$1_1 + $4_1 >> 2];
   HEAP32[$5_1 >> 2] = $2_1;
   HEAP32[$1_1 + HEAP32[$6_1 >> 2] >> 2] = $7_1;
  }
  HEAP32[$0_1 + 284 >> 2] = ($2_1 | 0) > 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $663($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if (($2_1 | 0) != HEAP32[$0_1 + 8 >> 2]) {
    break label$1
   }
   $3_1 = $2_1 ? $2_1 << 1 : 1;
   if (($3_1 | 0) <= ($2_1 | 0)) {
    break label$1
   }
   if ($3_1) {
    $5_1 = $120($3_1 << 2);
    $2_1 = HEAP32[$0_1 + 4 >> 2];
   }
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     HEAP32[$4_1 + $5_1 >> 2] = HEAP32[HEAP32[$0_1 + 12 >> 2] + $4_1 >> 2];
     $2_1 = $2_1 - 1 | 0;
     $4_1 = $4_1 + 4 | 0;
     continue;
    }
    break;
   };
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $5_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $3_1;
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
  HEAP32[HEAP32[$0_1 + 12 >> 2] + ($2_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $664($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1 + 548 | 0;
  if (($661($2_1, $1_1) | 0) < HEAP32[$0_1 + 552 >> 2]) {
   $665($2_1, $1_1);
   $2_1 = HEAP32[$1_1 + 32 >> 2];
   $3_1 = $0_1;
   $0_1 = HEAP32[$1_1 + 28 >> 2];
   if (($3_1 | 0) == ($0_1 | 0)) {
    $662($0_1, $2_1, 0);
    return;
   }
   $662($2_1, $0_1, 0);
  }
 }
 
 function $665($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = $661($0_1, $1_1);
  if (($2_1 | 0) > ($1_1 | 0)) {
   $3_1 = HEAP32[$0_1 + 12 >> 2];
   $1_1 = $3_1 + ($1_1 << 2) | 0;
   $4_1 = HEAP32[$1_1 >> 2];
   $5_1 = $1_1;
   $1_1 = $2_1 - 1 | 0;
   $2_1 = $1_1 << 2;
   HEAP32[$5_1 >> 2] = HEAP32[$2_1 + $3_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   HEAP32[$2_1 + HEAP32[$0_1 + 12 >> 2] >> 2] = $4_1;
  }
 }
 
 function $666($0_1) {
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 18272;
  HEAP8[$0_1 + 20 | 0] = 1;
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP8[$0_1 + 40 | 0] = 1;
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 36 >> 2] = 0;
  HEAP8[$0_1 + 60 | 0] = 1;
  $1_1 = $0_1 + 28 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 56 >> 2] = 0;
  HEAP8[$0_1 + 80 | 0] = 1;
  $1_1 = $0_1 + 48 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 76 >> 2] = 0;
  HEAP8[$0_1 + 100 | 0] = 1;
  $1_1 = $0_1 + 68 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 96 >> 2] = 0;
  HEAP8[$0_1 + 120 | 0] = 1;
  $1_1 = $0_1 + 88 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 116 >> 2] = 0;
  HEAP8[$0_1 + 140 | 0] = 1;
  $1_1 = $0_1 + 108 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 136 >> 2] = 0;
  $1_1 = $0_1 + 128 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0_1 + 160 | 0] = 1;
  HEAP32[$0_1 + 156 >> 2] = 0;
  $1_1 = $0_1 + 148 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0_1 + 180 | 0] = 1;
  HEAP32[$0_1 + 176 >> 2] = 0;
  $1_1 = $0_1 + 168 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0_1 + 208 | 0] = 1;
  $1_1 = $0_1 + 264 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = -1074790400;
  HEAP32[$0_1 + 204 >> 2] = 0;
  $1_1 = $0_1 + 196 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 252 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = -1;
  HEAP32[$0_1 + 240 >> 2] = -2;
  HEAP32[$0_1 + 232 >> 2] = 0;
  HEAP32[$0_1 + 224 >> 2] = 0;
  HEAP32[$0_1 + 220 >> 2] = 70;
  HEAP32[$0_1 + 216 >> 2] = 71;
  HEAP32[$0_1 + 212 >> 2] = 72;
 }
 
 function $667($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0.0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0);
  $4_1 = HEAPF32[$2_1 + 128 >> 2];
  $8_1 = 0.0;
  label$1 : {
   if ($4_1 == Math_fround(0.0)) {
    break label$1
   }
   HEAP32[5682] = HEAP32[5682] + 1;
   $3_1 = HEAPF32[$2_1 + 120 >> 2];
   $5_1 = $4_1;
   $4_1 = HEAPF32[$2_1 + 96 >> 2];
   $5_1 = Math_fround($5_1 - Math_fround($4_1 * HEAPF32[$2_1 + 116 >> 2]));
   $7_1 = $5_1;
   $5_1 = HEAPF32[$2_1 + 16 >> 2];
   $9_1 = HEAPF32[$2_1 + 20 >> 2];
   $10_1 = HEAPF32[$2_1 + 24 >> 2];
   $15_1 = Math_fround($160($5_1, $9_1, $10_1, HEAPF32[$0_1 + 144 >> 2], HEAPF32[$0_1 + 148 >> 2], HEAPF32[$0_1 + 152 >> 2]) + $160(HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], HEAPF32[$0_1 + 160 >> 2], HEAPF32[$0_1 + 164 >> 2], HEAPF32[$0_1 + 168 >> 2]));
   $6_1 = HEAPF32[$2_1 + 108 >> 2];
   $11_1 = $2_1 + 48 | 0;
   $12_1 = $2_1 + 52 | 0;
   $13_1 = $2_1 + 56 | 0;
   $6_1 = Math_fround(Math_fround($7_1 - Math_fround($15_1 * $6_1)) - Math_fround(Math_fround($160(HEAPF32[$11_1 >> 2], HEAPF32[$12_1 >> 2], HEAPF32[$13_1 >> 2], HEAPF32[$1_1 + 144 >> 2], HEAPF32[$1_1 + 148 >> 2], HEAPF32[$1_1 + 152 >> 2]) + $160(HEAPF32[$2_1 + 32 >> 2], HEAPF32[$2_1 + 36 >> 2], HEAPF32[$2_1 + 40 >> 2], HEAPF32[$1_1 + 160 >> 2], HEAPF32[$1_1 + 164 >> 2], HEAPF32[$1_1 + 168 >> 2])) * $6_1));
   $7_1 = Math_fround($4_1 + $6_1);
   $14_1 = $3_1 > $7_1;
   HEAPF32[$2_1 + 96 >> 2] = $14_1 ? $3_1 : $7_1;
   $3_1 = $14_1 ? Math_fround($3_1 - $4_1) : $6_1;
   $671($0_1, Math_fround($5_1 * HEAPF32[$0_1 + 128 >> 2]), Math_fround($9_1 * HEAPF32[$0_1 + 132 >> 2]), Math_fround($10_1 * HEAPF32[$0_1 + 136 >> 2]), $2_1 - -64 | 0, $3_1);
   $671($1_1, Math_fround(HEAPF32[$11_1 >> 2] * HEAPF32[$1_1 + 128 >> 2]), Math_fround(HEAPF32[$12_1 >> 2] * HEAPF32[$1_1 + 132 >> 2]), Math_fround(HEAPF32[$13_1 >> 2] * HEAPF32[$1_1 + 136 >> 2]), $2_1 + 80 | 0, $3_1);
   $8_1 = +$3_1;
  }
  return Math_fround(Math_fround($8_1 * (1.0 / +HEAPF32[$2_1 + 108 >> 2])));
 }
 
 function $668($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0);
  $3_1 = HEAPF32[$2_1 + 120 >> 2];
  $7_1 = HEAPF32[$2_1 + 100 >> 2];
  $5_1 = Math_fround(HEAPF32[$2_1 + 112 >> 2] - Math_fround($7_1 * HEAPF32[$2_1 + 116 >> 2]));
  $6_1 = $5_1;
  $5_1 = HEAPF32[$2_1 + 16 >> 2];
  $8_1 = HEAPF32[$2_1 + 20 >> 2];
  $9_1 = HEAPF32[$2_1 + 24 >> 2];
  $14_1 = Math_fround($160($5_1, $8_1, $9_1, HEAPF32[$0_1 - -64 >> 2], HEAPF32[$0_1 + 68 >> 2], HEAPF32[$0_1 + 72 >> 2]) + $160(HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], HEAPF32[$0_1 + 80 >> 2], HEAPF32[$0_1 + 84 >> 2], HEAPF32[$0_1 + 88 >> 2]));
  $4_1 = HEAPF32[$2_1 + 108 >> 2];
  $10_1 = $2_1 + 48 | 0;
  $11_1 = $2_1 + 52 | 0;
  $12_1 = $2_1 + 56 | 0;
  $4_1 = Math_fround(Math_fround($6_1 - Math_fround($14_1 * $4_1)) - Math_fround(Math_fround($160(HEAPF32[$10_1 >> 2], HEAPF32[$11_1 >> 2], HEAPF32[$12_1 >> 2], HEAPF32[$1_1 - -64 >> 2], HEAPF32[$1_1 + 68 >> 2], HEAPF32[$1_1 + 72 >> 2]) + $160(HEAPF32[$2_1 + 32 >> 2], HEAPF32[$2_1 + 36 >> 2], HEAPF32[$2_1 + 40 >> 2], HEAPF32[$1_1 + 80 >> 2], HEAPF32[$1_1 + 84 >> 2], HEAPF32[$1_1 + 88 >> 2])) * $4_1));
  $6_1 = Math_fround($7_1 + $4_1);
  $13_1 = $3_1 > $6_1;
  HEAPF32[$2_1 + 100 >> 2] = $13_1 ? $3_1 : $6_1;
  $3_1 = $13_1 ? Math_fround($3_1 - $7_1) : $4_1;
  $670($0_1, Math_fround($5_1 * HEAPF32[$0_1 + 128 >> 2]), Math_fround($8_1 * HEAPF32[$0_1 + 132 >> 2]), Math_fround($9_1 * HEAPF32[$0_1 + 136 >> 2]), $2_1 - -64 | 0, $3_1);
  $670($1_1, Math_fround(HEAPF32[$10_1 >> 2] * HEAPF32[$1_1 + 128 >> 2]), Math_fround(HEAPF32[$11_1 >> 2] * HEAPF32[$1_1 + 132 >> 2]), Math_fround(HEAPF32[$12_1 >> 2] * HEAPF32[$1_1 + 136 >> 2]), $2_1 + 80 | 0, $3_1);
  return Math_fround(Math_fround(1.0 / +HEAPF32[$2_1 + 108 >> 2] * +$3_1));
 }
 
 function $669($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0);
  $6_1 = HEAPF32[$2_1 + 100 >> 2];
  $3_1 = Math_fround(HEAPF32[$2_1 + 112 >> 2] - Math_fround($6_1 * HEAPF32[$2_1 + 116 >> 2]));
  $4_1 = $3_1;
  $7_1 = HEAPF32[$2_1 + 16 >> 2];
  $8_1 = HEAPF32[$2_1 + 20 >> 2];
  $9_1 = HEAPF32[$2_1 + 24 >> 2];
  $5_1 = Math_fround($160($7_1, $8_1, $9_1, HEAPF32[$0_1 - -64 >> 2], HEAPF32[$0_1 + 68 >> 2], HEAPF32[$0_1 + 72 >> 2]) + $160(HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], HEAPF32[$0_1 + 80 >> 2], HEAPF32[$0_1 + 84 >> 2], HEAPF32[$0_1 + 88 >> 2]));
  $3_1 = HEAPF32[$2_1 + 108 >> 2];
  $5_1 = Math_fround(Math_fround($4_1 - Math_fround($5_1 * $3_1)) - Math_fround(Math_fround($160(HEAPF32[$2_1 + 48 >> 2], HEAPF32[$2_1 + 52 >> 2], HEAPF32[$2_1 + 56 >> 2], HEAPF32[$1_1 - -64 >> 2], HEAPF32[$1_1 + 68 >> 2], HEAPF32[$1_1 + 72 >> 2]) + $160(HEAPF32[$2_1 + 32 >> 2], HEAPF32[$2_1 + 36 >> 2], HEAPF32[$2_1 + 40 >> 2], HEAPF32[$1_1 + 80 >> 2], HEAPF32[$1_1 + 84 >> 2], HEAPF32[$1_1 + 88 >> 2])) * $3_1));
  $3_1 = Math_fround($6_1 + $5_1);
  $4_1 = HEAPF32[$2_1 + 120 >> 2];
  label$1 : {
   if ($3_1 < $4_1) {
    $5_1 = Math_fround($4_1 - $6_1);
    $3_1 = $4_1;
    break label$1;
   }
   $4_1 = HEAPF32[$2_1 + 124 >> 2];
   if (!($4_1 < $3_1)) {
    break label$1
   }
   $5_1 = Math_fround($4_1 - $6_1);
   $3_1 = $4_1;
  }
  HEAPF32[$2_1 + 100 >> 2] = $3_1;
  $670($0_1, Math_fround($7_1 * HEAPF32[$0_1 + 128 >> 2]), Math_fround($8_1 * HEAPF32[$0_1 + 132 >> 2]), Math_fround($9_1 * HEAPF32[$0_1 + 136 >> 2]), $2_1 - -64 | 0, $5_1);
  $670($1_1, Math_fround(HEAPF32[$2_1 + 48 >> 2] * HEAPF32[$1_1 + 128 >> 2]), Math_fround(HEAPF32[$2_1 + 52 >> 2] * HEAPF32[$1_1 + 132 >> 2]), Math_fround(HEAPF32[$2_1 + 56 >> 2] * HEAPF32[$1_1 + 136 >> 2]), $2_1 + 80 | 0, $5_1);
  return Math_fround(Math_fround(1.0 / +HEAPF32[$2_1 + 108 >> 2] * +$5_1));
 }
 
 function $670($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  if (HEAP32[$0_1 + 240 >> 2]) {
   HEAP32[$6_1 + 12 >> 2] = 0;
   HEAPF32[$6_1 >> 2] = Math_fround($1_1 * $5_1) * HEAPF32[$0_1 + 112 >> 2];
   HEAPF32[$6_1 + 8 >> 2] = Math_fround($3_1 * $5_1) * HEAPF32[$0_1 + 120 >> 2];
   HEAPF32[$6_1 + 4 >> 2] = Math_fround($2_1 * $5_1) * HEAPF32[$0_1 + 116 >> 2];
   $158($0_1 - -64 | 0, $6_1);
   HEAP32[$6_1 + 12 >> 2] = 0;
   HEAPF32[$6_1 + 8 >> 2] = Math_fround(HEAPF32[$0_1 + 104 >> 2] * $5_1) * HEAPF32[$4_1 + 8 >> 2];
   HEAPF32[$6_1 + 4 >> 2] = Math_fround(HEAPF32[$0_1 + 100 >> 2] * $5_1) * HEAPF32[$4_1 + 4 >> 2];
   HEAPF32[$6_1 >> 2] = Math_fround(HEAPF32[$0_1 + 96 >> 2] * $5_1) * HEAPF32[$4_1 >> 2];
   $158($0_1 + 80 | 0, $6_1);
  }
  global$0 = $6_1 + 16 | 0;
 }
 
 function $671($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  if (HEAP32[$0_1 + 240 >> 2]) {
   HEAP32[$6_1 + 12 >> 2] = 0;
   HEAPF32[$6_1 >> 2] = Math_fround($1_1 * $5_1) * HEAPF32[$0_1 + 112 >> 2];
   HEAPF32[$6_1 + 8 >> 2] = Math_fround($3_1 * $5_1) * HEAPF32[$0_1 + 120 >> 2];
   HEAPF32[$6_1 + 4 >> 2] = Math_fround($2_1 * $5_1) * HEAPF32[$0_1 + 116 >> 2];
   $158($0_1 + 144 | 0, $6_1);
   HEAP32[$6_1 + 12 >> 2] = 0;
   HEAPF32[$6_1 + 8 >> 2] = Math_fround(HEAPF32[$0_1 + 104 >> 2] * $5_1) * HEAPF32[$4_1 + 8 >> 2];
   HEAPF32[$6_1 + 4 >> 2] = Math_fround(HEAPF32[$0_1 + 100 >> 2] * $5_1) * HEAPF32[$4_1 + 4 >> 2];
   HEAPF32[$6_1 >> 2] = Math_fround(HEAPF32[$0_1 + 96 >> 2] * $5_1) * HEAPF32[$4_1 >> 2];
   $158($0_1 + 160 | 0, $6_1);
  }
  global$0 = $6_1 + 16 | 0;
 }
 
 function $672($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 18272;
  $124($0_1 + 192 | 0);
  $163($0_1 + 164 | 0);
  HEAP32[$0_1 + 176 >> 2] = 0;
  HEAP8[$0_1 + 180 | 0] = 1;
  $1_1 = $0_1 + 168 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $124($0_1 + 144 | 0);
  $124($0_1 + 124 | 0);
  $124($0_1 + 104 | 0);
  $124($0_1 + 84 | 0);
  $124($0_1 - -64 | 0);
  $124($0_1 + 44 | 0);
  $124($0_1 + 24 | 0);
  $163($0_1 + 4 | 0);
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP8[$0_1 + 20 | 0] = 1;
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $673($0_1) {
  $0_1 = $0_1 | 0;
  $121($672($0_1));
 }
 
 function $674($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 52 >> 2]]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 44 >> 2]]($0_1, $1_1, $2_1, $7_1));
  return Math_fround(Math_fround(0.0));
 }
 
 function $675($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 + 232 >> 2] = 0;
 }
 
 function $676($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0, $21_1 = 0, $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = 0, $30_1 = 0, $31_1 = Math_fround(0), $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = 0, $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = Math_fround(0), $44_1 = 0, $45_1 = 0, $46_1 = Math_fround(0), $47_1 = Math_fround(0), $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54 = 0, $55_1 = 0, $56_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $59_1 = Math_fround(0), $60 = Math_fround(0), $61_1 = Math_fround(0), $62_1 = Math_fround(0), $63 = Math_fround(0);
  $4_1 = global$0 - 112 | 0;
  global$0 = $4_1;
  $54 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $55_1 = $0_1 + 24 | 0;
  while (1) {
   if (($44_1 | 0) != ($54 | 0)) {
    $37_1 = HEAP32[($44_1 << 2) + $1_1 >> 2];
    $25_1 = HEAP32[$37_1 + 824 >> 2];
    $26_1 = HEAP32[$37_1 + 820 >> 2];
    $20_1 = $677($0_1, $26_1, HEAPF32[$3_1 + 12 >> 2]);
    $21_1 = $677($0_1, $25_1, HEAPF32[$3_1 + 12 >> 2]);
    $48_1 = Math_imul($21_1, 244);
    $2_1 = HEAP32[$0_1 + 16 >> 2];
    $40_1 = $48_1 + $2_1 | 0;
    label$3 : {
     $49_1 = Math_imul($20_1, 244);
     $41_1 = $2_1 + $49_1 | 0;
     if ($420(HEAPF32[$41_1 + 128 >> 2], HEAPF32[$41_1 + 132 >> 2], HEAPF32[$41_1 + 136 >> 2])) {
      if ($420(HEAPF32[$40_1 + 128 >> 2], HEAPF32[$40_1 + 132 >> 2], HEAPF32[$40_1 + 136 >> 2])) {
       break label$3
      }
     }
     $7_1 = $37_1 + 184 | 0;
     $45_1 = 0;
     while (1) {
      if (HEAP32[$37_1 + 828 >> 2] <= ($45_1 | 0)) {
       break label$3
      }
      $50_1 = $7_1 - 100 | 0;
      label$6 : {
       if (!(HEAPF32[$50_1 >> 2] <= HEAPF32[$37_1 + 836 >> 2])) {
        break label$6
       }
       $30_1 = HEAP32[$0_1 + 28 >> 2];
       $2_1 = $678($55_1);
       $34_1 = $7_1 - 180 | 0;
       HEAP32[$2_1 + 132 >> 2] = $34_1;
       HEAP32[$2_1 + 148 >> 2] = $21_1;
       HEAP32[$2_1 + 144 >> 2] = $20_1;
       HEAP32[$4_1 + 60 >> 2] = 0;
       $22_1 = Math_fround(HEAPF32[$7_1 - 124 >> 2] - HEAPF32[$26_1 + 60 >> 2]);
       HEAPF32[$4_1 + 56 >> 2] = $22_1;
       $31_1 = Math_fround(HEAPF32[$7_1 - 128 >> 2] - HEAPF32[$26_1 + 56 >> 2]);
       HEAPF32[$4_1 + 52 >> 2] = $31_1;
       $27_1 = Math_fround(HEAPF32[$7_1 - 132 >> 2] - HEAPF32[$26_1 + 52 >> 2]);
       HEAPF32[$4_1 + 48 >> 2] = $27_1;
       $11_1 = HEAPF32[$7_1 - 148 >> 2];
       $15_1 = HEAPF32[$7_1 - 144 >> 2];
       $8_1 = HEAPF32[$7_1 - 140 >> 2];
       $9_1 = HEAPF32[$25_1 + 52 >> 2];
       $19_1 = HEAPF32[$25_1 + 56 >> 2];
       $5_1 = HEAPF32[$25_1 + 60 >> 2];
       HEAP32[$4_1 + 44 >> 2] = 0;
       $35_1 = Math_fround($8_1 - $5_1);
       HEAPF32[$4_1 + 40 >> 2] = $35_1;
       $36_1 = Math_fround($15_1 - $19_1);
       HEAPF32[$4_1 + 36 >> 2] = $36_1;
       $11_1 = Math_fround($11_1 - $9_1);
       HEAPF32[$4_1 + 32 >> 2] = $11_1;
       $679($41_1, $27_1, $31_1, $22_1, $4_1 + 16 | 0);
       $679($40_1, $11_1, $36_1, $35_1, $4_1);
       $32_1 = $7_1 - 112 | 0;
       $51_1 = HEAPF32[$32_1 >> 2];
       $17_1 = $7_1 - 116 | 0;
       $52_1 = HEAPF32[$17_1 >> 2];
       $33_1 = $7_1 - 108 | 0;
       $53_1 = HEAPF32[$33_1 >> 2];
       $9_1 = HEAPF32[$3_1 + 12 >> 2];
       $6_1 = HEAP32[$0_1 + 16 >> 2];
       $12_1 = $6_1 + $48_1 | 0;
       $13_1 = $6_1 + $49_1 | 0;
       $23_1 = HEAP32[$13_1 + 240 >> 2];
       $46_1 = HEAPF32[$3_1 + 36 >> 2];
       $28_1 = HEAPF32[$3_1 + 44 >> 2];
       $42_1 = $7_1 - 60 | 0;
       $6_1 = HEAP32[$42_1 >> 2];
       label$7 : {
        if ($6_1 & 6) {
         $28_1 = $6_1 & 2 ? HEAPF32[$7_1 - 32 >> 2] : $28_1;
         if (!($6_1 & 4)) {
          break label$7
         }
         $46_1 = HEAPF32[$7_1 - 28 >> 2];
         break label$7;
        }
        if (!($6_1 & 8)) {
         break label$7
        }
        $5_1 = Math_fround($9_1 * HEAPF32[$7_1 - 32 >> 2]);
        $19_1 = Math_fround(Math_max(Math_fround($5_1 + HEAPF32[$7_1 - 28 >> 2]), Math_fround(1.1920928955078125e-07)));
        $46_1 = Math_fround($5_1 / $19_1);
        $28_1 = Math_fround(Math_fround(1.0) / $19_1);
       }
       $56_1 = HEAPF32[$4_1 + 4 >> 2];
       $57_1 = HEAPF32[$4_1 + 20 >> 2];
       $58_1 = HEAPF32[$4_1 >> 2];
       $59_1 = HEAPF32[$4_1 + 16 >> 2];
       $60 = HEAPF32[$4_1 + 8 >> 2];
       $61_1 = HEAPF32[$4_1 + 24 >> 2];
       $24_1 = HEAP32[$12_1 + 240 >> 2];
       $19_1 = HEAPF32[$3_1 + 28 >> 2];
       $201($4_1 + 96 | 0, $27_1, $31_1, $22_1, $52_1, $51_1, $53_1);
       $38_1 = Math_fround(0.0);
       $8_1 = Math_fround(0.0);
       $16_1 = Math_fround(0.0);
       $18_1 = Math_fround(0.0);
       if ($23_1) {
        $431($4_1 + 80 | 0, $23_1 + 328 | 0, HEAPF32[$4_1 + 96 >> 2], HEAPF32[$4_1 + 100 >> 2], HEAPF32[$4_1 + 104 >> 2]);
        $18_1 = Math_fround(HEAPF32[$4_1 + 88 >> 2] * HEAPF32[$23_1 + 616 >> 2]);
        $16_1 = Math_fround(HEAPF32[$4_1 + 84 >> 2] * HEAPF32[$23_1 + 612 >> 2]);
        $8_1 = Math_fround(HEAPF32[$4_1 + 80 >> 2] * HEAPF32[$23_1 + 608 >> 2]);
       }
       HEAP32[$2_1 + 76 >> 2] = 0;
       $14_1 = $2_1 + 72 | 0;
       HEAPF32[$14_1 >> 2] = $18_1;
       $6_1 = $2_1 + 68 | 0;
       HEAPF32[$6_1 >> 2] = $16_1;
       $29_1 = $2_1 - -64 | 0;
       HEAPF32[$29_1 >> 2] = $8_1;
       $201($4_1 + 80 | 0, $11_1, $36_1, $35_1, HEAPF32[$17_1 >> 2], HEAPF32[$32_1 >> 2], HEAPF32[$33_1 >> 2]);
       $16_1 = Math_fround(0.0);
       $18_1 = Math_fround(0.0);
       $10_1 = $2_1;
       if ($24_1) {
        $431($4_1 - -64 | 0, $24_1 + 328 | 0, Math_fround(-HEAPF32[$4_1 + 80 >> 2]), Math_fround(-HEAPF32[$4_1 + 84 >> 2]), Math_fround(-HEAPF32[$4_1 + 88 >> 2]));
        $18_1 = Math_fround(HEAPF32[$4_1 + 72 >> 2] * HEAPF32[$24_1 + 616 >> 2]);
        $16_1 = Math_fround(HEAPF32[$4_1 + 68 >> 2] * HEAPF32[$24_1 + 612 >> 2]);
        $5_1 = Math_fround(HEAPF32[$4_1 + 64 >> 2] * HEAPF32[$24_1 + 608 >> 2]);
       } else {
        $5_1 = Math_fround(0.0)
       }
       HEAPF32[$10_1 + 80 >> 2] = $5_1;
       HEAP32[$2_1 + 92 >> 2] = 0;
       HEAPF32[$2_1 + 88 >> 2] = $18_1;
       HEAPF32[$2_1 + 84 >> 2] = $16_1;
       $10_1 = $2_1;
       $16_1 = $19_1;
       $47_1 = Math_fround(Math_fround(1.0) / $9_1);
       $43_1 = Math_fround($47_1 * $28_1);
       $18_1 = $43_1;
       if ($23_1) {
        $201($4_1 - -64 | 0, HEAPF32[$2_1 + 64 >> 2], HEAPF32[$6_1 >> 2], HEAPF32[$14_1 >> 2], $27_1, $31_1, $22_1);
        $5_1 = Math_fround(HEAPF32[$23_1 + 408 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 64 >> 2] * HEAPF32[$17_1 >> 2]) + Math_fround(HEAPF32[$4_1 + 68 >> 2] * HEAPF32[$32_1 >> 2])) + Math_fround(HEAPF32[$4_1 + 72 >> 2] * HEAPF32[$33_1 >> 2])));
       } else {
        $5_1 = Math_fround(0.0)
       }
       if ($24_1) {
        $15_1 = HEAPF32[$2_1 + 88 >> 2];
        $8_1 = HEAPF32[$2_1 + 84 >> 2];
        $9_1 = HEAPF32[$2_1 + 80 >> 2];
        $8_1 = Math_fround(HEAPF32[$24_1 + 408 >> 2] + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $36_1) - Math_fround($8_1 * $35_1)) * HEAPF32[$17_1 >> 2]) + Math_fround(Math_fround(Math_fround($9_1 * $35_1) - Math_fround($15_1 * $11_1)) * HEAPF32[$32_1 >> 2])) + Math_fround(Math_fround(Math_fround($8_1 * $11_1) - Math_fround($9_1 * $36_1)) * HEAPF32[$33_1 >> 2])));
       } else {
        $8_1 = Math_fround(0.0)
       }
       HEAPF32[$10_1 + 108 >> 2] = $16_1 / Math_fround($18_1 + Math_fround($5_1 + $8_1));
       label$15 : {
        if ($23_1) {
         $6_1 = HEAP32[$17_1 + 4 >> 2];
         HEAP32[$2_1 + 16 >> 2] = HEAP32[$17_1 >> 2];
         HEAP32[$2_1 + 20 >> 2] = $6_1;
         $14_1 = $17_1 + 8 | 0;
         $6_1 = HEAP32[$14_1 + 4 >> 2];
         $10_1 = $2_1 + 24 | 0;
         HEAP32[$10_1 >> 2] = HEAP32[$14_1 >> 2];
         HEAP32[$10_1 + 4 >> 2] = $6_1;
         $6_1 = HEAP32[$4_1 + 100 >> 2];
         HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 96 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $6_1;
         $14_1 = $4_1 + 104 | 0;
         $6_1 = HEAP32[$14_1 + 4 >> 2];
         $10_1 = $2_1 + 8 | 0;
         HEAP32[$10_1 >> 2] = HEAP32[$14_1 >> 2];
         HEAP32[$10_1 + 4 >> 2] = $6_1;
         break label$15;
        }
        HEAP32[$2_1 >> 2] = 0;
        HEAP32[$2_1 + 4 >> 2] = 0;
        $6_1 = $2_1 + 24 | 0;
        HEAP32[$6_1 >> 2] = 0;
        HEAP32[$6_1 + 4 >> 2] = 0;
        $6_1 = $2_1 + 16 | 0;
        HEAP32[$6_1 >> 2] = 0;
        HEAP32[$6_1 + 4 >> 2] = 0;
        $6_1 = $2_1 + 8 | 0;
        HEAP32[$6_1 >> 2] = 0;
        HEAP32[$6_1 + 4 >> 2] = 0;
       }
       label$17 : {
        if ($24_1) {
         $8_1 = HEAPF32[$17_1 >> 2];
         $9_1 = HEAPF32[$32_1 >> 2];
         $5_1 = HEAPF32[$33_1 >> 2];
         HEAP32[$2_1 + 60 >> 2] = 0;
         HEAP32[$2_1 + 44 >> 2] = 0;
         HEAPF32[$2_1 + 40 >> 2] = -HEAPF32[$4_1 + 88 >> 2];
         HEAPF32[$2_1 + 36 >> 2] = -HEAPF32[$4_1 + 84 >> 2];
         HEAPF32[$2_1 + 32 >> 2] = -HEAPF32[$4_1 + 80 >> 2];
         HEAPF32[$2_1 + 56 >> 2] = -$5_1;
         HEAPF32[$2_1 + 52 >> 2] = -$9_1;
         HEAPF32[$2_1 + 48 >> 2] = -$8_1;
         break label$17;
        }
        HEAP32[$2_1 + 32 >> 2] = 0;
        HEAP32[$2_1 + 36 >> 2] = 0;
        $6_1 = $2_1 + 56 | 0;
        HEAP32[$6_1 >> 2] = 0;
        HEAP32[$6_1 + 4 >> 2] = 0;
        $6_1 = $2_1 + 48 | 0;
        HEAP32[$6_1 >> 2] = 0;
        HEAP32[$6_1 + 4 >> 2] = 0;
        $6_1 = $2_1 + 40 | 0;
        HEAP32[$6_1 >> 2] = 0;
        HEAP32[$6_1 + 4 >> 2] = 0;
       }
       $62_1 = HEAPF32[$3_1 + 68 >> 2];
       $63 = HEAPF32[$50_1 >> 2];
       $16_1 = Math_fround(0.0);
       $18_1 = Math_fround(0.0);
       $28_1 = Math_fround(0.0);
       if ($23_1) {
        $680($4_1 - -64 | 0, $23_1, $27_1, $31_1, $22_1);
        $18_1 = HEAPF32[$4_1 + 68 >> 2];
        $16_1 = HEAPF32[$4_1 + 72 >> 2];
        $28_1 = HEAPF32[$4_1 + 64 >> 2];
       }
       $39_1 = Math_fround(0.0);
       $22_1 = Math_fround(0.0);
       if ($24_1) {
        $680($4_1 - -64 | 0, $24_1, $11_1, $36_1, $35_1);
        $39_1 = HEAPF32[$4_1 + 68 >> 2];
        $38_1 = HEAPF32[$4_1 + 72 >> 2];
        $22_1 = HEAPF32[$4_1 + 64 >> 2];
       }
       $6_1 = $13_1 + 240 | 0;
       $8_1 = HEAPF32[$33_1 >> 2];
       $9_1 = HEAPF32[$17_1 >> 2];
       $5_1 = HEAPF32[$32_1 >> 2];
       HEAPF32[$2_1 + 104 >> 2] = HEAPF32[$7_1 - 96 >> 2];
       $5_1 = Math_fround(Math_fround(Math_fround($9_1 * Math_fround($28_1 - $22_1)) + Math_fround($5_1 * Math_fround($18_1 - $39_1))) + Math_fround($8_1 * Math_fround($16_1 - $38_1)));
       $31_1 = HEAPF32[$3_1 + 104 >> 2] > Math_fround(Math_abs($5_1)) ? Math_fround(0.0) : Math_fround(HEAPF32[$7_1 - 84 >> 2] * Math_fround(-$5_1));
       label$21 : {
        if (HEAPU8[$3_1 + 80 | 0] & 4) {
         $5_1 = Math_fround(HEAPF32[$7_1 - 56 >> 2] * HEAPF32[$3_1 + 72 >> 2]);
         HEAPF32[$2_1 + 100 >> 2] = $5_1;
         if ($23_1) {
          $670($13_1, Math_fround(HEAPF32[$2_1 + 16 >> 2] * HEAPF32[$13_1 + 128 >> 2]), Math_fround(HEAPF32[$2_1 + 20 >> 2] * HEAPF32[$13_1 + 132 >> 2]), Math_fround(HEAPF32[$2_1 + 24 >> 2] * HEAPF32[$13_1 + 136 >> 2]), $29_1, $5_1)
         }
         if (!$24_1) {
          break label$21
         }
         $27_1 = HEAPF32[$12_1 + 128 >> 2];
         $11_1 = HEAPF32[$12_1 + 132 >> 2];
         $15_1 = HEAPF32[$2_1 + 52 >> 2];
         $8_1 = HEAPF32[$12_1 + 136 >> 2];
         $9_1 = HEAPF32[$2_1 + 56 >> 2];
         $5_1 = HEAPF32[$2_1 + 48 >> 2];
         HEAP32[$4_1 + 76 >> 2] = 0;
         HEAPF32[$4_1 + 72 >> 2] = -HEAPF32[$2_1 + 88 >> 2];
         HEAPF32[$4_1 + 68 >> 2] = -HEAPF32[$2_1 + 84 >> 2];
         HEAPF32[$4_1 + 64 >> 2] = -HEAPF32[$2_1 + 80 >> 2];
         $670($12_1, Math_fround($27_1 * Math_fround(-$5_1)), Math_fround($11_1 * Math_fround(-$15_1)), Math_fround($8_1 * Math_fround(-$9_1)), $4_1 - -64 | 0, Math_fround(-HEAPF32[$2_1 + 100 >> 2]));
         break label$21;
        }
        HEAP32[$2_1 + 100 >> 2] = 0;
       }
       HEAP32[$2_1 + 96 >> 2] = 0;
       $27_1 = Math_fround(0.0);
       $39_1 = Math_fround(0.0);
       $22_1 = Math_fround(0.0);
       $38_1 = Math_fround(0.0);
       $16_1 = Math_fround(0.0);
       $18_1 = Math_fround(0.0);
       $28_1 = Math_fround(0.0);
       $8_1 = Math_fround(0.0);
       $11_1 = Math_fround(0.0);
       $15_1 = Math_fround(0.0);
       $9_1 = $31_1 <= Math_fround(0.0) ? Math_fround(0.0) : $31_1;
       if (HEAP32[$6_1 >> 2]) {
        $38_1 = HEAPF32[$13_1 + 224 >> 2];
        $18_1 = HEAPF32[$13_1 + 232 >> 2];
        $39_1 = HEAPF32[$13_1 + 216 >> 2];
        $22_1 = HEAPF32[$13_1 + 212 >> 2];
        $16_1 = HEAPF32[$13_1 + 228 >> 2];
        $5_1 = HEAPF32[$13_1 + 208 >> 2];
       } else {
        $5_1 = Math_fround(0.0)
       }
       $16_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($5_1 + HEAPF32[$13_1 + 176 >> 2]) * HEAPF32[$2_1 + 16 >> 2]) + Math_fround(Math_fround($22_1 + HEAPF32[$13_1 + 180 >> 2]) * HEAPF32[$2_1 + 20 >> 2])) + Math_fround(Math_fround($39_1 + HEAPF32[$13_1 + 184 >> 2]) * HEAPF32[$2_1 + 24 >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround($38_1 + HEAPF32[$13_1 + 192 >> 2]) * HEAPF32[$2_1 >> 2]) + Math_fround(Math_fround($16_1 + HEAPF32[$13_1 + 196 >> 2]) * HEAPF32[$2_1 + 4 >> 2])) + Math_fround(Math_fround($18_1 + HEAPF32[$13_1 + 200 >> 2]) * HEAPF32[$2_1 + 8 >> 2])));
       if (HEAP32[$12_1 + 240 >> 2]) {
        $15_1 = HEAPF32[$12_1 + 224 >> 2];
        $8_1 = HEAPF32[$12_1 + 232 >> 2];
        $11_1 = HEAPF32[$12_1 + 228 >> 2];
        $27_1 = HEAPF32[$12_1 + 216 >> 2];
        $28_1 = HEAPF32[$12_1 + 212 >> 2];
        $5_1 = HEAPF32[$12_1 + 208 >> 2];
       } else {
        $5_1 = Math_fround(0.0)
       }
       $11_1 = Math_fround($9_1 - Math_fround($16_1 + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($5_1 + HEAPF32[$12_1 + 176 >> 2]) * HEAPF32[$2_1 + 48 >> 2]) + Math_fround(Math_fround($28_1 + HEAPF32[$12_1 + 180 >> 2]) * HEAPF32[$2_1 + 52 >> 2])) + Math_fround(Math_fround($27_1 + HEAPF32[$12_1 + 184 >> 2]) * HEAPF32[$2_1 + 56 >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround($15_1 + HEAPF32[$12_1 + 192 >> 2]) * HEAPF32[$2_1 + 32 >> 2]) + Math_fround(Math_fround($11_1 + HEAPF32[$12_1 + 196 >> 2]) * HEAPF32[$2_1 + 36 >> 2])) + Math_fround(Math_fround($8_1 + HEAPF32[$12_1 + 200 >> 2]) * HEAPF32[$2_1 + 40 >> 2])))));
       $9_1 = HEAPF32[$3_1 + 60 >> 2];
       HEAP32[$2_1 + 120 >> 2] = 0;
       HEAP32[$2_1 + 124 >> 2] = 1343554297;
       $8_1 = HEAPF32[$2_1 + 108 >> 2];
       HEAPF32[$2_1 + 116 >> 2] = $43_1 * $8_1;
       $6_1 = $2_1;
       $10_1 = $2_1;
       $15_1 = Math_fround($63 + $62_1);
       label$27 : {
        if ($15_1 > Math_fround(0.0)) {
         $11_1 = Math_fround($11_1 - Math_fround($47_1 * $15_1));
         $5_1 = Math_fround(0.0);
         break label$27;
        }
        $5_1 = Math_fround($47_1 * Math_fround($46_1 * Math_fround(-$15_1)));
       }
       $5_1 = Math_fround($5_1 * $8_1);
       $2_1 = !HEAP32[$3_1 + 56 >> 2] | $9_1 < $15_1;
       HEAPF32[$10_1 + 128 >> 2] = $2_1 ? Math_fround(0.0) : $5_1;
       $43_1 = $5_1;
       $5_1 = Math_fround($11_1 * $8_1);
       HEAPF32[$6_1 + 112 >> 2] = $2_1 ? Math_fround($43_1 + $5_1) : $5_1;
       HEAP32[$6_1 + 140 >> 2] = HEAP32[$0_1 + 68 >> 2];
       $2_1 = $7_1 - 92 | 0;
       label$29 : {
        if (!(HEAPF32[$2_1 >> 2] > Math_fround(0.0))) {
         break label$29
        }
        $681($0_1, $17_1, $20_1, $21_1, $30_1, HEAPF32[$7_1 - 88 >> 2]);
        $281($17_1, $4_1 + 96 | 0, $4_1 + 80 | 0);
        $10_1 = $153($4_1 + 96 | 0);
        $14_1 = $153($4_1 + 80 | 0);
        $682($26_1, $10_1, 2);
        $682($25_1, $10_1, 2);
        $682($26_1, $14_1, 2);
        $682($25_1, $14_1, 2);
        if (+$137(HEAPF32[$4_1 + 96 >> 2], HEAPF32[$4_1 + 100 >> 2], HEAPF32[$4_1 + 104 >> 2]) > .001) {
         $681($0_1, $10_1, $20_1, $21_1, $30_1, HEAPF32[$2_1 >> 2])
        }
        if (!(+$137(HEAPF32[$4_1 + 80 >> 2], HEAPF32[$4_1 + 84 >> 2], HEAPF32[$4_1 + 88 >> 2]) > .001)) {
         break label$29
        }
        $681($0_1, $14_1, $20_1, $21_1, $30_1, HEAPF32[$2_1 >> 2]);
       }
       label$31 : {
        if (!(HEAP8[$42_1 | 0] & 1 ? HEAPU8[$3_1 + 80 | 0] & 32 : 0)) {
         HEAP32[$7_1 - 4 >> 2] = 0;
         $15_1 = Math_fround($59_1 - $58_1);
         $9_1 = Math_fround($57_1 - $56_1);
         $5_1 = Math_fround($61_1 - $60);
         $11_1 = Math_fround(Math_fround(Math_fround($15_1 * $52_1) + Math_fround($9_1 * $51_1)) + Math_fround($5_1 * $53_1));
         $14_1 = $7_1 - 8 | 0;
         $8_1 = Math_fround($5_1 - Math_fround($11_1 * HEAPF32[$33_1 >> 2]));
         HEAPF32[$14_1 >> 2] = $8_1;
         $2_1 = $7_1 - 12 | 0;
         $9_1 = Math_fround($9_1 - Math_fround($11_1 * HEAPF32[$32_1 >> 2]));
         HEAPF32[$2_1 >> 2] = $9_1;
         $29_1 = $7_1 - 16 | 0;
         $5_1 = Math_fround($15_1 - Math_fround($11_1 * HEAPF32[$17_1 >> 2]));
         HEAPF32[$29_1 >> 2] = $5_1;
         $5_1 = $149($5_1, $9_1, $8_1);
         if (!(!($5_1 > Math_fround(1.1920928955078125e-07)) | HEAP32[$3_1 + 80 >> 2] & 64)) {
          HEAPF32[$4_1 + 96 >> 2] = Math_fround(1.0) / Math_fround(Math_sqrt($5_1));
          $10_1 = $218($29_1, $4_1 + 96 | 0);
          $682($26_1, $10_1, 1);
          $682($25_1, $10_1, 1);
          $683($0_1, $10_1, $20_1, $21_1, $30_1, $34_1, $4_1 + 48 | 0, $4_1 + 32 | 0, $19_1, $3_1, Math_fround(0.0), Math_fround(0.0));
          if (!(HEAPU8[$3_1 + 80 | 0] & 16)) {
           break label$31
          }
          $201($4_1 + 96 | 0, HEAPF32[$29_1 >> 2], HEAPF32[$2_1 >> 2], HEAPF32[$14_1 >> 2], HEAPF32[$17_1 >> 2], HEAPF32[$32_1 >> 2], HEAPF32[$33_1 >> 2]);
          $14_1 = $4_1 + 104 | 0;
          $2_1 = HEAP32[$14_1 + 4 >> 2];
          $10_1 = $7_1 + 8 | 0;
          HEAP32[$10_1 >> 2] = HEAP32[$14_1 >> 2];
          HEAP32[$10_1 + 4 >> 2] = $2_1;
          $2_1 = HEAP32[$4_1 + 100 >> 2];
          HEAP32[$7_1 >> 2] = HEAP32[$4_1 + 96 >> 2];
          HEAP32[$7_1 + 4 >> 2] = $2_1;
          $2_1 = $153($7_1);
          $682($26_1, $2_1, 1);
          $682($25_1, $2_1, 1);
          $683($0_1, $2_1, $20_1, $21_1, $30_1, $34_1, $4_1 + 48 | 0, $4_1 + 32 | 0, $19_1, $3_1, Math_fround(0.0), Math_fround(0.0));
          break label$31;
         }
         $281($17_1, $29_1, $7_1);
         $682($26_1, $29_1, 1);
         $682($25_1, $29_1, 1);
         $683($0_1, $29_1, $20_1, $21_1, $30_1, $34_1, $4_1 + 48 | 0, $4_1 + 32 | 0, $19_1, $3_1, Math_fround(0.0), Math_fround(0.0));
         $2_1 = HEAP32[$3_1 + 80 >> 2];
         if ($2_1 & 16) {
          $682($26_1, $7_1, 1);
          $682($25_1, $7_1, 1);
          $683($0_1, $7_1, $20_1, $21_1, $30_1, $34_1, $4_1 + 48 | 0, $4_1 + 32 | 0, $19_1, $3_1, Math_fround(0.0), Math_fround(0.0));
          $2_1 = HEAP32[$3_1 + 80 >> 2];
         }
         if (($2_1 & 80) != 80) {
          break label$31
         }
         HEAP32[$42_1 >> 2] = HEAP32[$42_1 >> 2] | 1;
         break label$31;
        }
        $2_1 = $7_1 - 24 | 0;
        $683($0_1, $7_1 - 16 | 0, $20_1, $21_1, $30_1, $34_1, $4_1 + 48 | 0, $4_1 + 32 | 0, $19_1, $3_1, HEAPF32[$7_1 - 40 >> 2], HEAPF32[$2_1 >> 2]);
        if (!(HEAPU8[$3_1 + 80 | 0] & 16)) {
         break label$31
        }
        $683($0_1, $7_1, $20_1, $21_1, $30_1, $34_1, $4_1 + 48 | 0, $4_1 + 32 | 0, $19_1, $3_1, HEAPF32[$7_1 - 36 >> 2], HEAPF32[$2_1 >> 2]);
       }
       $2_1 = HEAP32[$0_1 + 76 >> 2] + Math_imul(HEAP32[$6_1 + 140 >> 2], 152) | 0;
       HEAP32[$2_1 + 100 >> 2] = 0;
       if (!(HEAPU8[$3_1 + 80 | 0] & 16)) {
        break label$6
       }
       HEAP32[$2_1 + 252 >> 2] = 0;
      }
      $7_1 = $7_1 + 204 | 0;
      $45_1 = $45_1 + 1 | 0;
      continue;
     };
    }
    $44_1 = $44_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $4_1 + 112 | 0;
 }
 
 function $677($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 256 | 0;
  global$0 = $4_1;
  $3_1 = HEAP32[$1_1 + 212 >> 2];
  label$1 : {
   if (($3_1 | 0) > -1) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[$1_1 + 252 >> 2];
    if (!($3_1 & 2)) {
     break label$2
    }
    $3_1 = $3_1 << 30 >> 31 & $1_1;
    if (HEAPU8[$3_1 + 204 | 0] & 2 ? 0 : HEAPF32[$3_1 + 408 >> 2] == Math_fround(0.0)) {
     break label$2
    }
    $3_1 = HEAP32[$0_1 + 8 >> 2];
    $2($4_1 + 8 | 0, 0, 244);
    $696($695($0_1 + 4 | 0, $4_1 + 8 | 0), $1_1, $2_1);
    HEAP32[$1_1 + 212 >> 2] = $3_1;
    break label$1;
   }
   $3_1 = HEAP32[$0_1 + 188 >> 2];
   if (($3_1 | 0) > -1) {
    break label$1
   }
   HEAP32[$0_1 + 188 >> 2] = HEAP32[$0_1 + 8 >> 2];
   $2($4_1 + 8 | 0, 0, 244);
   $696($695($0_1 + 4 | 0, $4_1 + 8 | 0), 0, $2_1);
   $3_1 = HEAP32[$0_1 + 188 >> 2];
  }
  global$0 = $4_1 + 256 | 0;
  return $3_1;
 }
 
 function $678($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = $1_1;
  if (HEAP32[$0_1 + 8 >> 2] == ($1_1 | 0)) {
   $697($0_1, $1_1 ? $1_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
  return HEAP32[$0_1 + 12 >> 2] + Math_imul($1_1, 152) | 0;
 }
 
 function $679($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   if (!HEAP32[$0_1 + 240 >> 2]) {
    $2_1 = Math_fround(0.0);
    $3_1 = Math_fround(0.0);
    $1_1 = Math_fround(0.0);
    break label$1;
   }
   $6_1 = HEAPF32[$0_1 + 212 >> 2];
   $7_1 = HEAPF32[$0_1 + 180 >> 2];
   $8_1 = HEAPF32[$0_1 + 216 >> 2];
   $9_1 = HEAPF32[$0_1 + 184 >> 2];
   $10_1 = HEAPF32[$0_1 + 208 >> 2];
   $11_1 = HEAPF32[$0_1 + 176 >> 2];
   $201($5_1, Math_fround(HEAPF32[$0_1 + 192 >> 2] + HEAPF32[$0_1 + 224 >> 2]), Math_fround(HEAPF32[$0_1 + 196 >> 2] + HEAPF32[$0_1 + 228 >> 2]), Math_fround(HEAPF32[$0_1 + 200 >> 2] + HEAPF32[$0_1 + 232 >> 2]), $1_1, $2_1, $3_1);
   $3_1 = Math_fround(Math_fround($9_1 + $8_1) + HEAPF32[$5_1 + 8 >> 2]);
   $2_1 = Math_fround(Math_fround($7_1 + $6_1) + HEAPF32[$5_1 + 4 >> 2]);
   $1_1 = Math_fround(Math_fround($11_1 + $10_1) + HEAPF32[$5_1 >> 2]);
  }
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = $3_1;
  HEAPF32[$4_1 + 4 >> 2] = $2_1;
  HEAPF32[$4_1 >> 2] = $1_1;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $680($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $201($5_1, HEAPF32[$1_1 + 392 >> 2], HEAPF32[$1_1 + 396 >> 2], HEAPF32[$1_1 + 400 >> 2], $2_1, $3_1, $4_1);
  $698($0_1, HEAPF32[$1_1 + 376 >> 2], HEAPF32[$1_1 + 380 >> 2], HEAPF32[$1_1 + 384 >> 2], HEAPF32[$5_1 >> 2], HEAPF32[$5_1 + 4 >> 2], HEAPF32[$5_1 + 8 >> 2]);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $681($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0);
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = $678($0_1 + 84 | 0);
  HEAP32[$7_1 + 16 >> 2] = 0;
  HEAP32[$7_1 + 20 >> 2] = 0;
  HEAP32[$7_1 + 48 >> 2] = -2147483648;
  HEAP32[$7_1 + 52 >> 2] = -2147483648;
  $8_1 = $7_1 + 24 | 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  $8_1 = $7_1 + 56 | 0;
  HEAP32[$8_1 >> 2] = -2147483648;
  HEAP32[$8_1 + 4 >> 2] = 0;
  HEAPF32[$7_1 + 104 >> 2] = $5_1;
  HEAP32[$7_1 + 96 >> 2] = 0;
  HEAP32[$7_1 + 100 >> 2] = 0;
  $16_1 = HEAP32[$0_1 + 16 >> 2];
  $8_1 = HEAP32[($16_1 + Math_imul($2_1, 244) | 0) + 240 >> 2];
  $13_1 = HEAP32[(Math_imul($3_1, 244) + $16_1 | 0) + 240 >> 2];
  HEAP32[$7_1 + 132 >> 2] = 0;
  HEAP32[$7_1 + 140 >> 2] = $4_1;
  HEAP32[$7_1 + 148 >> 2] = $3_1;
  HEAP32[$7_1 + 144 >> 2] = $2_1;
  $5_1 = HEAPF32[$1_1 + 8 >> 2];
  $9_1 = HEAPF32[$1_1 + 4 >> 2];
  $11_1 = HEAPF32[$1_1 >> 2];
  HEAP32[$7_1 + 12 >> 2] = 0;
  $12_1 = Math_fround(-$11_1);
  HEAPF32[$7_1 >> 2] = $12_1;
  $14_1 = Math_fround(-$9_1);
  HEAPF32[$7_1 + 4 >> 2] = $14_1;
  $15_1 = Math_fround(-$5_1);
  HEAPF32[$7_1 + 8 >> 2] = $15_1;
  $5_1 = Math_fround(0.0);
  $11_1 = Math_fround(0.0);
  $9_1 = Math_fround(0.0);
  $0_1 = $7_1;
  $4_1 = $0_1;
  if ($8_1) {
   $431($6_1 + 16 | 0, $8_1 + 328 | 0, $12_1, $14_1, $15_1);
   $10_1 = Math_fround(HEAPF32[$6_1 + 24 >> 2] * HEAPF32[$8_1 + 616 >> 2]);
   $9_1 = Math_fround(HEAPF32[$6_1 + 20 >> 2] * HEAPF32[$8_1 + 612 >> 2]);
   $12_1 = Math_fround(HEAPF32[$6_1 + 16 >> 2] * HEAPF32[$8_1 + 608 >> 2]);
  } else {
   $12_1 = Math_fround(0.0)
  }
  HEAPF32[$4_1 + 64 >> 2] = $12_1;
  HEAP32[$0_1 + 76 >> 2] = 0;
  HEAPF32[$0_1 + 72 >> 2] = $10_1;
  HEAPF32[$0_1 + 68 >> 2] = $9_1;
  $4_1 = $1_1 + 8 | 0;
  $10_1 = HEAPF32[$4_1 >> 2];
  $12_1 = HEAPF32[$1_1 + 4 >> 2];
  $14_1 = HEAPF32[$1_1 >> 2];
  $7_1 = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  $26_1 = HEAP32[$4_1 + 4 >> 2];
  $17_1 = $0_1 + 40 | 0;
  HEAP32[$17_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$17_1 + 4 >> 2] = $26_1;
  HEAP32[$0_1 + 32 >> 2] = $7_1;
  HEAP32[$0_1 + 36 >> 2] = $1_1;
  $9_1 = Math_fround(0.0);
  $1_1 = $0_1;
  if ($13_1) {
   $431($6_1 + 16 | 0, $13_1 + 328 | 0, $14_1, $12_1, $10_1);
   $9_1 = Math_fround(HEAPF32[$6_1 + 24 >> 2] * HEAPF32[$13_1 + 616 >> 2]);
   $11_1 = Math_fround(HEAPF32[$6_1 + 20 >> 2] * HEAPF32[$13_1 + 612 >> 2]);
   $10_1 = Math_fround(HEAPF32[$6_1 + 16 >> 2] * HEAPF32[$13_1 + 608 >> 2]);
  } else {
   $10_1 = Math_fround(0.0)
  }
  HEAPF32[$1_1 + 80 >> 2] = $10_1;
  HEAP32[$0_1 + 92 >> 2] = 0;
  HEAPF32[$0_1 + 88 >> 2] = $9_1;
  HEAPF32[$0_1 + 84 >> 2] = $11_1;
  label$5 : {
   if ($8_1) {
    $431($6_1 + 16 | 0, $8_1 + 328 | 0, HEAPF32[$0_1 >> 2], HEAPF32[$0_1 + 4 >> 2], HEAPF32[$0_1 + 8 >> 2]);
    break label$5;
   }
   $1_1 = $6_1 + 24 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$6_1 + 16 >> 2] = 0;
   HEAP32[$6_1 + 20 >> 2] = 0;
  }
  $11_1 = Math_fround(0.0);
  $9_1 = Math_fround(0.0);
  $10_1 = Math_fround(0.0);
  if ($13_1) {
   $431($6_1, $13_1 + 328 | 0, HEAPF32[$0_1 + 32 >> 2], HEAPF32[$0_1 + 36 >> 2], HEAPF32[$0_1 + 40 >> 2]);
   $10_1 = HEAPF32[$6_1 >> 2];
   $11_1 = HEAPF32[$6_1 + 8 >> 2];
   $9_1 = HEAPF32[$6_1 + 4 >> 2];
  }
  $18_1 = HEAPF32[$0_1 >> 2];
  $19_1 = HEAPF32[$0_1 + 4 >> 2];
  $20_1 = HEAPF32[$0_1 + 8 >> 2];
  $21_1 = HEAPF32[$0_1 + 32 >> 2];
  $22_1 = HEAPF32[$0_1 + 36 >> 2];
  $23_1 = HEAPF32[$0_1 + 40 >> 2];
  $24_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 + 16 >> 2] * $18_1) + Math_fround(HEAPF32[$6_1 + 20 >> 2] * $19_1)) + Math_fround(HEAPF32[$6_1 + 24 >> 2] * $20_1)) + Math_fround(0.0)) + Math_fround(Math_fround(Math_fround($10_1 * $21_1) + Math_fround($9_1 * $22_1)) + Math_fround($11_1 * $23_1))));
  HEAPF32[$0_1 + 108 >> 2] = $24_1;
  $11_1 = Math_fround(0.0);
  $9_1 = Math_fround(0.0);
  $10_1 = Math_fround(0.0);
  $12_1 = Math_fround(0.0);
  $14_1 = Math_fround(0.0);
  if ($8_1) {
   $1_1 = Math_imul($2_1, 244) + $16_1 | 0;
   $9_1 = Math_fround(HEAPF32[$1_1 + 176 >> 2] + HEAPF32[$1_1 + 208 >> 2]);
   $11_1 = Math_fround(HEAPF32[$1_1 + 180 >> 2] + HEAPF32[$1_1 + 212 >> 2]);
   $14_1 = HEAPF32[$1_1 + 192 >> 2];
   $10_1 = HEAPF32[$1_1 + 200 >> 2];
   $12_1 = HEAPF32[$1_1 + 196 >> 2];
   $5_1 = Math_fround(HEAPF32[$1_1 + 184 >> 2] + HEAPF32[$1_1 + 216 >> 2]);
  }
  $27_1 = HEAPF32[$0_1 + 24 >> 2];
  $28_1 = HEAPF32[$0_1 + 20 >> 2];
  $29_1 = HEAPF32[$0_1 + 16 >> 2];
  $15_1 = Math_fround(0.0);
  if ($13_1) {
   $1_1 = Math_imul($3_1, 244) + $16_1 | 0;
   $15_1 = Math_fround(HEAPF32[$1_1 + 176 >> 2] + HEAPF32[$1_1 + 208 >> 2]);
   $30_1 = HEAPF32[$1_1 + 192 >> 2];
   $31_1 = HEAPF32[$1_1 + 200 >> 2];
   $32_1 = HEAPF32[$1_1 + 196 >> 2];
   $33_1 = Math_fround(HEAPF32[$1_1 + 180 >> 2] + HEAPF32[$1_1 + 212 >> 2]);
   $34_1 = Math_fround(HEAPF32[$1_1 + 184 >> 2] + HEAPF32[$1_1 + 216 >> 2]);
  }
  HEAP32[$0_1 + 116 >> 2] = 0;
  $25_1 = HEAPF32[$0_1 + 104 >> 2];
  HEAPF32[$0_1 + 124 >> 2] = $25_1;
  HEAPF32[$0_1 + 120 >> 2] = -$25_1;
  HEAPF32[$0_1 + 112 >> 2] = $24_1 * Math_fround(Math_fround(0.0) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $29_1) + Math_fround($11_1 * $28_1)) + Math_fround($5_1 * $27_1)) + Math_fround(Math_fround($20_1 * $10_1) + Math_fround(Math_fround($19_1 * $12_1) + Math_fround($18_1 * $14_1)))) + Math_fround(Math_fround(Math_fround(Math_fround($15_1 * HEAPF32[$0_1 + 48 >> 2]) + Math_fround($33_1 * HEAPF32[$0_1 + 52 >> 2])) + Math_fround($34_1 * HEAPF32[$0_1 + 56 >> 2])) + Math_fround(Math_fround($23_1 * $31_1) + Math_fround(Math_fround($22_1 * $32_1) + Math_fround($21_1 * $30_1))))));
  global$0 = $6_1 + 32 | 0;
 }
 
 function $682($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  if (!(!$0_1 | !(HEAP32[$0_1 + 180 >> 2] & $2_1))) {
   $2_1 = $1_1 + 8 | 0;
   $4_1 = $0_1 + 4 | 0;
   $145($3_1 + 16 | 0, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$2_1 >> 2], $4_1);
   $431($3_1, $4_1, Math_fround(HEAPF32[$0_1 + 164 >> 2] * HEAPF32[$3_1 + 16 >> 2]), Math_fround(HEAPF32[$0_1 + 168 >> 2] * HEAPF32[$3_1 + 20 >> 2]), Math_fround(HEAPF32[$0_1 + 172 >> 2] * HEAPF32[$3_1 + 24 >> 2]));
   $0_1 = $3_1 + 8 | 0;
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $0_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $683($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  var $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20_1 = 0, $21_1 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0);
  $14_1 = global$0 - 32 | 0;
  global$0 = $14_1;
  $12_1 = $678($0_1 - -64 | 0);
  HEAP32[$12_1 + 140 >> 2] = $4_1;
  HEAP32[$12_1 + 148 >> 2] = $3_1;
  HEAP32[$12_1 + 144 >> 2] = $2_1;
  HEAP32[$12_1 + 96 >> 2] = 0;
  HEAP32[$12_1 + 100 >> 2] = 0;
  HEAPF32[$12_1 + 104 >> 2] = HEAPF32[$5_1 + 84 >> 2];
  $20_1 = HEAP32[$0_1 + 16 >> 2];
  $0_1 = HEAP32[($20_1 + Math_imul($2_1, 244) | 0) + 240 >> 2];
  $4_1 = HEAP32[(Math_imul($3_1, 244) + $20_1 | 0) + 240 >> 2];
  HEAP32[$12_1 + 132 >> 2] = 0;
  label$1 : {
   if ($0_1) {
    $19_1 = HEAP32[$1_1 + 4 >> 2];
    $16_1 = $12_1 + 16 | 0;
    $13_1 = $16_1;
    HEAP32[$13_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $19_1;
    $19_1 = $1_1 + 8 | 0;
    $22_1 = HEAP32[$19_1 + 4 >> 2];
    $13_1 = $12_1 + 24 | 0;
    HEAP32[$13_1 >> 2] = HEAP32[$19_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $22_1;
    $201($14_1 + 16 | 0, HEAPF32[$6_1 >> 2], HEAPF32[$6_1 + 4 >> 2], HEAPF32[$6_1 + 8 >> 2], HEAPF32[$16_1 >> 2], HEAPF32[$12_1 + 20 >> 2], HEAPF32[$13_1 >> 2]);
    $13_1 = $14_1 + 24 | 0;
    $19_1 = HEAP32[$13_1 + 4 >> 2];
    $16_1 = $12_1 + 8 | 0;
    HEAP32[$16_1 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$16_1 + 4 >> 2] = $19_1;
    $16_1 = HEAP32[$14_1 + 20 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$14_1 + 16 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $16_1;
    $431($14_1, $0_1 + 328 | 0, HEAPF32[$14_1 + 16 >> 2], HEAPF32[$14_1 + 20 >> 2], HEAPF32[$13_1 >> 2]);
    $15_1 = HEAPF32[$0_1 + 612 >> 2];
    $17_1 = HEAPF32[$0_1 + 616 >> 2];
    $18_1 = HEAPF32[$0_1 + 608 >> 2];
    HEAP32[$12_1 + 76 >> 2] = 0;
    HEAPF32[$12_1 + 72 >> 2] = $17_1 * HEAPF32[$14_1 + 8 >> 2];
    HEAPF32[$12_1 + 68 >> 2] = $15_1 * HEAPF32[$14_1 + 4 >> 2];
    HEAPF32[$12_1 + 64 >> 2] = $18_1 * HEAPF32[$14_1 >> 2];
    break label$1;
   }
   HEAP32[$12_1 + 64 >> 2] = 0;
   HEAP32[$12_1 + 68 >> 2] = 0;
   HEAP32[$12_1 >> 2] = 0;
   HEAP32[$12_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 72 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 8 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 16 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 24 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
  }
  label$3 : {
   if ($4_1) {
    $15_1 = HEAPF32[$1_1 >> 2];
    $17_1 = HEAPF32[$1_1 + 4 >> 2];
    $18_1 = HEAPF32[$1_1 + 8 >> 2];
    HEAP32[$12_1 + 60 >> 2] = 0;
    $18_1 = Math_fround(-$18_1);
    HEAPF32[$12_1 + 56 >> 2] = $18_1;
    $17_1 = Math_fround(-$17_1);
    HEAPF32[$12_1 + 52 >> 2] = $17_1;
    $15_1 = Math_fround(-$15_1);
    HEAPF32[$12_1 + 48 >> 2] = $15_1;
    $201($14_1 + 16 | 0, HEAPF32[$7_1 >> 2], HEAPF32[$7_1 + 4 >> 2], HEAPF32[$7_1 + 8 >> 2], $15_1, $17_1, $18_1);
    $13_1 = $14_1 + 24 | 0;
    $19_1 = HEAP32[$13_1 + 4 >> 2];
    $16_1 = $12_1 + 40 | 0;
    HEAP32[$16_1 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$16_1 + 4 >> 2] = $19_1;
    $16_1 = HEAP32[$14_1 + 20 >> 2];
    HEAP32[$12_1 + 32 >> 2] = HEAP32[$14_1 + 16 >> 2];
    HEAP32[$12_1 + 36 >> 2] = $16_1;
    $431($14_1, $4_1 + 328 | 0, HEAPF32[$14_1 + 16 >> 2], HEAPF32[$14_1 + 20 >> 2], HEAPF32[$13_1 >> 2]);
    $15_1 = HEAPF32[$4_1 + 612 >> 2];
    $17_1 = HEAPF32[$4_1 + 616 >> 2];
    $18_1 = HEAPF32[$4_1 + 608 >> 2];
    HEAP32[$12_1 + 92 >> 2] = 0;
    HEAPF32[$12_1 + 88 >> 2] = $17_1 * HEAPF32[$14_1 + 8 >> 2];
    HEAPF32[$12_1 + 84 >> 2] = $15_1 * HEAPF32[$14_1 + 4 >> 2];
    HEAPF32[$12_1 + 80 >> 2] = $18_1 * HEAPF32[$14_1 >> 2];
    break label$3;
   }
   HEAP32[$12_1 + 80 >> 2] = 0;
   HEAP32[$12_1 + 84 >> 2] = 0;
   HEAP32[$12_1 + 32 >> 2] = 0;
   HEAP32[$12_1 + 36 >> 2] = 0;
   $13_1 = $12_1 + 88 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 40 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 48 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 56 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
  }
  $17_1 = Math_fround(0.0);
  $18_1 = Math_fround(0.0);
  $13_1 = $12_1;
  $15_1 = $8_1;
  if ($0_1) {
   $201($14_1 + 16 | 0, HEAPF32[$12_1 - -64 >> 2], HEAPF32[$12_1 + 68 >> 2], HEAPF32[$12_1 + 72 >> 2], HEAPF32[$6_1 >> 2], HEAPF32[$6_1 + 4 >> 2], HEAPF32[$6_1 + 8 >> 2]);
   $8_1 = Math_fround(HEAPF32[$0_1 + 408 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$14_1 + 16 >> 2] * HEAPF32[$1_1 >> 2]) + Math_fround(HEAPF32[$14_1 + 20 >> 2] * HEAPF32[$1_1 + 4 >> 2])) + Math_fround(HEAPF32[$14_1 + 24 >> 2] * HEAPF32[$1_1 + 8 >> 2])));
  } else {
   $8_1 = Math_fround(0.0)
  }
  if ($4_1) {
   $201($14_1 + 16 | 0, Math_fround(-HEAPF32[$12_1 + 80 >> 2]), Math_fround(-HEAPF32[$12_1 + 84 >> 2]), Math_fround(-HEAPF32[$12_1 + 88 >> 2]), HEAPF32[$7_1 >> 2], HEAPF32[$7_1 + 4 >> 2], HEAPF32[$7_1 + 8 >> 2]);
   $21_1 = Math_fround(HEAPF32[$4_1 + 408 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$14_1 + 16 >> 2] * HEAPF32[$1_1 >> 2]) + Math_fround(HEAPF32[$14_1 + 20 >> 2] * HEAPF32[$1_1 + 4 >> 2])) + Math_fround(HEAPF32[$14_1 + 24 >> 2] * HEAPF32[$1_1 + 8 >> 2])));
  } else {
   $21_1 = Math_fround(0.0)
  }
  $15_1 = Math_fround($15_1 / Math_fround($8_1 + $21_1));
  HEAPF32[$13_1 + 108 >> 2] = $15_1;
  $8_1 = Math_fround(0.0);
  if ($0_1) {
   $6_1 = Math_imul($2_1, 244) + $20_1 | 0;
   $18_1 = Math_fround(HEAPF32[$6_1 + 176 >> 2] + HEAPF32[$6_1 + 208 >> 2]);
   $23_1 = Math_fround(HEAPF32[$6_1 + 184 >> 2] + HEAPF32[$6_1 + 216 >> 2]);
   $8_1 = Math_fround(HEAPF32[$6_1 + 180 >> 2] + HEAPF32[$6_1 + 212 >> 2]);
  }
  if ($0_1) {
   $0_1 = Math_imul($2_1, 244) + $20_1 | 0;
   $17_1 = HEAPF32[$0_1 + 192 >> 2];
   $24_1 = HEAPF32[$0_1 + 196 >> 2];
   $25_1 = HEAPF32[$0_1 + 200 >> 2];
  }
  if ($4_1) {
   $0_1 = Math_imul($3_1, 244) + $20_1 | 0;
   $26_1 = Math_fround(HEAPF32[$0_1 + 176 >> 2] + HEAPF32[$0_1 + 208 >> 2]);
   $27_1 = Math_fround(HEAPF32[$0_1 + 184 >> 2] + HEAPF32[$0_1 + 216 >> 2]);
   $28_1 = Math_fround(HEAPF32[$0_1 + 180 >> 2] + HEAPF32[$0_1 + 212 >> 2]);
  }
  if ($4_1) {
   $0_1 = Math_imul($3_1, 244) + $20_1 | 0;
   $29_1 = HEAPF32[$0_1 + 192 >> 2];
   $30_1 = HEAPF32[$0_1 + 200 >> 2];
   $31_1 = HEAPF32[$0_1 + 196 >> 2];
  }
  $21_1 = HEAPF32[$12_1 + 24 >> 2];
  $32_1 = HEAPF32[$12_1 + 20 >> 2];
  $33_1 = HEAPF32[$12_1 + 16 >> 2];
  $34_1 = HEAPF32[$12_1 + 8 >> 2];
  $35_1 = HEAPF32[$12_1 + 4 >> 2];
  $36_1 = HEAPF32[$12_1 >> 2];
  $37_1 = HEAPF32[$12_1 + 56 >> 2];
  $38_1 = HEAPF32[$12_1 + 52 >> 2];
  $39_1 = HEAPF32[$12_1 + 48 >> 2];
  $40_1 = HEAPF32[$12_1 + 40 >> 2];
  $41_1 = HEAPF32[$12_1 + 36 >> 2];
  $42_1 = HEAPF32[$12_1 + 32 >> 2];
  $43_1 = HEAPU8[$5_1 + 120 | 0] & 16 ? Math_fround($15_1 * Math_fround(Math_fround(HEAPF32[$9_1 + 48 >> 2] * Math_fround(-Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$5_1 + 48 >> 2] - HEAPF32[$5_1 + 32 >> 2]) * HEAPF32[$1_1 >> 2]) + Math_fround(Math_fround(HEAPF32[$5_1 + 52 >> 2] - HEAPF32[$5_1 + 36 >> 2]) * HEAPF32[$1_1 + 4 >> 2])) + Math_fround(Math_fround(HEAPF32[$5_1 + 56 >> 2] - HEAPF32[$5_1 + 40 >> 2]) * HEAPF32[$1_1 + 8 >> 2])))) / HEAPF32[$9_1 + 12 >> 2])) : Math_fround(0.0);
  HEAP32[$12_1 + 128 >> 2] = 0;
  HEAPF32[$12_1 + 116 >> 2] = $11_1;
  $11_1 = HEAPF32[$12_1 + 104 >> 2];
  HEAPF32[$12_1 + 124 >> 2] = $11_1;
  HEAPF32[$12_1 + 120 >> 2] = -$11_1;
  HEAPF32[$12_1 + 112 >> 2] = Math_fround($15_1 * Math_fround($10_1 - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($18_1 * $33_1) + Math_fround($8_1 * $32_1)) + Math_fround($23_1 * $21_1)) + Math_fround(Math_fround(Math_fround($17_1 * $36_1) + Math_fround($24_1 * $35_1)) + Math_fround($25_1 * $34_1))) + Math_fround(Math_fround(Math_fround(Math_fround($26_1 * $39_1) + Math_fround($28_1 * $38_1)) + Math_fround($27_1 * $37_1)) + Math_fround(Math_fround(Math_fround($29_1 * $42_1) + Math_fround($31_1 * $41_1)) + Math_fround($30_1 * $40_1)))))) + $43_1;
  global$0 = $14_1 + 32 | 0;
 }
 
 function $684($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60 = 0, $61_1 = 0, $62_1 = 0, $63 = 0, $64_1 = 0, $65_1 = 0, $66 = Math_fround(0), $67_1 = Math_fround(0), $68_1 = Math_fround(0), $69_1 = Math_fround(0), $70_1 = Math_fround(0), $71_1 = Math_fround(0), $72_1 = Math_fround(0), $73 = Math_fround(0), $74 = Math_fround(0), $75 = Math_fround(0), $76 = Math_fround(0), $77 = Math_fround(0);
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  $27_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $4_1 = $27_1;
  $5_1 = $1_1;
  while (1) if ($4_1) {
   $8_1 = HEAP32[$5_1 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 8 >> 2]]($8_1);
   HEAP32[$8_1 + 36 >> 2] = 0;
   $4_1 = $4_1 - 1 | 0;
   $5_1 = $5_1 + 4 | 0;
   continue;
  } else {
   $5_1 = HEAP32[$0_1 + 168 >> 2];
   if (!(($5_1 | 0) >= ($2_1 | 0) | HEAP32[$0_1 + 172 >> 2] >= ($2_1 | 0))) {
    $4_1 = 0;
    $8_1 = 0;
    $9_1 = $0_1 + 164 | 0;
    if ($2_1) {
     $8_1 = $120($2_1 << 3);
     $5_1 = HEAP32[$0_1 + 168 >> 2];
    }
    $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
    while (1) {
     if ($5_1) {
      $12_1 = HEAP32[$0_1 + 176 >> 2] + $4_1 | 0;
      $15_1 = HEAP32[$12_1 + 4 >> 2];
      $10_1 = $4_1 + $8_1 | 0;
      HEAP32[$10_1 >> 2] = HEAP32[$12_1 >> 2];
      HEAP32[$10_1 + 4 >> 2] = $15_1;
      $5_1 = $5_1 - 1 | 0;
      $4_1 = $4_1 + 8 | 0;
      continue;
     }
     break;
    };
    $163($9_1);
    HEAP32[$0_1 + 176 >> 2] = $8_1;
    HEAP8[$0_1 + 180 | 0] = 1;
    HEAP32[$0_1 + 172 >> 2] = $2_1;
   }
   HEAP32[$0_1 + 168 >> 2] = $2_1;
   $8_1 = $27_1;
   $5_1 = $1_1;
   $2_1 = 0;
   $10_1 = 0;
   while (1) if ($8_1) {
    $9_1 = HEAP32[$0_1 + 176 >> 2] + $2_1 | 0;
    $4_1 = HEAP32[$5_1 >> 2];
    $12_1 = HEAP32[$4_1 + 44 >> 2];
    if ($12_1) {
     $2($12_1, 0, 64);
     $4_1 = HEAP32[$5_1 >> 2];
    }
    label$10 : {
     if (HEAPU8[$4_1 + 20 | 0]) {
      FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $9_1);
      $4_1 = HEAP32[$9_1 >> 2];
      break label$10;
     }
     HEAP32[$9_1 >> 2] = 0;
     HEAP32[$9_1 + 4 >> 2] = 0;
     $4_1 = 0;
    }
    $8_1 = $8_1 - 1 | 0;
    $5_1 = $5_1 + 4 | 0;
    $2_1 = $2_1 + 8 | 0;
    $10_1 = $4_1 + $10_1 | 0;
    continue;
   } else {
    $685($0_1 + 44 | 0, $10_1);
    $12_1 = 0;
    while (1) {
     label$15 : {
      if (($12_1 | 0) != ($27_1 | 0)) {
       $15_1 = HEAP32[$0_1 + 176 >> 2] + ($12_1 << 3) | 0;
       if (!HEAP32[$15_1 >> 2]) {
        $4_1 = 0;
        break label$15;
       }
       $2_1 = HEAP32[($12_1 << 2) + $1_1 >> 2];
       $5_1 = HEAP32[$2_1 + 32 >> 2];
       $4_1 = HEAP32[$0_1 + 56 >> 2];
       $16_1 = $677($0_1, HEAP32[$2_1 + 28 >> 2], HEAPF32[$3_1 + 12 >> 2]);
       $17_1 = $677($0_1, $5_1, HEAPF32[$3_1 + 12 >> 2]);
       $8_1 = HEAP32[$2_1 + 32 >> 2];
       $9_1 = HEAP32[$2_1 + 28 >> 2];
       $5_1 = HEAP32[$2_1 + 24 >> 2];
       $13_1 = ($5_1 | 0) > 0 ? $5_1 : HEAP32[$3_1 + 20 >> 2];
       if (($13_1 | 0) > HEAP32[$0_1 + 184 >> 2]) {
        HEAP32[$0_1 + 184 >> 2] = $13_1
       }
       $5_1 = $4_1 + Math_imul($28_1, 152) | 0;
       $18_1 = HEAP32[$0_1 + 16 >> 2];
       $19_1 = $4_1 + (Math_imul($28_1, 38) << 2) | 0;
       $4_1 = $19_1 + 148 | 0;
       $10_1 = 0;
       while (1) if (HEAP32[$15_1 >> 2] <= ($10_1 | 0)) {
        HEAPF32[$5_1 + 116 >> 2] = HEAPF32[$3_1 + 44 >> 2];
        HEAP32[$6_1 + 64 >> 2] = 38;
        HEAP32[$6_1 + 52 >> 2] = $5_1;
        HEAPF32[$6_1 + 44 >> 2] = HEAPF32[$3_1 + 32 >> 2];
        HEAPF32[$6_1 + 88 >> 2] = HEAPF32[$3_1 + 4 >> 2];
        HEAPF32[$6_1 + 40 >> 2] = Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2];
        HEAP32[$6_1 + 68 >> 2] = $5_1 + 112;
        HEAP32[$6_1 + 60 >> 2] = $5_1 + 32;
        HEAP32[$6_1 + 56 >> 2] = $5_1 + 48;
        HEAP32[$6_1 + 48 >> 2] = $5_1 + 16;
        HEAP32[$6_1 + 80 >> 2] = $5_1 + 124;
        HEAP32[$6_1 + 76 >> 2] = $5_1 + 120;
        HEAP32[$6_1 + 72 >> 2] = $5_1 + 116;
        HEAP32[$6_1 + 84 >> 2] = HEAP32[$3_1 + 20 >> 2];
        FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $6_1 + 40 | 0);
        $50_1 = $8_1 + 328 | 0;
        $51_1 = $9_1 + 328 | 0;
        $4_1 = $19_1 + 68 | 0;
        $5_1 = $18_1 + Math_imul($17_1, 244) | 0;
        $52_1 = $5_1 + 232 | 0;
        $53_1 = $5_1 + 228 | 0;
        $54 = $5_1 + 224 | 0;
        $55_1 = $5_1 + 216 | 0;
        $56_1 = $5_1 + 212 | 0;
        $57_1 = $5_1 + 208 | 0;
        $58_1 = $5_1 + 240 | 0;
        $5_1 = $18_1 + Math_imul($16_1, 244) | 0;
        $59_1 = $5_1 + 232 | 0;
        $60 = $5_1 + 228 | 0;
        $61_1 = $5_1 + 224 | 0;
        $62_1 = $5_1 + 216 | 0;
        $63 = $5_1 + 212 | 0;
        $64_1 = $5_1 + 208 | 0;
        $65_1 = $5_1 + 240 | 0;
        $10_1 = 0;
        while (1) {
         if (HEAP32[$15_1 >> 2] > ($10_1 | 0)) {
          $7_1 = HEAPF32[$2_1 + 16 >> 2];
          $5_1 = $4_1 + 56 | 0;
          if ($7_1 <= HEAPF32[$5_1 >> 2]) {
           HEAPF32[$5_1 >> 2] = $7_1
          }
          $7_1 = Math_fround(-$7_1);
          $5_1 = $4_1 + 52 | 0;
          if ($7_1 >= HEAPF32[$5_1 >> 2]) {
           HEAPF32[$5_1 >> 2] = $7_1
          }
          HEAP32[$4_1 - -64 >> 2] = $2_1;
          $5_1 = $4_1 - 68 | 0;
          $16_1 = $4_1 + -64 | 0;
          $17_1 = $4_1 - 60 | 0;
          $431($6_1 + 24 | 0, HEAP32[$2_1 + 28 >> 2] + 328 | 0, HEAPF32[$5_1 >> 2], HEAPF32[$16_1 >> 2], HEAPF32[$17_1 >> 2]);
          $13_1 = HEAP32[$2_1 + 28 >> 2];
          $7_1 = HEAPF32[$13_1 + 612 >> 2];
          $14_1 = HEAPF32[$13_1 + 616 >> 2];
          $20_1 = HEAPF32[$13_1 + 608 >> 2];
          HEAP32[$4_1 + 8 >> 2] = 0;
          HEAPF32[$4_1 - 4 >> 2] = $20_1 * HEAPF32[$6_1 + 24 >> 2];
          HEAPF32[$4_1 + 4 >> 2] = $14_1 * HEAPF32[$6_1 + 32 >> 2];
          HEAPF32[$4_1 >> 2] = $7_1 * HEAPF32[$6_1 + 28 >> 2];
          $13_1 = $4_1 - 36 | 0;
          $18_1 = $4_1 - 32 | 0;
          $19_1 = $4_1 - 28 | 0;
          $431($6_1 + 24 | 0, HEAP32[$2_1 + 32 >> 2] + 328 | 0, HEAPF32[$13_1 >> 2], HEAPF32[$18_1 >> 2], HEAPF32[$19_1 >> 2]);
          $11_1 = HEAP32[$2_1 + 32 >> 2];
          $7_1 = HEAPF32[$11_1 + 612 >> 2];
          $14_1 = HEAPF32[$11_1 + 616 >> 2];
          $20_1 = HEAPF32[$11_1 + 608 >> 2];
          HEAP32[$4_1 + 24 >> 2] = 0;
          HEAPF32[$4_1 + 12 >> 2] = $20_1 * HEAPF32[$6_1 + 24 >> 2];
          HEAPF32[$4_1 + 20 >> 2] = $14_1 * HEAPF32[$6_1 + 32 >> 2];
          HEAPF32[$4_1 + 16 >> 2] = $7_1 * HEAPF32[$6_1 + 28 >> 2];
          $11_1 = $4_1 - 44 | 0;
          $21_1 = HEAPF32[$11_1 >> 2];
          $29_1 = $4_1 - 52 | 0;
          $22_1 = HEAPF32[$29_1 >> 2];
          $30_1 = $4_1 - 48 | 0;
          $23_1 = HEAPF32[$30_1 >> 2];
          $7_1 = HEAPF32[$9_1 + 408 >> 2];
          $431($6_1 + 24 | 0, $51_1, HEAPF32[$5_1 >> 2], HEAPF32[$16_1 >> 2], HEAPF32[$17_1 >> 2]);
          $31_1 = $4_1 - 12 | 0;
          $24_1 = HEAPF32[$31_1 >> 2];
          $32_1 = $4_1 - 20 | 0;
          $25_1 = HEAPF32[$32_1 >> 2];
          $33_1 = $4_1 - 16 | 0;
          $26_1 = HEAPF32[$33_1 >> 2];
          $14_1 = HEAPF32[$8_1 + 408 >> 2];
          $431($6_1 + 8 | 0, $50_1, HEAPF32[$13_1 >> 2], HEAPF32[$18_1 >> 2], HEAPF32[$19_1 >> 2]);
          $20_1 = Math_fround(0.0);
          $34_1 = HEAPF32[$29_1 >> 2];
          $35_1 = HEAPF32[$30_1 >> 2];
          $36_1 = HEAPF32[$11_1 >> 2];
          $37_1 = HEAPF32[$5_1 >> 2];
          $38_1 = HEAPF32[$16_1 >> 2];
          $39_1 = HEAPF32[$17_1 >> 2];
          $40_1 = HEAPF32[$32_1 >> 2];
          $41_1 = HEAPF32[$33_1 >> 2];
          $42_1 = HEAPF32[$31_1 >> 2];
          $43_1 = HEAPF32[$13_1 >> 2];
          $44_1 = HEAPF32[$18_1 >> 2];
          $45_1 = HEAPF32[$19_1 >> 2];
          $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $22_1) * $34_1) + Math_fround(Math_fround($7_1 * $23_1) * $35_1)) + Math_fround(Math_fround($7_1 * $21_1) * $36_1)) + Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 + 24 >> 2] * $37_1) + Math_fround(HEAPF32[$6_1 + 28 >> 2] * $38_1)) + Math_fround(HEAPF32[$6_1 + 32 >> 2] * $39_1))) + Math_fround(Math_fround(Math_fround(Math_fround($14_1 * $25_1) * $40_1) + Math_fround(Math_fround($14_1 * $26_1) * $41_1)) + Math_fround(Math_fround($14_1 * $24_1) * $42_1))) + Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 + 8 >> 2] * $43_1) + Math_fround(HEAPF32[$6_1 + 12 >> 2] * $44_1)) + Math_fround(HEAPF32[$6_1 + 16 >> 2] * $45_1)));
          $7_1 = Math_fround(Math_abs($7_1)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $7_1) : Math_fround(0.0);
          HEAPF32[$4_1 + 40 >> 2] = $7_1;
          $14_1 = Math_fround(0.0);
          $21_1 = Math_fround(0.0);
          $22_1 = Math_fround(0.0);
          $23_1 = Math_fround(0.0);
          $24_1 = Math_fround(0.0);
          $25_1 = Math_fround(0.0);
          if (HEAP32[$65_1 >> 2]) {
           $25_1 = HEAPF32[$59_1 >> 2];
           $24_1 = HEAPF32[$60 >> 2];
           $23_1 = HEAPF32[$61_1 >> 2];
           $21_1 = HEAPF32[$63 >> 2];
           $22_1 = HEAPF32[$64_1 >> 2];
           $14_1 = HEAPF32[$62_1 >> 2];
          }
          $26_1 = Math_fround(0.0);
          $46_1 = Math_fround(0.0);
          $47_1 = Math_fround(0.0);
          $48_1 = Math_fround(0.0);
          $49_1 = Math_fround(0.0);
          if (HEAP32[$58_1 >> 2]) {
           $49_1 = HEAPF32[$52_1 >> 2];
           $48_1 = HEAPF32[$53_1 >> 2];
           $47_1 = HEAPF32[$54 >> 2];
           $26_1 = HEAPF32[$56_1 >> 2];
           $46_1 = HEAPF32[$57_1 >> 2];
           $20_1 = HEAPF32[$55_1 >> 2];
          }
          $66 = HEAPF32[$9_1 + 384 >> 2];
          $67_1 = HEAPF32[$9_1 + 376 >> 2];
          $68_1 = HEAPF32[$9_1 + 380 >> 2];
          $69_1 = HEAPF32[$9_1 + 400 >> 2];
          $70_1 = HEAPF32[$9_1 + 392 >> 2];
          $71_1 = HEAPF32[$9_1 + 396 >> 2];
          $72_1 = HEAPF32[$8_1 + 384 >> 2];
          $73 = HEAPF32[$8_1 + 376 >> 2];
          $74 = HEAPF32[$8_1 + 380 >> 2];
          $75 = HEAPF32[$8_1 + 400 >> 2];
          $76 = HEAPF32[$8_1 + 392 >> 2];
          $77 = HEAPF32[$8_1 + 396 >> 2];
          HEAP32[$4_1 + 32 >> 2] = 0;
          $5_1 = $4_1 + 44 | 0;
          HEAPF32[$5_1 >> 2] = Math_fround($7_1 * HEAPF32[$5_1 >> 2]) + Math_fround($7_1 * Math_fround(Math_fround(0.0) - Math_fround(HEAPF32[$6_1 + 88 >> 2] * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($34_1 * Math_fround($22_1 + $67_1)) + Math_fround($35_1 * Math_fround($21_1 + $68_1))) + Math_fround($36_1 * Math_fround($14_1 + $66))) + Math_fround(Math_fround(Math_fround($37_1 * Math_fround($23_1 + $70_1)) + Math_fround($38_1 * Math_fround($24_1 + $71_1))) + Math_fround($39_1 * Math_fround($25_1 + $69_1)))) + Math_fround(Math_fround(Math_fround(Math_fround($40_1 * Math_fround($46_1 + $73)) + Math_fround($41_1 * Math_fround($26_1 + $74))) + Math_fround($42_1 * Math_fround($20_1 + $72_1))) + Math_fround(Math_fround(Math_fround($43_1 * Math_fround($47_1 + $76)) + Math_fround($44_1 * Math_fround($48_1 + $77))) + Math_fround($45_1 * Math_fround($49_1 + $75))))))));
          $4_1 = $4_1 + 152 | 0;
          $10_1 = $10_1 + 1 | 0;
          continue;
         }
         break;
        };
        $4_1 = HEAP32[$15_1 >> 2];
        break label$15;
       } else {
        $2($4_1 - 148 | 0, 0, 152);
        $11_1 = $4_1 - 28 | 0;
        HEAP32[$11_1 >> 2] = -8388609;
        HEAP32[$11_1 + 4 >> 2] = 2139095039;
        HEAP32[$4_1 >> 2] = $17_1;
        HEAP32[$4_1 - 4 >> 2] = $16_1;
        $11_1 = $4_1 - 52 | 0;
        HEAP32[$11_1 >> 2] = 0;
        HEAP32[$11_1 + 4 >> 2] = 0;
        HEAP32[$4_1 - 12 >> 2] = $13_1;
        $4_1 = $4_1 + 152 | 0;
        $10_1 = $10_1 + 1 | 0;
        continue;
       };
      }
      global$0 = $6_1 + 96 | 0;
      return;
     }
     $12_1 = $12_1 + 1 | 0;
     $28_1 = $4_1 + $28_1 | 0;
     continue;
    };
   };
  };
 }
 
 function $685($0_1, $1_1) {
  if (HEAP32[$0_1 + 4 >> 2] < ($1_1 | 0)) {
   $697($0_1, $1_1)
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $686($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = 0, $26_1 = 0, $27_1 = Math_fround(0), $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = 0, $35_1 = 0, $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0);
  $4_1 = global$0 - 528 | 0;
  global$0 = $4_1;
  $30_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $11_1 = $30_1;
  $12_1 = $1_1;
  while (1) {
   if ($11_1) {
    HEAP32[HEAP32[$12_1 >> 2] + 212 >> 2] = -1;
    $11_1 = $11_1 - 1 | 0;
    $12_1 = $12_1 + 4 | 0;
    continue;
   } else {
    label$4 : {
     $11_1 = $0_1 + 4 | 0;
     $687($11_1, $2_1 + 1 | 0);
     $2($4_1 + 24 | 0, 0, 244);
     $12_1 = HEAP32[$0_1 + 8 >> 2];
     if (($12_1 | 0) > 0) {
      break label$4
     }
     if (($12_1 | 0) <= -1) {
      $687($11_1, 0)
     }
     $2_1 = Math_imul($12_1, 244);
     $28_1 = $4_1 + 88 | 0;
     $25_1 = $4_1 + 72 | 0;
     $26_1 = $4_1 + 56 | 0;
     $11_1 = $4_1 + 40 | 0;
     while (1) {
      if (!$12_1) {
       break label$4
      }
      $6_1 = HEAP32[$4_1 + 28 >> 2];
      $14_1 = HEAP32[$0_1 + 16 >> 2] + $2_1 | 0;
      $5_1 = $14_1;
      HEAP32[$5_1 >> 2] = HEAP32[$4_1 + 24 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $6_1;
      $5_1 = $4_1 + 32 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      $13_1 = $14_1 + 8 | 0;
      HEAP32[$13_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$13_1 + 4 >> 2] = $6_1;
      $6_1 = HEAP32[$11_1 + 4 >> 2];
      $5_1 = $14_1 + 16 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $6_1;
      $5_1 = $11_1 + 8 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      $13_1 = $14_1 + 24 | 0;
      HEAP32[$13_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$13_1 + 4 >> 2] = $6_1;
      $6_1 = HEAP32[$26_1 + 4 >> 2];
      $5_1 = $14_1 + 32 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$26_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $6_1;
      $5_1 = $26_1 + 8 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      $13_1 = $14_1 + 40 | 0;
      HEAP32[$13_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$13_1 + 4 >> 2] = $6_1;
      $6_1 = HEAP32[$25_1 + 4 >> 2];
      $5_1 = $14_1 + 48 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$25_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $6_1;
      $5_1 = $25_1 + 8 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      $13_1 = $14_1 + 56 | 0;
      HEAP32[$13_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$13_1 + 4 >> 2] = $6_1;
      $3($14_1 - -64 | 0, $28_1, 180);
      $2_1 = $2_1 + 244 | 0;
      $12_1 = $12_1 + 1 | 0;
      continue;
     };
    }
   }
   break;
  };
  HEAP32[$0_1 + 8 >> 2] = 0;
  $12_1 = $4_1 + 48 | 0;
  $25_1 = $4_1 + 24 | 4;
  $34_1 = $4_1 + 368 | 0;
  $26_1 = $4_1 + 56 | 0;
  $35_1 = $4_1 + 352 | 0;
  $11_1 = $4_1 + 40 | 0;
  $29_1 = $4_1 + 16 | 0;
  while (1) {
   if ($30_1) {
    $14_1 = $677($0_1, HEAP32[$1_1 >> 2], HEAPF32[$3_1 + 12 >> 2]);
    $7_1 = HEAP32[$1_1 >> 2];
    label$9 : {
     if (!$7_1 | !(HEAP32[$7_1 + 252 >> 2] & 2) | HEAPF32[$7_1 + 408 >> 2] == Math_fround(0.0)) {
      break label$9
     }
     $28_1 = HEAP32[$0_1 + 16 >> 2];
     HEAP32[$29_1 >> 2] = 0;
     HEAP32[$29_1 + 4 >> 2] = 0;
     HEAP32[$4_1 + 8 >> 2] = 0;
     HEAP32[$4_1 + 12 >> 2] = 0;
     $2_1 = HEAP32[$7_1 + 568 >> 2];
     if ($2_1 & 2) {
      $16_1 = HEAPF32[$3_1 + 92 >> 2];
      $657($4_1 + 288 | 0, HEAPF32[$7_1 + 460 >> 2], HEAPF32[$7_1 + 464 >> 2], HEAPF32[$7_1 + 468 >> 2]);
      $2_1 = $7_1 + 4 | 0;
      $643($4_1 + 400 | 0, $2_1, HEAPF32[$4_1 + 288 >> 2], HEAPF32[$4_1 + 292 >> 2], HEAPF32[$4_1 + 296 >> 2]);
      $439($4_1 + 336 | 0, $2_1);
      $455($4_1 + 24 | 0, $4_1 + 400 | 0, $4_1 + 336 | 0);
      $5_1 = $7_1 + 392 | 0;
      $6_1 = $7_1 + 396 | 0;
      $2_1 = $7_1 + 400 | 0;
      $431($4_1 + 400 | 0, $4_1 + 24 | 0, HEAPF32[$5_1 >> 2], HEAPF32[$6_1 >> 2], HEAPF32[$2_1 >> 2]);
      $201($4_1 + 336 | 0, HEAPF32[$5_1 >> 2], HEAPF32[$6_1 >> 2], HEAPF32[$2_1 >> 2], HEAPF32[$4_1 + 400 >> 2], HEAPF32[$4_1 + 404 >> 2], HEAPF32[$4_1 + 408 >> 2]);
      $17_1 = HEAPF32[$4_1 + 336 >> 2];
      $21_1 = HEAPF32[$4_1 + 340 >> 2];
      $15_1 = HEAPF32[$4_1 + 344 >> 2];
      $8_1 = $149($17_1, $21_1, $15_1);
      if ($8_1 > Math_fround($16_1 * $16_1)) {
       $8_1 = Math_fround(Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($8_1))) * $16_1);
       HEAPF32[$4_1 + 344 >> 2] = $8_1 * $15_1;
       HEAPF32[$4_1 + 340 >> 2] = $8_1 * $21_1;
       HEAPF32[$4_1 + 336 >> 2] = $8_1 * $17_1;
      }
      $6_1 = $4_1 + 344 | 0;
      $2_1 = HEAP32[$6_1 + 4 >> 2];
      HEAP32[$29_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$29_1 + 4 >> 2] = $2_1;
      $2_1 = HEAP32[$4_1 + 340 >> 2];
      HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 336 >> 2];
      HEAP32[$4_1 + 12 >> 2] = $2_1;
      $145($4_1 + 400 | 0, HEAPF32[$4_1 + 8 >> 2], HEAPF32[$4_1 + 12 >> 2], HEAPF32[$29_1 >> 2], $7_1 + 328 | 0);
      HEAP32[$4_1 + 36 >> 2] = 0;
      $8_1 = HEAPF32[$3_1 + 12 >> 2];
      HEAPF32[$4_1 + 32 >> 2] = $8_1 * HEAPF32[$4_1 + 408 >> 2];
      HEAPF32[$4_1 + 28 >> 2] = $8_1 * HEAPF32[$4_1 + 404 >> 2];
      HEAPF32[$4_1 + 24 >> 2] = $8_1 * HEAPF32[$4_1 + 400 >> 2];
      $489(($28_1 + Math_imul($14_1, 244) | 0) + 224 | 0, $4_1 + 24 | 0);
      $2_1 = HEAP32[$7_1 + 568 >> 2];
     }
     if ($2_1 & 4) {
      $10_1 = HEAPF32[$3_1 + 12 >> 2];
      $657($4_1 + 496 | 0, HEAPF32[$7_1 + 460 >> 2], HEAPF32[$7_1 + 464 >> 2], HEAPF32[$7_1 + 468 >> 2]);
      $18_1 = HEAPF32[$7_1 + 400 >> 2];
      $19_1 = HEAPF32[$7_1 + 396 >> 2];
      $20_1 = HEAPF32[$7_1 + 392 >> 2];
      $2_1 = $7_1 + 4 | 0;
      $643($4_1 + 400 | 0, $2_1, HEAPF32[$4_1 + 496 >> 2], HEAPF32[$4_1 + 500 >> 2], HEAPF32[$4_1 + 504 >> 2]);
      $439($4_1 + 288 | 0, $2_1);
      $455($4_1 + 24 | 0, $4_1 + 400 | 0, $4_1 + 288 | 0);
      $6_1 = $4_1 + 32 | 0;
      $2_1 = HEAP32[$6_1 + 4 >> 2];
      $13_1 = $4_1 + 344 | 0;
      $5_1 = $13_1;
      HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $2_1;
      $2_1 = HEAP32[$11_1 + 4 >> 2];
      HEAP32[$35_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$35_1 + 4 >> 2] = $2_1;
      $6_1 = $11_1 + 8 | 0;
      $2_1 = HEAP32[$6_1 + 4 >> 2];
      $5_1 = $35_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $2_1;
      $2_1 = HEAP32[$26_1 + 4 >> 2];
      HEAP32[$34_1 >> 2] = HEAP32[$26_1 >> 2];
      HEAP32[$34_1 + 4 >> 2] = $2_1;
      $6_1 = $26_1 + 8 | 0;
      $2_1 = HEAP32[$6_1 + 4 >> 2];
      $5_1 = $34_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $2_1;
      $2_1 = HEAP32[$4_1 + 28 >> 2];
      HEAP32[$4_1 + 336 >> 2] = HEAP32[$4_1 + 24 >> 2];
      HEAP32[$4_1 + 340 >> 2] = $2_1;
      $431($4_1 + 24 | 0, $4_1 + 336 | 0, $20_1, $19_1, $18_1);
      $431($4_1 + 400 | 0, $4_1 + 336 | 0, $20_1, $19_1, $18_1);
      $21_1 = HEAPF32[$4_1 + 24 >> 2];
      $15_1 = HEAPF32[$4_1 + 28 >> 2];
      $27_1 = HEAPF32[$4_1 + 408 >> 2];
      $8_1 = HEAPF32[$4_1 + 32 >> 2];
      $16_1 = HEAPF32[$4_1 + 404 >> 2];
      $17_1 = HEAPF32[$4_1 + 400 >> 2];
      $431($4_1 + 288 | 0, $4_1 + 336 | 0, $20_1, $19_1, $18_1);
      HEAP32[$4_1 + 492 >> 2] = 0;
      $9_1 = Math_fround($8_1 + Math_fround($10_1 * Math_fround(Math_fround($16_1 * $20_1) - Math_fround($19_1 * $17_1))));
      $8_1 = Math_fround($10_1 * Math_fround(0.0));
      HEAPF32[$4_1 + 488 >> 2] = $9_1 - Math_fround($8_1 + HEAPF32[$4_1 + 296 >> 2]);
      HEAPF32[$4_1 + 484 >> 2] = Math_fround($15_1 + Math_fround($10_1 * Math_fround(Math_fround($18_1 * $17_1) - Math_fround($27_1 * $20_1)))) - Math_fround($8_1 + HEAPF32[$4_1 + 292 >> 2]);
      HEAPF32[$4_1 + 480 >> 2] = Math_fround($21_1 + Math_fround($10_1 * Math_fround(Math_fround($19_1 * $27_1) - Math_fround($18_1 * $16_1)))) - Math_fround($8_1 + HEAPF32[$4_1 + 288 >> 2]);
      $431($4_1 + 512 | 0, $4_1 + 336 | 0, $20_1, $19_1, $18_1);
      HEAP32[$4_1 + 64 >> 2] = 0;
      HEAP32[$4_1 + 68 >> 2] = 0;
      HEAPF32[$4_1 + 60 >> 2] = $20_1;
      HEAPF32[$4_1 + 56 >> 2] = -$19_1;
      HEAP32[$4_1 + 52 >> 2] = 0;
      HEAPF32[$4_1 + 48 >> 2] = -$20_1;
      HEAP32[$4_1 + 44 >> 2] = 0;
      HEAPF32[$4_1 + 40 >> 2] = $18_1;
      HEAP32[$4_1 + 36 >> 2] = 0;
      HEAPF32[$4_1 + 32 >> 2] = $19_1;
      HEAPF32[$4_1 + 28 >> 2] = -$18_1;
      HEAP32[$4_1 + 24 >> 2] = 0;
      $36_1 = HEAPF32[$4_1 + 520 >> 2];
      $37_1 = HEAPF32[$4_1 + 516 >> 2];
      $38_1 = HEAPF32[$4_1 + 512 >> 2];
      $455($4_1 + 400 | 0, $4_1 + 24 | 0, $4_1 + 336 | 0);
      $39_1 = HEAPF32[$13_1 >> 2];
      $40_1 = HEAPF32[$4_1 + 340 >> 2];
      $41_1 = HEAPF32[$4_1 + 404 >> 2];
      $42_1 = HEAPF32[$4_1 + 408 >> 2];
      $43_1 = HEAPF32[$4_1 + 352 >> 2];
      $9_1 = HEAPF32[$4_1 + 416 >> 2];
      $22_1 = HEAPF32[$4_1 + 360 >> 2];
      $23_1 = HEAPF32[$4_1 + 424 >> 2];
      $24_1 = HEAPF32[$4_1 + 368 >> 2];
      $31_1 = HEAPF32[$4_1 + 432 >> 2];
      $32_1 = HEAPF32[$4_1 + 372 >> 2];
      $33_1 = HEAPF32[$4_1 + 436 >> 2];
      $27_1 = HEAPF32[$4_1 + 336 >> 2];
      $16_1 = HEAPF32[$4_1 + 400 >> 2];
      $17_1 = HEAPF32[$4_1 + 356 >> 2];
      $21_1 = HEAPF32[$4_1 + 420 >> 2];
      $15_1 = HEAPF32[$4_1 + 376 >> 2];
      $8_1 = HEAPF32[$4_1 + 440 >> 2];
      HEAP32[$4_1 + 332 >> 2] = 0;
      HEAP32[$4_1 + 316 >> 2] = 0;
      HEAP32[$4_1 + 300 >> 2] = 0;
      HEAPF32[$4_1 + 328 >> 2] = $15_1 + Math_fround($8_1 * $10_1);
      HEAPF32[$4_1 + 308 >> 2] = $17_1 + Math_fround($21_1 * $10_1);
      HEAPF32[$4_1 + 288 >> 2] = $27_1 + Math_fround($16_1 * $10_1);
      HEAPF32[$4_1 + 324 >> 2] = $32_1 + Math_fround($10_1 * Math_fround($33_1 - $38_1));
      HEAPF32[$4_1 + 320 >> 2] = $24_1 + Math_fround($10_1 * Math_fround($37_1 + $31_1));
      HEAPF32[$4_1 + 312 >> 2] = $22_1 + Math_fround($10_1 * Math_fround($38_1 + $23_1));
      HEAPF32[$4_1 + 304 >> 2] = $43_1 + Math_fround($10_1 * Math_fround($9_1 - $36_1));
      HEAPF32[$4_1 + 296 >> 2] = $39_1 + Math_fround($10_1 * Math_fround($42_1 - $37_1));
      HEAPF32[$4_1 + 292 >> 2] = $40_1 + Math_fround($10_1 * Math_fround($36_1 + $41_1));
      $659($4_1 + 24 | 0, $4_1 + 288 | 0, $4_1 + 480 | 0);
      HEAP32[$4_1 + 20 >> 2] = 0;
      HEAPF32[$4_1 + 16 >> 2] = Math_fround($18_1 - HEAPF32[$4_1 + 32 >> 2]) - $18_1;
      HEAPF32[$4_1 + 12 >> 2] = Math_fround($19_1 - HEAPF32[$4_1 + 28 >> 2]) - $19_1;
      HEAPF32[$4_1 + 8 >> 2] = Math_fround($20_1 - HEAPF32[$4_1 + 24 >> 2]) - $20_1;
      $158(($28_1 + Math_imul($14_1, 244) | 0) + 224 | 0, $4_1 + 8 | 0);
      $2_1 = HEAP32[$7_1 + 568 >> 2];
     }
     if (!($2_1 & 8)) {
      break label$9
     }
     $9_1 = HEAPF32[$3_1 + 12 >> 2];
     $657($4_1 + 512 | 0, HEAPF32[$7_1 + 460 >> 2], HEAPF32[$7_1 + 464 >> 2], HEAPF32[$7_1 + 468 >> 2]);
     $31_1 = HEAPF32[$7_1 + 400 >> 2];
     $32_1 = HEAPF32[$7_1 + 396 >> 2];
     $33_1 = HEAPF32[$7_1 + 392 >> 2];
     $651($7_1 + 4 | 0, $4_1 + 496 | 0);
     HEAPF32[$4_1 + 32 >> 2] = -HEAPF32[$4_1 + 504 >> 2];
     HEAPF32[$4_1 + 28 >> 2] = -HEAPF32[$4_1 + 500 >> 2];
     HEAPF32[$4_1 + 24 >> 2] = -HEAPF32[$4_1 + 496 >> 2];
     HEAPF32[$4_1 + 36 >> 2] = HEAPF32[$4_1 + 508 >> 2];
     $658($4_1 + 480 | 0, $4_1 + 24 | 0, $33_1, $32_1, $31_1);
     HEAP32[$25_1 >> 2] = 0;
     HEAP32[$25_1 + 4 >> 2] = 0;
     $2_1 = $25_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     HEAP32[$12_1 >> 2] = 0;
     HEAP32[$12_1 + 4 >> 2] = 0;
     $2_1 = $12_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     $16_1 = HEAPF32[$4_1 + 512 >> 2];
     HEAPF32[$4_1 + 24 >> 2] = $16_1;
     $17_1 = HEAPF32[$4_1 + 516 >> 2];
     HEAPF32[$4_1 + 44 >> 2] = $17_1;
     HEAP32[$4_1 + 68 >> 2] = 0;
     $21_1 = HEAPF32[$4_1 + 520 >> 2];
     HEAPF32[$4_1 + 64 >> 2] = $21_1;
     $22_1 = HEAPF32[$4_1 + 480 >> 2];
     $23_1 = HEAPF32[$4_1 + 484 >> 2];
     $24_1 = HEAPF32[$4_1 + 488 >> 2];
     $431($4_1 + 464 | 0, $4_1 + 24 | 0, $22_1, $23_1, $24_1);
     HEAP32[$4_1 + 460 >> 2] = 0;
     $15_1 = HEAPF32[$4_1 + 468 >> 2];
     $8_1 = HEAPF32[$4_1 + 464 >> 2];
     HEAPF32[$4_1 + 456 >> 2] = $9_1 * Math_fround(Math_fround($22_1 * $15_1) - Math_fround($23_1 * $8_1));
     $10_1 = Math_fround($24_1 * $8_1);
     $8_1 = HEAPF32[$4_1 + 472 >> 2];
     HEAPF32[$4_1 + 452 >> 2] = $9_1 * Math_fround($10_1 - Math_fround($22_1 * $8_1));
     HEAPF32[$4_1 + 448 >> 2] = $9_1 * Math_fround(Math_fround($23_1 * $8_1) - Math_fround($24_1 * $15_1));
     HEAP32[$4_1 + 440 >> 2] = 0;
     HEAP32[$4_1 + 444 >> 2] = 0;
     HEAPF32[$4_1 + 436 >> 2] = $22_1;
     HEAPF32[$4_1 + 432 >> 2] = -$23_1;
     HEAP32[$4_1 + 428 >> 2] = 0;
     HEAPF32[$4_1 + 424 >> 2] = -$22_1;
     HEAP32[$4_1 + 420 >> 2] = 0;
     HEAPF32[$4_1 + 416 >> 2] = $24_1;
     HEAP32[$4_1 + 412 >> 2] = 0;
     HEAPF32[$4_1 + 408 >> 2] = $23_1;
     HEAPF32[$4_1 + 404 >> 2] = -$24_1;
     HEAP32[$4_1 + 400 >> 2] = 0;
     $431($4_1 + 384 | 0, $4_1 + 24 | 0, $22_1, $23_1, $24_1);
     $27_1 = HEAPF32[$4_1 + 392 >> 2];
     $15_1 = HEAPF32[$4_1 + 388 >> 2];
     $8_1 = HEAPF32[$4_1 + 384 >> 2];
     $455($4_1 + 288 | 0, $4_1 + 400 | 0, $4_1 + 24 | 0);
     HEAP32[$4_1 + 380 >> 2] = 0;
     HEAP32[$4_1 + 364 >> 2] = 0;
     HEAP32[$4_1 + 348 >> 2] = 0;
     HEAPF32[$4_1 + 376 >> 2] = $21_1 + Math_fround($9_1 * HEAPF32[$4_1 + 328 >> 2]);
     HEAPF32[$4_1 + 356 >> 2] = $17_1 + Math_fround($9_1 * HEAPF32[$4_1 + 308 >> 2]);
     HEAPF32[$4_1 + 336 >> 2] = $16_1 + Math_fround($9_1 * HEAPF32[$4_1 + 288 >> 2]);
     HEAPF32[$4_1 + 372 >> 2] = Math_fround($9_1 * Math_fround(HEAPF32[$4_1 + 324 >> 2] - $8_1)) + Math_fround(0.0);
     HEAPF32[$4_1 + 368 >> 2] = Math_fround($9_1 * Math_fround($15_1 + HEAPF32[$4_1 + 320 >> 2])) + Math_fround(0.0);
     HEAPF32[$4_1 + 360 >> 2] = Math_fround($9_1 * Math_fround($8_1 + HEAPF32[$4_1 + 312 >> 2])) + Math_fround(0.0);
     HEAPF32[$4_1 + 352 >> 2] = Math_fround($9_1 * Math_fround(HEAPF32[$4_1 + 304 >> 2] - $27_1)) + Math_fround(0.0);
     HEAPF32[$4_1 + 344 >> 2] = Math_fround($9_1 * Math_fround(HEAPF32[$4_1 + 296 >> 2] - $15_1)) + Math_fround(0.0);
     HEAPF32[$4_1 + 340 >> 2] = Math_fround($9_1 * Math_fround($27_1 + HEAPF32[$4_1 + 292 >> 2])) + Math_fround(0.0);
     $659($4_1 + 288 | 0, $4_1 + 336 | 0, $4_1 + 448 | 0);
     $658($4_1 + 272 | 0, $4_1 + 496 | 0, Math_fround($22_1 - HEAPF32[$4_1 + 288 >> 2]), Math_fround($23_1 - HEAPF32[$4_1 + 292 >> 2]), Math_fround($24_1 - HEAPF32[$4_1 + 296 >> 2]));
     HEAP32[$4_1 + 20 >> 2] = 0;
     HEAPF32[$4_1 + 16 >> 2] = HEAPF32[$4_1 + 280 >> 2] - $31_1;
     HEAPF32[$4_1 + 12 >> 2] = HEAPF32[$4_1 + 276 >> 2] - $32_1;
     HEAPF32[$4_1 + 8 >> 2] = HEAPF32[$4_1 + 272 >> 2] - $33_1;
     $158(($28_1 + Math_imul($14_1, 244) | 0) + 224 | 0, $4_1 + 8 | 0);
    }
    $30_1 = $30_1 - 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   }
   break;
  };
  global$0 = $4_1 + 528 | 0;
 }
 
 function $687($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $11_1 = $120(Math_imul($1_1, 244))
   }
   $6_1 = HEAP32[$0_1 + 4 >> 2];
   $9_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
   $6_1 = 64;
   while (1) {
    if ($9_1) {
     $7_1 = HEAP32[$0_1 + 12 >> 2] + $6_1 | 0;
     $3_1 = $7_1 + -64 | 0;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     $8_1 = $6_1 + $11_1 | 0;
     $2_1 = $8_1 + -64 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $5_1;
     $3_1 = $3_1 + 8 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $2_1 = $2_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $4_1;
     $2_1 = $7_1 - 48 | 0;
     $5_1 = $2_1 + 8 | 0;
     $10_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $8_1 - 48 | 0;
     $4_1 = $3_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $10_1;
     $4_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $3_1 = $7_1 - 32 | 0;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     $2_1 = $8_1 - 32 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $5_1;
     $3_1 = $3_1 + 8 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $2_1 = $2_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $4_1;
     $2_1 = $7_1 - 16 | 0;
     $5_1 = $2_1 + 8 | 0;
     $10_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $8_1 - 16 | 0;
     $4_1 = $3_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $10_1;
     $4_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $3($8_1, $7_1, 180);
     $9_1 = $9_1 - 1 | 0;
     $6_1 = $6_1 + 244 | 0;
     continue;
    }
    break;
   };
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $11_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $688($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  label$1 : {
   if (!HEAP32[$7_1 + 56 >> 2]) {
    break label$1
   }
   $1_1 = HEAP32[$7_1 + 20 >> 2];
   $2_1 = 0;
   while (1) {
    if (($1_1 | 0) <= ($2_1 | 0)) {
     break label$1
    }
    $3_1 = 0;
    $1_1 = HEAP32[$0_1 + 28 >> 2];
    $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
    $10_1 = Math_fround(0.0);
    while (1) {
     if ($1_1) {
      $5_1 = HEAP32[$0_1 + 16 >> 2];
      $4_1 = HEAP32[$0_1 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0_1 + 116 >> 2] + $3_1 >> 2], 152) | 0;
      $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 220 >> 2]]($5_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$4_1 + 148 >> 2], 244) + $5_1 | 0, $4_1));
      $9_1 = Math_fround($9_1 * $9_1);
      $10_1 = $10_1 > $9_1 ? $10_1 : $9_1;
      $1_1 = $1_1 - 1 | 0;
      $3_1 = $3_1 + 4 | 0;
      continue;
     }
     break;
    };
    if (HEAPF32[$7_1 + 100 >> 2] >= $10_1) {
     break label$1
    }
    $1_1 = HEAP32[$7_1 + 20 >> 2];
    $3_1 = ($1_1 - 1 | 0) > ($2_1 | 0);
    $2_1 = $2_1 + 1 | 0;
    if ($3_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $689($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0;
  $1_1 = global$0 - 80 | 0;
  global$0 = $1_1;
  label$1 : {
   $11_1 = HEAP32[$3_1 + 80 >> 2];
   if (!($11_1 & 4)) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 28 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $12_1 = $11_1 & 16;
   $13_1 = 140;
   while (1) {
    if (!$2_1) {
     break label$1
    }
    $11_1 = HEAP32[$0_1 + 36 >> 2] + $13_1 | 0;
    $4_1 = HEAP32[$11_1 - 8 >> 2];
    HEAPF32[$4_1 + 124 >> 2] = HEAPF32[$11_1 - 40 >> 2];
    $11_1 = HEAP32[$0_1 + 76 >> 2] + Math_imul(HEAP32[$11_1 >> 2], 152) | 0;
    HEAPF32[$4_1 + 132 >> 2] = HEAPF32[$11_1 + 100 >> 2];
    if ($12_1) {
     HEAPF32[$4_1 + 136 >> 2] = HEAPF32[$11_1 + 252 >> 2]
    }
    $2_1 = $2_1 - 1 | 0;
    $13_1 = $13_1 + 152 | 0;
    continue;
   };
  }
  $2_1 = HEAP32[$0_1 + 48 >> 2];
  $15_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $11_1 = 100;
  while (1) {
   if ($15_1) {
    $5_1 = HEAP32[$0_1 + 56 >> 2] + $11_1 | 0;
    $4_1 = HEAP32[$5_1 + 32 >> 2];
    $12_1 = HEAP32[$4_1 + 44 >> 2];
    if ($12_1) {
     HEAP32[$1_1 + 28 >> 2] = 0;
     $9_1 = Math_fround(Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2]);
     $8_1 = HEAPF32[$5_1 >> 2];
     $2_1 = HEAP32[$4_1 + 28 >> 2];
     HEAPF32[$1_1 + 24 >> 2] = $9_1 * Math_fround(Math_fround($8_1 * HEAPF32[$5_1 - 76 >> 2]) * HEAPF32[$2_1 + 420 >> 2]);
     HEAPF32[$1_1 + 20 >> 2] = $9_1 * Math_fround(Math_fround($8_1 * HEAPF32[$5_1 - 80 >> 2]) * HEAPF32[$2_1 + 416 >> 2]);
     HEAPF32[$1_1 + 16 >> 2] = Math_fround(Math_fround($8_1 * HEAPF32[$5_1 - 84 >> 2]) * HEAPF32[$2_1 + 412 >> 2]) * $9_1;
     $158($12_1, $1_1 + 16 | 0);
     HEAP32[$1_1 + 28 >> 2] = 0;
     $9_1 = HEAPF32[$5_1 >> 2];
     $2_1 = HEAP32[$4_1 + 32 >> 2];
     $8_1 = Math_fround(Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2]);
     HEAPF32[$1_1 + 16 >> 2] = Math_fround(Math_fround(HEAPF32[$5_1 - 52 >> 2] * $9_1) * HEAPF32[$2_1 + 412 >> 2]) * $8_1;
     HEAPF32[$1_1 + 24 >> 2] = $8_1 * Math_fround(Math_fround($9_1 * HEAPF32[$5_1 - 44 >> 2]) * HEAPF32[$2_1 + 420 >> 2]);
     HEAPF32[$1_1 + 20 >> 2] = $8_1 * Math_fround(Math_fround($9_1 * HEAPF32[$5_1 - 48 >> 2]) * HEAPF32[$2_1 + 416 >> 2]);
     $158($12_1 + 32 | 0, $1_1 + 16 | 0);
     HEAP32[$1_1 + 28 >> 2] = 0;
     $2_1 = HEAP32[$4_1 + 28 >> 2];
     $9_1 = HEAPF32[$5_1 >> 2];
     $8_1 = Math_fround(Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2]);
     HEAPF32[$1_1 + 16 >> 2] = Math_fround(Math_fround(HEAPF32[$5_1 - 100 >> 2] * HEAPF32[$2_1 + 608 >> 2]) * $9_1) * $8_1;
     HEAPF32[$1_1 + 24 >> 2] = $8_1 * Math_fround($9_1 * Math_fround(HEAPF32[$5_1 - 92 >> 2] * HEAPF32[$2_1 + 616 >> 2]));
     HEAPF32[$1_1 + 20 >> 2] = $8_1 * Math_fround($9_1 * Math_fround(HEAPF32[$5_1 - 96 >> 2] * HEAPF32[$2_1 + 612 >> 2]));
     $158($12_1 + 16 | 0, $1_1 + 16 | 0);
     HEAP32[$1_1 + 28 >> 2] = 0;
     $2_1 = HEAP32[$4_1 + 32 >> 2];
     $9_1 = HEAPF32[$5_1 >> 2];
     $8_1 = Math_fround(Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2]);
     HEAPF32[$1_1 + 16 >> 2] = Math_fround(Math_fround(HEAPF32[$5_1 - 68 >> 2] * HEAPF32[$2_1 + 608 >> 2]) * $9_1) * $8_1;
     HEAPF32[$1_1 + 24 >> 2] = $8_1 * Math_fround($9_1 * Math_fround(HEAPF32[$5_1 - 60 >> 2] * HEAPF32[$2_1 + 616 >> 2]));
     HEAPF32[$1_1 + 20 >> 2] = $8_1 * Math_fround($9_1 * Math_fround(HEAPF32[$5_1 + -64 >> 2] * HEAPF32[$2_1 + 612 >> 2]));
     $158($12_1 + 48 | 0, $1_1 + 16 | 0);
    }
    $8_1 = HEAPF32[$5_1 >> 2];
    HEAPF32[$4_1 + 36 >> 2] = $8_1;
    if (HEAPF32[$4_1 + 16 >> 2] <= Math_fround(Math_abs($8_1))) {
     HEAP8[$4_1 + 20 | 0] = 0
    }
    $15_1 = $15_1 - 1 | 0;
    $11_1 = $11_1 + 152 | 0;
    continue;
   }
   break;
  };
  $2_1 = HEAP32[$0_1 + 8 >> 2];
  $15_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $20_1 = $0_1 + 44 | 0;
  $12_1 = $1_1 - -64 | 0;
  $11_1 = $1_1 + 48 | 0;
  $2_1 = $1_1 + 32 | 0;
  $13_1 = 144;
  while (1) {
   if ($15_1) {
    $6_1 = HEAP32[$0_1 + 16 >> 2] + $13_1 | 0;
    if (HEAP32[$6_1 + 96 >> 2]) {
     label$11 : {
      if (HEAP32[$3_1 + 56 >> 2]) {
       $16_1 = HEAPF32[$3_1 + 64 >> 2];
       $17_1 = HEAPF32[$3_1 + 12 >> 2];
       $158($6_1 + 32 | 0, $6_1 - 80 | 0);
       $158($6_1 + 48 | 0, $6_1 + -64 | 0);
       $9_1 = HEAPF32[$6_1 >> 2];
       $8_1 = HEAPF32[$6_1 + 4 >> 2];
       if (!($9_1 != Math_fround(0.0) | $8_1 != Math_fround(0.0) | HEAPF32[$6_1 + 8 >> 2] != Math_fround(0.0) | (HEAPF32[$6_1 + 16 >> 2] != Math_fround(0.0) | HEAPF32[$6_1 + 20 >> 2] != Math_fround(0.0)))) {
        if (HEAPF32[$6_1 + 24 >> 2] == Math_fround(0.0)) {
         break label$11
        }
       }
       HEAP32[$1_1 + 12 >> 2] = 0;
       HEAPF32[$1_1 + 8 >> 2] = HEAPF32[$6_1 + 24 >> 2] * $16_1;
       HEAPF32[$1_1 + 4 >> 2] = HEAPF32[$6_1 + 20 >> 2] * $16_1;
       HEAPF32[$1_1 >> 2] = HEAPF32[$6_1 + 16 >> 2] * $16_1;
       $10_1 = $6_1 - 144 | 0;
       $650($10_1, $9_1, $8_1, HEAPF32[$6_1 + 8 >> 2], $1_1, $17_1, $1_1 + 16 | 0);
       $5_1 = $1_1 + 24 | 0;
       $4_1 = HEAP32[$5_1 + 4 >> 2];
       $7_1 = $10_1 + 8 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $4_1;
       $4_1 = HEAP32[$1_1 + 20 >> 2];
       HEAP32[$10_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
       HEAP32[$10_1 + 4 >> 2] = $4_1;
       $4_1 = HEAP32[$2_1 + 4 >> 2];
       $7_1 = $6_1 - 128 | 0;
       $5_1 = $7_1;
       HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
       HEAP32[$5_1 + 4 >> 2] = $4_1;
       $5_1 = $2_1 + 8 | 0;
       $4_1 = HEAP32[$5_1 + 4 >> 2];
       $7_1 = $7_1 + 8 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $4_1;
       $4_1 = HEAP32[$11_1 + 4 >> 2];
       $7_1 = $6_1 - 112 | 0;
       $5_1 = $7_1;
       HEAP32[$5_1 >> 2] = HEAP32[$11_1 >> 2];
       HEAP32[$5_1 + 4 >> 2] = $4_1;
       $5_1 = $11_1 + 8 | 0;
       $4_1 = HEAP32[$5_1 + 4 >> 2];
       $7_1 = $7_1 + 8 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $4_1;
       $4_1 = HEAP32[$12_1 + 4 >> 2];
       $5_1 = $6_1 - 96 | 0;
       HEAP32[$5_1 >> 2] = HEAP32[$12_1 >> 2];
       HEAP32[$5_1 + 4 >> 2] = $4_1;
       $7_1 = $5_1 + 8 | 0;
       $5_1 = $12_1 + 8 | 0;
       $4_1 = HEAP32[$5_1 + 4 >> 2];
       HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $4_1;
       break label$11;
      }
      $158($6_1 + 32 | 0, $6_1 - 80 | 0);
      $158($6_1 + 48 | 0, $6_1 + -64 | 0);
     }
     $4_1 = HEAP32[$0_1 + 16 >> 2] + $13_1 | 0;
     $18_1 = HEAPF32[$4_1 - -64 >> 2];
     $19_1 = HEAPF32[$4_1 + 32 >> 2];
     $16_1 = HEAPF32[$4_1 + 68 >> 2];
     $17_1 = HEAPF32[$4_1 + 36 >> 2];
     $9_1 = HEAPF32[$4_1 + 72 >> 2];
     $8_1 = HEAPF32[$4_1 + 40 >> 2];
     $4_1 = HEAP32[$4_1 + 96 >> 2];
     HEAP32[$4_1 + 388 >> 2] = 0;
     HEAPF32[$4_1 + 384 >> 2] = $8_1 + $9_1;
     HEAPF32[$4_1 + 380 >> 2] = $17_1 + $16_1;
     HEAPF32[$4_1 + 376 >> 2] = $19_1 + $18_1;
     HEAP32[$4_1 + 308 >> 2] = HEAP32[$4_1 + 308 >> 2] + 1;
     $4_1 = HEAP32[$0_1 + 16 >> 2] + $13_1 | 0;
     $18_1 = HEAPF32[$4_1 + 48 >> 2];
     $19_1 = HEAPF32[$4_1 + 80 >> 2];
     $16_1 = HEAPF32[$4_1 + 52 >> 2];
     $17_1 = HEAPF32[$4_1 + 84 >> 2];
     $9_1 = HEAPF32[$4_1 + 56 >> 2];
     $8_1 = HEAPF32[$4_1 + 88 >> 2];
     $4_1 = HEAP32[$4_1 + 96 >> 2];
     HEAP32[$4_1 + 404 >> 2] = 0;
     HEAPF32[$4_1 + 400 >> 2] = $9_1 + $8_1;
     HEAPF32[$4_1 + 396 >> 2] = $16_1 + $17_1;
     HEAPF32[$4_1 + 392 >> 2] = $18_1 + $19_1;
     HEAP32[$4_1 + 308 >> 2] = HEAP32[$4_1 + 308 >> 2] + 1;
     if (HEAP32[$3_1 + 56 >> 2]) {
      $6_1 = HEAP32[$0_1 + 16 >> 2] + $13_1 | 0;
      $14_1 = HEAP32[$6_1 + 96 >> 2];
      HEAP32[$14_1 + 308 >> 2] = HEAP32[$14_1 + 308 >> 2] + 1;
      $10_1 = $6_1 - 144 | 0;
      $5_1 = $10_1 + 8 | 0;
      $4_1 = HEAP32[$5_1 + 4 >> 2];
      $7_1 = $14_1 + 12 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $4_1;
      $4_1 = HEAP32[$10_1 + 4 >> 2];
      HEAP32[$14_1 + 4 >> 2] = HEAP32[$10_1 >> 2];
      HEAP32[$14_1 + 8 >> 2] = $4_1;
      $10_1 = $6_1 - 128 | 0;
      $5_1 = $10_1 + 8 | 0;
      $4_1 = HEAP32[$5_1 + 4 >> 2];
      $7_1 = $14_1 + 28 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $4_1;
      $4_1 = HEAP32[$10_1 + 4 >> 2];
      $5_1 = $14_1 + 20 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$10_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $4_1;
      $10_1 = $6_1 - 112 | 0;
      $4_1 = HEAP32[$10_1 + 4 >> 2];
      $5_1 = $14_1 + 36 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$10_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $4_1;
      $5_1 = $10_1 + 8 | 0;
      $4_1 = HEAP32[$5_1 + 4 >> 2];
      $7_1 = $14_1 + 44 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $4_1;
      $10_1 = $6_1 - 96 | 0;
      $5_1 = $10_1 + 8 | 0;
      $4_1 = HEAP32[$5_1 + 4 >> 2];
      $7_1 = $14_1 + 60 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $4_1;
      $4_1 = HEAP32[$10_1 + 4 >> 2];
      $5_1 = $14_1 + 52 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$10_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $4_1;
     }
     HEAP32[HEAP32[(HEAP32[$0_1 + 16 >> 2] + $13_1 | 0) + 96 >> 2] + 212 >> 2] = -1;
    }
    $15_1 = $15_1 - 1 | 0;
    $13_1 = $13_1 + 244 | 0;
    continue;
   }
   break;
  };
  $685($0_1 + 24 | 0, 0);
  $685($20_1, 0);
  $685($0_1 - -64 | 0, 0);
  $685($0_1 + 84 | 0, 0);
  if (HEAP32[$0_1 + 8 >> 2] <= -1) {
   $687($0_1 + 4 | 0, 0)
  }
  HEAP32[$0_1 + 8 >> 2] = 0;
  global$0 = $1_1 + 80 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $690($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = 0;
  label$1 : {
   if (!(HEAP8[$8_1 + 80 | 0] & 1)) {
    break label$1
   }
   $14_1 = HEAP32[$0_1 + 68 >> 2];
   $15_1 = HEAP32[$0_1 + 28 >> 2];
   $3_1 = 0;
   $2_1 = HEAP32[$0_1 + 48 >> 2];
   $13_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = 0;
   while (1) if (($2_1 | 0) == ($13_1 | 0)) {
    if (HEAP32[$8_1 + 20 >> 2] <= ($1_1 | 0)) {
     break label$1
    }
    $3_1 = 0;
    $9_1 = ($15_1 | 0) > 0 ? $15_1 : 0;
    $2_1 = 0;
    while (1) if (($2_1 | 0) == ($9_1 | 0)) {
     $3_1 = 0;
     $9_1 = ($14_1 | 0) > 0 ? $14_1 : 0;
     $2_1 = 0;
     while (1) {
      if (($2_1 | 0) == ($9_1 | 0)) {
       break label$1
      }
      $5_1 = HEAP32[HEAP32[$0_1 + 156 >> 2] + $3_1 >> 2];
      $2_1 = $2_1 + 1 | 0;
      $13_1 = $691($0_1, $2_1) << 2;
      $4_1 = HEAP32[$0_1 + 156 >> 2];
      $13_1 = $13_1 + $4_1 | 0;
      HEAP32[$3_1 + $4_1 >> 2] = HEAP32[$13_1 >> 2];
      HEAP32[$13_1 >> 2] = $5_1;
      $3_1 = $3_1 + 4 | 0;
      continue;
     };
    } else {
     $5_1 = HEAP32[HEAP32[$0_1 + 116 >> 2] + $3_1 >> 2];
     $2_1 = $2_1 + 1 | 0;
     $13_1 = $691($0_1, $2_1) << 2;
     $4_1 = HEAP32[$0_1 + 116 >> 2];
     $13_1 = $13_1 + $4_1 | 0;
     HEAP32[$3_1 + $4_1 >> 2] = HEAP32[$13_1 >> 2];
     HEAP32[$13_1 >> 2] = $5_1;
     $3_1 = $3_1 + 4 | 0;
     continue;
    };
   } else {
    $9_1 = HEAP32[HEAP32[$0_1 + 136 >> 2] + $3_1 >> 2];
    $2_1 = $2_1 + 1 | 0;
    $5_1 = $691($0_1, $2_1);
    $4_1 = HEAP32[$0_1 + 136 >> 2];
    $5_1 = $4_1 + ($5_1 << 2) | 0;
    HEAP32[$3_1 + $4_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $9_1;
    $3_1 = $3_1 + 4 | 0;
    continue;
   };
  }
  $2_1 = 0;
  $3_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 48 >> 2] <= ($3_1 | 0)) {
    label$11 : {
     if (HEAP32[$8_1 + 20 >> 2] <= ($1_1 | 0)) {
      break label$11
     }
     $3_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
     label$12 : {
      while (1) {
       label$14 : {
        if (!$3_1) {
         $3_1 = HEAP32[$0_1 + 28 >> 2];
         $1_1 = HEAP32[$8_1 + 80 >> 2];
         if (!($1_1 & 512)) {
          break label$14
         }
         $5_1 = $1_1 & 16 ? 8 : 4;
         $1_1 = 0;
         $2_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
         $6_1 = 4;
         while (1) {
          if (!$2_1) {
           break label$12
          }
          $3_1 = HEAP32[$0_1 + 16 >> 2];
          $4_1 = HEAP32[$0_1 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0_1 + 116 >> 2] + $1_1 >> 2], 152) | 0;
          $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 216 >> 2]]($3_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, $3_1 + Math_imul(HEAP32[$4_1 + 148 >> 2], 244) | 0, $4_1));
          $10_1 = Math_fround($10_1 * $10_1);
          $11_1 = $10_1 < $11_1 ? $11_1 : $10_1;
          $12_1 = HEAPF32[$4_1 + 100 >> 2];
          $4_1 = !($12_1 > Math_fround(0.0));
          if (!$4_1) {
           $7_1 = HEAP32[$0_1 + 76 >> 2] + Math_imul(HEAP32[(HEAP32[$0_1 + 156 >> 2] + $6_1 | 0) - 4 >> 2], 152) | 0;
           $10_1 = HEAPF32[$7_1 + 104 >> 2];
           HEAPF32[$7_1 + 124 >> 2] = $12_1 * $10_1;
           HEAPF32[$7_1 + 120 >> 2] = $12_1 * Math_fround(-$10_1);
           $3_1 = HEAP32[$0_1 + 16 >> 2];
           $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 212 >> 2]]($3_1 + Math_imul(HEAP32[$7_1 + 144 >> 2], 244) | 0, $3_1 + Math_imul(HEAP32[$7_1 + 148 >> 2], 244) | 0, $7_1));
           $10_1 = Math_fround($10_1 * $10_1);
           $11_1 = $10_1 < $11_1 ? $11_1 : $10_1;
          }
          if (!($4_1 | !(HEAPU8[$8_1 + 80 | 0] & 16))) {
           $4_1 = HEAP32[$0_1 + 76 >> 2] + Math_imul(HEAP32[HEAP32[$0_1 + 156 >> 2] + $6_1 >> 2], 152) | 0;
           $10_1 = HEAPF32[$4_1 + 104 >> 2];
           HEAPF32[$4_1 + 124 >> 2] = $12_1 * $10_1;
           HEAPF32[$4_1 + 120 >> 2] = $12_1 * Math_fround(-$10_1);
           $3_1 = HEAP32[$0_1 + 16 >> 2];
           $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 212 >> 2]]($3_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, $3_1 + Math_imul(HEAP32[$4_1 + 148 >> 2], 244) | 0, $4_1));
           $10_1 = Math_fround($10_1 * $10_1);
           $11_1 = $10_1 < $11_1 ? $11_1 : $10_1;
          }
          $2_1 = $2_1 - 1 | 0;
          $6_1 = $5_1 + $6_1 | 0;
          $1_1 = $1_1 + 4 | 0;
          continue;
         };
        }
        $1_1 = HEAP32[$6_1 >> 2];
        if (HEAPU8[$1_1 + 20 | 0]) {
         $1_1 = $677($0_1, HEAP32[$1_1 + 28 >> 2], HEAPF32[$8_1 + 12 >> 2]);
         $4_1 = $677($0_1, HEAP32[HEAP32[$6_1 >> 2] + 32 >> 2], HEAPF32[$8_1 + 12 >> 2]);
         $2_1 = HEAP32[$6_1 >> 2];
         $5_1 = Math_imul($1_1, 244);
         $1_1 = HEAP32[$0_1 + 16 >> 2];
         FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, $5_1 + $1_1 | 0, $1_1 + Math_imul($4_1, 244) | 0, HEAPF32[$8_1 + 12 >> 2]);
        }
        $3_1 = $3_1 - 1 | 0;
        $6_1 = $6_1 + 4 | 0;
        continue;
       }
       break;
      };
      $2_1 = 0;
      $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
      while (1) {
       if ($3_1) {
        $1_1 = HEAP32[$0_1 + 16 >> 2];
        $4_1 = HEAP32[$0_1 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0_1 + 116 >> 2] + $2_1 >> 2], 152) | 0;
        $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 216 >> 2]]($1_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, $1_1 + Math_imul(HEAP32[$4_1 + 148 >> 2], 244) | 0, $4_1));
        $10_1 = Math_fround($10_1 * $10_1);
        $11_1 = $10_1 < $11_1 ? $11_1 : $10_1;
        $3_1 = $3_1 - 1 | 0;
        $2_1 = $2_1 + 4 | 0;
        continue;
       }
       break;
      };
      $1_1 = 0;
      $2_1 = HEAP32[$0_1 + 68 >> 2];
      $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
      while (1) {
       if (!$2_1) {
        break label$12
       }
       $4_1 = HEAP32[$0_1 + 76 >> 2] + Math_imul(HEAP32[HEAP32[$0_1 + 156 >> 2] + $1_1 >> 2], 152) | 0;
       $12_1 = HEAPF32[(HEAP32[$0_1 + 36 >> 2] + Math_imul(HEAP32[$4_1 + 140 >> 2], 152) | 0) + 100 >> 2];
       if ($12_1 > Math_fround(0.0)) {
        $10_1 = HEAPF32[$4_1 + 104 >> 2];
        HEAPF32[$4_1 + 124 >> 2] = $12_1 * $10_1;
        HEAPF32[$4_1 + 120 >> 2] = $12_1 * Math_fround(-$10_1);
        $3_1 = HEAP32[$0_1 + 16 >> 2];
        $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 212 >> 2]]($3_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, $3_1 + Math_imul(HEAP32[$4_1 + 148 >> 2], 244) | 0, $4_1));
        $10_1 = Math_fround($10_1 * $10_1);
        $11_1 = $10_1 < $11_1 ? $11_1 : $10_1;
       }
       $2_1 = $2_1 - 1 | 0;
       $1_1 = $1_1 + 4 | 0;
       continue;
      };
     }
     $1_1 = 0;
     $2_1 = HEAP32[$0_1 + 88 >> 2];
     $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
     while (1) {
      if (!$2_1) {
       break label$11
      }
      $4_1 = HEAP32[$0_1 + 96 >> 2] + $1_1 | 0;
      $10_1 = HEAPF32[(HEAP32[$0_1 + 36 >> 2] + Math_imul(HEAP32[$4_1 + 140 >> 2], 152) | 0) + 100 >> 2];
      if ($10_1 > Math_fround(0.0)) {
       $12_1 = HEAPF32[$4_1 + 104 >> 2];
       $10_1 = Math_fround($10_1 * $12_1);
       $10_1 = $10_1 > $12_1 ? $12_1 : $10_1;
       HEAPF32[$4_1 + 124 >> 2] = $10_1;
       HEAPF32[$4_1 + 120 >> 2] = -$10_1;
       $3_1 = HEAP32[$0_1 + 16 >> 2];
       $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 212 >> 2]]($3_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, $3_1 + Math_imul(HEAP32[$4_1 + 148 >> 2], 244) | 0, $4_1));
       $10_1 = Math_fround($10_1 * $10_1);
       $11_1 = $10_1 < $11_1 ? $11_1 : $10_1;
      }
      $2_1 = $2_1 - 1 | 0;
      $1_1 = $1_1 + 152 | 0;
      continue;
     };
    }
   } else {
    $5_1 = HEAP32[$0_1 + 56 >> 2] + Math_imul(HEAP32[HEAP32[$0_1 + 136 >> 2] + $2_1 >> 2], 152) | 0;
    if (HEAP32[$5_1 + 136 >> 2] > ($1_1 | 0)) {
     $4_1 = HEAP32[$0_1 + 16 >> 2];
     $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 212 >> 2]]($4_1 + Math_imul(HEAP32[$5_1 + 144 >> 2], 244) | 0, $4_1 + Math_imul(HEAP32[$5_1 + 148 >> 2], 244) | 0, $5_1));
     $10_1 = Math_fround($10_1 * $10_1);
     $11_1 = $10_1 < $11_1 ? $11_1 : $10_1;
    }
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
  return Math_fround($11_1);
 }
 
 function $691($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = $0_1;
  $0_1 = Math_imul(HEAP32[$0_1 + 232 >> 2], 1664525) + 1013904223 | 0;
  HEAP32[$2_1 + 232 >> 2] = $0_1;
  label$1 : {
   if ($1_1 >>> 0 > 65536) {
    break label$1
   }
   $0_1 = $0_1 >>> 16 ^ $0_1;
   if ($1_1 >>> 0 > 256) {
    break label$1
   }
   $0_1 = $0_1 >>> 8 ^ $0_1;
   if ($1_1 >>> 0 > 16) {
    break label$1
   }
   $0_1 = $0_1 >>> 4 ^ $0_1;
   if ($1_1 >>> 0 > 4) {
    break label$1
   }
   $0_1 = $0_1 >>> 2 ^ $0_1;
   if ($1_1 >>> 0 > 2) {
    break label$1
   }
   $0_1 = $0_1 >>> 1 ^ $0_1;
  }
  return ($0_1 >>> 0) % ($1_1 >>> 0) | 0;
 }
 
 function $692($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  HEAP32[$0_1 + 188 >> 2] = -1;
  $8_1 = HEAP32[$7_1 + 80 >> 2];
  if (($8_1 | 0) != HEAP32[$0_1 + 224 >> 2]) {
   HEAP32[$0_1 + 224 >> 2] = $8_1;
   HEAP32[$0_1 + 220 >> 2] = 70;
   HEAP32[$0_1 + 216 >> 2] = 71;
   HEAP32[$0_1 + 212 >> 2] = 72;
  }
  $8_1 = 0;
  HEAP32[$0_1 + 184 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 36 >> 2]]($0_1, $1_1, $2_1, $7_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 32 >> 2]]($0_1, $5_1, $6_1, $7_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $3_1, $4_1, $7_1);
  $1_1 = HEAP32[$0_1 + 68 >> 2];
  $2_1 = HEAP32[$0_1 + 28 >> 2];
  $3_1 = HEAP32[$0_1 + 48 >> 2];
  $693($0_1 + 124 | 0, $3_1);
  $693($0_1 + 104 | 0, $2_1 << (HEAP32[$7_1 + 80 >> 2] >>> 4 & 1));
  $693($0_1 + 144 | 0, $1_1);
  $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  $7_1 = 0;
  while (1) {
   if (($3_1 | 0) == ($7_1 | 0)) {
    $8_1 = 0;
    $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
    $7_1 = 0;
    while (1) {
     if (($2_1 | 0) == ($7_1 | 0)) {
      $8_1 = 0;
      $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
      $7_1 = 0;
      while (1) {
       if (($1_1 | 0) != ($7_1 | 0)) {
        HEAP32[HEAP32[$0_1 + 156 >> 2] + $8_1 >> 2] = $7_1;
        $8_1 = $8_1 + 4 | 0;
        $7_1 = $7_1 + 1 | 0;
        continue;
       }
       break;
      };
     } else {
      HEAP32[HEAP32[$0_1 + 116 >> 2] + $8_1 >> 2] = $7_1;
      $8_1 = $8_1 + 4 | 0;
      $7_1 = $7_1 + 1 | 0;
      continue;
     }
     break;
    };
   } else {
    HEAP32[HEAP32[$0_1 + 136 >> 2] + $8_1 >> 2] = $7_1;
    $8_1 = $8_1 + 4 | 0;
    $7_1 = $7_1 + 1 | 0;
    continue;
   }
   break;
  };
  return Math_fround(Math_fround(0.0));
 }
 
 function $693($0_1, $1_1) {
  if (HEAP32[$0_1 + 4 >> 2] < ($1_1 | 0)) {
   $217($0_1, $1_1)
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $694($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = Math_fround(0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 40 >> 2]]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1);
  $9_1 = HEAP32[$7_1 + 20 >> 2];
  $11_1 = HEAP32[$0_1 + 184 >> 2];
  $12_1 = ($9_1 | 0) > ($11_1 | 0) ? $9_1 : $11_1;
  $12_1 = ($12_1 | 0) > 0 ? $12_1 : 0;
  $9_1 = (($9_1 | 0) < ($11_1 | 0) ? $11_1 : $9_1) - 1 | 0;
  while (1) {
   label$2 : {
    if (($10_1 | 0) != ($12_1 | 0)) {
     $13_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1, $10_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1));
     HEAPF32[$0_1 + 228 >> 2] = $13_1;
     if (HEAPF32[$7_1 + 100 >> 2] >= $13_1 ? 0 : ($9_1 | 0) > ($10_1 | 0)) {
      break label$2
     }
     HEAP32[$0_1 + 240 >> 2] = -2;
     HEAP32[$0_1 + 256 >> 2] = $10_1 + 1;
     $3_1 = $0_1 + 252 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + 1;
     if (($2_1 | 0) >= 1) {
      HEAP32[$0_1 + 240 >> 2] = HEAP32[HEAP32[$1_1 >> 2] + 212 >> 2]
     }
     HEAPF64[$0_1 + 264 >> 3] = $13_1;
     HEAP32[$0_1 + 248 >> 2] = $4_1;
     HEAP32[$0_1 + 244 >> 2] = $2_1;
    }
    return Math_fround(Math_fround(0.0));
   }
   $10_1 = $10_1 + 1 | 0;
   continue;
  };
 }
 
 function $695($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = $3_1;
  if (($3_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $687($0_1, $3_1 ? $3_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
  $6_1 = Math_imul($3_1, 244);
  $4_1 = $6_1 + HEAP32[$0_1 + 12 >> 2] | 0;
  $5_1 = $4_1 + 8 | 0;
  $3_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  $3_1 = $1_1 + 24 | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  $5_1 = $4_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$4_1 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$4_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$4_1 + 36 >> 2] = $2_1;
  $3_1 = $1_1 + 40 | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  $5_1 = $4_1 + 40 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$4_1 + 48 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$4_1 + 52 >> 2] = $2_1;
  $3_1 = $1_1 + 56 | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  $5_1 = $4_1 + 56 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $3($4_1 - -64 | 0, $1_1 - -64 | 0, 180);
  return $6_1 + HEAP32[$0_1 + 12 >> 2] | 0;
 }
 
 function $696($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $1_1 = $1_1 ? HEAP32[$1_1 + 252 >> 2] << 30 >> 31 & $1_1 : 0;
  HEAP32[$0_1 + 64 >> 2] = 0;
  HEAP32[$0_1 + 68 >> 2] = 0;
  HEAP32[$0_1 + 144 >> 2] = 0;
  HEAP32[$0_1 + 148 >> 2] = 0;
  $3_1 = $0_1 + 88 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 80 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 72 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 152 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 160 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 168 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  label$3 : {
   if ($1_1) {
    $3_1 = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $3_1;
    $4_1 = $1_1 + 12 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $0_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $4_1 = $1_1 + 28 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $0_1 + 24 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $3_1 = $1_1 + 20 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$0_1 + 16 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$0_1 + 20 >> 2] = $4_1;
    $4_1 = $1_1 + 44 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $0_1 + 40 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $3_1 = $1_1 + 36 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$0_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$0_1 + 36 >> 2] = $4_1;
    $3_1 = $1_1 + 52 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$0_1 + 48 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$0_1 + 52 >> 2] = $4_1;
    $4_1 = $1_1 + 60 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $0_1 + 56 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $8_1 = HEAPF32[$1_1 + 416 >> 2];
    $3_1 = $1_1 + 420 | 0;
    $9_1 = HEAPF32[$3_1 >> 2];
    $10_1 = HEAPF32[$1_1 + 412 >> 2];
    $6_1 = HEAPF32[$1_1 + 408 >> 2];
    HEAP32[$0_1 + 140 >> 2] = 0;
    HEAPF32[$0_1 + 136 >> 2] = $6_1 * $9_1;
    HEAPF32[$0_1 + 132 >> 2] = $6_1 * $8_1;
    HEAPF32[$0_1 + 128 >> 2] = $6_1 * $10_1;
    HEAP32[$0_1 + 240 >> 2] = $1_1;
    $5_1 = $1_1 + 616 | 0;
    $11_1 = HEAP32[$5_1 + 4 >> 2];
    $4_1 = $0_1 + 104 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $11_1;
    $4_1 = HEAP32[$1_1 + 612 >> 2];
    HEAP32[$0_1 + 96 >> 2] = HEAP32[$1_1 + 608 >> 2];
    HEAP32[$0_1 + 100 >> 2] = $4_1;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    $4_1 = $0_1 + 120 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $3_1 = HEAP32[$1_1 + 416 >> 2];
    HEAP32[$0_1 + 112 >> 2] = HEAP32[$1_1 + 412 >> 2];
    HEAP32[$0_1 + 116 >> 2] = $3_1;
    $4_1 = $1_1 + 384 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $0_1 + 184 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $3_1 = HEAP32[$1_1 + 380 >> 2];
    HEAP32[$0_1 + 176 >> 2] = HEAP32[$1_1 + 376 >> 2];
    HEAP32[$0_1 + 180 >> 2] = $3_1;
    $3_1 = HEAP32[$1_1 + 396 >> 2];
    HEAP32[$0_1 + 192 >> 2] = HEAP32[$1_1 + 392 >> 2];
    HEAP32[$0_1 + 196 >> 2] = $3_1;
    $4_1 = $1_1 + 400 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $0_1 + 200 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $8_1 = HEAPF32[$1_1 + 480 >> 2];
    $9_1 = HEAPF32[$1_1 + 484 >> 2];
    $10_1 = HEAPF32[$1_1 + 476 >> 2];
    $6_1 = HEAPF32[$1_1 + 408 >> 2];
    HEAP32[$0_1 + 220 >> 2] = 0;
    HEAPF32[$0_1 + 216 >> 2] = Math_fround($6_1 * $9_1) * $2_1;
    HEAPF32[$0_1 + 212 >> 2] = Math_fround($6_1 * $8_1) * $2_1;
    HEAPF32[$0_1 + 208 >> 2] = Math_fround($6_1 * $10_1) * $2_1;
    $145($7_1, HEAPF32[$1_1 + 492 >> 2], HEAPF32[$1_1 + 496 >> 2], HEAPF32[$1_1 + 500 >> 2], $1_1 + 328 | 0);
    HEAPF32[$0_1 + 228 >> 2] = HEAPF32[$7_1 + 4 >> 2] * $2_1;
    HEAPF32[$0_1 + 224 >> 2] = HEAPF32[$7_1 >> 2] * $2_1;
    $2_1 = Math_fround(HEAPF32[$7_1 + 8 >> 2] * $2_1);
    break label$3;
   }
   HEAP32[$0_1 + 4 >> 2] = 0;
   HEAP32[$0_1 + 8 >> 2] = 0;
   HEAP32[$0_1 >> 2] = 1065353216;
   HEAP32[$0_1 + 240 >> 2] = 0;
   HEAP32[$0_1 + 128 >> 2] = 0;
   HEAP32[$0_1 + 132 >> 2] = 0;
   HEAP32[$0_1 + 112 >> 2] = 1065353216;
   HEAP32[$0_1 + 116 >> 2] = 1065353216;
   HEAP32[$0_1 + 96 >> 2] = 1065353216;
   HEAP32[$0_1 + 100 >> 2] = 1065353216;
   $1_1 = $0_1 + 12 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 24 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$0_1 + 20 >> 2] = 1065353216;
   $1_1 = $0_1 + 32 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 44 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$0_1 + 40 >> 2] = 1065353216;
   $1_1 = $0_1 + 52 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$0_1 + 60 >> 2] = 0;
   $1_1 = $0_1 + 136 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 120 | 0;
   HEAP32[$1_1 >> 2] = 1065353216;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 104 | 0;
   HEAP32[$1_1 >> 2] = 1065353216;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $2($0_1 + 176 | 0, 0, 56);
   $2_1 = Math_fround(0.0);
  }
  HEAP32[$0_1 + 236 >> 2] = 0;
  HEAPF32[$0_1 + 232 >> 2] = $2_1;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $697($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $4_1 = $120(Math_imul($1_1, 152))
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     $3($4_1 + $3_1 | 0, HEAP32[$0_1 + 12 >> 2] + $3_1 | 0, 152);
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 + 152 | 0;
     continue;
    }
    break;
   };
   $163($0_1);
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $698($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = $3_1 + $6_1;
  HEAPF32[$0_1 + 4 >> 2] = $2_1 + $5_1;
  HEAPF32[$0_1 >> 2] = $1_1 + $4_1;
 }
 
 function $699($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1, $1_1, $2_1));
  label$1 : {
   label$2 : {
    label$3 : {
     switch (HEAP32[$0_1 + 108 >> 2]) {
     default:
      $5_1 = HEAPF32[$3_1 + 8 >> 2];
      $4_1 = HEAPF32[$3_1 + 4 >> 2];
      $6_1 = HEAPF32[$3_1 >> 2];
      break label$1;
     case 0:
      $6_1 = Math_fround($4_1 - HEAPF32[$0_1 + 52 >> 2]);
      $5_1 = Math_fround(Math_fround($2_1 | 0) - Math_fround(HEAPF32[$0_1 + 88 >> 2] * Math_fround(.5)));
      $4_1 = Math_fround(Math_fround($1_1 | 0) - Math_fround(HEAPF32[$0_1 + 84 >> 2] * Math_fround(.5)));
      break label$2;
     case 1:
      $5_1 = Math_fround(Math_fround($2_1 | 0) - Math_fround(HEAPF32[$0_1 + 88 >> 2] * Math_fround(.5)));
      $6_1 = Math_fround(Math_fround($1_1 | 0) - Math_fround(HEAPF32[$0_1 + 84 >> 2] * Math_fround(.5)));
      $4_1 = Math_fround($4_1 - HEAPF32[$0_1 + 56 >> 2]);
      break label$2;
     case 2:
      break label$3;
     };
    }
    $5_1 = Math_fround($4_1 - HEAPF32[$0_1 + 60 >> 2]);
    $6_1 = Math_fround(Math_fround($1_1 | 0) - Math_fround(HEAPF32[$0_1 + 84 >> 2] * Math_fround(.5)));
    $4_1 = Math_fround(Math_fround($2_1 | 0) - Math_fround(HEAPF32[$0_1 + 88 >> 2] * Math_fround(.5)));
   }
   HEAP32[$3_1 + 12 >> 2] = 0;
   HEAPF32[$3_1 + 8 >> 2] = $5_1;
   HEAPF32[$3_1 + 4 >> 2] = $4_1;
   HEAPF32[$3_1 >> 2] = $6_1;
  }
  HEAPF32[$3_1 >> 2] = HEAPF32[$0_1 + 112 >> 2] * $6_1;
  HEAPF32[$3_1 + 4 >> 2] = HEAPF32[$0_1 + 116 >> 2] * $4_1;
  HEAPF32[$3_1 + 8 >> 2] = HEAPF32[$0_1 + 120 >> 2] * $5_1;
 }
 
 function $700($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1_1 | $2_1) < 0 | HEAP32[$0_1 + 8 >> 2] <= ($1_1 | 0) | HEAP32[$0_1 + 12 >> 2] <= ($2_1 | 0)) {
    break label$1
   }
   if (!(!HEAPU8[$0_1 + 5 | 0] | !($1_1 + $2_1 & 1) ? !HEAPU8[$0_1 + 4 | 0] : 0)) {
    $699(HEAP32[$0_1 >> 2], $1_1, $2_1, $3_1);
    $4_1 = $1_1 + 1 | 0;
    $6_1 = $3_1 + 16 | 0;
    $699(HEAP32[$0_1 >> 2], $4_1, $2_1, $6_1);
    $5_1 = $2_1 + 1 | 0;
    $7_1 = $3_1 + 32 | 0;
    $699(HEAP32[$0_1 >> 2], $4_1, $5_1, $7_1);
    $8_1 = HEAP32[$0_1 + 16 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 8 >> 2]]($8_1, $3_1, $1_1, $2_1);
    $699(HEAP32[$0_1 >> 2], $1_1, $2_1, $3_1);
    $699(HEAP32[$0_1 >> 2], $4_1, $5_1, $6_1);
    $699(HEAP32[$0_1 >> 2], $1_1, $5_1, $7_1);
    $0_1 = HEAP32[$0_1 + 16 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $3_1, $1_1, $2_1);
    break label$1;
   }
   $699(HEAP32[$0_1 >> 2], $1_1, $2_1, $3_1);
   $4_1 = $2_1 + 1 | 0;
   $6_1 = $3_1 + 16 | 0;
   $699(HEAP32[$0_1 >> 2], $1_1, $4_1, $6_1);
   $5_1 = $1_1 + 1 | 0;
   $7_1 = $3_1 + 32 | 0;
   $699(HEAP32[$0_1 >> 2], $5_1, $2_1, $7_1);
   $8_1 = HEAP32[$0_1 + 16 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 8 >> 2]]($8_1, $3_1, $1_1, $2_1);
   $699(HEAP32[$0_1 >> 2], $5_1, $2_1, $3_1);
   $699(HEAP32[$0_1 >> 2], $1_1, $4_1, $6_1);
   $699(HEAP32[$0_1 >> 2], $5_1, $4_1, $7_1);
   $0_1 = HEAP32[$0_1 + 16 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $3_1, $1_1, $2_1);
  }
  global$0 = $3_1 + 48 | 0;
 }
 
 function $701($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = Math_fround(0), $16_1 = 0;
  if (!(+$702(HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2], HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2]) < .0001)) {
   $8_1 = HEAP32[$3_1 >> 2] << 2;
   $9_1 = HEAPF32[$8_1 + $1_1 >> 2];
   $16_1 = $1_1;
   $1_1 = HEAP32[$3_1 + 8 >> 2] << 2;
   $10_1 = HEAPF32[$16_1 + $1_1 >> 2];
   $4_1 = Math_fround(HEAPF32[$2_1 + $8_1 >> 2] - $9_1);
   $5_1 = Math_fround(HEAPF32[$1_1 + $2_1 >> 2] - $10_1);
   $11_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1))));
   if (!(+$11_1 < .0001)) {
    $7_1 = Math_fround($5_1 / $11_1);
    $6_1 = Math_fround($4_1 / $11_1);
   }
   $12_1 = $6_1 > Math_fround(0.0) ? 1 : $6_1 < Math_fround(0.0) ? -1 : 0;
   $13_1 = $12_1 ? Math_fround(Math_fround(1.0) / Math_fround(Math_abs($6_1))) : Math_fround(9999999.0);
   $14_1 = $7_1 > Math_fround(0.0) ? 1 : $7_1 < Math_fround(0.0) ? -1 : 0;
   $15_1 = $14_1 ? Math_fround(Math_fround(1.0) / Math_fround(Math_abs($7_1))) : Math_fround(9999999.0);
   $4_1 = Math_fround(9999999.0);
   $5_1 = Math_fround(9999999.0);
   label$3 : {
    if (!$12_1) {
     break label$3
    }
    $5_1 = Math_fround(Math_fround(Math_fround(Math_ceil($9_1)) - $9_1) * $13_1);
    if ($6_1 > Math_fround(0.0)) {
     break label$3
    }
    $5_1 = Math_fround(Math_fround($9_1 - Math_fround(Math_floor($9_1))) * $13_1);
   }
   label$4 : {
    if (!$14_1) {
     break label$4
    }
    if ($7_1 > Math_fround(0.0)) {
     $4_1 = Math_fround(Math_fround(Math_fround(Math_ceil($10_1)) - $10_1) * $15_1);
     break label$4;
    }
    $4_1 = Math_fround(Math_fround($10_1 - Math_fround(Math_floor($10_1))) * $15_1);
   }
   $1_1 = $4_1 == Math_fround(0.0);
   $2_1 = $5_1 == Math_fround(0.0);
   $8_1 = ($14_1 | 0) == -1;
   $6_1 = Math_fround(Math_floor($10_1));
   label$6 : {
    if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
     $3_1 = ~~$6_1;
     break label$6;
    }
    $3_1 = -2147483648;
   }
   $16_1 = $2_1 & ($12_1 | 0) == -1;
   $7_1 = $1_1 ? Math_fround($15_1 + $4_1) : $4_1;
   $6_1 = $2_1 ? Math_fround($13_1 + $5_1) : $5_1;
   $1_1 = $3_1 - ($1_1 & $8_1) | 0;
   $4_1 = Math_fround(Math_floor($9_1));
   label$8 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$4_1;
     break label$8;
    }
    $2_1 = -2147483648;
   }
   $2_1 = $2_1 - $16_1 | 0;
   while (1) {
    $703($0_1, $2_1, $1_1);
    label$11 : {
     if ($6_1 < $7_1) {
      $4_1 = $6_1;
      $6_1 = Math_fround($13_1 + $4_1);
      $8_1 = $2_1 + $12_1 | 0;
      break label$11;
     }
     $4_1 = $7_1;
     $7_1 = Math_fround($15_1 + $4_1);
     $8_1 = $2_1;
     $1_1 = $1_1 + $14_1 | 0;
    }
    $2_1 = $8_1;
    if (!($4_1 > $11_1)) {
     continue
    }
    break;
   };
  }
 }
 
 function $702($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  return $137(Math_fround($3_1 - $0_1), Math_fround($4_1 - $1_1), Math_fround($5_1 - $2_1));
 }
 
 function $703($0_1, $1_1, $2_1) {
  $700($0_1, $1_1, $2_1);
 }
 
 function $704($0_1, $1_1) {
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = Math_fround(0);
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $13_1 = HEAP32[$1_1 + 12 >> 2];
  $10_1 = HEAP32[$1_1 + 8 >> 2];
  label$1 : {
   if (($13_1 | $10_1) < 0) {
    break label$1
   }
   $5_1 = HEAP32[$0_1 + 4 >> 2];
   if (($5_1 | 0) <= ($10_1 | 0) | ($13_1 | 0) >= HEAP32[$0_1 + 8 >> 2]) {
    break label$1
   }
   $3_1 = HEAPF32[$1_1 + 24 >> 2];
   label$2 : {
    if (+$3_1 > .0001) {
     $5_1 = HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2] + ($10_1 + Math_imul($5_1, $13_1) << 3) | 0;
     $17_1 = HEAPF32[$5_1 + 4 >> 2];
     $18_1 = HEAPF32[$5_1 >> 2];
     HEAP32[$2_1 + 28 >> 2] = 0;
     HEAP32[$2_1 + 12 >> 2] = 0;
     $19_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 28 >> 2] * Math_fround(HEAP32[$0_1 + 12 >> 2])) / $3_1);
     $3_1 = Math_fround(HEAPF32[$1_1 + 20 >> 2] * $19_1);
     $7_1 = HEAPF32[$0_1 + 56 >> 2];
     $9_1 = HEAPF32[$0_1 + 24 >> 2];
     $4_1 = Math_fround(Math_fround($3_1 * $7_1) + $9_1);
     HEAPF32[$2_1 + 24 >> 2] = $4_1;
     $14_1 = HEAPF32[$0_1 + 52 >> 2];
     $11_1 = HEAPF32[$0_1 + 20 >> 2];
     $6_1 = Math_fround(Math_fround($3_1 * $14_1) + $11_1);
     HEAPF32[$2_1 + 20 >> 2] = $6_1;
     $12_1 = HEAPF32[$0_1 + 48 >> 2];
     $8_1 = HEAPF32[$0_1 + 16 >> 2];
     $3_1 = Math_fround(Math_fround($12_1 * $3_1) + $8_1);
     HEAPF32[$2_1 + 16 >> 2] = $3_1;
     $23_1 = $7_1;
     $7_1 = Math_fround(HEAPF32[$1_1 + 16 >> 2] * $19_1);
     $9_1 = Math_fround($9_1 + Math_fround($23_1 * $7_1));
     HEAPF32[$2_1 + 8 >> 2] = $9_1;
     $11_1 = Math_fround($11_1 + Math_fround($7_1 * $14_1));
     HEAPF32[$2_1 + 4 >> 2] = $11_1;
     $7_1 = Math_fround($8_1 + Math_fround($12_1 * $7_1));
     HEAPF32[$2_1 >> 2] = $7_1;
     if (HEAPF32[(HEAP32[HEAP32[$0_1 + 64 >> 2] + 4 >> 2] << 2) + $2_1 >> 2] > $17_1 ? $6_1 > $17_1 : 0) {
      break label$1
     }
     if (!($6_1 < $18_1) | !(HEAPF32[(HEAP32[HEAP32[$0_1 + 64 >> 2] + 4 >> 2] << 2) + $2_1 >> 2] < $18_1)) {
      break label$2
     }
     break label$1;
    }
    $5_1 = $0_1 + 40 | 0;
    $1_1 = HEAP32[$5_1 + 4 >> 2];
    $13_1 = $2_1 + 8 | 0;
    $10_1 = $13_1;
    HEAP32[$10_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $1_1;
    $5_1 = $0_1 + 24 | 0;
    $1_1 = HEAP32[$5_1 + 4 >> 2];
    $10_1 = $2_1 + 24 | 0;
    HEAP32[$10_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$0_1 + 36 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$0_1 + 32 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$0_1 + 20 >> 2];
    HEAP32[$2_1 + 16 >> 2] = HEAP32[$0_1 + 16 >> 2];
    HEAP32[$2_1 + 20 >> 2] = $1_1;
    $9_1 = HEAPF32[$13_1 >> 2];
    $4_1 = HEAPF32[$10_1 >> 2];
    $11_1 = HEAPF32[$2_1 + 4 >> 2];
    $7_1 = HEAPF32[$2_1 >> 2];
    $6_1 = HEAPF32[$2_1 + 20 >> 2];
    $3_1 = HEAPF32[$2_1 + 16 >> 2];
   }
   $1_1 = HEAP32[$0_1 + 64 >> 2];
   if (+$702($3_1, $6_1, $4_1, $7_1, $11_1, $9_1) < .0001) {
    break label$1
   }
   $6_1 = Math_fround(0.0);
   $4_1 = Math_fround(0.0);
   $7_1 = Math_fround(9999999.0);
   $5_1 = HEAP32[$1_1 >> 2] << 2;
   $9_1 = HEAPF32[$5_1 + ($2_1 + 16 | 0) >> 2];
   $1_1 = HEAP32[$1_1 + 8 >> 2] << 2;
   $12_1 = HEAPF32[$1_1 + ($2_1 + 16 | 0) >> 2];
   $8_1 = Math_fround(HEAPF32[$2_1 + $5_1 >> 2] - $9_1);
   $3_1 = Math_fround(HEAPF32[$1_1 + $2_1 >> 2] - $12_1);
   $11_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($3_1 * $3_1))));
   if (!(+$11_1 < .0001)) {
    $6_1 = Math_fround($3_1 / $11_1);
    $4_1 = Math_fround($8_1 / $11_1);
   }
   $15_1 = $4_1 > Math_fround(0.0) ? 1 : $4_1 < Math_fround(0.0) ? -1 : 0;
   if ($15_1) {
    $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_abs($4_1)))
   }
   $16_1 = $6_1 > Math_fround(0.0) ? 1 : $6_1 < Math_fround(0.0) ? -1 : 0;
   $14_1 = $16_1 ? Math_fround(Math_fround(1.0) / Math_fround(Math_abs($6_1))) : Math_fround(9999999.0);
   $3_1 = Math_fround(9999999.0);
   $8_1 = Math_fround(9999999.0);
   label$7 : {
    if (!$15_1) {
     break label$7
    }
    $8_1 = Math_fround(Math_fround(Math_fround(Math_ceil($9_1)) - $9_1) * $7_1);
    if ($4_1 > Math_fround(0.0)) {
     break label$7
    }
    $8_1 = Math_fround(Math_fround($9_1 - Math_fround(Math_floor($9_1))) * $7_1);
   }
   label$8 : {
    if (!$16_1) {
     break label$8
    }
    if ($6_1 > Math_fround(0.0)) {
     $3_1 = Math_fround(Math_fround(Math_fround(Math_ceil($12_1)) - $12_1) * $14_1);
     break label$8;
    }
    $3_1 = Math_fround(Math_fround($12_1 - Math_fround(Math_floor($12_1))) * $14_1);
   }
   $20_1 = $3_1 == Math_fround(0.0);
   $21_1 = $8_1 == Math_fround(0.0);
   $5_1 = ($16_1 | 0) == -1;
   $4_1 = Math_fround(Math_floor($12_1));
   label$10 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
     $1_1 = ~~$4_1;
     break label$10;
    }
    $1_1 = -2147483648;
   }
   $6_1 = Math_fround($14_1 + $3_1);
   $12_1 = Math_fround($7_1 + $8_1);
   $13_1 = $5_1 & $20_1;
   $10_1 = ($15_1 | 0) == -1 & $21_1;
   $4_1 = Math_fround(Math_floor($9_1));
   label$12 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
     $22_1 = ~~$4_1;
     break label$12;
    }
    $22_1 = -2147483648;
   }
   $5_1 = $0_1 + 68 | 0;
   $6_1 = $20_1 ? $6_1 : $3_1;
   $4_1 = $21_1 ? $12_1 : $8_1;
   $1_1 = $1_1 - $13_1 | 0;
   $0_1 = $22_1 - $10_1 | 0;
   while (1) {
    $703($5_1, $0_1, $1_1);
    label$15 : {
     if ($4_1 < $6_1) {
      $0_1 = $0_1 + $15_1 | 0;
      $3_1 = $4_1;
      $4_1 = Math_fround($7_1 + $3_1);
      break label$15;
     }
     $3_1 = $6_1;
     $6_1 = Math_fround($14_1 + $3_1);
     $1_1 = $1_1 + $16_1 | 0;
    }
    if (!($3_1 > $11_1)) {
     continue
    }
    break;
   };
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $705($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = 0, $29_1 = 0;
  $6_1 = global$0 - 320 | 0;
  global$0 = $6_1;
  $654($1_1, $2_1, Math_fround(1.0), $6_1 + 304 | 0, $6_1 + 288 | 0);
  $654($3_1, $4_1, Math_fround(1.0), $6_1 + 272 | 0, $6_1 + 256 | 0);
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  $14_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1));
  $2_1 = HEAP32[$0_1 + 16 >> 2];
  if ($2_1) {
   $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1))
  }
  $4_1 = 0;
  $15_1 = Math_fround(Math_fround($14_1 * $137(HEAPF32[$6_1 + 288 >> 2], HEAPF32[$6_1 + 292 >> 2], HEAPF32[$6_1 + 296 >> 2])) + Math_fround($8_1 * $137(HEAPF32[$6_1 + 256 >> 2], HEAPF32[$6_1 + 260 >> 2], HEAPF32[$6_1 + 264 >> 2])));
  $20_1 = HEAPF32[$6_1 + 272 >> 2];
  $21_1 = HEAPF32[$6_1 + 304 >> 2];
  $16_1 = Math_fround($20_1 - $21_1);
  $22_1 = HEAPF32[$6_1 + 276 >> 2];
  $23_1 = HEAPF32[$6_1 + 308 >> 2];
  $17_1 = Math_fround($22_1 - $23_1);
  $24_1 = HEAPF32[$6_1 + 280 >> 2];
  $25_1 = HEAPF32[$6_1 + 312 >> 2];
  $18_1 = Math_fround($24_1 - $25_1);
  label$2 : {
   if (Math_fround($15_1 + $137($16_1, $17_1, $18_1)) == Math_fround(0.0)) {
    break label$2
   }
   HEAP8[$6_1 + 232 | 0] = 0;
   HEAP32[$6_1 + 228 >> 2] = 1566444395;
   HEAP32[$6_1 + 192 >> 2] = 13780;
   $706($0_1, $1_1, $3_1, $6_1 + 192 | 0);
   $7_1 = $6_1 + 220 | 0;
   $10_1 = HEAP32[$7_1 + 4 >> 2];
   $2_1 = $6_1 + 248 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $10_1;
   $2_1 = HEAP32[$6_1 + 216 >> 2];
   HEAP32[$6_1 + 240 >> 2] = HEAP32[$6_1 + 212 >> 2];
   HEAP32[$6_1 + 244 >> 2] = $2_1;
   if (!HEAPU8[$6_1 + 232 | 0]) {
    break label$2
   }
   $11_1 = HEAPF32[$6_1 + 196 >> 2];
   $12_1 = HEAPF32[$6_1 + 200 >> 2];
   $13_1 = HEAPF32[$6_1 + 204 >> 2];
   if (Math_fround($15_1 + Math_fround(Math_fround(Math_fround($16_1 * $11_1) + Math_fround($17_1 * $12_1)) + Math_fround($18_1 * $13_1))) <= Math_fround(1.1920928955078125e-07)) {
    break label$2
   }
   $19_1 = Math_fround(HEAPF32[$6_1 + 228 >> 2] + HEAPF32[$5_1 + 172 >> 2]);
   $10_1 = $6_1 + 20 | 0;
   $28_1 = $6_1 + 176 | 0;
   $26_1 = HEAPF32[$6_1 + 208 >> 2];
   $8_1 = Math_fround(0.0);
   $2_1 = 0;
   while (1) {
    label$4 : {
     label$5 : {
      if ($19_1 > Math_fround(1.0000000474974513e-03)) {
       $4_1 = HEAP32[$5_1 + 168 >> 2];
       if ($4_1) {
        HEAP32[$6_1 + 136 >> 2] = 1065353216;
        HEAP32[$6_1 + 140 >> 2] = 0;
        HEAP32[$6_1 + 128 >> 2] = 1065353216;
        HEAP32[$6_1 + 132 >> 2] = 1065353216;
        FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 28 >> 2]]($4_1, $6_1 + 240 | 0, Math_fround(.20000000298023224), $6_1 + 128 | 0);
       }
       $4_1 = 0;
       $27_1 = Math_fround($15_1 + Math_fround(Math_fround(Math_fround($16_1 * $11_1) + Math_fround($17_1 * $12_1)) + Math_fround($18_1 * $13_1)));
       if ($27_1 <= Math_fround(1.1920928955078125e-07)) {
        break label$2
       }
       $14_1 = $8_1;
       $8_1 = Math_fround($8_1 + Math_fround($19_1 / $27_1));
       if ($8_1 <= $14_1 | $8_1 > Math_fround(1.0) | $8_1 < Math_fround(0.0)) {
        break label$2
       }
       $650($1_1, $21_1, $23_1, $25_1, $6_1 + 288 | 0, $8_1, $6_1 + 128 | 0);
       $650($3_1, $20_1, $22_1, $24_1, $6_1 + 256 | 0, $8_1, $6_1 - -64 | 0);
       $529($6_1, $6_1 - -64 | 0, $6_1 + 128 | 0);
       $7_1 = HEAP32[$5_1 + 168 >> 2];
       if ($7_1) {
        HEAP32[$6_1 + 8 >> 2] = 0;
        HEAP32[$6_1 + 12 >> 2] = 0;
        HEAP32[$6_1 >> 2] = 1065353216;
        HEAP32[$6_1 + 4 >> 2] = 0;
        FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 28 >> 2]]($7_1, $28_1, Math_fround(.20000000298023224), $6_1);
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] >> 2]]($5_1, $8_1);
       HEAP8[$6_1 + 40 | 0] = 0;
       HEAP32[$6_1 + 36 >> 2] = 1566444395;
       HEAP32[$6_1 >> 2] = 13780;
       $706($0_1, $6_1 + 128 | 0, $6_1 - -64 | 0, $6_1);
       if (!HEAPU8[$6_1 + 40 | 0]) {
        break label$5
       }
       $9_1 = $10_1 + 8 | 0;
       $29_1 = HEAP32[$9_1 + 4 >> 2];
       $7_1 = $6_1 + 248 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $29_1;
       $7_1 = HEAP32[$10_1 + 4 >> 2];
       HEAP32[$6_1 + 240 >> 2] = HEAP32[$10_1 >> 2];
       HEAP32[$6_1 + 244 >> 2] = $7_1;
       $9_1 = 1;
       $7_1 = $2_1 + 1 | 0;
       $19_1 = Math_fround(HEAPF32[$6_1 + 36 >> 2] + HEAPF32[$5_1 + 172 >> 2]);
       $26_1 = HEAPF32[$6_1 + 16 >> 2];
       $13_1 = HEAPF32[$6_1 + 12 >> 2];
       $12_1 = HEAPF32[$6_1 + 8 >> 2];
       $11_1 = HEAPF32[$6_1 + 4 >> 2];
       if (($2_1 | 0) > 63) {
        FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 8 >> 2]]($5_1, -2, $7_1);
        $9_1 = 0;
       }
       $2_1 = $7_1;
       break label$4;
      }
      HEAPF32[$5_1 + 132 >> 2] = $11_1;
      HEAPF32[$5_1 + 164 >> 2] = $8_1;
      $0_1 = HEAP32[$6_1 + 244 >> 2];
      HEAP32[$5_1 + 148 >> 2] = HEAP32[$6_1 + 240 >> 2];
      HEAP32[$5_1 + 152 >> 2] = $0_1;
      HEAPF32[$5_1 + 144 >> 2] = $26_1;
      HEAPF32[$5_1 + 140 >> 2] = $13_1;
      HEAPF32[$5_1 + 136 >> 2] = $12_1;
      $1_1 = $6_1 + 248 | 0;
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      $0_1 = $5_1 + 156 | 0;
      HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$0_1 + 4 >> 2] = $2_1;
      $4_1 = 1;
      break label$2;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 8 >> 2]]($5_1, -1, $2_1);
     $9_1 = 0;
    }
    if ($9_1) {
     continue
    }
    break;
   };
  }
  global$0 = $6_1 + 320 | 0;
  return $4_1 | 0;
 }
 
 function $706($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 448 | 0;
  global$0 = $4_1;
  label$1 : {
   if (HEAP32[$0_1 + 16 >> 2]) {
    $409(HEAP32[$0_1 + 4 >> 2]);
    $7_1 = HEAP32[$0_1 + 12 >> 2];
    $5_1 = HEAP32[$7_1 + 4 >> 2];
    $6_1 = HEAP32[$0_1 + 16 >> 2];
    $9_1 = HEAP32[$6_1 + 4 >> 2];
    $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 48 >> 2]]($7_1));
    $8_1 = HEAP32[$0_1 + 16 >> 2];
    $12_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 48 >> 2]]($8_1));
    $8_1 = $4_1 + 380 | 0;
    HEAP32[$8_1 >> 2] = 0;
    HEAP32[$8_1 + 4 >> 2] = 0;
    HEAP32[$4_1 + 440 >> 2] = 1;
    HEAP32[$4_1 + 444 >> 2] = 1;
    HEAP32[$4_1 + 428 >> 2] = -1;
    HEAP8[$4_1 + 420 | 0] = 0;
    HEAPF32[$4_1 + 416 >> 2] = $12_1;
    HEAPF32[$4_1 + 412 >> 2] = $10_1;
    HEAP32[$4_1 + 408 >> 2] = $9_1;
    HEAP32[$4_1 + 404 >> 2] = $5_1;
    HEAP32[$4_1 + 400 >> 2] = $6_1;
    HEAP32[$4_1 + 396 >> 2] = $7_1;
    HEAP32[$4_1 + 372 >> 2] = 0;
    HEAP32[$4_1 + 376 >> 2] = 1065353216;
    HEAP32[$4_1 + 368 >> 2] = 13624;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = __wasm_rotl_i64(HEAP32[$0_1 + 4 >> 2], HEAP32[$0_1 + 8 >> 2])), HEAP32[wasm2js_i32$0 + 388 >> 2] = wasm2js_i32$1;
    HEAP32[$4_1 + 392 >> 2] = i64toi32_i32$HIGH_BITS;
    $7_1 = $1_1 + 8 | 0;
    $5_1 = HEAP32[$7_1 + 4 >> 2];
    $0_1 = $4_1 + 240 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $5_1;
    $7_1 = $1_1 + 24 | 0;
    $5_1 = HEAP32[$7_1 + 4 >> 2];
    $0_1 = $4_1 + 256 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $5_1;
    $7_1 = $1_1 + 40 | 0;
    $5_1 = HEAP32[$7_1 + 4 >> 2];
    $0_1 = $4_1 + 272 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $5_1;
    $7_1 = $1_1 + 56 | 0;
    $5_1 = HEAP32[$7_1 + 4 >> 2];
    $0_1 = $4_1 + 288 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $5_1;
    $7_1 = $2_1 + 8 | 0;
    $5_1 = HEAP32[$7_1 + 4 >> 2];
    $0_1 = $4_1 + 304 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $5_1;
    HEAP32[$4_1 + 360 >> 2] = 1566444395;
    $0_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$4_1 + 232 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$4_1 + 236 >> 2] = $0_1;
    $0_1 = HEAP32[$1_1 + 20 >> 2];
    HEAP32[$4_1 + 248 >> 2] = HEAP32[$1_1 + 16 >> 2];
    HEAP32[$4_1 + 252 >> 2] = $0_1;
    $0_1 = HEAP32[$1_1 + 36 >> 2];
    HEAP32[$4_1 + 264 >> 2] = HEAP32[$1_1 + 32 >> 2];
    HEAP32[$4_1 + 268 >> 2] = $0_1;
    $0_1 = HEAP32[$1_1 + 52 >> 2];
    HEAP32[$4_1 + 280 >> 2] = HEAP32[$1_1 + 48 >> 2];
    HEAP32[$4_1 + 284 >> 2] = $0_1;
    $0_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$4_1 + 296 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 300 >> 2] = $0_1;
    $1_1 = $2_1 + 24 | 0;
    $7_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $4_1 + 320 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $7_1;
    $1_1 = HEAP32[$2_1 + 20 >> 2];
    $0_1 = $4_1 + 312 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$2_1 + 36 >> 2];
    $0_1 = $4_1 + 328 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $1_1;
    $1_1 = $2_1 + 40 | 0;
    $7_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $4_1 + 336 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $7_1;
    $1_1 = HEAP32[$2_1 + 52 >> 2];
    $0_1 = $4_1 + 344 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$2_1 + 48 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $1_1;
    $1_1 = $2_1 + 56 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $4_1 + 352 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    $415($4_1 + 368 | 0, $4_1 + 232 | 0, $3_1, 0, 0);
    break label$1;
   }
   $7_1 = HEAP32[$0_1 + 12 >> 2];
   $0_1 = HEAP32[$0_1 + 20 >> 2];
   $6_1 = $1_1 + 8 | 0;
   $9_1 = HEAP32[$6_1 + 4 >> 2];
   $5_1 = $4_1 + 240 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $9_1;
   $6_1 = $1_1 + 24 | 0;
   $9_1 = HEAP32[$6_1 + 4 >> 2];
   $5_1 = $4_1 + 256 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $9_1;
   $6_1 = $1_1 + 40 | 0;
   $9_1 = HEAP32[$6_1 + 4 >> 2];
   $5_1 = $4_1 + 272 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $9_1;
   $6_1 = $1_1 + 56 | 0;
   $9_1 = HEAP32[$6_1 + 4 >> 2];
   $5_1 = $4_1 + 288 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $9_1;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$4_1 + 232 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 236 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 20 >> 2];
   HEAP32[$4_1 + 248 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$4_1 + 252 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 36 >> 2];
   HEAP32[$4_1 + 264 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$4_1 + 268 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$4_1 + 280 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$4_1 + 284 >> 2] = $5_1;
   $463($4_1 + 104 | 0, $2_1);
   $464($4_1 + 168 | 0, $4_1 + 104 | 0, $4_1 + 232 | 0);
   $1_1 = $4_1 + 176 | 0;
   $9_1 = HEAP32[$1_1 + 4 >> 2];
   $5_1 = $4_1 + 376 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $9_1;
   $5_1 = $4_1 + 192 | 0;
   $8_1 = HEAP32[$5_1 + 4 >> 2];
   $6_1 = $4_1 + 392 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $8_1;
   $6_1 = $4_1 + 208 | 0;
   $11_1 = HEAP32[$6_1 + 4 >> 2];
   $9_1 = $4_1 + 408 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $11_1;
   $9_1 = $4_1 + 224 | 0;
   $11_1 = HEAP32[$9_1 + 4 >> 2];
   $8_1 = $4_1 + 424 | 0;
   HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $11_1;
   $8_1 = HEAP32[$4_1 + 172 >> 2];
   HEAP32[$4_1 + 368 >> 2] = HEAP32[$4_1 + 168 >> 2];
   HEAP32[$4_1 + 372 >> 2] = $8_1;
   $8_1 = HEAP32[$4_1 + 188 >> 2];
   HEAP32[$4_1 + 384 >> 2] = HEAP32[$4_1 + 184 >> 2];
   HEAP32[$4_1 + 388 >> 2] = $8_1;
   $8_1 = HEAP32[$4_1 + 204 >> 2];
   HEAP32[$4_1 + 400 >> 2] = HEAP32[$4_1 + 200 >> 2];
   HEAP32[$4_1 + 404 >> 2] = $8_1;
   $8_1 = HEAP32[$4_1 + 220 >> 2];
   HEAP32[$4_1 + 416 >> 2] = HEAP32[$4_1 + 216 >> 2];
   HEAP32[$4_1 + 420 >> 2] = $8_1;
   $463($4_1 + 40 | 0, $4_1 + 232 | 0);
   $464($4_1 + 104 | 0, $4_1 + 40 | 0, $2_1);
   $8_1 = $4_1 + 112 | 0;
   $11_1 = HEAP32[$8_1 + 4 >> 2];
   HEAP32[$1_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $11_1;
   $1_1 = $4_1 + 128 | 0;
   $8_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $1_1 = $4_1 + 144 | 0;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $5_1;
   $1_1 = $4_1 + 160 | 0;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$9_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $5_1;
   $1_1 = HEAP32[$4_1 + 108 >> 2];
   HEAP32[$4_1 + 168 >> 2] = HEAP32[$4_1 + 104 >> 2];
   HEAP32[$4_1 + 172 >> 2] = $1_1;
   $1_1 = HEAP32[$4_1 + 124 >> 2];
   HEAP32[$4_1 + 184 >> 2] = HEAP32[$4_1 + 120 >> 2];
   HEAP32[$4_1 + 188 >> 2] = $1_1;
   $1_1 = HEAP32[$4_1 + 140 >> 2];
   HEAP32[$4_1 + 200 >> 2] = HEAP32[$4_1 + 136 >> 2];
   HEAP32[$4_1 + 204 >> 2] = $1_1;
   $1_1 = HEAP32[$4_1 + 156 >> 2];
   HEAP32[$4_1 + 216 >> 2] = HEAP32[$4_1 + 152 >> 2];
   HEAP32[$4_1 + 220 >> 2] = $1_1;
   $1_1 = $0_1 + 52 | 0;
   $5_1 = $0_1 + 56 | 0;
   $6_1 = $0_1 + 60 | 0;
   $431($4_1 + 40 | 0, $4_1 + 168 | 0, Math_fround(-HEAPF32[$1_1 >> 2]), Math_fround(-HEAPF32[$5_1 >> 2]), Math_fround(-HEAPF32[$6_1 >> 2]));
   FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 64 >> 2]]($4_1 + 104 | 0, $7_1, $4_1 + 40 | 0);
   $146($4_1 + 40 | 0, $4_1 + 368 | 0, HEAPF32[$4_1 + 104 >> 2], HEAPF32[$4_1 + 108 >> 2], HEAPF32[$4_1 + 112 >> 2]);
   $12_1 = HEAPF32[$1_1 >> 2];
   $13_1 = HEAPF32[$4_1 + 40 >> 2];
   $14_1 = HEAPF32[$5_1 >> 2];
   $15_1 = HEAPF32[$4_1 + 44 >> 2];
   $16_1 = HEAPF32[$6_1 >> 2];
   $17_1 = HEAPF32[$4_1 + 48 >> 2];
   $10_1 = Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $13_1) + Math_fround($14_1 * $15_1)) + Math_fround($16_1 * $17_1)) - HEAPF32[$0_1 + 68 >> 2]);
   $146($4_1 + 24 | 0, $2_1, Math_fround($13_1 - Math_fround($12_1 * $10_1)), Math_fround($15_1 - Math_fround($14_1 * $10_1)), Math_fround($17_1 - Math_fround($16_1 * $10_1)));
   $431($4_1 + 8 | 0, $2_1, HEAPF32[$1_1 >> 2], HEAPF32[$5_1 >> 2], HEAPF32[$6_1 >> 2]);
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $4_1 + 8 | 0, $4_1 + 24 | 0, $10_1);
  }
  global$0 = $4_1 + 448 | 0;
 }
 
 function $707($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $8_1 = HEAPF32[$1_1 + 24 >> 2];
  $7_1 = HEAPF32[$1_1 + 40 >> 2];
  $9_1 = HEAPF32[$1_1 + 36 >> 2];
  $5_1 = HEAPF32[$1_1 + 20 >> 2];
  $11_1 = HEAPF32[$1_1 + 8 >> 2];
  $12_1 = HEAPF32[$1_1 + 16 >> 2];
  $6_1 = HEAPF32[$1_1 + 4 >> 2];
  $13_1 = HEAPF32[$1_1 + 32 >> 2];
  $10_1 = HEAPF32[$1_1 >> 2];
  HEAP32[$4_1 + 44 >> 2] = 0;
  $12_1 = Math_fround($12_1 - $10_1);
  $16_1 = Math_fround($9_1 - $6_1);
  $5_1 = Math_fround($5_1 - $6_1);
  $13_1 = Math_fround($13_1 - $10_1);
  $9_1 = Math_fround(Math_fround($12_1 * $16_1) - Math_fround($5_1 * $13_1));
  HEAPF32[$4_1 + 40 >> 2] = $9_1;
  $17_1 = Math_fround($8_1 - $11_1);
  $7_1 = Math_fround($7_1 - $11_1);
  $8_1 = Math_fround(Math_fround($17_1 * $13_1) - Math_fround($12_1 * $7_1));
  HEAPF32[$4_1 + 36 >> 2] = $8_1;
  $7_1 = Math_fround(Math_fround($5_1 * $7_1) - Math_fround($17_1 * $16_1));
  HEAPF32[$4_1 + 32 >> 2] = $7_1;
  $6_1 = Math_fround(Math_fround($11_1 * $9_1) + Math_fround(Math_fround($10_1 * $7_1) + Math_fround($6_1 * $8_1)));
  $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0_1 + 4 >> 2]) + Math_fround($8_1 * HEAPF32[$0_1 + 8 >> 2])) + Math_fround($9_1 * HEAPF32[$0_1 + 12 >> 2])) - $6_1);
  $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0_1 + 20 >> 2]) + Math_fround($8_1 * HEAPF32[$0_1 + 24 >> 2])) + Math_fround($9_1 * HEAPF32[$0_1 + 28 >> 2])) - $6_1);
  label$1 : {
   if (Math_fround($11_1 * $6_1) >= Math_fround(0.0) | (HEAP32[$0_1 + 36 >> 2] & 1 ? $11_1 <= Math_fround(0.0) : 0)) {
    break label$1
   }
   $6_1 = Math_fround($11_1 / Math_fround($11_1 - $6_1));
   if (!($6_1 < HEAPF32[$0_1 + 40 >> 2])) {
    break label$1
   }
   $10_1 = $149($7_1, $8_1, $9_1);
   $435($4_1 + 16 | 0, $0_1 + 4 | 0, $0_1 + 20 | 0, $6_1);
   $18_1 = Math_fround($10_1 * Math_fround(-9.999999747378752e-05));
   $14_1 = HEAPF32[$4_1 + 16 >> 2];
   $10_1 = Math_fround(HEAPF32[$1_1 >> 2] - $14_1);
   $15_1 = HEAPF32[$4_1 + 20 >> 2];
   $5_1 = Math_fround(HEAPF32[$1_1 + 20 >> 2] - $15_1);
   $12_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - $15_1);
   $13_1 = Math_fround(HEAPF32[$1_1 + 16 >> 2] - $14_1);
   $19_1 = HEAPF32[$4_1 + 24 >> 2];
   $16_1 = Math_fround(HEAPF32[$1_1 + 24 >> 2] - $19_1);
   $17_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] - $19_1);
   if (!($18_1 <= Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $5_1) - Math_fround($12_1 * $13_1)) * $9_1) + Math_fround(Math_fround($7_1 * Math_fround(Math_fround($12_1 * $16_1) - Math_fround($17_1 * $5_1))) + Math_fround($8_1 * Math_fround(Math_fround($17_1 * $13_1) - Math_fround($10_1 * $16_1))))))) {
    break label$1
   }
   $15_1 = Math_fround(HEAPF32[$1_1 + 36 >> 2] - $15_1);
   $14_1 = Math_fround(HEAPF32[$1_1 + 32 >> 2] - $14_1);
   $20_1 = Math_fround($9_1 * Math_fround(Math_fround($13_1 * $15_1) - Math_fround($5_1 * $14_1)));
   $21_1 = $5_1;
   $5_1 = Math_fround(HEAPF32[$1_1 + 40 >> 2] - $19_1);
   if (!(Math_fround($20_1 + Math_fround(Math_fround($7_1 * Math_fround(Math_fround($21_1 * $5_1) - Math_fround($16_1 * $15_1))) + Math_fround($8_1 * Math_fround(Math_fround($16_1 * $14_1) - Math_fround($13_1 * $5_1))))) >= $18_1) | !(Math_fround(Math_fround($9_1 * Math_fround(Math_fround($12_1 * $14_1) - Math_fround($10_1 * $15_1))) + Math_fround(Math_fround($7_1 * Math_fround(Math_fround($17_1 * $15_1) - Math_fround($12_1 * $5_1))) + Math_fround($8_1 * Math_fround(Math_fround($10_1 * $5_1) - Math_fround($17_1 * $14_1))))) >= $18_1)) {
    break label$1
   }
   $1_1 = $153($4_1 + 32 | 0);
   if (!(!($11_1 <= Math_fround(0.0)) | HEAP32[$0_1 + 36 >> 2] & 2)) {
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAPF32[$4_1 + 8 >> 2] = -HEAPF32[$4_1 + 40 >> 2];
    HEAPF32[$4_1 + 4 >> 2] = -HEAPF32[$4_1 + 36 >> 2];
    HEAPF32[$4_1 >> 2] = -HEAPF32[$4_1 + 32 >> 2];
    (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, $4_1, $6_1, $2_1, $3_1))), HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
    break label$1;
   }
   (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, $1_1, $6_1, $2_1, $3_1))), HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
  }
  global$0 = $4_1 + 48 | 0;
 }
 
 function $708($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $4_1 = global$0 - 688 | 0;
  global$0 = $4_1;
  $1_1 = $471($4_1 + 576 | 0, $1_1, $1_1 + 16 | 0, $1_1 + 32 | 0);
  HEAPF32[$1_1 + 48 >> 2] = HEAPF32[$0_1 + 204 >> 2];
  HEAP8[$4_1 + 548 | 0] = 0;
  HEAP32[$4_1 + 524 >> 2] = 953267991;
  HEAP32[$4_1 + 208 >> 2] = 16016;
  HEAP32[$4_1 + 204 >> 2] = 0;
  HEAP32[$4_1 + 200 >> 2] = $1_1;
  HEAP32[$4_1 + 184 >> 2] = 18436;
  HEAP32[$4_1 + 196 >> 2] = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$4_1 + 192 >> 2] = $4_1 + 208;
  HEAP32[$4_1 + 188 >> 2] = $4_1 + 216;
  HEAP32[$4_1 + 176 >> 2] = 32;
  HEAP32[$4_1 + 180 >> 2] = 953267991;
  HEAP32[$4_1 >> 2] = 14128;
  HEAP32[$4_1 + 164 >> 2] = 1065353216;
  HEAP32[$4_1 + 168 >> 2] = 0;
  HEAPF32[$4_1 + 172 >> 2] = HEAPF32[$0_1 + 208 >> 2];
  $5_1 = $0_1 + 136 | 0;
  label$1 : {
   if (!$705($4_1 + 184 | 0, $0_1 + 8 | 0, $0_1 + 72 | 0, $5_1, $5_1, $4_1)) {
    break label$1
   }
   if (!($149(HEAPF32[$4_1 + 132 >> 2], HEAPF32[$4_1 + 136 >> 2], HEAPF32[$4_1 + 140 >> 2]) > Math_fround(9.999999747378752e-05)) | !(HEAPF32[$4_1 + 164 >> 2] < HEAPF32[$0_1 + 200 >> 2])) {
    break label$1
   }
   ((((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $153($4_1 + 132 | 0)), wasm2js_i32$3 = $4_1 + 148 | 0), wasm2js_f32$0 = HEAPF32[$4_1 + 164 >> 2]), wasm2js_i32$4 = $2_1), wasm2js_i32$5 = $3_1), wasm2js_i32$0 = HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]), Math_fround(FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, Math_fround(wasm2js_f32$0), wasm2js_i32$4 | 0, wasm2js_i32$5 | 0));
  }
  $191($1_1);
  global$0 = $4_1 + 688 | 0;
 }
 
 function $709($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  HEAP32[$0_1 >> 2] = 18608;
  while (1) {
   if (HEAP32[$0_1 + 8 >> 2] > ($3_1 | 0)) {
    $5_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $4_1 >> 2];
    $2_1 = HEAP32[$5_1 + 188 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[$0_1 + 72 >> 2];
     $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 40 >> 2]]($1_1, $2_1, HEAP32[$0_1 + 24 >> 2]);
     $1_1 = HEAP32[$0_1 + 72 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $2_1, HEAP32[$0_1 + 24 >> 2]);
     HEAP32[$5_1 + 188 >> 2] = 0;
    }
    $4_1 = $4_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
  $124($0_1 + 4 | 0);
  return $0_1 | 0;
 }
 
 function $710($0_1) {
  $0_1 = $0_1 | 0;
  $33($709($0_1));
 }
 
 function $711($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0;
  $1_1 = global$0 + -64 | 0;
  global$0 = $1_1;
  while (1) {
   if (($11_1 | 0) < HEAP32[$0_1 + 8 >> 2]) {
    $2_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $12_1 >> 2];
    label$3 : {
     label$4 : {
      if (HEAPU8[$0_1 + 80 | 0]) {
       break label$4
      }
      switch (HEAP32[$2_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     $8_1 = HEAP32[$2_1 + 192 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 8 >> 2]]($8_1, $2_1 + 4 | 0, $1_1 + 48 | 0, $1_1 + 32 | 0);
     $10_1 = Math_fround(HEAPF32[$1_1 + 48 >> 2] + Math_fround(-.019999999552965164));
     HEAPF32[$1_1 + 48 >> 2] = $10_1;
     $4_1 = Math_fround(HEAPF32[$1_1 + 52 >> 2] + Math_fround(-.019999999552965164));
     HEAPF32[$1_1 + 52 >> 2] = $4_1;
     $5_1 = Math_fround(HEAPF32[$1_1 + 56 >> 2] + Math_fround(-.019999999552965164));
     HEAPF32[$1_1 + 56 >> 2] = $5_1;
     $3_1 = Math_fround(HEAPF32[$1_1 + 32 >> 2] + Math_fround(.019999999552965164));
     HEAPF32[$1_1 + 32 >> 2] = $3_1;
     $6_1 = Math_fround(HEAPF32[$1_1 + 36 >> 2] + Math_fround(.019999999552965164));
     HEAPF32[$1_1 + 36 >> 2] = $6_1;
     $7_1 = Math_fround(HEAPF32[$1_1 + 40 >> 2] + Math_fround(.019999999552965164));
     HEAPF32[$1_1 + 40 >> 2] = $7_1;
     label$5 : {
      if (HEAPU8[$2_1 + 204 | 0] & 3 | (!HEAPU8[$0_1 + 44 | 0] | HEAP32[$2_1 + 252 >> 2] != 2)) {
       break label$5
      }
      $8_1 = HEAP32[$2_1 + 192 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 8 >> 2]]($8_1, $2_1 + 68 | 0, $1_1 + 16 | 0, $1_1);
      $4_1 = Math_fround(HEAPF32[$1_1 + 16 >> 2] + Math_fround(-.019999999552965164));
      HEAPF32[$1_1 + 16 >> 2] = $4_1;
      $5_1 = Math_fround(HEAPF32[$1_1 + 20 >> 2] + Math_fround(-.019999999552965164));
      HEAPF32[$1_1 + 20 >> 2] = $5_1;
      $3_1 = Math_fround(HEAPF32[$1_1 + 24 >> 2] + Math_fround(-.019999999552965164));
      HEAPF32[$1_1 + 24 >> 2] = $3_1;
      $6_1 = Math_fround(HEAPF32[$1_1 >> 2] + Math_fround(.019999999552965164));
      HEAPF32[$1_1 >> 2] = $6_1;
      $7_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] + Math_fround(.019999999552965164));
      HEAPF32[$1_1 + 4 >> 2] = $7_1;
      $9_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] + Math_fround(.019999999552965164));
      HEAPF32[$1_1 + 8 >> 2] = $9_1;
      $10_1 = HEAPF32[$1_1 + 48 >> 2];
      if ($4_1 < $10_1) {
       HEAPF32[$1_1 + 48 >> 2] = $4_1;
       $10_1 = $4_1;
      }
      $4_1 = HEAPF32[$1_1 + 52 >> 2];
      if ($5_1 < $4_1) {
       HEAPF32[$1_1 + 52 >> 2] = $5_1;
       $4_1 = $5_1;
      }
      $5_1 = HEAPF32[$1_1 + 56 >> 2];
      if ($3_1 < $5_1) {
       HEAPF32[$1_1 + 56 >> 2] = $3_1;
       $5_1 = $3_1;
      }
      $3_1 = HEAPF32[$1_1 + 28 >> 2];
      if ($3_1 < HEAPF32[$1_1 + 60 >> 2]) {
       HEAPF32[$1_1 + 60 >> 2] = $3_1
      }
      $3_1 = HEAPF32[$1_1 + 32 >> 2];
      if ($6_1 > $3_1) {
       HEAPF32[$1_1 + 32 >> 2] = $6_1;
       $3_1 = $6_1;
      }
      $6_1 = HEAPF32[$1_1 + 36 >> 2];
      if ($7_1 > $6_1) {
       HEAPF32[$1_1 + 36 >> 2] = $7_1;
       $6_1 = $7_1;
      }
      $7_1 = HEAPF32[$1_1 + 40 >> 2];
      if ($9_1 > $7_1) {
       HEAPF32[$1_1 + 40 >> 2] = $9_1;
       $7_1 = $9_1;
      }
      $9_1 = HEAPF32[$1_1 + 12 >> 2];
      if (!($9_1 > HEAPF32[$1_1 + 44 >> 2])) {
       break label$5
      }
      HEAPF32[$1_1 + 44 >> 2] = $9_1;
     }
     $8_1 = HEAP32[$0_1 + 72 >> 2];
     label$13 : {
      if (!(HEAP8[$2_1 + 204 | 0] & 1)) {
       if (!($149(Math_fround($3_1 - $10_1), Math_fround($6_1 - $4_1), Math_fround($7_1 - $5_1)) < Math_fround(999999995904.0))) {
        break label$13
       }
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 16 >> 2]]($8_1, HEAP32[$2_1 + 188 >> 2], $1_1 + 48 | 0, $1_1 + 32 | 0, HEAP32[$0_1 + 24 >> 2]);
      break label$3;
     }
     if ((HEAP32[$2_1 + 220 >> 2] & -2) != 4) {
      HEAP32[$2_1 + 220 >> 2] = 5
     }
     if (HEAPU8[22732]) {
      break label$3
     }
     $2_1 = HEAP32[$0_1 + 76 >> 2];
     if (!$2_1) {
      break label$3
     }
     HEAP8[22732] = 1;
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 44 >> 2]]($2_1, 19624);
     $2_1 = HEAP32[$0_1 + 76 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 44 >> 2]]($2_1, 19673);
     $2_1 = HEAP32[$0_1 + 76 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 44 >> 2]]($2_1, 19741);
     $2_1 = HEAP32[$0_1 + 76 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 44 >> 2]]($2_1, 19806);
    }
    $12_1 = $12_1 + 4 | 0;
    $11_1 = $11_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $1_1 - -64 | 0;
 }
 
 function $712($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 72 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]]($1_1, HEAP32[$0_1 + 24 >> 2]);
 }
 
 function $713($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 76 >> 2] = $1_1;
 }
 
 function $714($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 76 >> 2];
 }
 
 function $715($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0);
  $1_1 = global$0 - 192 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0)) {
    break label$1
   }
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 100 >> 2]]($3_1);
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($1_1 + 80 | 0, $3_1);
   label$2 : {
    $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
    if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 56 >> 2]]($3_1) & 8)) {
     break label$2
    }
    $3_1 = HEAP32[$0_1 + 24 >> 2];
    if (!$3_1) {
     break label$2
    }
    $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 36 >> 2]]($3_1) | 0;
    $10_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
    $11_1 = $1_1 + 176 | 0;
    $3_1 = 0;
    label$3 : while (1) {
     if (($3_1 | 0) == ($10_1 | 0)) {
      break label$2
     }
     $5_1 = HEAP32[$0_1 + 24 >> 2];
     $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 40 >> 2]]($5_1, $3_1) | 0;
     $7_1 = HEAP32[$5_1 + 828 >> 2];
     $7_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
     $5_1 = $5_1 + 164 | 0;
     while (1) if ($7_1) {
      $9_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 40 >> 2]]($9_1, $5_1 - 128 | 0, $5_1 - 96 | 0, HEAPF32[$5_1 - 80 >> 2], HEAP32[$5_1 >> 2], $11_1);
      $7_1 = $7_1 - 1 | 0;
      $5_1 = $5_1 + 204 | 0;
      continue;
     } else {
      $3_1 = $3_1 + 1 | 0;
      continue label$3;
     };
    };
   }
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 56 >> 2]]($3_1) & 3)) {
    break label$1
   }
   $10_1 = $1_1 + 160 | 0;
   $11_1 = $1_1 + 96 | 0;
   $9_1 = $1_1 + 112 | 0;
   $12_1 = $1_1 + 128 | 0;
   $13_1 = $1_1 + 144 | 0;
   $7_1 = 0;
   $5_1 = 0;
   while (1) {
    if (HEAP32[$0_1 + 8 >> 2] <= ($5_1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $7_1 >> 2];
    label$8 : {
     if (HEAPU8[$3_1 + 204 | 0] & 32) {
      break label$8
     }
     label$9 : {
      if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0)) {
       break label$9
      }
      $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 56 >> 2]]($2_1) & 1)) {
       break label$9
      }
      label$10 : {
       label$11 : {
        switch (HEAP32[$3_1 + 220 >> 2] - 1 | 0) {
        case 0:
         $4_1 = $1_1 + 88 | 0;
         $6_1 = HEAP32[$4_1 + 4 >> 2];
         $2_1 = $1_1 + 72 | 0;
         HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $6_1;
         $2_1 = HEAP32[$1_1 + 84 >> 2];
         HEAP32[$1_1 + 64 >> 2] = HEAP32[$1_1 + 80 >> 2];
         HEAP32[$1_1 + 68 >> 2] = $2_1;
         break label$10;
        case 1:
         $4_1 = $11_1 + 8 | 0;
         $6_1 = HEAP32[$4_1 + 4 >> 2];
         $2_1 = $1_1 + 72 | 0;
         HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $6_1;
         $2_1 = HEAP32[$11_1 + 4 >> 2];
         HEAP32[$1_1 + 64 >> 2] = HEAP32[$11_1 >> 2];
         HEAP32[$1_1 + 68 >> 2] = $2_1;
         break label$10;
        case 2:
         $4_1 = $9_1 + 8 | 0;
         $6_1 = HEAP32[$4_1 + 4 >> 2];
         $2_1 = $1_1 + 72 | 0;
         HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $6_1;
         $2_1 = HEAP32[$9_1 + 4 >> 2];
         HEAP32[$1_1 + 64 >> 2] = HEAP32[$9_1 >> 2];
         HEAP32[$1_1 + 68 >> 2] = $2_1;
         break label$10;
        case 3:
         $4_1 = $12_1 + 8 | 0;
         $6_1 = HEAP32[$4_1 + 4 >> 2];
         $2_1 = $1_1 + 72 | 0;
         HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $6_1;
         $2_1 = HEAP32[$12_1 + 4 >> 2];
         HEAP32[$1_1 + 64 >> 2] = HEAP32[$12_1 >> 2];
         HEAP32[$1_1 + 68 >> 2] = $2_1;
         break label$10;
        case 4:
         $4_1 = $13_1 + 8 | 0;
         $6_1 = HEAP32[$4_1 + 4 >> 2];
         $2_1 = $1_1 + 72 | 0;
         HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $6_1;
         $2_1 = HEAP32[$13_1 + 4 >> 2];
         HEAP32[$1_1 + 64 >> 2] = HEAP32[$13_1 >> 2];
         HEAP32[$1_1 + 68 >> 2] = $2_1;
         break label$10;
        default:
         break label$11;
        };
       }
       HEAP32[$1_1 + 72 >> 2] = 1050253722;
       HEAP32[$1_1 + 76 >> 2] = 0;
       HEAP32[$1_1 + 64 >> 2] = 1050253722;
       HEAP32[$1_1 + 68 >> 2] = 1050253722;
      }
      if (HEAP8[$3_1 + 205 | 0] & 1) {
       $4_1 = $3_1 + 320 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $2_1 = $1_1 + 72 | 0;
       HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$2_1 + 4 >> 2] = $6_1;
       $2_1 = HEAP32[$3_1 + 316 >> 2];
       HEAP32[$1_1 + 64 >> 2] = HEAP32[$3_1 + 312 >> 2];
       HEAP32[$1_1 + 68 >> 2] = $2_1;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $3_1 + 4 | 0, HEAP32[$3_1 + 192 >> 2], $1_1 - -64 | 0);
     }
     $2_1 = HEAP32[$0_1 + 76 >> 2];
     if (!$2_1) {
      break label$8
     }
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 56 >> 2]]($2_1) & 2)) {
      break label$8
     }
     $4_1 = $10_1 + 8 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $2_1 = $1_1 + 40 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $6_1;
     $2_1 = HEAP32[$10_1 + 4 >> 2];
     HEAP32[$1_1 + 32 >> 2] = HEAP32[$10_1 >> 2];
     HEAP32[$1_1 + 36 >> 2] = $2_1;
     $2_1 = HEAP32[$3_1 + 192 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $3_1 + 4 | 0, $1_1 - -64 | 0, $1_1 + 48 | 0);
     HEAPF32[$1_1 + 64 >> 2] = HEAPF32[$1_1 + 64 >> 2] + Math_fround(-.019999999552965164);
     HEAPF32[$1_1 + 68 >> 2] = HEAPF32[$1_1 + 68 >> 2] + Math_fround(-.019999999552965164);
     HEAPF32[$1_1 + 72 >> 2] = HEAPF32[$1_1 + 72 >> 2] + Math_fround(-.019999999552965164);
     HEAPF32[$1_1 + 48 >> 2] = HEAPF32[$1_1 + 48 >> 2] + Math_fround(.019999999552965164);
     HEAPF32[$1_1 + 52 >> 2] = HEAPF32[$1_1 + 52 >> 2] + Math_fround(.019999999552965164);
     HEAPF32[$1_1 + 56 >> 2] = HEAPF32[$1_1 + 56 >> 2] + Math_fround(.019999999552965164);
     label$18 : {
      if (HEAPU8[$3_1 + 204 | 0] & 3 | (!HEAPU8[$0_1 + 44 | 0] | HEAP32[$3_1 + 252 >> 2] != 2)) {
       break label$18
      }
      $2_1 = HEAP32[$3_1 + 192 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $3_1 + 68 | 0, $1_1 + 16 | 0, $1_1);
      $8_1 = Math_fround(HEAPF32[$1_1 + 16 >> 2] + Math_fround(-.019999999552965164));
      HEAPF32[$1_1 + 16 >> 2] = $8_1;
      $14_1 = Math_fround(HEAPF32[$1_1 + 20 >> 2] + Math_fround(-.019999999552965164));
      HEAPF32[$1_1 + 20 >> 2] = $14_1;
      $15_1 = Math_fround(HEAPF32[$1_1 + 24 >> 2] + Math_fround(-.019999999552965164));
      HEAPF32[$1_1 + 24 >> 2] = $15_1;
      $16_1 = Math_fround(HEAPF32[$1_1 >> 2] + Math_fround(.019999999552965164));
      HEAPF32[$1_1 >> 2] = $16_1;
      $17_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] + Math_fround(.019999999552965164));
      HEAPF32[$1_1 + 4 >> 2] = $17_1;
      $18_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] + Math_fround(.019999999552965164));
      HEAPF32[$1_1 + 8 >> 2] = $18_1;
      if ($8_1 < HEAPF32[$1_1 + 64 >> 2]) {
       HEAPF32[$1_1 + 64 >> 2] = $8_1
      }
      if (HEAPF32[$1_1 + 68 >> 2] > $14_1) {
       HEAPF32[$1_1 + 68 >> 2] = $14_1
      }
      if (HEAPF32[$1_1 + 72 >> 2] > $15_1) {
       HEAPF32[$1_1 + 72 >> 2] = $15_1
      }
      $8_1 = HEAPF32[$1_1 + 28 >> 2];
      if ($8_1 < HEAPF32[$1_1 + 76 >> 2]) {
       HEAPF32[$1_1 + 76 >> 2] = $8_1
      }
      if (HEAPF32[$1_1 + 48 >> 2] < $16_1) {
       HEAPF32[$1_1 + 48 >> 2] = $16_1
      }
      if (HEAPF32[$1_1 + 52 >> 2] < $17_1) {
       HEAPF32[$1_1 + 52 >> 2] = $17_1
      }
      if (HEAPF32[$1_1 + 56 >> 2] < $18_1) {
       HEAPF32[$1_1 + 56 >> 2] = $18_1
      }
      $8_1 = HEAPF32[$1_1 + 12 >> 2];
      if (!($8_1 > HEAPF32[$1_1 + 60 >> 2])) {
       break label$18
      }
      HEAPF32[$1_1 + 60 >> 2] = $8_1;
     }
     $3_1 = HEAP32[$0_1 + 76 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 60 >> 2]]($3_1, $1_1 - -64 | 0, $1_1 + 48 | 0, $1_1 + 32 | 0);
    }
    $7_1 = $7_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    continue;
   };
  }
  global$0 = $1_1 + 192 | 0;
 }
 
 function $716($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0);
  $4_1 = global$0 - 192 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0)) {
    break label$1
   }
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 56 >> 2]]($5_1) & 32768)) {
    break label$1
   }
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $1_1, Math_fround(.10000000149011612));
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            $5_1 = HEAP32[$2_1 + 4 >> 2];
            switch ($5_1 | 0) {
            case 0:
             break label$10;
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 12:
             break label$3;
            case 13:
             break label$5;
            case 11:
             break label$6;
            case 10:
             break label$7;
            case 9:
             break label$8;
            case 8:
             break label$9;
            default:
             break label$11;
            };
           }
           label$12 : {
            switch ($5_1 - 28 | 0) {
            case 3:
             break label$12;
            case 0:
             break label$4;
            default:
             break label$3;
            };
           }
           $14_1 = HEAP32[$2_1 + 20 >> 2];
           $16_1 = Math_imul($14_1, 80) - 32 | 0;
           $6_1 = $4_1 + 48 | 0;
           $7_1 = $4_1 + 32 | 0;
           $8_1 = $4_1 + 16 | 0;
           while (1) {
            if (($14_1 | 0) < 1) {
             break label$2
            }
            $14_1 = $14_1 - 1 | 0;
            $5_1 = HEAP32[$2_1 + 28 >> 2] + $16_1 | 0;
            $12_1 = HEAP32[$5_1 + 4 >> 2];
            HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
            HEAP32[$6_1 + 4 >> 2] = $12_1;
            $12_1 = $5_1 - 32 | 0;
            $9_1 = $12_1;
            $15_1 = HEAP32[$9_1 + 4 >> 2];
            HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
            HEAP32[$8_1 + 4 >> 2] = $15_1;
            $15_1 = $5_1 - 16 | 0;
            $9_1 = $15_1;
            $10_1 = HEAP32[$9_1 + 4 >> 2];
            HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
            HEAP32[$7_1 + 4 >> 2] = $10_1;
            $10_1 = $5_1 + 8 | 0;
            $18_1 = HEAP32[$10_1 + 4 >> 2];
            $9_1 = $6_1 + 8 | 0;
            HEAP32[$9_1 >> 2] = HEAP32[$10_1 >> 2];
            HEAP32[$9_1 + 4 >> 2] = $18_1;
            $9_1 = $5_1 - 48 | 0;
            $18_1 = $9_1 + 8 | 0;
            $22_1 = HEAP32[$18_1 + 4 >> 2];
            $10_1 = $4_1 + 8 | 0;
            HEAP32[$10_1 >> 2] = HEAP32[$18_1 >> 2];
            HEAP32[$10_1 + 4 >> 2] = $22_1;
            $12_1 = $12_1 + 8 | 0;
            $18_1 = HEAP32[$12_1 + 4 >> 2];
            $10_1 = $8_1 + 8 | 0;
            HEAP32[$10_1 >> 2] = HEAP32[$12_1 >> 2];
            HEAP32[$10_1 + 4 >> 2] = $18_1;
            $15_1 = $15_1 + 8 | 0;
            $10_1 = HEAP32[$15_1 + 4 >> 2];
            $12_1 = $7_1 + 8 | 0;
            HEAP32[$12_1 >> 2] = HEAP32[$15_1 >> 2];
            HEAP32[$12_1 + 4 >> 2] = $10_1;
            $12_1 = HEAP32[$9_1 + 4 >> 2];
            HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2];
            HEAP32[$4_1 + 4 >> 2] = $12_1;
            $5_1 = HEAP32[$5_1 + 16 >> 2];
            $464($4_1 + 128 | 0, $1_1, $4_1);
            FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $4_1 + 128 | 0, $5_1, $3_1);
            $16_1 = $16_1 - 80 | 0;
            continue;
           };
          }
          $225($4_1, $2_1);
          $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
          HEAP32[$4_1 + 140 >> 2] = 0;
          HEAPF32[$4_1 + 136 >> 2] = -HEAPF32[$4_1 + 8 >> 2];
          HEAPF32[$4_1 + 132 >> 2] = -HEAPF32[$4_1 + 4 >> 2];
          HEAPF32[$4_1 + 128 >> 2] = -HEAPF32[$4_1 >> 2];
          FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 80 >> 2]]($0_1, $4_1 + 128 | 0, $4_1, $1_1, $3_1);
          break label$2;
         }
         $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1));
         $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
         FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $11_1, $1_1, $3_1);
         break label$2;
        }
        $5_1 = $4_1 + 12 | 0;
        HEAP32[$5_1 >> 2] = 0;
        HEAP32[$5_1 + 4 >> 2] = 0;
        $5_1 = $4_1 + 24 | 0;
        HEAP32[$5_1 >> 2] = 0;
        HEAP32[$5_1 + 4 >> 2] = 0;
        HEAP32[$4_1 + 20 >> 2] = 1065353216;
        $5_1 = $4_1 + 32 | 0;
        HEAP32[$5_1 >> 2] = 0;
        HEAP32[$5_1 + 4 >> 2] = 0;
        $5_1 = $4_1 + 40 | 0;
        HEAP32[$5_1 >> 2] = 1065353216;
        HEAP32[$5_1 + 4 >> 2] = 0;
        HEAP32[$4_1 + 4 >> 2] = 0;
        HEAP32[$4_1 + 8 >> 2] = 0;
        HEAP32[$4_1 >> 2] = 1065353216;
        $5_1 = HEAP32[$2_1 + 96 >> 2];
        $14_1 = ($5_1 << 4) - 16 | 0;
        $16_1 = ($5_1 << 2) - 4 | 0;
        $6_1 = $4_1 + 48 | 0;
        while (1) {
         if (($5_1 | 0) <= 0) {
          break label$2
         }
         $5_1 = $5_1 - 1 | 0;
         $7_1 = HEAP32[$2_1 + 104 >> 2] + $14_1 | 0;
         $8_1 = HEAP32[$7_1 + 4 >> 2];
         HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $8_1;
         $7_1 = $7_1 + 8 | 0;
         $9_1 = HEAP32[$7_1 + 4 >> 2];
         $8_1 = $6_1 + 8 | 0;
         HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
         HEAP32[$8_1 + 4 >> 2] = $9_1;
         $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
         $11_1 = HEAPF32[HEAP32[$2_1 + 124 >> 2] + $16_1 >> 2];
         $464($4_1 + 128 | 0, $1_1, $4_1);
         FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 24 >> 2]]($7_1, $11_1, $4_1 + 128 | 0, $3_1);
         $14_1 = $14_1 - 16 | 0;
         $16_1 = $16_1 - 4 | 0;
         continue;
        };
       }
       $5_1 = HEAP32[$2_1 + 56 >> 2];
       $2_1 = $2_1 + 32 | 0;
       $11_1 = HEAPF32[($5_1 << 2) + $2_1 >> 2];
       $13_1 = HEAPF32[$2_1 + (($5_1 + 2 | 0) % 3 << 2) >> 2];
       $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 84 >> 2]]($0_1, $13_1, $11_1, $5_1, $1_1, $3_1);
       break label$2;
      }
      $5_1 = HEAP32[$2_1 + 72 >> 2];
      $11_1 = HEAPF32[$2_1 + 60 >> 2];
      $13_1 = HEAPF32[$2_1 + 64 >> 2];
      $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 92 >> 2]]($0_1, $11_1, $13_1, $5_1, $1_1, $3_1);
      break label$2;
     }
     $5_1 = HEAP32[$2_1 + 56 >> 2];
     $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 92 >> 2]]($2_1));
     $225($4_1, $2_1);
     $13_1 = HEAPF32[($5_1 << 2) + $4_1 >> 2];
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 88 >> 2]]($0_1, $11_1, $13_1, $5_1, $1_1, $3_1);
     break label$2;
    }
    $11_1 = HEAPF32[$2_1 + 68 >> 2];
    $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 96 >> 2]]($0_1, $2_1 + 52 | 0, $11_1, $1_1, $3_1);
    break label$2;
   }
   label$15 : {
    if (($5_1 | 0) > 6) {
     break label$15
    }
    $9_1 = HEAP32[$2_1 + 56 >> 2];
    if ($9_1) {
     while (1) {
      if (HEAP32[$9_1 + 28 >> 2] <= ($12_1 | 0)) {
       break label$15
      }
      label$18 : {
       $10_1 = HEAP32[$9_1 + 36 >> 2];
       $15_1 = Math_imul($12_1, 36);
       $5_1 = $10_1 + $15_1 | 0;
       $7_1 = HEAP32[$5_1 + 4 >> 2];
       if (!$7_1) {
        $11_1 = Math_fround(0.0);
        $13_1 = Math_fround(0.0);
        $17_1 = Math_fround(0.0);
        break label$18;
       }
       $5_1 = HEAP32[(HEAP32[$5_1 + 12 >> 2] + ($7_1 << 2) | 0) - 4 >> 2];
       $13_1 = Math_fround(0.0);
       $16_1 = 0;
       $11_1 = Math_fround(0.0);
       $17_1 = Math_fround(0.0);
       $8_1 = $7_1;
       $14_1 = 0;
       while (1) {
        if (($8_1 | 0) <= ($14_1 | 0)) {
         break label$18
        }
        $6_1 = HEAP32[HEAP32[($10_1 + $15_1 | 0) + 12 >> 2] + $16_1 >> 2];
        $10_1 = $6_1 << 4;
        $8_1 = $10_1 + HEAP32[$9_1 + 16 >> 2] | 0;
        $19_1 = HEAPF32[$8_1 >> 2];
        $20_1 = HEAPF32[$8_1 + 4 >> 2];
        $21_1 = HEAPF32[$8_1 + 8 >> 2];
        $8_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
        $5_1 = HEAP32[$9_1 + 16 >> 2] + ($5_1 << 4) | 0;
        $146($4_1, $1_1, HEAPF32[$5_1 >> 2], HEAPF32[$5_1 + 4 >> 2], HEAPF32[$5_1 + 8 >> 2]);
        $5_1 = $10_1 + HEAP32[$9_1 + 16 >> 2] | 0;
        $146($4_1 + 128 | 0, $1_1, HEAPF32[$5_1 >> 2], HEAPF32[$5_1 + 4 >> 2], HEAPF32[$5_1 + 8 >> 2]);
        FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 16 >> 2]]($8_1, $4_1, $4_1 + 128 | 0, $3_1);
        $16_1 = $16_1 + 4 | 0;
        $14_1 = $14_1 + 1 | 0;
        $11_1 = Math_fround($21_1 + $11_1);
        $13_1 = Math_fround($20_1 + $13_1);
        $17_1 = Math_fround($19_1 + $17_1);
        $10_1 = HEAP32[$9_1 + 36 >> 2];
        $8_1 = HEAP32[($15_1 + $10_1 | 0) + 4 >> 2];
        $5_1 = $6_1;
        continue;
       };
      }
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      if (FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 56 >> 2]]($5_1) & 16384) {
       HEAP32[$4_1 + 8 >> 2] = 0;
       HEAP32[$4_1 + 12 >> 2] = 0;
       HEAP32[$4_1 >> 2] = 1065353216;
       HEAP32[$4_1 + 4 >> 2] = 1065353216;
       $5_1 = $15_1 + HEAP32[$9_1 + 36 >> 2] | 0;
       $20_1 = HEAPF32[$5_1 + 24 >> 2];
       $21_1 = HEAPF32[$5_1 + 28 >> 2];
       $23_1 = HEAPF32[$5_1 + 20 >> 2];
       $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       $19_1 = Math_fround(Math_fround(1.0) / Math_fround($7_1 | 0));
       $17_1 = Math_fround($19_1 * $17_1);
       $13_1 = Math_fround($19_1 * $13_1);
       $11_1 = Math_fround($19_1 * $11_1);
       $146($4_1 + 128 | 0, $1_1, $17_1, $13_1, $11_1);
       $146($4_1 + 112 | 0, $1_1, Math_fround($23_1 + $17_1), Math_fround($20_1 + $13_1), Math_fround($21_1 + $11_1));
       FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 16 >> 2]]($5_1, $4_1 + 128 | 0, $4_1 + 112 | 0, $4_1);
      }
      $12_1 = $12_1 + 1 | 0;
      continue;
     }
    }
    $5_1 = 0;
    while (1) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 104 >> 2]]($2_1) | 0) <= ($5_1 | 0)) {
      break label$15
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 108 >> 2]]($2_1, $5_1, $4_1, $4_1 + 128 | 0);
     $146($4_1 + 112 | 0, $1_1, HEAPF32[$4_1 >> 2], HEAPF32[$4_1 + 4 >> 2], HEAPF32[$4_1 + 8 >> 2]);
     $146($4_1 + 96 | 0, $1_1, HEAPF32[$4_1 + 128 >> 2], HEAPF32[$4_1 + 132 >> 2], HEAPF32[$4_1 + 136 >> 2]);
     $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 16 >> 2]]($6_1, $4_1 + 112 | 0, $4_1 + 96 | 0, $3_1);
     $5_1 = $5_1 + 1 | 0;
     continue;
    };
   }
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   if ($5_1 - 21 >>> 0 <= 8) {
    HEAP32[$4_1 + 136 >> 2] = 1566444395;
    HEAP32[$4_1 + 140 >> 2] = 0;
    HEAP32[$4_1 + 128 >> 2] = 1566444395;
    HEAP32[$4_1 + 132 >> 2] = 1566444395;
    HEAP32[$4_1 + 120 >> 2] = -581039253;
    HEAP32[$4_1 + 124 >> 2] = 0;
    HEAP32[$4_1 + 112 >> 2] = -581039253;
    HEAP32[$4_1 + 116 >> 2] = -581039253;
    $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
    $7_1 = $3_1 + 8 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    $6_1 = $4_1 + 20 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $8_1;
    $7_1 = $1_1 + 8 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    $6_1 = $4_1 + 36 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $8_1;
    $7_1 = HEAP32[$1_1 + 20 >> 2];
    $6_1 = $4_1 + 44 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $7_1;
    $7_1 = $1_1 + 24 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    $6_1 = $4_1 + 52 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $8_1;
    $7_1 = HEAP32[$1_1 + 36 >> 2];
    $6_1 = $4_1 + 60 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $7_1;
    $7_1 = $1_1 + 40 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    $6_1 = $4_1 + 68 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $8_1;
    HEAP32[$4_1 + 8 >> 2] = $5_1;
    HEAP32[$4_1 + 4 >> 2] = 19560;
    HEAP32[$4_1 >> 2] = 19536;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$4_1 + 12 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 16 >> 2] = $5_1;
    $5_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$4_1 + 28 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$4_1 + 32 >> 2] = $5_1;
    $6_1 = $1_1 + 56 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $5_1 = $4_1 + 84 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $7_1;
    $6_1 = HEAP32[$1_1 + 52 >> 2];
    $5_1 = $4_1 + 76 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $6_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 64 >> 2]]($2_1, $4_1, $4_1 + 112 | 0, $4_1 + 128 | 0);
    $5_1 = HEAP32[$2_1 + 4 >> 2];
   }
   if (($5_1 | 0) != 3) {
    break label$2
   }
   HEAP32[$4_1 + 136 >> 2] = 1566444395;
   HEAP32[$4_1 + 140 >> 2] = 0;
   HEAP32[$4_1 + 128 >> 2] = 1566444395;
   HEAP32[$4_1 + 132 >> 2] = 1566444395;
   HEAP32[$4_1 + 120 >> 2] = -581039253;
   HEAP32[$4_1 + 124 >> 2] = 0;
   HEAP32[$4_1 + 112 >> 2] = -581039253;
   HEAP32[$4_1 + 116 >> 2] = -581039253;
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   $6_1 = $3_1 + 8 | 0;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $5_1 = $4_1 + 20 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   $6_1 = $1_1 + 8 | 0;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $5_1 = $4_1 + 36 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   $6_1 = HEAP32[$1_1 + 20 >> 2];
   $5_1 = $4_1 + 44 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $6_1;
   $6_1 = $1_1 + 24 | 0;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $5_1 = $4_1 + 52 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   $6_1 = HEAP32[$1_1 + 36 >> 2];
   $5_1 = $4_1 + 60 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $6_1;
   $6_1 = $1_1 + 40 | 0;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $5_1 = $4_1 + 68 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   HEAP32[$4_1 + 8 >> 2] = $0_1;
   HEAP32[$4_1 + 4 >> 2] = 19560;
   HEAP32[$4_1 >> 2] = 19536;
   $0_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$4_1 + 12 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$4_1 + 16 >> 2] = $0_1;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$4_1 + 28 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 32 >> 2] = $0_1;
   $3_1 = $1_1 + 56 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $0_1 = $4_1 + 84 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $5_1;
   $3_1 = HEAP32[$1_1 + 52 >> 2];
   $0_1 = $4_1 + 76 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $3_1;
   $0_1 = HEAP32[$2_1 + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $4_1 | 4, $4_1 + 112 | 0, $4_1 + 128 | 0);
  }
  global$0 = $4_1 + 192 | 0;
 }
 
 function $717($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 256 | 0;
  global$0 = $4_1;
  $5_1 = $4_1 + 88 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $4_1 + 96 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $4_1 + 108 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 104 >> 2] = 1065353216;
  $5_1 = $4_1 + 116 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $4_1 + 124 | 0;
  HEAP32[$5_1 >> 2] = 1065353216;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $12_1 = $1_1 + 8 | 0;
  $5_1 = $12_1;
  $13_1 = HEAP32[$5_1 + 4 >> 2];
  $14_1 = $4_1 + 60 | 0;
  $6_1 = $14_1;
  $15_1 = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 >> 2] = $15_1;
  HEAP32[$6_1 + 4 >> 2] = $13_1;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $9_1 = $4_1 + 76 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $6_1;
  HEAP32[$4_1 + 16 >> 2] = 18680;
  HEAP32[$4_1 + 232 >> 2] = $3_1;
  HEAP32[$4_1 + 84 >> 2] = 1065353216;
  $16_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 52 >> 2] = $6_1;
  HEAP32[$4_1 + 56 >> 2] = $16_1;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 68 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 72 >> 2] = $3_1;
  HEAP32[$4_1 + 228 >> 2] = $0_1;
  $3_1 = $4_1 + 140 | 0;
  HEAP32[$3_1 >> 2] = $15_1;
  HEAP32[$3_1 + 4 >> 2] = $13_1;
  $3_1 = $4_1 + 132 | 0;
  HEAP32[$3_1 >> 2] = $6_1;
  HEAP32[$3_1 + 4 >> 2] = $16_1;
  $3_1 = $4_1 + 152 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $4_1 + 160 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 168 >> 2] = 1065353216;
  $3_1 = $4_1 + 172 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $4_1 + 180 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $4_1 + 188 | 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $6_1 = $4_1 + 196 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $3_1;
  $3_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = $4_1 + 204 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $3_1;
  HEAP32[$4_1 + 148 >> 2] = 1065353216;
  HEAP32[$4_1 + 252 >> 2] = 0;
  HEAPF32[$4_1 + 248 >> 2] = HEAPF32[$5_1 >> 2] - HEAPF32[$12_1 >> 2];
  HEAPF32[$4_1 + 244 >> 2] = HEAPF32[$2_1 + 4 >> 2] - HEAPF32[$1_1 + 4 >> 2];
  HEAPF32[$4_1 + 240 >> 2] = HEAPF32[$2_1 >> 2] - HEAPF32[$1_1 >> 2];
  $153($4_1 + 240 | 0);
  $10_1 = HEAPF32[$4_1 + 244 >> 2];
  $7_1 = $10_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $10_1);
  HEAPF32[$4_1 + 24 >> 2] = $7_1;
  $11_1 = HEAPF32[$4_1 + 248 >> 2];
  $8_1 = $11_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $11_1);
  HEAPF32[$4_1 + 28 >> 2] = $8_1;
  HEAP32[$4_1 + 44 >> 2] = $8_1 < Math_fround(0.0);
  HEAP32[$4_1 + 40 >> 2] = $7_1 < Math_fround(0.0);
  $7_1 = HEAPF32[$4_1 + 240 >> 2];
  $8_1 = $7_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $7_1);
  HEAPF32[$4_1 + 20 >> 2] = $8_1;
  HEAP32[$4_1 + 36 >> 2] = $8_1 < Math_fround(0.0);
  HEAPF32[$4_1 + 48 >> 2] = Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[$4_1 + 68 >> 2] - HEAPF32[$4_1 + 52 >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[$4_1 + 72 >> 2] - HEAPF32[$4_1 + 56 >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[$9_1 >> 2] - HEAPF32[$14_1 >> 2]));
  $3_1 = HEAP32[$0_1 + 72 >> 2];
  $0_1 = $4_1 + 248 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 240 >> 2] = 0;
  HEAP32[$4_1 + 244 >> 2] = 0;
  $0_1 = $4_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 24 >> 2]]($3_1, $1_1, $2_1, $4_1 + 16 | 0, $4_1 + 240 | 0, $4_1);
  global$0 = $4_1 + 256 | 0;
 }
 
 function $718($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  HEAP32[$1_1 + 216 >> 2] = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$5_1 + 108 >> 2] = $1_1;
  $459($0_1 + 4 | 0, $5_1 + 108 | 0);
  $6_1 = $1_1 + 12 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $5_1 + 48 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = $1_1 + 28 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $5_1 - -64 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = $1_1 + 44 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $5_1 + 80 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = $1_1 + 60 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $5_1 + 96 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$5_1 + 40 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$5_1 + 44 >> 2] = $4_1;
  $4_1 = $1_1 + 20 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$5_1 + 56 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 60 >> 2] = $6_1;
  $4_1 = $1_1 + 36 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$5_1 + 72 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 76 >> 2] = $6_1;
  $4_1 = $1_1 + 52 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$5_1 + 88 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 92 >> 2] = $6_1;
  $4_1 = HEAP32[$1_1 + 192 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $5_1 + 40 | 0, $5_1 + 24 | 0, $5_1 + 8 | 0);
  $4_1 = HEAP32[$0_1 + 72 >> 2];
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $5_1 + 24 | 0, $5_1 + 8 | 0, HEAP32[HEAP32[$1_1 + 192 >> 2] + 4 >> 2], $1_1, $2_1, $3_1, HEAP32[$0_1 + 24 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 188 >> 2] = wasm2js_i32$1;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $719($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  $2_1 = HEAP32[$1_1 + 188 >> 2];
  if ($2_1) {
   $6_1 = HEAP32[$2_1 + 8 >> 2];
   $7_1 = HEAP32[$2_1 + 4 >> 2];
   $3_1 = HEAP32[$0_1 + 72 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $2_1, HEAP32[$0_1 + 24 >> 2]);
   $3_1 = $1_1 + 12 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $4_1 + 40 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $3_1 = $1_1 + 28 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $4_1 + 56 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $3_1 = $1_1 + 44 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $4_1 + 72 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $3_1 = $1_1 + 60 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $4_1 + 88 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $2_1 = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$4_1 + 32 >> 2] = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$4_1 + 36 >> 2] = $2_1;
   $2_1 = $1_1 + 20 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$4_1 + 48 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 52 >> 2] = $3_1;
   $2_1 = $1_1 + 36 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$4_1 + 64 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 68 >> 2] = $3_1;
   $2_1 = $1_1 + 52 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$4_1 + 80 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 84 >> 2] = $3_1;
   $2_1 = HEAP32[$1_1 + 192 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $4_1 + 32 | 0, $4_1 + 16 | 0, $4_1);
   $2_1 = HEAP32[$0_1 + 72 >> 2];
   (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $4_1 + 16 | 0, $4_1, HEAP32[HEAP32[$1_1 + 192 >> 2] + 4 >> 2], $1_1, $7_1, $6_1, HEAP32[$0_1 + 24 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 188 >> 2] = wasm2js_i32$1;
  }
  global$0 = $4_1 + 96 | 0;
 }
 
 function $720($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = HEAP32[$1_1 + 188 >> 2];
  if ($3_1) {
   $2_1 = HEAP32[$0_1 + 72 >> 2];
   $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 36 >> 2]]($2_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 40 >> 2]]($2_1, $3_1, HEAP32[$0_1 + 24 >> 2]);
   $2_1 = HEAP32[$0_1 + 72 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $3_1, HEAP32[$0_1 + 24 >> 2]);
   HEAP32[$1_1 + 188 >> 2] = 0;
  }
  $2_1 = HEAP32[$1_1 + 216 >> 2];
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  label$2 : {
   if (!(($2_1 | 0) < 0 | ($3_1 | 0) <= ($2_1 | 0))) {
    $4_1 = $2_1 << 2;
    $5_1 = $0_1 + 16 | 0;
    $6_1 = HEAP32[$5_1 >> 2];
    $8_1 = $4_1 + $6_1 | 0;
    $9_1 = HEAP32[$8_1 >> 2];
    $7_1 = $6_1;
    $3_1 = $3_1 - 1 | 0;
    $6_1 = $3_1 << 2;
    HEAP32[$8_1 >> 2] = HEAP32[$7_1 + $6_1 >> 2];
    HEAP32[$0_1 + 8 >> 2] = $3_1;
    HEAP32[$6_1 + HEAP32[$5_1 >> 2] >> 2] = $9_1;
    if (($2_1 | 0) >= ($3_1 | 0)) {
     break label$2
    }
    HEAP32[HEAP32[HEAP32[$0_1 + 16 >> 2] + $4_1 >> 2] + 216 >> 2] = $2_1;
    break label$2;
   }
   $5_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
   $2_1 = 0;
   while (1) {
    if (($2_1 | 0) == ($5_1 | 0)) {
     break label$2
    }
    if (HEAP32[HEAP32[$0_1 + 16 >> 2] + $4_1 >> 2] != ($1_1 | 0)) {
     $4_1 = $4_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$2
   }
   $7_1 = $2_1 << 2;
   $2_1 = HEAP32[$0_1 + 16 >> 2];
   $4_1 = $7_1 + $2_1 | 0;
   $5_1 = HEAP32[$4_1 >> 2];
   $7_1 = $2_1;
   $3_1 = $3_1 - 1 | 0;
   $2_1 = $3_1 << 2;
   HEAP32[$4_1 >> 2] = HEAP32[$7_1 + $2_1 >> 2];
   HEAP32[$0_1 + 8 >> 2] = $3_1;
   HEAP32[$2_1 + HEAP32[$0_1 + 16 >> 2] >> 2] = $5_1;
  }
  HEAP32[$1_1 + 216 >> 2] = -1;
 }
 
 function $721($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1);
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  if ($1_1) {
   $2_1 = HEAP32[$0_1 + 72 >> 2];
   ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 36 >> 2]]($2_1) | 0), wasm2js_i32$3 = $0_1 + 28 | 0), wasm2js_i32$4 = HEAP32[$0_1 + 24 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0);
  }
 }
 
 function $722($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]]($1_1);
  $723($0_1, $1_1);
  $724($0_1, $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1);
 }
 
 function $723($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  HEAP8[$2_1 + 44 | 0] = 1;
  HEAP32[$2_1 + 40 >> 2] = 0;
  HEAP8[$2_1 - -64 | 0] = 1;
  $3_1 = $2_1 + 32 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 60 >> 2] = 0;
  HEAP8[$2_1 + 84 | 0] = 1;
  $3_1 = $2_1 + 52 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 80 >> 2] = 0;
  $3_1 = $2_1 + 72 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP8[$2_1 + 24 | 0] = 1;
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  $13_1 = $2_1 + 28 | 0;
  $14_1 = $2_1 + 68 | 0;
  $15_1 = $2_1 + 48 | 0;
  while (1) {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $5_1 = HEAP32[$0_1 + 8 >> 2];
        if (($10_1 | 0) >= ($5_1 | 0)) {
         $4_1 = 0;
         $3_1 = 0;
         while (1) {
          if (($3_1 | 0) >= ($5_1 | 0)) {
           break label$6
          }
          $6_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $4_1 >> 2];
          if (HEAP32[$6_1 + 252 >> 2] == 1) {
           FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 24 >> 2]]($6_1, $1_1);
           $5_1 = HEAP32[$0_1 + 8 >> 2];
          }
          $4_1 = $4_1 + 4 | 0;
          $3_1 = $3_1 + 1 | 0;
          continue;
         };
        }
        $8_1 = HEAP32[HEAP32[HEAP32[$0_1 + 16 >> 2] + ($10_1 << 2) >> 2] + 192 >> 2];
        HEAP32[$2_1 >> 2] = $8_1;
        if (wasm2js_i32$0 = ($725($2_1 + 8 | 0, $2_1) | 0) != -1, wasm2js_i32$1 = 0, wasm2js_i32$2 = HEAP32[$2_1 + 60 >> 2], wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
         break label$2
        }
        HEAP32[$2_1 >> 2] = $8_1;
        $3_1 = $725($2_1 + 8 | 0, $2_1);
        if (($3_1 | 0) != -1) {
         HEAP32[HEAP32[$2_1 + 60 >> 2] + ($3_1 << 2) >> 2] = $8_1;
         break label$3;
        }
        $11_1 = $726($8_1);
        $12_1 = HEAP32[$2_1 + 52 >> 2];
        $3_1 = $12_1;
        $6_1 = HEAP32[$2_1 + 56 >> 2];
        label$12 : {
         if (($3_1 | 0) != ($6_1 | 0)) {
          break label$12
         }
         $3_1 = $6_1;
         $7_1 = $3_1 ? $3_1 << 1 : 1;
         if (($3_1 | 0) >= ($7_1 | 0)) {
          break label$12
         }
         $3_1 = 0;
         $5_1 = 0;
         if ($7_1) {
          $5_1 = $120($7_1 << 2)
         }
         $4_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
         while (1) {
          if ($4_1) {
           HEAP32[$3_1 + $5_1 >> 2] = HEAP32[HEAP32[$2_1 + 60 >> 2] + $3_1 >> 2];
           $4_1 = $4_1 - 1 | 0;
           $3_1 = $3_1 + 4 | 0;
           continue;
          }
          break;
         };
         $163($15_1);
         HEAP32[$2_1 + 60 >> 2] = $5_1;
         HEAP8[$2_1 + 64 | 0] = 1;
         HEAP32[$2_1 + 56 >> 2] = $7_1;
         $3_1 = HEAP32[$2_1 + 52 >> 2];
        }
        HEAP32[HEAP32[$2_1 + 60 >> 2] + ($3_1 << 2) >> 2] = $8_1;
        HEAP32[$2_1 + 52 >> 2] = $3_1 + 1;
        $4_1 = HEAP32[$2_1 + 72 >> 2];
        label$16 : {
         if (($4_1 | 0) != HEAP32[$2_1 + 76 >> 2]) {
          break label$16
         }
         $7_1 = $4_1 ? $4_1 << 1 : 1;
         if (($7_1 | 0) <= ($4_1 | 0)) {
          break label$16
         }
         $3_1 = 0;
         $5_1 = 0;
         if ($7_1) {
          $5_1 = $120($7_1 << 3)
         }
         $4_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
         while (1) {
          if ($4_1) {
           $16_1 = HEAP32[$2_1 + 80 >> 2] + $3_1 | 0;
           $17_1 = HEAP32[$16_1 + 4 >> 2];
           $9_1 = $3_1 + $5_1 | 0;
           HEAP32[$9_1 >> 2] = HEAP32[$16_1 >> 2];
           HEAP32[$9_1 + 4 >> 2] = $17_1;
           $4_1 = $4_1 - 1 | 0;
           $3_1 = $3_1 + 8 | 0;
           continue;
          }
          break;
         };
         $163($14_1);
         HEAP32[$2_1 + 80 >> 2] = $5_1;
         HEAP8[$2_1 + 84 | 0] = 1;
         HEAP32[$2_1 + 76 >> 2] = $7_1;
         $4_1 = HEAP32[$2_1 + 72 >> 2];
        }
        $3_1 = HEAP32[$2_1 + 4 >> 2];
        $4_1 = HEAP32[$2_1 + 80 >> 2] + ($4_1 << 3) | 0;
        $7_1 = HEAP32[$2_1 >> 2];
        HEAP32[$4_1 >> 2] = $7_1;
        HEAP32[$4_1 + 4 >> 2] = $3_1;
        HEAP32[$2_1 + 72 >> 2] = HEAP32[$2_1 + 72 >> 2] + 1;
        $3_1 = HEAP32[$2_1 + 56 >> 2];
        $4_1 = $11_1 & $6_1 - 1;
        if (($6_1 | 0) >= ($3_1 | 0)) {
         break label$4
        }
        $6_1 = HEAP32[$2_1 + 12 >> 2];
        if (($6_1 | 0) >= ($3_1 | 0)) {
         break label$5
        }
        HEAP32[$2_1 + 92 >> 2] = 0;
        $204($2_1 + 8 | 0, $3_1, $2_1 + 92 | 0);
        HEAP32[$2_1 + 92 >> 2] = 0;
        $204($13_1, $3_1, $2_1 + 92 | 0);
        $5_1 = HEAP32[$2_1 + 20 >> 2];
        $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
        $4_1 = $3_1;
        while (1) if ($4_1) {
         HEAP32[$5_1 >> 2] = -1;
         $4_1 = $4_1 - 1 | 0;
         $5_1 = $5_1 + 4 | 0;
         continue;
        } else {
         $4_1 = HEAP32[$2_1 + 40 >> 2];
         while (1) if ($3_1) {
          HEAP32[$4_1 >> 2] = -1;
          $3_1 = $3_1 - 1 | 0;
          $4_1 = $4_1 + 4 | 0;
          continue;
         } else {
          $3_1 = 0;
          $6_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
          $4_1 = HEAP32[$2_1 + 40 >> 2];
          $11_1 = HEAP32[$2_1 + 20 >> 2];
          $5_1 = HEAP32[$2_1 + 80 >> 2];
          while (1) {
           if (($3_1 | 0) != ($6_1 | 0)) {
            $9_1 = $11_1 + ((HEAP32[$2_1 + 56 >> 2] - 1 & $726(HEAP32[$5_1 >> 2])) << 2) | 0;
            HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2];
            HEAP32[$9_1 >> 2] = $3_1;
            $4_1 = $4_1 + 4 | 0;
            $5_1 = $5_1 + 8 | 0;
            $3_1 = $3_1 + 1 | 0;
            continue;
           }
           break;
          };
          $3_1 = HEAP32[$2_1 + 56 >> 2];
          break label$5;
         };
        };
       }
       $163($14_1);
       HEAP32[$2_1 + 80 >> 2] = 0;
       HEAP8[$2_1 + 84 | 0] = 1;
       HEAP32[$2_1 + 72 >> 2] = 0;
       HEAP32[$2_1 + 76 >> 2] = 0;
       $163($15_1);
       HEAP32[$2_1 + 60 >> 2] = 0;
       HEAP8[$2_1 + 64 | 0] = 1;
       HEAP32[$2_1 + 52 >> 2] = 0;
       HEAP32[$2_1 + 56 >> 2] = 0;
       $124($13_1);
       $124($2_1 + 8 | 0);
       global$0 = $2_1 + 96 | 0;
       return;
      }
      $4_1 = $726($7_1) & $3_1 - 1;
     }
     $3_1 = HEAP32[$2_1 + 20 >> 2] + ($4_1 << 2) | 0;
     HEAP32[HEAP32[$2_1 + 40 >> 2] + ($12_1 << 2) >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$3_1 >> 2] = $12_1;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 60 >> 2]]($8_1, $1_1);
   }
   $10_1 = $10_1 + 1 | 0;
   continue;
  };
 }
 
 function $724($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 52 >> 2]]($1_1) & 8)) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 24 >> 2];
   $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 36 >> 2]]($2_1) | 0;
   $14_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if (($7_1 | 0) == ($14_1 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$0_1 + 24 >> 2];
    $4_1 = HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 44 >> 2]]($2_1) | 0) + ($7_1 << 2) >> 2];
    if (HEAP32[$4_1 + 828 >> 2]) {
     $8_1 = 0;
     $11_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, 840, 1) | 0;
     $5_1 = $2(HEAP32[$11_1 + 8 >> 2], 0, 840);
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($1_1, HEAP32[$4_1 + 820 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 832 >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($1_1, HEAP32[$4_1 + 824 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 836 >> 2] = wasm2js_i32$1;
     $2_1 = HEAP32[$4_1 + 836 >> 2];
     HEAP32[$5_1 + 820 >> 2] = HEAP32[$4_1 + 832 >> 2];
     HEAP32[$5_1 + 824 >> 2] = $2_1;
     $3_1 = HEAP32[$4_1 + 828 >> 2];
     HEAP32[$5_1 + 800 >> 2] = $3_1;
     HEAP32[$5_1 + 804 >> 2] = HEAP32[$4_1 + 840 >> 2];
     $2_1 = HEAP32[$4_1 + 848 >> 2];
     HEAP32[$5_1 + 808 >> 2] = HEAP32[$4_1 + 844 >> 2];
     HEAP32[$5_1 + 812 >> 2] = $2_1;
     HEAP32[$5_1 + 816 >> 2] = HEAP32[$4_1 >> 2];
     $2_1 = $4_1 + 92 | 0;
     $9_1 = 0;
     $10_1 = 0;
     while (1) {
      if (($3_1 | 0) > ($10_1 | 0)) {
       $3_1 = $5_1 + $9_1 | 0;
       HEAPF32[$3_1 + 464 >> 2] = HEAPF32[$2_1 + 36 >> 2];
       HEAPF32[$3_1 + 480 >> 2] = HEAPF32[$2_1 + 40 >> 2];
       HEAPF32[$3_1 + 640 >> 2] = HEAPF32[$2_1 + 44 >> 2];
       HEAPF32[$3_1 + 656 >> 2] = HEAPF32[$2_1 + 48 >> 2];
       $6_1 = $5_1 + $8_1 | 0;
       $132($2_1 - 88 | 0, $6_1);
       $132($2_1 - 72 | 0, $6_1 - -64 | 0);
       $132($2_1 - 24 | 0, $6_1 + 256 | 0);
       HEAPF32[$3_1 + 448 >> 2] = HEAPF32[$2_1 - 8 >> 2];
       $12_1 = $2_1 - -64 | 0;
       HEAPF32[$3_1 + 752 >> 2] = HEAPF32[$12_1 >> 2];
       $13_1 = $2_1 + 60 | 0;
       HEAPF32[$3_1 + 720 >> 2] = HEAPF32[$13_1 >> 2];
       HEAP32[$3_1 + 784 >> 2] = HEAP32[$2_1 + 72 >> 2];
       HEAPF32[$3_1 + 768 >> 2] = HEAPF32[$2_1 + 68 >> 2];
       HEAPF32[$3_1 + 736 >> 2] = HEAPF32[$12_1 >> 2];
       $15_1 = HEAPF32[$13_1 >> 2];
       HEAP32[$3_1 + 624 >> 2] = HEAP32[$2_1 + 32 >> 2];
       HEAP32[$3_1 + 592 >> 2] = HEAP32[$2_1 + 20 >> 2];
       HEAP32[$3_1 + 608 >> 2] = HEAP32[$2_1 + 24 >> 2];
       HEAP32[$3_1 + 560 >> 2] = HEAP32[$2_1 + 12 >> 2];
       HEAPF32[$3_1 + 704 >> 2] = $15_1;
       HEAP32[$3_1 + 576 >> 2] = HEAP32[$2_1 + 16 >> 2];
       $132($2_1 - 40 | 0, $6_1 + 128 | 0);
       $132($2_1 - 56 | 0, $6_1 + 192 | 0);
       HEAPF32[$3_1 + 496 >> 2] = HEAPF32[$2_1 - 4 >> 2];
       $132($2_1 + 76 | 0, $6_1 + 320 | 0);
       $132($2_1 + 92 | 0, $6_1 + 384 | 0);
       HEAPF32[$3_1 + 512 >> 2] = HEAPF32[$2_1 >> 2];
       HEAPF32[$3_1 + 528 >> 2] = HEAPF32[$2_1 + 4 >> 2];
       HEAPF32[$3_1 + 544 >> 2] = HEAPF32[$2_1 + 8 >> 2];
       HEAPF32[$3_1 + 672 >> 2] = HEAPF32[$2_1 + 52 >> 2];
       HEAPF32[$3_1 + 688 >> 2] = HEAPF32[$2_1 + 56 >> 2];
       $8_1 = $8_1 + 16 | 0;
       $2_1 = $2_1 + 204 | 0;
       $9_1 = $9_1 + 4 | 0;
       $10_1 = $10_1 + 1 | 0;
       $3_1 = HEAP32[$4_1 + 828 >> 2];
       continue;
      }
      break;
     };
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1, $11_1, 13579, 1414418243, $4_1);
    }
    $7_1 = $7_1 + 1 | 0;
    continue;
   };
  }
 }
 
 function $725($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$0_1 + 48 >> 2] - 1 & $726($3_1);
  $2_1 = -1;
  label$1 : {
   if ($1_1 >>> 0 >= HEAPU32[$0_1 + 4 >> 2]) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 12 >> 2] + ($1_1 << 2) | 0;
   while (1) {
    $1_1 = HEAP32[$1_1 >> 2];
    $2_1 = -1;
    if (($1_1 | 0) == -1) {
     break label$1
    }
    if (!(HEAP32[HEAP32[$0_1 + 72 >> 2] + ($1_1 << 3) >> 2] == ($3_1 | 0))) {
     $1_1 = HEAP32[$0_1 + 32 >> 2] + ($1_1 << 2) | 0;
     continue;
    }
    break;
   };
   $2_1 = $1_1;
  }
  return $2_1;
 }
 
 function $726($0_1) {
  $0_1 = ($0_1 << 15 ^ -1) + $0_1 | 0;
  $0_1 = Math_imul($0_1 >>> 10 ^ $0_1, 9);
  $0_1 = $0_1 >>> 6 ^ $0_1;
  $0_1 = ($0_1 << 11 ^ -1) + $0_1 | 0;
  return $0_1 >>> 16 ^ $0_1;
 }
 
 function $727($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0_1 + 216 >> 2];
  $4_1 = HEAPF32[$3_1 + 4 >> 2];
  label$1 : {
   if ($4_1 == Math_fround(0.0)) {
    break label$1
   }
   $1_1 = HEAP32[$1_1 >> 2];
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, HEAP32[$1_1 + 188 >> 2]) | 0)) {
    break label$1
   }
   $3_1 = HEAP32[$0_1 + 216 >> 2];
   $5_1 = HEAP32[$1_1 + 192 >> 2];
   HEAP32[$2_1 + 24 >> 2] = -1;
   HEAP32[$2_1 + 16 >> 2] = 0;
   HEAP32[$2_1 + 20 >> 2] = -1;
   HEAP32[$2_1 + 12 >> 2] = $1_1 + 4;
   HEAP32[$2_1 + 8 >> 2] = $1_1;
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   HEAP32[$2_1 >> 2] = 0;
   $728($0_1 + 68 | 0, $0_1 + 132 | 0, $2_1, $3_1);
  }
  global$0 = $2_1 + 32 | 0;
  return $4_1 != Math_fround(0.0) | 0;
 }
 
 function $728($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 1104 | 0;
  global$0 = $4_1;
  $9_1 = $457($4_1 + 376 | 0, Math_fround(0.0));
  HEAP32[$9_1 + 48 >> 2] = 0;
  $5_1 = HEAP32[$2_1 + 12 >> 2];
  $7_1 = HEAP32[$2_1 + 4 >> 2];
  $14_1 = HEAP32[$7_1 + 4 >> 2];
  label$1 : {
   if (($14_1 | 0) <= 19) {
    HEAP32[$4_1 + 368 >> 2] = 32;
    HEAP32[$4_1 + 372 >> 2] = 953267991;
    HEAP32[$4_1 + 360 >> 2] = 0;
    HEAP32[$4_1 + 364 >> 2] = 0;
    HEAP32[$4_1 + 192 >> 2] = 14128;
    HEAPF32[$4_1 + 356 >> 2] = HEAPF32[$3_1 + 4 >> 2];
    HEAP8[$4_1 + 764 | 0] = 0;
    HEAP32[$4_1 + 740 >> 2] = 953267991;
    HEAP32[$4_1 + 44 >> 2] = $7_1;
    HEAP32[$4_1 + 40 >> 2] = $9_1;
    HEAP32[$4_1 + 32 >> 2] = 14572;
    HEAP32[$4_1 + 36 >> 2] = $4_1 + 432;
    HEAP32[$4_1 + 1072 >> 2] = 13748;
    HEAP32[$4_1 + 1084 >> 2] = $7_1;
    HEAP32[$4_1 + 1080 >> 2] = $9_1;
    $7_1 = HEAP32[$3_1 + 20 >> 2] & 8 ? $4_1 + 1072 | 0 : $4_1 + 32 | 0;
    $9_1 = HEAP32[HEAP32[$7_1 >> 2] + 8 >> 2];
    HEAP32[$4_1 + 1076 >> 2] = $4_1 + 432;
    if (!(FUNCTION_TABLE[$9_1 | 0]($7_1, $0_1, $1_1, $5_1, $5_1, $4_1 + 192 | 0) | 0)) {
     break label$1
    }
    if (!($149(HEAPF32[$4_1 + 324 >> 2], HEAPF32[$4_1 + 328 >> 2], HEAPF32[$4_1 + 332 >> 2]) > Math_fround(9.999999747378752e-05)) | !(HEAPF32[$4_1 + 356 >> 2] < HEAPF32[$3_1 + 4 >> 2])) {
     break label$1
    }
    $0_1 = $153($4_1 + 324 | 0);
    $5_1 = $0_1 + 8 | 0;
    $7_1 = HEAP32[$5_1 + 4 >> 2];
    $1_1 = $4_1 + 144 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    HEAPF32[$4_1 + 152 >> 2] = HEAPF32[$4_1 + 356 >> 2];
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$4_1 + 136 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$4_1 + 140 >> 2] = $1_1;
    HEAP32[$4_1 + 132 >> 2] = 0;
    HEAP32[$4_1 + 128 >> 2] = HEAP32[$2_1 + 8 >> 2];
    Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $4_1 + 128 | 0, 1));
    break label$1;
   }
   label$3 : {
    if ($14_1 - 21 >>> 0 <= 8) {
     $463($4_1 + 128 | 0, $5_1);
     $146($4_1 + 112 | 0, $4_1 + 128 | 0, HEAPF32[$0_1 + 48 >> 2], HEAPF32[$0_1 + 52 >> 2], HEAPF32[$0_1 + 56 >> 2]);
     $146($4_1 + 96 | 0, $4_1 + 128 | 0, HEAPF32[$1_1 + 48 >> 2], HEAPF32[$1_1 + 52 >> 2], HEAPF32[$1_1 + 56 >> 2]);
     label$5 : {
      label$6 : {
       label$7 : {
        $9_1 = HEAP32[$7_1 + 4 >> 2];
        switch ($9_1 - 21 | 0) {
        case 1:
         break label$6;
        case 0:
         break label$7;
        default:
         break label$5;
        };
       }
       $1_1 = $4_1 + 104 | 0;
       $9_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $4_1 + 460 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $9_1;
       $1_1 = $4_1 + 120 | 0;
       $9_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $4_1 + 444 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $9_1;
       $0_1 = HEAP32[$4_1 + 100 >> 2];
       HEAP32[$4_1 + 452 >> 2] = HEAP32[$4_1 + 96 >> 2];
       HEAP32[$4_1 + 456 >> 2] = $0_1;
       $0_1 = HEAP32[$4_1 + 116 >> 2];
       HEAP32[$4_1 + 436 >> 2] = HEAP32[$4_1 + 112 >> 2];
       HEAP32[$4_1 + 440 >> 2] = $0_1;
       HEAP32[$4_1 + 472 >> 2] = 1065353216;
       HEAP32[$4_1 + 484 >> 2] = $7_1;
       HEAP32[$4_1 + 432 >> 2] = 19252;
       HEAP32[$4_1 + 480 >> 2] = HEAP32[$2_1 + 8 >> 2];
       HEAP32[$4_1 + 476 >> 2] = $3_1;
       HEAP32[$4_1 + 468 >> 2] = HEAP32[$3_1 + 20 >> 2];
       $1_1 = $5_1 + 8 | 0;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $4_1 + 496 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       $0_1 = HEAP32[$5_1 + 4 >> 2];
       HEAP32[$4_1 + 488 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$4_1 + 492 >> 2] = $0_1;
       $1_1 = $5_1 + 24 | 0;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $4_1 + 512 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       $1_1 = HEAP32[$5_1 + 20 >> 2];
       $0_1 = $4_1 + 504 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $1_1;
       $1_1 = $5_1 + 40 | 0;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $4_1 + 528 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       $1_1 = HEAP32[$5_1 + 36 >> 2];
       $0_1 = $4_1 + 520 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 32 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $1_1;
       $1_1 = $5_1 + 56 | 0;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $4_1 + 544 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       $1_1 = HEAP32[$5_1 + 52 >> 2];
       $0_1 = $4_1 + 536 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $1_1;
       HEAPF32[$4_1 + 472 >> 2] = HEAPF32[$3_1 + 4 >> 2];
       $398($7_1, $4_1 + 432 | 0, $4_1 + 112 | 0, $4_1 + 96 | 0);
       break label$1;
      }
      $0_1 = HEAP32[$7_1 + 36 >> 2];
      $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 28 >> 2]]($7_1) | 0;
      $8_1 = HEAPF32[$1_1 >> 2];
      $6_1 = HEAPF32[$1_1 + 4 >> 2];
      $7_1 = $4_1 + 200 | 0;
      $10_1 = HEAPF32[$1_1 + 8 >> 2];
      HEAPF32[$7_1 >> 2] = HEAPF32[$4_1 + 120 >> 2] / $10_1;
      HEAPF32[$4_1 + 196 >> 2] = HEAPF32[$4_1 + 116 >> 2] / $6_1;
      HEAPF32[$4_1 + 192 >> 2] = HEAPF32[$4_1 + 112 >> 2] / $8_1;
      HEAP32[$4_1 + 204 >> 2] = 0;
      $1_1 = $4_1 + 40 | 0;
      HEAPF32[$1_1 >> 2] = HEAPF32[$4_1 + 104 >> 2] / $10_1;
      HEAPF32[$4_1 + 36 >> 2] = HEAPF32[$4_1 + 100 >> 2] / $6_1;
      HEAPF32[$4_1 + 32 >> 2] = HEAPF32[$4_1 + 96 >> 2] / $8_1;
      HEAP32[$4_1 + 44 >> 2] = 0;
      $14_1 = HEAP32[$1_1 + 4 >> 2];
      $9_1 = $4_1 + 460 | 0;
      HEAP32[$9_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$9_1 + 4 >> 2] = $14_1;
      $9_1 = HEAP32[$7_1 + 4 >> 2];
      $1_1 = $4_1 + 444 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $9_1;
      $1_1 = HEAP32[$4_1 + 36 >> 2];
      HEAP32[$4_1 + 452 >> 2] = HEAP32[$4_1 + 32 >> 2];
      HEAP32[$4_1 + 456 >> 2] = $1_1;
      $1_1 = HEAP32[$4_1 + 196 >> 2];
      HEAP32[$4_1 + 436 >> 2] = HEAP32[$4_1 + 192 >> 2];
      HEAP32[$4_1 + 440 >> 2] = $1_1;
      HEAP32[$4_1 + 472 >> 2] = 1065353216;
      HEAP32[$4_1 + 484 >> 2] = $0_1;
      HEAP32[$4_1 + 432 >> 2] = 19252;
      HEAP32[$4_1 + 480 >> 2] = HEAP32[$2_1 + 8 >> 2];
      HEAP32[$4_1 + 476 >> 2] = $3_1;
      HEAP32[$4_1 + 468 >> 2] = HEAP32[$3_1 + 20 >> 2];
      $2_1 = $5_1 + 8 | 0;
      $7_1 = HEAP32[$2_1 + 4 >> 2];
      $1_1 = $4_1 + 496 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $1_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$4_1 + 488 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 492 >> 2] = $1_1;
      $2_1 = $5_1 + 24 | 0;
      $7_1 = HEAP32[$2_1 + 4 >> 2];
      $1_1 = $4_1 + 512 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $2_1 = HEAP32[$5_1 + 20 >> 2];
      $1_1 = $4_1 + 504 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      $2_1 = $5_1 + 40 | 0;
      $7_1 = HEAP32[$2_1 + 4 >> 2];
      $1_1 = $4_1 + 528 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $2_1 = HEAP32[$5_1 + 36 >> 2];
      $1_1 = $4_1 + 520 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 32 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      $2_1 = $5_1 + 56 | 0;
      $7_1 = HEAP32[$2_1 + 4 >> 2];
      $1_1 = $4_1 + 544 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $2_1 = HEAP32[$5_1 + 52 >> 2];
      $1_1 = $4_1 + 536 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      HEAPF32[$4_1 + 472 >> 2] = HEAPF32[$3_1 + 4 >> 2];
      $398($0_1, $4_1 + 432 | 0, $4_1 + 192 | 0, $4_1 + 32 | 0);
      break label$1;
     }
     if (HEAP32[$3_1 + 20 >> 2] & 16 | ($9_1 | 0) != 24) {
      break label$3
     }
     $463($4_1 + 32 | 0, $5_1);
     $146($4_1 + 16 | 0, $4_1 + 32 | 0, HEAPF32[$0_1 + 48 >> 2], HEAPF32[$0_1 + 52 >> 2], HEAPF32[$0_1 + 56 >> 2]);
     $146($4_1, $4_1 + 32 | 0, HEAPF32[$1_1 + 48 >> 2], HEAPF32[$1_1 + 52 >> 2], HEAPF32[$1_1 + 56 >> 2]);
     $1_1 = $4_1 + 8 | 0;
     $14_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $4_1 + 460 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $14_1;
     $9_1 = $4_1 + 24 | 0;
     $18_1 = HEAP32[$9_1 + 4 >> 2];
     $0_1 = $4_1 + 444 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $18_1;
     $0_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$4_1 + 452 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$4_1 + 456 >> 2] = $0_1;
     $0_1 = HEAP32[$4_1 + 20 >> 2];
     HEAP32[$4_1 + 436 >> 2] = HEAP32[$4_1 + 16 >> 2];
     HEAP32[$4_1 + 440 >> 2] = $0_1;
     HEAP32[$4_1 + 472 >> 2] = 1065353216;
     HEAP32[$4_1 + 484 >> 2] = $7_1;
     HEAP32[$4_1 + 432 >> 2] = 19252;
     HEAP32[$4_1 + 480 >> 2] = HEAP32[$2_1 + 8 >> 2];
     HEAP32[$4_1 + 476 >> 2] = $3_1;
     HEAP32[$4_1 + 468 >> 2] = HEAP32[$3_1 + 20 >> 2];
     $2_1 = $5_1 + 8 | 0;
     $14_1 = HEAP32[$2_1 + 4 >> 2];
     $0_1 = $4_1 + 496 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $14_1;
     $0_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$4_1 + 488 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$4_1 + 492 >> 2] = $0_1;
     $2_1 = $5_1 + 24 | 0;
     $14_1 = HEAP32[$2_1 + 4 >> 2];
     $0_1 = $4_1 + 512 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $14_1;
     $2_1 = HEAP32[$5_1 + 20 >> 2];
     $0_1 = $4_1 + 504 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     $2_1 = HEAP32[$5_1 + 36 >> 2];
     $0_1 = $4_1 + 520 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 32 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     $2_1 = $5_1 + 40 | 0;
     $14_1 = HEAP32[$2_1 + 4 >> 2];
     $0_1 = $4_1 + 528 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $14_1;
     $2_1 = HEAP32[$5_1 + 52 >> 2];
     $0_1 = $4_1 + 536 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     $2_1 = $5_1 + 56 | 0;
     $5_1 = HEAP32[$2_1 + 4 >> 2];
     $0_1 = $4_1 + 544 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $5_1;
     HEAPF32[$4_1 + 472 >> 2] = HEAPF32[$3_1 + 4 >> 2];
     HEAP32[$4_1 + 1068 >> 2] = 0;
     $6_1 = HEAPF32[$7_1 + 120 >> 2];
     $10_1 = HEAPF32[$7_1 + 116 >> 2];
     $11_1 = HEAPF32[$9_1 >> 2];
     $16_1 = HEAPF32[$7_1 + 112 >> 2];
     $8_1 = HEAPF32[$4_1 + 20 >> 2];
     $12_1 = HEAPF32[$4_1 + 16 >> 2];
     HEAP32[$4_1 + 1052 >> 2] = 0;
     $15_1 = HEAPF32[$7_1 + 52 >> 2];
     $17_1 = Math_fround(Math_fround($12_1 / $16_1) + $15_1);
     HEAPF32[$4_1 + 1056 >> 2] = $17_1;
     $13_1 = HEAPF32[$7_1 + 56 >> 2];
     $8_1 = Math_fround(Math_fround($8_1 / $10_1) + $13_1);
     HEAPF32[$4_1 + 1060 >> 2] = $8_1;
     $12_1 = HEAPF32[$7_1 + 60 >> 2];
     $11_1 = Math_fround(Math_fround($11_1 / $6_1) + $12_1);
     HEAPF32[$4_1 + 1064 >> 2] = $11_1;
     $12_1 = Math_fround($12_1 + Math_fround(HEAPF32[$1_1 >> 2] / $6_1));
     HEAPF32[$4_1 + 1048 >> 2] = $12_1;
     $13_1 = Math_fround($13_1 + Math_fround(HEAPF32[$4_1 + 4 >> 2] / $10_1));
     HEAPF32[$4_1 + 1044 >> 2] = $13_1;
     $16_1 = Math_fround($15_1 + Math_fround(HEAPF32[$4_1 >> 2] / $16_1));
     HEAPF32[$4_1 + 1040 >> 2] = $16_1;
     HEAP32[$4_1 + 1016 >> 2] = $7_1;
     HEAP16[$4_1 + 1020 >> 1] = HEAPU16[$7_1 + 104 >> 1];
     HEAP32[$4_1 + 1024 >> 2] = HEAP32[$7_1 + 68 >> 2] - 1;
     HEAP32[$4_1 + 1028 >> 2] = HEAP32[$7_1 + 72 >> 2] - 1;
     HEAP32[$4_1 + 1032 >> 2] = $4_1 + 432;
     HEAP32[$4_1 + 960 >> 2] = HEAP32[4606];
     $0_1 = HEAP32[4605];
     HEAP32[$4_1 + 952 >> 2] = HEAP32[4604];
     HEAP32[$4_1 + 956 >> 2] = $0_1;
     $0_1 = 2;
     $10_1 = $12_1;
     $6_1 = $11_1;
     if (HEAP32[$7_1 + 108 >> 2] == 2) {
      HEAP32[$4_1 + 956 >> 2] = 2;
      HEAP32[$4_1 + 960 >> 2] = 1;
      $10_1 = $13_1;
      $6_1 = $8_1;
      $0_1 = 1;
     }
     $15_1 = Math_fround(Math_floor($16_1));
     label$9 : {
      if (Math_fround(Math_abs($15_1)) < Math_fround(2147483648.0)) {
       $1_1 = ~~$15_1;
       break label$9;
      }
      $1_1 = -2147483648;
     }
     $15_1 = Math_fround(Math_floor($17_1));
     label$11 : {
      if (Math_fround(Math_abs($15_1)) < Math_fround(2147483648.0)) {
       $2_1 = ~~$15_1;
       break label$11;
      }
      $2_1 = -2147483648;
     }
     $9_1 = ($1_1 | 0) != ($2_1 | 0);
     $6_1 = Math_fround(Math_floor($6_1));
     label$13 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $1_1 = ~~$6_1;
       break label$13;
      }
      $1_1 = -2147483648;
     }
     $3_1 = $1_1;
     $6_1 = Math_fround(Math_floor($10_1));
     label$15 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $1_1 = ~~$6_1;
       break label$15;
      }
      $1_1 = -2147483648;
     }
     if (!($9_1 | ($3_1 | 0) != ($1_1 | 0))) {
      $700($4_1 + 1016 | 0, $2_1, $1_1);
      break label$1;
     }
     if (!HEAP32[$7_1 + 132 >> 2]) {
      $701($4_1 + 1016 | 0, $4_1 + 1056 | 0, $4_1 + 1040 | 0, $4_1 + 952 | 0);
      break label$1;
     }
     HEAP32[$4_1 + 1012 >> 2] = 0;
     HEAPF32[$4_1 + 1008 >> 2] = $12_1 - $11_1;
     HEAPF32[$4_1 + 1004 >> 2] = $13_1 - $8_1;
     $6_1 = Math_fround($16_1 - $17_1);
     HEAPF32[$4_1 + 1e3 >> 2] = $6_1;
     $1_1 = HEAP32[$7_1 + 156 >> 2];
     $10_1 = Math_fround($6_1 * $6_1);
     $6_1 = HEAPF32[($4_1 + 1e3 | 0) + ($0_1 << 2) >> 2];
     if (Math_fround(Math_imul($1_1, $1_1) | 0) > Math_fround($10_1 + Math_fround($6_1 * $6_1))) {
      $701($4_1 + 1016 | 0, $4_1 + 1056 | 0, $4_1 + 1040 | 0, $4_1 + 952 | 0)
     }
     $1_1 = $4_1 + 1064 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $4_1 + 216 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     $1_1 = $4_1 + 1048 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $4_1 + 232 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     HEAP32[$4_1 + 192 >> 2] = $7_1 + 128;
     $0_1 = HEAP32[$4_1 + 1060 >> 2];
     HEAP32[$4_1 + 208 >> 2] = HEAP32[$4_1 + 1056 >> 2];
     HEAP32[$4_1 + 212 >> 2] = $0_1;
     $0_1 = HEAP32[$4_1 + 1044 >> 2];
     HEAP32[$4_1 + 224 >> 2] = HEAP32[$4_1 + 1040 >> 2];
     HEAP32[$4_1 + 228 >> 2] = $0_1;
     $0_1 = $7_1 + 148 | 0;
     $1_1 = HEAP32[$0_1 + 4 >> 2];
     HEAP32[$4_1 + 196 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$4_1 + 200 >> 2] = $1_1;
     HEAP32[$4_1 + 256 >> 2] = $4_1 + 952;
     $185($4_1 + 240 | 0, $4_1 + 1e3 | 0);
     HEAP32[$4_1 + 276 >> 2] = HEAP32[$4_1 + 1032 >> 2];
     $1_1 = $4_1 + 1024 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $4_1 + 268 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     $0_1 = HEAP32[$4_1 + 1020 >> 2];
     HEAP32[$4_1 + 260 >> 2] = HEAP32[$4_1 + 1016 >> 2];
     HEAP32[$4_1 + 264 >> 2] = $0_1;
     $0_1 = HEAP32[$7_1 + 156 >> 2];
     HEAP32[$4_1 + 204 >> 2] = $0_1;
     HEAP32[$4_1 + 996 >> 2] = 0;
     $6_1 = Math_fround(Math_fround(1.0) / Math_fround($0_1 | 0));
     $10_1 = Math_fround($6_1 * $11_1);
     HEAPF32[$4_1 + 992 >> 2] = $10_1;
     $8_1 = Math_fround($6_1 * $8_1);
     HEAPF32[$4_1 + 988 >> 2] = $8_1;
     $11_1 = Math_fround($17_1 * $6_1);
     HEAPF32[$4_1 + 984 >> 2] = $11_1;
     HEAP32[$4_1 + 980 >> 2] = 0;
     $12_1 = Math_fround($6_1 * $12_1);
     HEAPF32[$4_1 + 976 >> 2] = $12_1;
     $13_1 = Math_fround($6_1 * $13_1);
     HEAPF32[$4_1 + 972 >> 2] = $13_1;
     $6_1 = Math_fround($16_1 * $6_1);
     HEAPF32[$4_1 + 968 >> 2] = $6_1;
     $8_1 = $702($11_1, $8_1, $10_1, $6_1, $13_1, $12_1);
     HEAPF32[$4_1 + 1100 >> 2] = $8_1;
     if (+$8_1 < .0001) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 + 952 >> 2] << 2;
     $11_1 = HEAPF32[$0_1 + ($4_1 + 984 | 0) >> 2];
     $1_1 = HEAP32[$4_1 + 960 >> 2] << 2;
     $12_1 = HEAPF32[$1_1 + ($4_1 + 984 | 0) >> 2];
     $8_1 = Math_fround(HEAPF32[$0_1 + ($4_1 + 968 | 0) >> 2] - $11_1);
     $10_1 = Math_fround(HEAPF32[$1_1 + ($4_1 + 968 | 0) >> 2] - $12_1);
     $13_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($10_1 * $10_1))));
     HEAPF32[$4_1 + 1096 >> 2] = $13_1;
     $6_1 = Math_fround(0.0);
     $17_1 = Math_fround(0.0);
     if (!(+$13_1 < .0001)) {
      $17_1 = Math_fround($8_1 / $13_1);
      $6_1 = Math_fround($10_1 / $13_1);
     }
     $3_1 = $17_1 > Math_fround(0.0) ? 1 : $17_1 < Math_fround(0.0) ? -1 : 0;
     $16_1 = $3_1 ? Math_fround(Math_fround(1.0) / Math_fround(Math_abs($17_1))) : Math_fround(9999999.0);
     $5_1 = $6_1 > Math_fround(0.0) ? 1 : $6_1 < Math_fround(0.0) ? -1 : 0;
     $15_1 = $5_1 ? Math_fround(Math_fround(1.0) / Math_fround(Math_abs($6_1))) : Math_fround(9999999.0);
     $10_1 = Math_fround(9999999.0);
     $8_1 = Math_fround(9999999.0);
     label$21 : {
      if (!$3_1) {
       break label$21
      }
      $8_1 = Math_fround(Math_fround(Math_fround(Math_ceil($11_1)) - $11_1) * $16_1);
      if ($17_1 > Math_fround(0.0)) {
       break label$21
      }
      $8_1 = Math_fround(Math_fround($11_1 - Math_fround(Math_floor($11_1))) * $16_1);
     }
     label$22 : {
      if (!$5_1) {
       break label$22
      }
      if ($6_1 > Math_fround(0.0)) {
       $10_1 = Math_fround(Math_fround(Math_fround(Math_ceil($12_1)) - $12_1) * $15_1);
       break label$22;
      }
      $10_1 = Math_fround(Math_fround($12_1 - Math_fround(Math_floor($12_1))) * $15_1);
     }
     $0_1 = $4_1;
     $6_1 = Math_fround(Math_floor($12_1));
     label$24 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $1_1 = ~~$6_1;
       break label$24;
      }
      $1_1 = -2147483648;
     }
     HEAP32[$0_1 + 1076 >> 2] = $1_1;
     $0_1 = $4_1;
     $6_1 = Math_fround(Math_floor($11_1));
     label$26 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $2_1 = ~~$6_1;
       break label$26;
      }
      $2_1 = -2147483648;
     }
     HEAP32[$0_1 + 1072 >> 2] = $2_1;
     label$28 : {
      if ($8_1 != Math_fround(0.0)) {
       break label$28
      }
      $8_1 = Math_fround($16_1 + $8_1);
      if (($3_1 | 0) != -1) {
       break label$28
      }
      $2_1 = $2_1 - 1 | 0;
      HEAP32[$4_1 + 1072 >> 2] = $2_1;
     }
     label$29 : {
      if ($10_1 != Math_fround(0.0)) {
       break label$29
      }
      $10_1 = Math_fround($15_1 + $10_1);
      if (($5_1 | 0) != -1) {
       break label$29
      }
      $1_1 = $1_1 - 1 | 0;
      HEAP32[$4_1 + 1076 >> 2] = $1_1;
     }
     $6_1 = Math_fround(0.0);
     while (1) {
      HEAPF32[$4_1 + 1092 >> 2] = $6_1;
      HEAP32[$4_1 + 1084 >> 2] = $1_1;
      HEAP32[$4_1 + 1080 >> 2] = $2_1;
      label$31 : {
       if ($8_1 < $10_1) {
        $2_1 = $2_1 + $3_1 | 0;
        HEAP32[$4_1 + 1072 >> 2] = $2_1;
        HEAPF32[$4_1 + 1088 >> 2] = $8_1;
        $6_1 = $8_1;
        $8_1 = Math_fround($16_1 + $6_1);
        break label$31;
       }
       $1_1 = $1_1 + $5_1 | 0;
       HEAP32[$4_1 + 1076 >> 2] = $1_1;
       HEAPF32[$4_1 + 1088 >> 2] = $10_1;
       $6_1 = $10_1;
       $10_1 = Math_fround($15_1 + $6_1);
      }
      if ($6_1 > $13_1) {
       HEAPF32[$4_1 + 1088 >> 2] = $13_1;
       $704($4_1 + 192 | 0, $4_1 + 1072 | 0);
       break label$1;
      } else {
       $704($4_1 + 192 | 0, $4_1 + 1072 | 0);
       continue;
      }
     };
    }
    if (($14_1 | 0) != 31) {
     break label$1
    }
    $9_1 = HEAP32[$7_1 + 68 >> 2];
    HEAP32[$4_1 + 152 >> 2] = $3_1;
    HEAP32[$4_1 + 148 >> 2] = $1_1;
    HEAP32[$4_1 + 144 >> 2] = $0_1;
    HEAP32[$4_1 + 140 >> 2] = $5_1;
    HEAP32[$4_1 + 136 >> 2] = $7_1;
    HEAP32[$4_1 + 128 >> 2] = 18736;
    HEAP32[$4_1 + 132 >> 2] = HEAP32[$2_1 + 8 >> 2];
    if ($9_1) {
     $529($4_1 + 432 | 0, $5_1, $0_1);
     $2_1 = $4_1 + 488 | 0;
     $7_1 = HEAP32[$2_1 + 4 >> 2];
     $0_1 = $4_1 + 1064 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $7_1;
     $0_1 = HEAP32[$4_1 + 484 >> 2];
     HEAP32[$4_1 + 1056 >> 2] = HEAP32[$4_1 + 480 >> 2];
     HEAP32[$4_1 + 1060 >> 2] = $0_1;
     $529($4_1 + 432 | 0, $5_1, $1_1);
     $1_1 = HEAP32[$9_1 >> 2];
     if (!$1_1) {
      break label$1
     }
     $8_1 = HEAPF32[$2_1 >> 2];
     $6_1 = HEAPF32[$4_1 + 484 >> 2];
     $10_1 = HEAPF32[$4_1 + 480 >> 2];
     HEAP32[$4_1 + 1084 >> 2] = 0;
     $11_1 = Math_fround($8_1 - HEAPF32[$4_1 + 1064 >> 2]);
     HEAPF32[$4_1 + 1080 >> 2] = $11_1;
     $12_1 = Math_fround($10_1 - HEAPF32[$4_1 + 1056 >> 2]);
     HEAPF32[$4_1 + 1072 >> 2] = $12_1;
     $13_1 = Math_fround($6_1 - HEAPF32[$4_1 + 1060 >> 2]);
     HEAPF32[$4_1 + 1076 >> 2] = $13_1;
     $153($4_1 + 1072 | 0);
     $8_1 = HEAPF32[$4_1 + 1072 >> 2];
     $17_1 = $8_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $8_1);
     HEAPF32[$4_1 + 1016 >> 2] = $17_1;
     $6_1 = HEAPF32[$4_1 + 1076 >> 2];
     $16_1 = $6_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $6_1);
     HEAPF32[$4_1 + 1020 >> 2] = $16_1;
     $10_1 = HEAPF32[$4_1 + 1080 >> 2];
     $15_1 = $10_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $10_1);
     HEAPF32[$4_1 + 1024 >> 2] = $15_1;
     HEAP32[$4_1 + 960 >> 2] = $15_1 < Math_fround(0.0);
     HEAP32[$4_1 + 956 >> 2] = $16_1 < Math_fround(0.0);
     HEAP32[$4_1 + 952 >> 2] = $17_1 < Math_fround(0.0);
     HEAP32[$4_1 + 44 >> 2] = 0;
     HEAP8[$4_1 + 48 | 0] = 1;
     HEAP32[$4_1 + 36 >> 2] = 0;
     HEAP32[$4_1 + 40 >> 2] = 0;
     $355($4_1 + 32 | 0, $4_1 + 432 | 0, 128, 128);
     $0_1 = HEAP32[$4_1 + 44 >> 2];
     HEAP32[$0_1 >> 2] = $1_1;
     $8_1 = Math_fround(Math_fround(Math_fround($8_1 * $12_1) + Math_fround($13_1 * $6_1)) + Math_fround($11_1 * $10_1));
     $7_1 = $4_1 + 208 | 0;
     $1_1 = 126;
     $2_1 = 1;
     while (1) {
      $3_1 = $2_1 - 1 | 0;
      $14_1 = $3_1 << 2;
      $5_1 = HEAP32[$14_1 + $0_1 >> 2];
      $18_1 = HEAP32[$5_1 + 20 >> 2];
      HEAP32[$7_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $18_1;
      $9_1 = $5_1 + 24 | 0;
      $19_1 = HEAP32[$9_1 + 4 >> 2];
      $18_1 = $7_1 + 8 | 0;
      HEAP32[$18_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$18_1 + 4 >> 2] = $19_1;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$4_1 + 192 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 196 >> 2] = $9_1;
      $9_1 = $5_1 + 8 | 0;
      $18_1 = HEAP32[$9_1 + 4 >> 2];
      HEAP32[$4_1 + 200 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$4_1 + 204 >> 2] = $18_1;
      HEAP32[$4_1 + 1040 >> 2] = 1065353216;
      label$37 : {
       if ($377($4_1 + 1056 | 0, $4_1 + 1016 | 0, $4_1 + 952 | 0, $4_1 + 192 | 0, $4_1 + 1040 | 0, $8_1)) {
        if (HEAP32[$5_1 + 40 >> 2]) {
         if (($1_1 | 0) < ($3_1 | 0)) {
          $0_1 = HEAP32[$4_1 + 36 >> 2];
          HEAP32[$4_1 + 1e3 >> 2] = 0;
          $204($4_1 + 32 | 0, $0_1 << 1, $4_1 + 1e3 | 0);
          $1_1 = HEAP32[$4_1 + 36 >> 2] - 2 | 0;
          $0_1 = HEAP32[$4_1 + 44 >> 2];
         }
         HEAP32[$0_1 + $14_1 >> 2] = HEAP32[$5_1 + 36 >> 2];
         HEAP32[($2_1 << 2) + $0_1 >> 2] = HEAP32[$5_1 + 40 >> 2];
         $2_1 = $2_1 + 1 | 0;
         break label$37;
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$4_1 + 128 >> 2] + 12 >> 2]]($4_1 + 128 | 0, $5_1);
       }
       $2_1 = $3_1;
      }
      if ($2_1) {
       continue
      }
      break;
     };
     $124($4_1 + 32 | 0);
     break label$1;
    }
    $1_1 = 0;
    $0_1 = HEAP32[$7_1 + 20 >> 2];
    $0_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
    while (1) {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$1
     }
     $729($4_1 + 128 | 0, $1_1);
     $1_1 = $1_1 + 1 | 0;
     continue;
    };
   }
   $463($4_1 + 192 | 0, $5_1);
   $146($4_1 + 32 | 0, $4_1 + 192 | 0, HEAPF32[$0_1 + 48 >> 2], HEAPF32[$0_1 + 52 >> 2], HEAPF32[$0_1 + 56 >> 2]);
   $146($4_1 + 1072 | 0, $4_1 + 192 | 0, HEAPF32[$1_1 + 48 >> 2], HEAPF32[$1_1 + 52 >> 2], HEAPF32[$1_1 + 56 >> 2]);
   $1_1 = $4_1 + 1080 | 0;
   $9_1 = HEAP32[$1_1 + 4 >> 2];
   $0_1 = $4_1 + 460 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $9_1;
   $0_1 = $4_1 + 40 | 0;
   $14_1 = HEAP32[$0_1 + 4 >> 2];
   $1_1 = $4_1 + 444 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $14_1;
   $1_1 = HEAP32[$4_1 + 1076 >> 2];
   HEAP32[$4_1 + 452 >> 2] = HEAP32[$4_1 + 1072 >> 2];
   HEAP32[$4_1 + 456 >> 2] = $1_1;
   $1_1 = HEAP32[$4_1 + 36 >> 2];
   HEAP32[$4_1 + 436 >> 2] = HEAP32[$4_1 + 32 >> 2];
   HEAP32[$4_1 + 440 >> 2] = $1_1;
   HEAP32[$4_1 + 472 >> 2] = 1065353216;
   HEAP32[$4_1 + 484 >> 2] = $7_1;
   HEAP32[$4_1 + 432 >> 2] = 18712;
   HEAP32[$4_1 + 480 >> 2] = HEAP32[$2_1 + 8 >> 2];
   HEAP32[$4_1 + 476 >> 2] = $3_1;
   HEAP32[$4_1 + 468 >> 2] = HEAP32[$3_1 + 20 >> 2];
   $2_1 = $5_1 + 8 | 0;
   $9_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $4_1 + 496 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $9_1;
   $1_1 = HEAP32[$5_1 + 4 >> 2];
   HEAP32[$4_1 + 488 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$4_1 + 492 >> 2] = $1_1;
   $2_1 = $5_1 + 24 | 0;
   $9_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $4_1 + 512 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $9_1;
   $2_1 = HEAP32[$5_1 + 20 >> 2];
   $1_1 = $4_1 + 504 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $2_1;
   $2_1 = HEAP32[$5_1 + 36 >> 2];
   $1_1 = $4_1 + 520 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 32 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $2_1;
   $2_1 = $5_1 + 40 | 0;
   $9_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $4_1 + 528 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $9_1;
   $2_1 = HEAP32[$5_1 + 52 >> 2];
   $1_1 = $4_1 + 536 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $2_1;
   $2_1 = $5_1 + 56 | 0;
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $4_1 + 544 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $5_1;
   HEAPF32[$4_1 + 472 >> 2] = HEAPF32[$3_1 + 4 >> 2];
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $1_1 = $4_1 + 1024 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $2_1;
   $0_1 = HEAP32[$4_1 + 36 >> 2];
   HEAP32[$4_1 + 1016 >> 2] = HEAP32[$4_1 + 32 >> 2];
   HEAP32[$4_1 + 1020 >> 2] = $0_1;
   $8_1 = HEAPF32[$4_1 + 1072 >> 2];
   if ($8_1 < HEAPF32[$4_1 + 1016 >> 2]) {
    HEAPF32[$4_1 + 1016 >> 2] = $8_1
   }
   $6_1 = HEAPF32[$4_1 + 1076 >> 2];
   if ($6_1 < HEAPF32[$4_1 + 1020 >> 2]) {
    HEAPF32[$4_1 + 1020 >> 2] = $6_1
   }
   $10_1 = HEAPF32[$4_1 + 1080 >> 2];
   if ($10_1 < HEAPF32[$4_1 + 1024 >> 2]) {
    HEAPF32[$4_1 + 1024 >> 2] = $10_1
   }
   $11_1 = HEAPF32[$4_1 + 1084 >> 2];
   if ($11_1 < HEAPF32[$4_1 + 1028 >> 2]) {
    HEAPF32[$4_1 + 1028 >> 2] = $11_1
   }
   $1_1 = $4_1 + 40 | 0;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $0_1 = $4_1 + 1064 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $2_1;
   $0_1 = HEAP32[$4_1 + 36 >> 2];
   HEAP32[$4_1 + 1056 >> 2] = HEAP32[$4_1 + 32 >> 2];
   HEAP32[$4_1 + 1060 >> 2] = $0_1;
   if ($8_1 > HEAPF32[$4_1 + 1056 >> 2]) {
    HEAPF32[$4_1 + 1056 >> 2] = $8_1
   }
   if ($6_1 > HEAPF32[$4_1 + 1060 >> 2]) {
    HEAPF32[$4_1 + 1060 >> 2] = $6_1
   }
   if ($10_1 > HEAPF32[$4_1 + 1064 >> 2]) {
    HEAPF32[$4_1 + 1064 >> 2] = $10_1
   }
   if ($11_1 > HEAPF32[$4_1 + 1068 >> 2]) {
    HEAPF32[$4_1 + 1068 >> 2] = $11_1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 64 >> 2]]($7_1, $4_1 + 432 | 0, $4_1 + 1016 | 0, $4_1 + 1056 | 0);
  }
  global$0 = $4_1 + 1104 | 0;
 }
 
 function $729($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[HEAP32[$0_1 + 8 >> 2] + 28 >> 2] + Math_imul($1_1, 80) | 0;
  $4_1 = HEAP32[$3_1 + 64 >> 2];
  $464($2_1 + 80 | 0, HEAP32[$0_1 + 12 >> 2], $3_1);
  HEAP32[$2_1 + 72 >> 2] = $1_1;
  HEAP32[$2_1 + 64 >> 2] = 0;
  HEAP32[$2_1 + 68 >> 2] = -1;
  HEAP32[$2_1 + 52 >> 2] = $4_1;
  HEAP32[$2_1 + 48 >> 2] = 0;
  HEAP32[$2_1 + 56 >> 2] = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$2_1 + 60 >> 2] = $2_1 + 80;
  $3_1 = HEAP32[$0_1 + 24 >> 2];
  HEAP32[$3_1 + 24 >> 2] = $1_1;
  HEAP32[$2_1 + 12 >> 2] = 1065353216;
  HEAP32[$2_1 + 24 >> 2] = -1;
  HEAP32[$2_1 + 28 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 1;
  HEAP32[$2_1 + 40 >> 2] = $1_1;
  HEAP32[$2_1 + 8 >> 2] = 18776;
  HEAP32[$2_1 + 36 >> 2] = $3_1;
  HEAPF32[$2_1 + 12 >> 2] = HEAPF32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 28 >> 2] = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$2_1 + 32 >> 2] = $1_1;
  $728(HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 20 >> 2], $2_1 + 48 | 0, $2_1 + 8 | 0);
  global$0 = $2_1 + 144 | 0;
 }
 
 function $730($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[$0_1 + 28 >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1) | 0;
 }
 
 function $731($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = HEAP32[$0_1 + 32 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $3_1;
  HEAP32[$4_1 + 8 >> 2] = $3_1;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  label$1 : {
   if (!$5_1) {
    HEAP32[$1_1 + 4 >> 2] = $4_1 + 8;
    break label$1;
   }
   HEAP32[$5_1 + 4 >> 2] = $3_1;
   HEAP32[$5_1 >> 2] = $3_1;
  }
  $3_1 = HEAP32[$0_1 + 28 >> 2];
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $1_1, $2_1));
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[HEAP32[$0_1 + 28 >> 2] + 4 >> 2];
  global$0 = $4_1 + 16 | 0;
  return Math_fround($6_1);
 }
 
 function $732($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $729($0_1, HEAP32[$1_1 + 36 >> 2]);
 }
 
 function $733($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 + -64 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 60 >> 2] = $4_1;
  HEAP32[$5_1 + 56 >> 2] = $3_1;
  $431($5_1 + 40 | 0, $0_1 + 56 | 0, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
  $3_1 = $5_1 + 48 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $5_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$5_1 + 44 >> 2];
  HEAP32[$5_1 + 16 >> 2] = HEAP32[$5_1 + 40 >> 2];
  HEAP32[$5_1 + 20 >> 2] = $1_1;
  HEAPF32[$5_1 + 32 >> 2] = $2_1;
  HEAP32[$5_1 + 8 >> 2] = HEAP32[$0_1 + 48 >> 2];
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 56;
  $0_1 = HEAP32[$0_1 + 44 >> 2];
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, $5_1 + 8 | 0, 1));
  global$0 = $5_1 - -64 | 0;
  return Math_fround($2_1);
 }
 
 function $734($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0);
  $2_1 = global$0 - 112 | 0;
  global$0 = $2_1;
  $3_1 = $0_1 + 28 | 0;
  $146($2_1 + 96 | 0, $3_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
  $146($2_1 + 80 | 0, $3_1, HEAPF32[$1_1 + 16 >> 2], HEAPF32[$1_1 + 20 >> 2], HEAPF32[$1_1 + 24 >> 2]);
  $146($2_1 - -64 | 0, $3_1, HEAPF32[$1_1 + 32 >> 2], HEAPF32[$1_1 + 36 >> 2], HEAPF32[$1_1 + 40 >> 2]);
  HEAP32[$2_1 + 60 >> 2] = 0;
  $4_1 = HEAPF32[$2_1 + 104 >> 2];
  $7_1 = HEAPF32[$2_1 + 88 >> 2];
  $10_1 = HEAPF32[$2_1 + 72 >> 2];
  $11_1 = Math_fround(Math_fround(Math_fround($4_1 + $7_1) + $10_1) * Math_fround(.3333333432674408));
  HEAPF32[$2_1 + 56 >> 2] = $11_1;
  $5_1 = HEAPF32[$2_1 + 100 >> 2];
  $12_1 = HEAPF32[$2_1 + 84 >> 2];
  $8_1 = HEAPF32[$2_1 + 68 >> 2];
  $13_1 = Math_fround(Math_fround(Math_fround($5_1 + $12_1) + $8_1) * Math_fround(.3333333432674408));
  HEAPF32[$2_1 + 52 >> 2] = $13_1;
  $6_1 = HEAPF32[$2_1 + 96 >> 2];
  $9_1 = HEAPF32[$2_1 + 80 >> 2];
  $14_1 = HEAPF32[$2_1 + 64 >> 2];
  $15_1 = Math_fround(Math_fround(Math_fround($6_1 + $9_1) + $14_1) * Math_fround(.3333333432674408));
  HEAPF32[$2_1 + 48 >> 2] = $15_1;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 56 >> 2]]($1_1) & 16384) {
   HEAP32[$2_1 + 44 >> 2] = 0;
   $9_1 = Math_fround($9_1 - $6_1);
   $8_1 = Math_fround($8_1 - $5_1);
   $5_1 = Math_fround($12_1 - $5_1);
   $6_1 = Math_fround($14_1 - $6_1);
   HEAPF32[$2_1 + 40 >> 2] = Math_fround($9_1 * $8_1) - Math_fround($5_1 * $6_1);
   $7_1 = Math_fround($7_1 - $4_1);
   $4_1 = Math_fround($10_1 - $4_1);
   HEAPF32[$2_1 + 36 >> 2] = Math_fround($7_1 * $6_1) - Math_fround($9_1 * $4_1);
   HEAPF32[$2_1 + 32 >> 2] = Math_fround($5_1 * $4_1) - Math_fround($7_1 * $8_1);
   $153($2_1 + 32 | 0);
   HEAP32[$2_1 + 24 >> 2] = 0;
   HEAP32[$2_1 + 28 >> 2] = 0;
   HEAP32[$2_1 + 16 >> 2] = 1065353216;
   HEAP32[$2_1 + 20 >> 2] = 1065353216;
   $1_1 = HEAP32[$0_1 + 8 >> 2];
   HEAP32[$2_1 + 12 >> 2] = 0;
   HEAPF32[$2_1 + 8 >> 2] = $11_1 + HEAPF32[$2_1 + 40 >> 2];
   HEAPF32[$2_1 + 4 >> 2] = $13_1 + HEAPF32[$2_1 + 36 >> 2];
   HEAPF32[$2_1 >> 2] = $15_1 + HEAPF32[$2_1 + 32 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, $2_1 + 48 | 0, $2_1, $2_1 + 16 | 0);
  }
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  $1_1 = $0_1 + 12 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $2_1 + 96 | 0, $2_1 + 80 | 0, $1_1);
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $2_1 + 80 | 0, $2_1 - -64 | 0, $1_1);
  $0_1 = HEAP32[$0_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1, $2_1 - -64 | 0, $2_1 + 96 | 0, $1_1);
  global$0 = $2_1 + 112 | 0;
 }
 
 function $735($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $736($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 - 4 | 0;
 }
 
 function $737($0_1) {
  $0_1 = $0_1 | 0;
  $33($0_1 - 4 | 0);
 }
 
 function $738($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $0_1 - 4 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $739($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0);
  $6_1 = global$0 - 720 | 0;
  global$0 = $6_1;
  $9_1 = HEAP32[$3_1 + 12 >> 2];
  $15_1 = HEAP32[$3_1 + 4 >> 2];
  $7_1 = HEAP32[$15_1 + 4 >> 2];
  label$1 : {
   if (($7_1 | 0) <= 19) {
    HEAP32[$6_1 + 712 >> 2] = 32;
    HEAP32[$6_1 + 716 >> 2] = 953267991;
    HEAP32[$6_1 + 704 >> 2] = 0;
    HEAP32[$6_1 + 536 >> 2] = 14128;
    HEAPF32[$6_1 + 708 >> 2] = $5_1;
    HEAPF32[$6_1 + 700 >> 2] = HEAPF32[$4_1 + 4 >> 2];
    HEAP8[$6_1 + 508 | 0] = 0;
    HEAP32[$6_1 + 484 >> 2] = 953267991;
    HEAP32[$6_1 + 136 >> 2] = 16016;
    HEAP32[$6_1 + 172 >> 2] = 0;
    HEAP32[$6_1 + 168 >> 2] = $15_1;
    HEAP32[$6_1 + 164 >> 2] = $0_1;
    HEAP32[$6_1 + 152 >> 2] = 18436;
    HEAP32[$6_1 + 160 >> 2] = $6_1 + 136;
    HEAP32[$6_1 + 156 >> 2] = $6_1 + 176;
    if (!$705($6_1 + 152 | 0, $1_1, $2_1, $9_1, $9_1, $6_1 + 536 | 0)) {
     break label$1
    }
    if (!($149(HEAPF32[$6_1 + 668 >> 2], HEAPF32[$6_1 + 672 >> 2], HEAPF32[$6_1 + 676 >> 2]) > Math_fround(9.999999747378752e-05)) | !(HEAPF32[$6_1 + 700 >> 2] < HEAPF32[$4_1 + 4 >> 2])) {
     break label$1
    }
    $0_1 = $153($6_1 + 668 | 0);
    $2_1 = $6_1 + 692 | 0;
    $9_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $6_1 + 104 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $9_1;
    $2_1 = $0_1 + 8 | 0;
    $9_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $6_1 + 88 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $9_1;
    $1_1 = HEAP32[$6_1 + 688 >> 2];
    HEAP32[$6_1 + 96 >> 2] = HEAP32[$6_1 + 684 >> 2];
    HEAP32[$6_1 + 100 >> 2] = $1_1;
    HEAPF32[$6_1 + 112 >> 2] = HEAPF32[$6_1 + 700 >> 2];
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$6_1 + 80 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$6_1 + 84 >> 2] = $1_1;
    HEAP32[$6_1 + 76 >> 2] = 0;
    HEAP32[$6_1 + 72 >> 2] = HEAP32[$3_1 + 8 >> 2];
    Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $6_1 + 72 | 0, 1));
    break label$1;
   }
   if ($7_1 - 21 >>> 0 <= 8) {
    label$4 : {
     if (($7_1 | 0) != 28) {
      if (($7_1 | 0) != 21) {
       break label$4
      }
      $463($6_1 + 536 | 0, $9_1);
      $7_1 = $1_1 + 48 | 0;
      $10_1 = $1_1 + 56 | 0;
      $146($6_1 + 152 | 0, $6_1 + 536 | 0, HEAPF32[$7_1 >> 2], HEAPF32[$1_1 + 52 >> 2], HEAPF32[$10_1 >> 2]);
      $17_1 = $2_1 + 48 | 0;
      $14_1 = $2_1 + 56 | 0;
      $146($6_1 + 136 | 0, $6_1 + 536 | 0, HEAPF32[$17_1 >> 2], HEAPF32[$2_1 + 52 >> 2], HEAPF32[$14_1 >> 2]);
      $455($6_1 + 176 | 0, $6_1 + 536 | 0, $2_1);
      $8_1 = $6_1 + 128 | 0;
      HEAP32[$8_1 >> 2] = 0;
      HEAP32[$8_1 + 4 >> 2] = 0;
      $13_1 = $6_1 + 184 | 0;
      $11_1 = HEAP32[$13_1 + 4 >> 2];
      $8_1 = $6_1 + 80 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $11_1;
      $8_1 = $6_1 + 200 | 0;
      $16_1 = HEAP32[$8_1 + 4 >> 2];
      $13_1 = $6_1 + 96 | 0;
      HEAP32[$13_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$13_1 + 4 >> 2] = $16_1;
      $13_1 = $6_1 + 216 | 0;
      $18_1 = HEAP32[$13_1 + 4 >> 2];
      $11_1 = $6_1 + 112 | 0;
      HEAP32[$11_1 >> 2] = HEAP32[$13_1 >> 2];
      HEAP32[$11_1 + 4 >> 2] = $18_1;
      HEAP32[$6_1 + 120 >> 2] = 0;
      HEAP32[$6_1 + 124 >> 2] = 0;
      $11_1 = HEAP32[$6_1 + 180 >> 2];
      HEAP32[$6_1 + 72 >> 2] = HEAP32[$6_1 + 176 >> 2];
      HEAP32[$6_1 + 76 >> 2] = $11_1;
      $11_1 = HEAP32[$6_1 + 196 >> 2];
      HEAP32[$6_1 + 88 >> 2] = HEAP32[$6_1 + 192 >> 2];
      HEAP32[$6_1 + 92 >> 2] = $11_1;
      $11_1 = HEAP32[$6_1 + 212 >> 2];
      HEAP32[$6_1 + 104 >> 2] = HEAP32[$6_1 + 208 >> 2];
      HEAP32[$6_1 + 108 >> 2] = $11_1;
      $3_1 = HEAP32[$3_1 + 8 >> 2];
      $12_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$15_1 >> 2] + 48 >> 2]]($15_1));
      $16_1 = $1_1 + 8 | 0;
      $18_1 = HEAP32[$16_1 + 4 >> 2];
      $11_1 = $6_1 + 192 | 0;
      HEAP32[$11_1 >> 2] = HEAP32[$16_1 >> 2];
      HEAP32[$11_1 + 4 >> 2] = $18_1;
      $11_1 = HEAP32[$1_1 + 20 >> 2];
      HEAP32[$8_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $11_1;
      $11_1 = $1_1 + 24 | 0;
      $16_1 = HEAP32[$11_1 + 4 >> 2];
      $8_1 = $6_1 + 208 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $16_1;
      $8_1 = HEAP32[$1_1 + 36 >> 2];
      HEAP32[$13_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
      HEAP32[$13_1 + 4 >> 2] = $8_1;
      $13_1 = $1_1 + 40 | 0;
      $11_1 = HEAP32[$13_1 + 4 >> 2];
      $8_1 = $6_1 + 224 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $11_1;
      $13_1 = HEAP32[$7_1 + 4 >> 2];
      $8_1 = $6_1 + 232 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $13_1;
      $8_1 = HEAP32[$10_1 + 4 >> 2];
      $7_1 = $6_1 + 240 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$10_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $8_1;
      $10_1 = $2_1 + 8 | 0;
      $8_1 = HEAP32[$10_1 + 4 >> 2];
      $7_1 = $6_1 + 256 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$10_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $8_1;
      HEAP32[$6_1 + 180 >> 2] = $0_1;
      HEAP32[$6_1 + 176 >> 2] = 18540;
      $7_1 = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$6_1 + 184 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$6_1 + 188 >> 2] = $7_1;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      HEAP32[$6_1 + 248 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$6_1 + 252 >> 2] = $1_1;
      $7_1 = $2_1 + 24 | 0;
      $10_1 = HEAP32[$7_1 + 4 >> 2];
      $1_1 = $6_1 + 272 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $10_1;
      $7_1 = HEAP32[$2_1 + 20 >> 2];
      $1_1 = $6_1 + 264 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $7_1 = $2_1 + 40 | 0;
      $10_1 = HEAP32[$7_1 + 4 >> 2];
      $1_1 = $6_1 + 288 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $10_1;
      $7_1 = HEAP32[$2_1 + 36 >> 2];
      $1_1 = $6_1 + 280 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $2_1 = HEAP32[$14_1 + 4 >> 2];
      $1_1 = $6_1 + 304 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$14_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      $2_1 = HEAP32[$17_1 + 4 >> 2];
      $1_1 = $6_1 + 296 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$17_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      $2_1 = $9_1 + 8 | 0;
      $7_1 = HEAP32[$2_1 + 4 >> 2];
      $1_1 = $6_1 + 320 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $1_1 = HEAP32[$9_1 + 4 >> 2];
      HEAP32[$6_1 + 312 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$6_1 + 316 >> 2] = $1_1;
      $2_1 = $9_1 + 24 | 0;
      $7_1 = HEAP32[$2_1 + 4 >> 2];
      $1_1 = $6_1 + 336 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $2_1 = HEAP32[$9_1 + 20 >> 2];
      $1_1 = $6_1 + 328 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$9_1 + 16 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      $2_1 = $9_1 + 40 | 0;
      $7_1 = HEAP32[$2_1 + 4 >> 2];
      $1_1 = $6_1 + 352 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $2_1 = HEAP32[$9_1 + 36 >> 2];
      $1_1 = $6_1 + 344 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$9_1 + 32 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      $2_1 = $9_1 + 56 | 0;
      $7_1 = HEAP32[$2_1 + 4 >> 2];
      $1_1 = $6_1 + 368 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $2_1 = HEAP32[$9_1 + 52 >> 2];
      $1_1 = $6_1 + 360 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$9_1 + 48 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      HEAPF32[$6_1 + 380 >> 2] = $12_1;
      HEAP32[$6_1 + 396 >> 2] = $15_1;
      HEAP32[$6_1 + 392 >> 2] = $3_1;
      HEAP32[$6_1 + 176 >> 2] = 19844;
      HEAP32[$6_1 + 388 >> 2] = $4_1;
      $12_1 = HEAPF32[$4_1 + 4 >> 2];
      HEAPF32[$6_1 + 384 >> 2] = $5_1;
      HEAPF32[$6_1 + 376 >> 2] = $12_1;
      FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $6_1 + 72 | 0, $6_1 + 56 | 0, $6_1 + 40 | 0);
      HEAP32[$6_1 + 24 >> 2] = 13248;
      HEAP32[$6_1 + 28 >> 2] = HEAP32[$15_1 + 52 >> 2];
      $0_1 = HEAP32[$15_1 + 56 >> 2];
      HEAP32[$6_1 + 32 >> 2] = $6_1 + 176;
      $378($0_1, $6_1 + 24 | 0, $6_1 + 152 | 0, $6_1 + 136 | 0, $6_1 + 56 | 0, $6_1 + 40 | 0);
      break label$1;
     }
     HEAP32[$6_1 + 352 >> 2] = 32;
     HEAP32[$6_1 + 356 >> 2] = 953267991;
     HEAP32[$6_1 + 344 >> 2] = 0;
     HEAP32[$6_1 + 176 >> 2] = 14128;
     HEAPF32[$6_1 + 348 >> 2] = $5_1;
     HEAPF32[$6_1 + 340 >> 2] = HEAPF32[$4_1 + 4 >> 2];
     HEAP32[$6_1 + 92 >> 2] = $15_1;
     HEAP32[$6_1 + 88 >> 2] = 0;
     HEAP32[$6_1 + 84 >> 2] = $0_1;
     HEAP32[$6_1 + 76 >> 2] = 0;
     HEAP32[$6_1 + 80 >> 2] = 0;
     HEAP32[$6_1 + 72 >> 2] = 18436;
     if (!$705($6_1 + 72 | 0, $1_1, $2_1, $9_1, $9_1, $6_1 + 176 | 0)) {
      break label$1
     }
     if (!($149(HEAPF32[$6_1 + 308 >> 2], HEAPF32[$6_1 + 312 >> 2], HEAPF32[$6_1 + 316 >> 2]) > Math_fround(9.999999747378752e-05)) | !(HEAPF32[$6_1 + 340 >> 2] < HEAPF32[$4_1 + 4 >> 2])) {
      break label$1
     }
     $0_1 = $153($6_1 + 308 | 0);
     $2_1 = $6_1 + 332 | 0;
     $9_1 = HEAP32[$2_1 + 4 >> 2];
     $1_1 = $6_1 + 568 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $9_1;
     $2_1 = $0_1 + 8 | 0;
     $9_1 = HEAP32[$2_1 + 4 >> 2];
     $1_1 = $6_1 + 552 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $9_1;
     $1_1 = HEAP32[$6_1 + 328 >> 2];
     HEAP32[$6_1 + 560 >> 2] = HEAP32[$6_1 + 324 >> 2];
     HEAP32[$6_1 + 564 >> 2] = $1_1;
     HEAPF32[$6_1 + 576 >> 2] = HEAPF32[$6_1 + 340 >> 2];
     $1_1 = HEAP32[$0_1 + 4 >> 2];
     HEAP32[$6_1 + 544 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$6_1 + 548 >> 2] = $1_1;
     HEAP32[$6_1 + 540 >> 2] = 0;
     HEAP32[$6_1 + 536 >> 2] = HEAP32[$3_1 + 8 >> 2];
     Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $6_1 + 536 | 0, 1));
     break label$1;
    }
    $463($6_1 + 536 | 0, $9_1);
    $7_1 = $1_1 + 48 | 0;
    $10_1 = $1_1 + 56 | 0;
    $146($6_1 + 152 | 0, $6_1 + 536 | 0, HEAPF32[$7_1 >> 2], HEAPF32[$1_1 + 52 >> 2], HEAPF32[$10_1 >> 2]);
    $17_1 = $2_1 + 48 | 0;
    $14_1 = $2_1 + 56 | 0;
    $146($6_1 + 136 | 0, $6_1 + 536 | 0, HEAPF32[$17_1 >> 2], HEAPF32[$2_1 + 52 >> 2], HEAPF32[$14_1 >> 2]);
    $455($6_1 + 176 | 0, $6_1 + 536 | 0, $2_1);
    $8_1 = $6_1 + 128 | 0;
    HEAP32[$8_1 >> 2] = 0;
    HEAP32[$8_1 + 4 >> 2] = 0;
    $13_1 = $6_1 + 184 | 0;
    $11_1 = HEAP32[$13_1 + 4 >> 2];
    $8_1 = $6_1 + 80 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $11_1;
    $8_1 = $6_1 + 200 | 0;
    $16_1 = HEAP32[$8_1 + 4 >> 2];
    $13_1 = $6_1 + 96 | 0;
    HEAP32[$13_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $16_1;
    $13_1 = $6_1 + 216 | 0;
    $18_1 = HEAP32[$13_1 + 4 >> 2];
    $11_1 = $6_1 + 112 | 0;
    HEAP32[$11_1 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $18_1;
    HEAP32[$6_1 + 120 >> 2] = 0;
    HEAP32[$6_1 + 124 >> 2] = 0;
    $11_1 = HEAP32[$6_1 + 180 >> 2];
    HEAP32[$6_1 + 72 >> 2] = HEAP32[$6_1 + 176 >> 2];
    HEAP32[$6_1 + 76 >> 2] = $11_1;
    $11_1 = HEAP32[$6_1 + 196 >> 2];
    HEAP32[$6_1 + 88 >> 2] = HEAP32[$6_1 + 192 >> 2];
    HEAP32[$6_1 + 92 >> 2] = $11_1;
    $11_1 = HEAP32[$6_1 + 212 >> 2];
    HEAP32[$6_1 + 104 >> 2] = HEAP32[$6_1 + 208 >> 2];
    HEAP32[$6_1 + 108 >> 2] = $11_1;
    $3_1 = HEAP32[$3_1 + 8 >> 2];
    $12_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$15_1 >> 2] + 48 >> 2]]($15_1));
    $16_1 = $1_1 + 8 | 0;
    $18_1 = HEAP32[$16_1 + 4 >> 2];
    $11_1 = $6_1 + 192 | 0;
    HEAP32[$11_1 >> 2] = HEAP32[$16_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $18_1;
    $11_1 = HEAP32[$1_1 + 20 >> 2];
    HEAP32[$8_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $11_1;
    $11_1 = $1_1 + 24 | 0;
    $16_1 = HEAP32[$11_1 + 4 >> 2];
    $8_1 = $6_1 + 208 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $16_1;
    $8_1 = HEAP32[$1_1 + 36 >> 2];
    HEAP32[$13_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $8_1;
    $13_1 = $1_1 + 40 | 0;
    $11_1 = HEAP32[$13_1 + 4 >> 2];
    $8_1 = $6_1 + 224 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $11_1;
    $13_1 = HEAP32[$7_1 + 4 >> 2];
    $8_1 = $6_1 + 232 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $13_1;
    $8_1 = HEAP32[$10_1 + 4 >> 2];
    $7_1 = $6_1 + 240 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$10_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $8_1;
    $10_1 = $2_1 + 8 | 0;
    $8_1 = HEAP32[$10_1 + 4 >> 2];
    $7_1 = $6_1 + 256 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$10_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $8_1;
    HEAP32[$6_1 + 180 >> 2] = $0_1;
    HEAP32[$6_1 + 176 >> 2] = 18540;
    $7_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$6_1 + 184 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$6_1 + 188 >> 2] = $7_1;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$6_1 + 248 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$6_1 + 252 >> 2] = $1_1;
    $7_1 = $2_1 + 24 | 0;
    $10_1 = HEAP32[$7_1 + 4 >> 2];
    $1_1 = $6_1 + 272 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $10_1;
    $7_1 = HEAP32[$2_1 + 20 >> 2];
    $1_1 = $6_1 + 264 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $7_1 = $2_1 + 40 | 0;
    $10_1 = HEAP32[$7_1 + 4 >> 2];
    $1_1 = $6_1 + 288 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $10_1;
    $7_1 = HEAP32[$2_1 + 36 >> 2];
    $1_1 = $6_1 + 280 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $2_1 = HEAP32[$14_1 + 4 >> 2];
    $1_1 = $6_1 + 304 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$14_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$17_1 + 4 >> 2];
    $1_1 = $6_1 + 296 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $2_1 = $9_1 + 8 | 0;
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $6_1 + 320 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $1_1 = HEAP32[$9_1 + 4 >> 2];
    HEAP32[$6_1 + 312 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$6_1 + 316 >> 2] = $1_1;
    $2_1 = $9_1 + 24 | 0;
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $6_1 + 336 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $2_1 = HEAP32[$9_1 + 20 >> 2];
    $1_1 = $6_1 + 328 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$9_1 + 16 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $2_1 = $9_1 + 40 | 0;
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $6_1 + 352 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $2_1 = HEAP32[$9_1 + 36 >> 2];
    $1_1 = $6_1 + 344 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$9_1 + 32 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $2_1 = $9_1 + 56 | 0;
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $6_1 + 368 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $2_1 = HEAP32[$9_1 + 52 >> 2];
    $1_1 = $6_1 + 360 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$9_1 + 48 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    HEAPF32[$6_1 + 380 >> 2] = $12_1;
    HEAP32[$6_1 + 396 >> 2] = $15_1;
    HEAP32[$6_1 + 392 >> 2] = $3_1;
    HEAP32[$6_1 + 176 >> 2] = 19868;
    HEAP32[$6_1 + 388 >> 2] = $4_1;
    $12_1 = HEAPF32[$4_1 + 4 >> 2];
    HEAPF32[$6_1 + 384 >> 2] = $5_1;
    HEAPF32[$6_1 + 376 >> 2] = $12_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $6_1 + 72 | 0, $6_1 + 56 | 0, $6_1 + 40 | 0);
    $1_1 = $6_1 + 160 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $6_1 + 32 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    $0_1 = HEAP32[$6_1 + 156 >> 2];
    HEAP32[$6_1 + 24 >> 2] = HEAP32[$6_1 + 152 >> 2];
    HEAP32[$6_1 + 28 >> 2] = $0_1;
    $12_1 = HEAPF32[$6_1 + 24 >> 2];
    $5_1 = HEAPF32[$6_1 + 136 >> 2];
    if ($12_1 > $5_1) {
     HEAPF32[$6_1 + 24 >> 2] = $5_1;
     $12_1 = $5_1;
    }
    $20_1 = HEAPF32[$6_1 + 144 >> 2];
    $24_1 = HEAPF32[$6_1 + 32 >> 2];
    $0_1 = $20_1 < $24_1;
    $21_1 = HEAPF32[$6_1 + 140 >> 2];
    $25_1 = HEAPF32[$6_1 + 28 >> 2];
    $1_1 = $21_1 < $25_1;
    $22_1 = HEAPF32[$6_1 + 148 >> 2];
    if ($22_1 < HEAPF32[$6_1 + 36 >> 2]) {
     HEAPF32[$6_1 + 36 >> 2] = $22_1
    }
    $4_1 = $6_1 + 160 | 0;
    $9_1 = HEAP32[$4_1 + 4 >> 2];
    $2_1 = $6_1 + 16 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $9_1;
    $3_1 = HEAP32[$6_1 + 156 >> 2];
    HEAP32[$6_1 + 8 >> 2] = HEAP32[$6_1 + 152 >> 2];
    HEAP32[$6_1 + 12 >> 2] = $3_1;
    $23_1 = HEAPF32[$6_1 + 12 >> 2];
    $23_1 = $21_1 > $23_1 ? $21_1 : $23_1;
    $19_1 = HEAPF32[$6_1 + 8 >> 2];
    $5_1 = $5_1 > $19_1 ? $5_1 : $19_1;
    $19_1 = HEAPF32[$2_1 >> 2];
    $19_1 = $19_1 < $20_1 ? $20_1 : $19_1;
    if (HEAPF32[$6_1 + 20 >> 2] < $22_1) {
     HEAPF32[$6_1 + 20 >> 2] = $22_1
    }
    HEAPF32[$6_1 + 24 >> 2] = HEAPF32[$6_1 + 56 >> 2] + $12_1;
    HEAPF32[$6_1 + 28 >> 2] = HEAPF32[$6_1 + 60 >> 2] + ($1_1 ? $21_1 : $25_1);
    HEAPF32[$6_1 + 32 >> 2] = HEAPF32[$6_1 + 64 >> 2] + ($0_1 ? $20_1 : $24_1);
    HEAPF32[$6_1 + 8 >> 2] = HEAPF32[$6_1 + 40 >> 2] + $5_1;
    HEAPF32[$6_1 + 12 >> 2] = HEAPF32[$6_1 + 44 >> 2] + $23_1;
    HEAPF32[$6_1 + 16 >> 2] = HEAPF32[$6_1 + 48 >> 2] + $19_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$15_1 >> 2] + 64 >> 2]]($15_1, $6_1 + 176 | 0, $6_1 + 24 | 0, $6_1 + 8 | 0);
    break label$1;
   }
   if (($7_1 | 0) != 31) {
    break label$1
   }
   $463($6_1 + 536 | 0, $9_1);
   $464($6_1 + 176 | 0, $6_1 + 536 | 0, $1_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $6_1 + 176 | 0, $6_1 + 72 | 0, $6_1 + 152 | 0);
   $463($6_1 + 536 | 0, $9_1);
   $464($6_1 + 176 | 0, $6_1 + 536 | 0, $2_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $6_1 + 176 | 0, $6_1 + 136 | 0, $6_1 + 56 | 0);
   $12_1 = HEAPF32[$6_1 + 136 >> 2];
   if ($12_1 < HEAPF32[$6_1 + 72 >> 2]) {
    HEAPF32[$6_1 + 72 >> 2] = $12_1
   }
   $12_1 = HEAPF32[$6_1 + 140 >> 2];
   if ($12_1 < HEAPF32[$6_1 + 76 >> 2]) {
    HEAPF32[$6_1 + 76 >> 2] = $12_1
   }
   $12_1 = HEAPF32[$6_1 + 144 >> 2];
   if ($12_1 < HEAPF32[$6_1 + 80 >> 2]) {
    HEAPF32[$6_1 + 80 >> 2] = $12_1
   }
   $12_1 = HEAPF32[$6_1 + 148 >> 2];
   if ($12_1 < HEAPF32[$6_1 + 84 >> 2]) {
    HEAPF32[$6_1 + 84 >> 2] = $12_1
   }
   $12_1 = HEAPF32[$6_1 + 56 >> 2];
   if ($12_1 > HEAPF32[$6_1 + 152 >> 2]) {
    HEAPF32[$6_1 + 152 >> 2] = $12_1
   }
   $12_1 = HEAPF32[$6_1 + 60 >> 2];
   if ($12_1 > HEAPF32[$6_1 + 156 >> 2]) {
    HEAPF32[$6_1 + 156 >> 2] = $12_1
   }
   $12_1 = HEAPF32[$6_1 + 64 >> 2];
   if ($12_1 > HEAPF32[$6_1 + 160 >> 2]) {
    HEAPF32[$6_1 + 160 >> 2] = $12_1
   }
   $12_1 = HEAPF32[$6_1 + 68 >> 2];
   if ($12_1 > HEAPF32[$6_1 + 164 >> 2]) {
    HEAPF32[$6_1 + 164 >> 2] = $12_1
   }
   HEAP32[$6_1 + 568 >> 2] = $4_1;
   HEAP32[$6_1 + 564 >> 2] = $9_1;
   HEAPF32[$6_1 + 556 >> 2] = $5_1;
   HEAP32[$6_1 + 552 >> 2] = $2_1;
   HEAP32[$6_1 + 548 >> 2] = $1_1;
   HEAP32[$6_1 + 544 >> 2] = $0_1;
   HEAP32[$6_1 + 540 >> 2] = $3_1;
   HEAP32[$6_1 + 536 >> 2] = 19892;
   HEAP32[$6_1 + 560 >> 2] = $15_1;
   $0_1 = HEAP32[$15_1 + 68 >> 2];
   if (!$0_1) {
    $1_1 = $6_1 + 224 | 0;
    $4_1 = $6_1 + 208 | 0;
    $9_1 = $6_1 + 192 | 0;
    $2_1 = 0;
    $3_1 = 64;
    while (1) {
     if (HEAP32[$15_1 + 20 >> 2] <= ($2_1 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$15_1 + 28 >> 2] + $3_1 | 0;
     $17_1 = HEAP32[$0_1 >> 2];
     $7_1 = $0_1 + -64 | 0;
     $14_1 = $7_1 + 8 | 0;
     $8_1 = HEAP32[$14_1 + 4 >> 2];
     $10_1 = $6_1 + 184 | 0;
     HEAP32[$10_1 >> 2] = HEAP32[$14_1 >> 2];
     HEAP32[$10_1 + 4 >> 2] = $8_1;
     $10_1 = $0_1 - 48 | 0;
     $14_1 = HEAP32[$10_1 + 4 >> 2];
     HEAP32[$9_1 >> 2] = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $14_1;
     $10_1 = $10_1 + 8 | 0;
     $8_1 = HEAP32[$10_1 + 4 >> 2];
     $14_1 = $9_1 + 8 | 0;
     HEAP32[$14_1 >> 2] = HEAP32[$10_1 >> 2];
     HEAP32[$14_1 + 4 >> 2] = $8_1;
     $10_1 = $0_1 - 32 | 0;
     $14_1 = HEAP32[$10_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$10_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $14_1;
     $10_1 = $10_1 + 8 | 0;
     $8_1 = HEAP32[$10_1 + 4 >> 2];
     $14_1 = $4_1 + 8 | 0;
     HEAP32[$14_1 >> 2] = HEAP32[$10_1 >> 2];
     HEAP32[$14_1 + 4 >> 2] = $8_1;
     $0_1 = $0_1 - 16 | 0;
     $10_1 = HEAP32[$0_1 + 4 >> 2];
     HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $10_1;
     $0_1 = $0_1 + 8 | 0;
     $14_1 = HEAP32[$0_1 + 4 >> 2];
     $10_1 = $1_1 + 8 | 0;
     HEAP32[$10_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$10_1 + 4 >> 2] = $14_1;
     $0_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$6_1 + 176 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$6_1 + 180 >> 2] = $0_1;
     $740($6_1 + 536 | 0, $2_1, $6_1 + 176 | 0, $17_1);
     $3_1 = $3_1 + 80 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    };
   }
   $2_1 = $6_1 + 80 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $6_1 + 184 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $3_1;
   $2_1 = $6_1 + 160 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $6_1 + 200 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $3_1;
   $1_1 = HEAP32[$6_1 + 76 >> 2];
   HEAP32[$6_1 + 176 >> 2] = HEAP32[$6_1 + 72 >> 2];
   HEAP32[$6_1 + 180 >> 2] = $1_1;
   $1_1 = HEAP32[$6_1 + 156 >> 2];
   HEAP32[$6_1 + 192 >> 2] = HEAP32[$6_1 + 152 >> 2];
   HEAP32[$6_1 + 196 >> 2] = $1_1;
   $621(HEAP32[$0_1 >> 2], $6_1 + 176 | 0, $6_1 + 536 | 0);
  }
  global$0 = $6_1 + 720 | 0;
 }
 
 function $740($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  $464($4_1 - -64 | 0, HEAP32[$0_1 + 28 >> 2], $2_1);
  HEAP32[$4_1 + 44 >> 2] = 1065353216;
  HEAP32[$4_1 + 48 >> 2] = 1;
  HEAP32[$4_1 + 52 >> 2] = -1;
  HEAP32[$4_1 + 60 >> 2] = $1_1;
  HEAP32[$4_1 + 40 >> 2] = 19932;
  $2_1 = HEAP32[$0_1 + 32 >> 2];
  HEAP32[$4_1 + 56 >> 2] = $2_1;
  HEAPF32[$4_1 + 44 >> 2] = HEAPF32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 32 >> 2] = $1_1;
  HEAP32[$4_1 + 24 >> 2] = 0;
  HEAP32[$4_1 + 28 >> 2] = -1;
  HEAP32[$4_1 + 12 >> 2] = $3_1;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 16 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $4_1 - -64;
  $739(HEAP32[$0_1 + 8 >> 2], HEAP32[$0_1 + 12 >> 2], HEAP32[$0_1 + 16 >> 2], $4_1 + 8 | 0, $4_1 + 40 | 0, HEAPF32[$0_1 + 20 >> 2]);
  global$0 = $4_1 + 128 | 0;
 }
 
 function $741($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[$0_1 + 16 >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1) | 0;
 }
 
 function $742($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 8 >> 2] = -1;
  HEAP32[$3_1 + 12 >> 2] = HEAP32[$0_1 + 20 >> 2];
  if (!HEAP32[$1_1 + 4 >> 2]) {
   HEAP32[$1_1 + 4 >> 2] = $3_1 + 8
  }
  $4_1 = HEAP32[$0_1 + 16 >> 2];
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $1_1, $2_1));
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[HEAP32[$0_1 + 16 >> 2] + 4 >> 2];
  global$0 = $3_1 + 16 | 0;
  return Math_fround($5_1);
 }
 
 function $743($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $6_1 = HEAP32[$1_1 + 36 >> 2];
  $1_1 = HEAP32[HEAP32[$0_1 + 24 >> 2] + 28 >> 2] + Math_imul($6_1, 80) | 0;
  $4_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $3_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $4_1 = $1_1 + 24 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $3_1 + 24 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $4_1 = $1_1 + 40 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $3_1 + 40 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $4_1 = $1_1 + 56 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $3_1 + 56 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$3_1 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$3_1 + 20 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$3_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 36 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$3_1 + 48 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 52 >> 2] = $2_1;
  $740($0_1, $6_1, $3_1, HEAP32[$1_1 + 64 >> 2]);
  global$0 = $3_1 - -64 | 0;
 }
 
 function $744($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = global$0 + -64 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 60 >> 2] = $5_1;
  HEAP32[$6_1 + 56 >> 2] = $4_1;
  $4_1 = HEAP32[$0_1 + 212 >> 2];
  if (HEAPF32[$4_1 + 4 >> 2] >= $3_1) {
   $7_1 = $2_1 + 8 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 40 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 8 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 24 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$6_1 + 32 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$6_1 + 36 >> 2] = $5_1;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 20 >> 2] = $2_1;
   HEAPF32[$6_1 + 48 >> 2] = $3_1;
   HEAP32[$6_1 + 8 >> 2] = HEAP32[$0_1 + 216 >> 2];
   HEAP32[$6_1 + 12 >> 2] = $6_1 + 56;
   $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $6_1 + 8 | 0, 1));
  }
  global$0 = $6_1 - -64 | 0;
  return Math_fround($3_1);
 }
 
 function $745($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25_1 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = 0;
  $6_1 = global$0 - 400 | 0;
  global$0 = $6_1;
  $11_1 = $2_1 + 8 | 0;
  $7_1 = $11_1;
  $12_1 = HEAP32[$7_1 + 4 >> 2];
  $10_1 = $6_1 + 312 | 0;
  HEAP32[$10_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$10_1 + 4 >> 2] = $12_1;
  $10_1 = $2_1 + 24 | 0;
  $16_1 = HEAP32[$10_1 + 4 >> 2];
  $7_1 = $6_1 + 328 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $16_1;
  $7_1 = $2_1 + 40 | 0;
  $9_1 = HEAP32[$7_1 + 4 >> 2];
  $12_1 = $6_1 + 344 | 0;
  HEAP32[$12_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$12_1 + 4 >> 2] = $9_1;
  $12_1 = $2_1 + 56 | 0;
  $9_1 = $12_1;
  $14_1 = HEAP32[$9_1 + 4 >> 2];
  $16_1 = $6_1 + 360 | 0;
  HEAP32[$16_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$16_1 + 4 >> 2] = $14_1;
  $16_1 = $3_1 + 8 | 0;
  $14_1 = $16_1;
  $17_1 = HEAP32[$14_1 + 4 >> 2];
  $9_1 = $6_1 + 248 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$14_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $17_1;
  $9_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$6_1 + 304 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 308 >> 2] = $9_1;
  $9_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$6_1 + 320 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$6_1 + 324 >> 2] = $9_1;
  $9_1 = HEAP32[$2_1 + 36 >> 2];
  HEAP32[$6_1 + 336 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$6_1 + 340 >> 2] = $9_1;
  $9_1 = HEAP32[$2_1 + 52 >> 2];
  HEAP32[$6_1 + 352 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$6_1 + 356 >> 2] = $9_1;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$6_1 + 240 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 244 >> 2] = $9_1;
  $9_1 = $3_1 + 24 | 0;
  $8_1 = HEAP32[$9_1 + 4 >> 2];
  $14_1 = $6_1 + 264 | 0;
  HEAP32[$14_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$14_1 + 4 >> 2] = $8_1;
  $14_1 = $3_1 + 40 | 0;
  $8_1 = $14_1;
  $15_1 = HEAP32[$8_1 + 4 >> 2];
  $17_1 = $6_1 + 280 | 0;
  HEAP32[$17_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$17_1 + 4 >> 2] = $15_1;
  $17_1 = $3_1 + 56 | 0;
  $15_1 = $17_1;
  $19_1 = HEAP32[$15_1 + 4 >> 2];
  $8_1 = $6_1 + 296 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$15_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $19_1;
  $8_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$6_1 + 256 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$6_1 + 260 >> 2] = $8_1;
  $8_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$6_1 + 272 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$6_1 + 276 >> 2] = $8_1;
  $8_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$6_1 + 288 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$6_1 + 292 >> 2] = $8_1;
  $654($6_1 + 304 | 0, $6_1 + 240 | 0, Math_fround(1.0), $6_1 + 384 | 0, $6_1 + 368 | 0);
  $24_1 = $6_1 + 20 | 0;
  $8_1 = $24_1;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  $25_1 = $6_1 + 32 | 0;
  $8_1 = $25_1;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 28 >> 2] = 1065353216;
  $8_1 = $6_1 + 40 | 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  $8_1 = $6_1 + 52 | 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 48 >> 2] = 1065353216;
  $15_1 = $6_1 + 60 | 0;
  HEAP32[$15_1 >> 2] = 0;
  HEAP32[$15_1 + 4 >> 2] = 0;
  $19_1 = $6_1 + 68 | 0;
  HEAP32[$19_1 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 16 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 1065353216;
  $651($6_1 + 304 | 0, $6_1 + 224 | 0);
  $454($6_1 + 8 | 0, $6_1 + 224 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $6_1 + 8 | 0, $6_1 + 224 | 0, $6_1 + 208 | 0);
  $18_1 = HEAPF32[$6_1 + 208 >> 2];
  $20_1 = HEAPF32[$6_1 + 212 >> 2];
  $21_1 = HEAPF32[$6_1 + 216 >> 2];
  $22_1 = HEAPF32[$6_1 + 224 >> 2];
  $23_1 = HEAPF32[$6_1 + 228 >> 2];
  $13_1 = HEAPF32[$6_1 + 232 >> 2];
  $26_1 = $137(HEAPF32[$6_1 + 368 >> 2], HEAPF32[$6_1 + 372 >> 2], HEAPF32[$6_1 + 376 >> 2]);
  $27_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1));
  HEAP32[$6_1 + 220 >> 2] = 0;
  HEAP32[$6_1 + 236 >> 2] = 0;
  $28_1 = Math_fround($13_1 + Math_fround(0.0));
  $13_1 = Math_fround($26_1 * $27_1);
  HEAPF32[$6_1 + 232 >> 2] = $28_1 - $13_1;
  HEAPF32[$6_1 + 228 >> 2] = Math_fround($23_1 + Math_fround(0.0)) - $13_1;
  HEAPF32[$6_1 + 224 >> 2] = Math_fround($22_1 + Math_fround(0.0)) - $13_1;
  HEAPF32[$6_1 + 216 >> 2] = $13_1 + $21_1;
  HEAPF32[$6_1 + 212 >> 2] = $13_1 + $20_1;
  HEAPF32[$6_1 + 208 >> 2] = $13_1 + $18_1;
  $29_1 = HEAP32[$11_1 + 4 >> 2];
  HEAP32[$8_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $29_1;
  $11_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$15_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$15_1 + 4 >> 2] = $11_1;
  $11_1 = HEAP32[$10_1 + 4 >> 2];
  HEAP32[$19_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$19_1 + 4 >> 2] = $11_1;
  $10_1 = HEAP32[$2_1 + 36 >> 2];
  $11_1 = $6_1 + 76 | 0;
  HEAP32[$11_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$11_1 + 4 >> 2] = $10_1;
  $10_1 = HEAP32[$7_1 + 4 >> 2];
  $11_1 = $6_1 + 84 | 0;
  HEAP32[$11_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$11_1 + 4 >> 2] = $10_1;
  $7_1 = HEAP32[$2_1 + 52 >> 2];
  $11_1 = $6_1 + 92 | 0;
  $10_1 = $11_1;
  HEAP32[$10_1 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$10_1 + 4 >> 2] = $7_1;
  $8_1 = HEAP32[$12_1 + 4 >> 2];
  $10_1 = $6_1 + 100 | 0;
  $7_1 = $10_1;
  HEAP32[$7_1 >> 2] = HEAP32[$12_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $12_1 = HEAP32[$16_1 + 4 >> 2];
  $7_1 = $6_1 + 116 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$16_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $12_1;
  HEAP32[$6_1 + 8 >> 2] = 20752;
  $7_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$6_1 + 44 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 48 >> 2] = $7_1;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$6_1 + 108 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 112 >> 2] = $2_1;
  $7_1 = HEAP32[$9_1 + 4 >> 2];
  $2_1 = $6_1 + 132 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 20 >> 2];
  $2_1 = $6_1 + 124 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$14_1 + 4 >> 2];
  $2_1 = $6_1 + 148 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$14_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 36 >> 2];
  $2_1 = $6_1 + 140 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $12_1 = HEAP32[$17_1 + 4 >> 2];
  $7_1 = $6_1 + 164 | 0;
  $2_1 = $7_1;
  HEAP32[$2_1 >> 2] = HEAP32[$17_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $12_1;
  $12_1 = HEAP32[$3_1 + 52 >> 2];
  $2_1 = $6_1 + 156 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $12_1;
  HEAP32[$6_1 + 192 >> 2] = $4_1;
  HEAPF32[$6_1 + 196 >> 2] = $5_1;
  HEAP32[$6_1 + 200 >> 2] = $1_1;
  HEAP32[$6_1 + 188 >> 2] = $0_1;
  HEAP32[$6_1 + 396 >> 2] = 0;
  $20_1 = Math_fround(HEAPF32[$7_1 >> 2] - HEAPF32[$10_1 >> 2]);
  HEAPF32[$6_1 + 392 >> 2] = $20_1;
  $21_1 = Math_fround(HEAPF32[$2_1 >> 2] - HEAPF32[$11_1 >> 2]);
  HEAPF32[$6_1 + 384 >> 2] = $21_1;
  $22_1 = Math_fround(HEAPF32[$6_1 + 160 >> 2] - HEAPF32[$6_1 + 96 >> 2]);
  HEAPF32[$6_1 + 388 >> 2] = $22_1;
  $185($6_1 + 368 | 0, $6_1 + 384 | 0);
  $5_1 = HEAPF32[$6_1 + 372 >> 2];
  $18_1 = $5_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $5_1);
  HEAPF32[$6_1 + 16 >> 2] = $18_1;
  $13_1 = HEAPF32[$6_1 + 376 >> 2];
  $23_1 = $13_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $13_1);
  HEAPF32[$24_1 >> 2] = $23_1;
  HEAP32[$6_1 + 36 >> 2] = $23_1 < Math_fround(0.0);
  HEAP32[$25_1 >> 2] = $18_1 < Math_fround(0.0);
  $18_1 = HEAPF32[$6_1 + 368 >> 2];
  HEAPF32[$6_1 + 40 >> 2] = Math_fround(Math_fround($18_1 * $21_1) + Math_fround($5_1 * $22_1)) + Math_fround($13_1 * $20_1);
  $5_1 = $18_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $18_1);
  HEAPF32[$6_1 + 12 >> 2] = $5_1;
  HEAP32[$6_1 + 28 >> 2] = $5_1 < Math_fround(0.0);
  $0_1 = HEAP32[$0_1 + 72 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $6_1 + 352 | 0, $6_1 + 288 | 0, $6_1 + 8 | 0, $6_1 + 224 | 0, $6_1 + 208 | 0);
  global$0 = $6_1 + 400 | 0;
 }
 
 function $746($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0_1 + 184 >> 2];
  $4_1 = HEAPF32[$3_1 + 4 >> 2];
  label$1 : {
   if ($4_1 == Math_fround(0.0)) {
    break label$1
   }
   $1_1 = HEAP32[$1_1 >> 2];
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, HEAP32[$1_1 + 188 >> 2]) | 0)) {
    break label$1
   }
   $5_1 = HEAPF32[$0_1 + 188 >> 2];
   $3_1 = HEAP32[$0_1 + 184 >> 2];
   $6_1 = HEAP32[$0_1 + 192 >> 2];
   $7_1 = HEAP32[$1_1 + 192 >> 2];
   HEAP32[$2_1 + 24 >> 2] = -1;
   HEAP32[$2_1 + 16 >> 2] = 0;
   HEAP32[$2_1 + 20 >> 2] = -1;
   HEAP32[$2_1 + 12 >> 2] = $1_1 + 4;
   HEAP32[$2_1 + 8 >> 2] = $1_1;
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   HEAP32[$2_1 >> 2] = 0;
   $739($6_1, $0_1 + 36 | 0, $0_1 + 100 | 0, $2_1, $3_1, $5_1);
  }
  global$0 = $2_1 + 32 | 0;
  return $4_1 != Math_fround(0.0) | 0;
 }
 
 function $747($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  while (1) {
   $7_1 = HEAP32[$0_1 + 12 >> 2];
   $10_1 = $1_1;
   $11_1 = HEAP32[$7_1 + (($2_1 + $1_1 | 0) / 2 << 3) >> 2];
   $5_1 = $1_1;
   $6_1 = $2_1;
   while (1) {
    $4_1 = (($5_1 << 3) + $7_1 | 0) - 8 | 0;
    while (1) {
     $5_1 = $5_1 + 1 | 0;
     $4_1 = $4_1 + 8 | 0;
     if (HEAP32[$4_1 >> 2] < ($11_1 | 0)) {
      continue
     }
     break;
    };
    $1_1 = $5_1 - 1 | 0;
    $3_1 = ($6_1 << 3) + 8 | 0;
    while (1) {
     $6_1 = $6_1 - 1 | 0;
     $8_1 = $3_1 + $7_1 | 0;
     $9_1 = $3_1 - 8 | 0;
     $3_1 = $9_1;
     if (HEAP32[$8_1 - 8 >> 2] > ($11_1 | 0)) {
      continue
     }
     break;
    };
    $3_1 = $6_1 + 1 | 0;
    if (($3_1 | 0) >= ($1_1 | 0)) {
     $12_1 = HEAP32[$4_1 >> 2];
     $8_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $7_1 + $9_1 | 0;
     $1_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $1_1;
     $1_1 = HEAP32[$0_1 + 12 >> 2] + $9_1 | 0;
     HEAP32[$1_1 >> 2] = $12_1;
     HEAP32[$1_1 + 4 >> 2] = $8_1;
     $3_1 = $6_1;
     $1_1 = $5_1;
    }
    if (($1_1 | 0) <= ($3_1 | 0)) {
     $7_1 = HEAP32[$0_1 + 12 >> 2];
     $5_1 = $1_1;
     $6_1 = $3_1;
     continue;
    }
    break;
   };
   if (($3_1 | 0) > ($10_1 | 0)) {
    $747($0_1, $10_1, $3_1)
   }
   if (($1_1 | 0) < ($2_1 | 0)) {
    continue
   }
   break;
  };
 }
 
 function $748($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 20808;
  $124($0_1 + 44 | 0);
  $124($0_1 + 24 | 0);
  $1_1 = $0_1 + 4 | 0;
  $124($1_1);
  $124($1_1);
  return $0_1 | 0;
 }
 
 function $749($0_1) {
  $0_1 = $0_1 | 0;
  $33($748($0_1));
 }
 
 function $750($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $2_1 = 0;
  $3_1 = HEAP32[$1_1 + 8 >> 2];
  $6_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  while (1) {
   if ($6_1) {
    $3_1 = HEAP32[HEAP32[$1_1 + 16 >> 2] + $2_1 >> 2];
    if (!(HEAPU8[$3_1 + 204 | 0] & 3)) {
     HEAP32[$3_1 + 208 >> 2] = $5_1;
     $5_1 = $5_1 + 1 | 0;
    }
    HEAP32[$3_1 + 272 >> 2] = 1065353216;
    HEAP32[$3_1 + 212 >> 2] = -1;
    $6_1 = $6_1 - 1 | 0;
    $2_1 = $2_1 + 4 | 0;
    continue;
   }
   break;
  };
  $6_1 = 4;
  label$4 : {
   $3_1 = HEAP32[$0_1 + 8 >> 2];
   if (($3_1 | 0) > ($5_1 | 0)) {
    break label$4
   }
   if (!(($3_1 | 0) >= ($5_1 | 0) | HEAP32[$0_1 + 12 >> 2] >= ($5_1 | 0))) {
    $2_1 = $3_1;
    $10_1 = $0_1 + 4 | 0;
    if ($5_1) {
     $7_1 = $120($5_1 << 3);
     $2_1 = HEAP32[$0_1 + 8 >> 2];
    }
    $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
    while (1) {
     if ($2_1) {
      $8_1 = HEAP32[$0_1 + 16 >> 2] + $4_1 | 0;
      $11_1 = HEAP32[$8_1 + 4 >> 2];
      $9_1 = $4_1 + $7_1 | 0;
      HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$9_1 + 4 >> 2] = $11_1;
      $2_1 = $2_1 - 1 | 0;
      $4_1 = $4_1 + 8 | 0;
      continue;
     }
     break;
    };
    $163($10_1);
    HEAP32[$0_1 + 16 >> 2] = $7_1;
    HEAP8[$0_1 + 20 | 0] = 1;
    HEAP32[$0_1 + 12 >> 2] = $5_1;
   }
   $4_1 = $5_1 - $3_1 | 0;
   $2_1 = $3_1 << 3;
   while (1) {
    if (!$4_1) {
     break label$4
    }
    $3_1 = HEAP32[$0_1 + 16 >> 2] + $2_1 | 0;
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[$3_1 + 4 >> 2] = 0;
    $4_1 = $4_1 - 1 | 0;
    $2_1 = $2_1 + 8 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 8 >> 2] = $5_1;
  $4_1 = 0;
  $2_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
  while (1) {
   if (($2_1 | 0) != ($4_1 | 0)) {
    $3_1 = HEAP32[$0_1 + 16 >> 2] + $6_1 | 0;
    HEAP32[$3_1 >> 2] = 1;
    HEAP32[$3_1 - 4 >> 2] = $4_1;
    $6_1 = $6_1 + 8 | 0;
    $4_1 = $4_1 + 1 | 0;
    continue;
   }
   break;
  };
  label$12 : {
   $1_1 = HEAP32[$1_1 + 72 >> 2];
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
   $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
   if (!$2_1) {
    break label$12
   }
   $6_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = $0_1 + 4 | 0;
   $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1) | 0;
   while (1) {
    if (!$6_1) {
     break label$12
    }
    $0_1 = HEAP32[HEAP32[$4_1 >> 2] >> 2];
    label$14 : {
     if (!$0_1) {
      break label$14
     }
     $1_1 = HEAP32[HEAP32[$4_1 + 4 >> 2] >> 2];
     if (!$1_1 | HEAP32[$0_1 + 204 >> 2] & 7 | HEAPU8[$1_1 + 204 | 0] & 7) {
      break label$14
     }
     $751($2_1, HEAP32[$0_1 + 208 >> 2], HEAP32[$1_1 + 208 >> 2]);
    }
    $6_1 = $6_1 - 1 | 0;
    $4_1 = $4_1 + 16 | 0;
    continue;
   };
  }
 }
 
 function $751($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $0_1 = $0_1 + 12 | 0;
  $3_1 = $753(HEAP32[$0_1 >> 2], $1_1);
  $1_1 = $753(HEAP32[$0_1 >> 2], $2_1);
  if (($3_1 | 0) != ($1_1 | 0)) {
   $0_1 = HEAP32[$0_1 >> 2];
   $2_1 = $0_1 + ($3_1 << 3) | 0;
   HEAP32[$2_1 >> 2] = $1_1;
   $0_1 = $0_1 + ($1_1 << 3) | 0;
   HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2];
  }
 }
 
 function $752($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = $0_1 + 16 | 0;
  $0_1 = 0;
  while (1) {
   if (($0_1 | 0) < HEAP32[$1_1 + 8 >> 2]) {
    $2_1 = HEAP32[HEAP32[$1_1 + 16 >> 2] + $5_1 >> 2];
    label$3 : {
     if (HEAPU8[$2_1 + 204 | 0] & 3) {
      $6_1 = -1;
      $7_1 = -2;
      break label$3;
     }
     $6_1 = $753(HEAP32[$4_1 >> 2], $3_1);
     HEAP32[(HEAP32[$4_1 >> 2] + ($3_1 << 3) | 0) + 4 >> 2] = $0_1;
     $3_1 = $3_1 + 1 | 0;
     $7_1 = -1;
    }
    HEAP32[$2_1 + 212 >> 2] = $7_1;
    HEAP32[$2_1 + 208 >> 2] = $6_1;
    $5_1 = $5_1 + 4 | 0;
    $0_1 = $0_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $753($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  while (1) {
   $2_1 = ($1_1 << 3) + $0_1 | 0;
   $3_1 = HEAP32[$2_1 >> 2];
   if (($1_1 | 0) != ($3_1 | 0)) {
    $1_1 = ($3_1 << 3) + $0_1 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
    $1_1 = HEAP32[$1_1 >> 2];
    continue;
   }
   break;
  };
  return $1_1;
 }
 
 function $754($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  while (1) {
   $6_1 = HEAP32[$0_1 + 12 >> 2];
   $9_1 = $1_1;
   $10_1 = HEAP32[$6_1 + (($2_1 + $1_1 | 0) / 2 << 2) >> 2];
   $4_1 = $2_1;
   $5_1 = $1_1;
   while (1) {
    $7_1 = (($5_1 << 2) + $6_1 | 0) - 4 | 0;
    while (1) {
     $5_1 = $5_1 + 1 | 0;
     $7_1 = $7_1 + 4 | 0;
     $11_1 = HEAP32[$7_1 >> 2];
     if ($755($11_1, $10_1)) {
      continue
     }
     break;
    };
    $3_1 = $4_1 << 2;
    $1_1 = $5_1 - 1 | 0;
    while (1) {
     $4_1 = $4_1 - 1 | 0;
     $8_1 = $3_1 + $6_1 | 0;
     $12_1 = $3_1 - 4 | 0;
     $3_1 = $12_1;
     $8_1 = HEAP32[$8_1 >> 2];
     if ($755($10_1, $8_1)) {
      continue
     }
     break;
    };
    $3_1 = $4_1 + 1 | 0;
    if (($3_1 | 0) >= ($1_1 | 0)) {
     HEAP32[$7_1 >> 2] = $8_1;
     HEAP32[(HEAP32[$0_1 + 12 >> 2] + $12_1 | 0) + 4 >> 2] = $11_1;
     $3_1 = $4_1;
     $1_1 = $5_1;
    }
    if (($1_1 | 0) <= ($3_1 | 0)) {
     $6_1 = HEAP32[$0_1 + 12 >> 2];
     $4_1 = $3_1;
     $5_1 = $1_1;
     continue;
    }
    break;
   };
   if (($3_1 | 0) > ($9_1 | 0)) {
    $754($0_1, $9_1, $3_1)
   }
   if (($1_1 | 0) < ($2_1 | 0)) {
    continue
   }
   break;
  };
 }
 
 function $755($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[HEAP32[$0_1 + 820 >> 2] + 208 >> 2];
  if (($2_1 | 0) <= -1) {
   $2_1 = HEAP32[HEAP32[$0_1 + 824 >> 2] + 208 >> 2]
  }
  $0_1 = HEAP32[HEAP32[$1_1 + 820 >> 2] + 208 >> 2];
  if (($0_1 | 0) <= -1) {
   $0_1 = HEAP32[HEAP32[$1_1 + 824 >> 2] + 208 >> 2]
  }
  return ($0_1 | 0) > ($2_1 | 0);
 }
 
 function $756($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  while (1) {
   $6_1 = HEAP32[$0_1 + 12 >> 2];
   $9_1 = $1_1;
   $10_1 = HEAP32[$6_1 + (($2_1 + $1_1 | 0) / 2 << 2) >> 2];
   $4_1 = $2_1;
   $5_1 = $1_1;
   while (1) {
    $7_1 = (($5_1 << 2) + $6_1 | 0) - 4 | 0;
    while (1) {
     $5_1 = $5_1 + 1 | 0;
     $7_1 = $7_1 + 4 | 0;
     $11_1 = HEAP32[$7_1 >> 2];
     if ($757($11_1, $10_1)) {
      continue
     }
     break;
    };
    $3_1 = $4_1 << 2;
    $1_1 = $5_1 - 1 | 0;
    while (1) {
     $4_1 = $4_1 - 1 | 0;
     $8_1 = $3_1 + $6_1 | 0;
     $12_1 = $3_1 - 4 | 0;
     $3_1 = $12_1;
     $8_1 = HEAP32[$8_1 >> 2];
     if ($757($10_1, $8_1)) {
      continue
     }
     break;
    };
    $3_1 = $4_1 + 1 | 0;
    if (($3_1 | 0) >= ($1_1 | 0)) {
     HEAP32[$7_1 >> 2] = $8_1;
     HEAP32[(HEAP32[$0_1 + 12 >> 2] + $12_1 | 0) + 4 >> 2] = $11_1;
     $3_1 = $4_1;
     $1_1 = $5_1;
    }
    if (($1_1 | 0) <= ($3_1 | 0)) {
     $6_1 = HEAP32[$0_1 + 12 >> 2];
     $4_1 = $3_1;
     $5_1 = $1_1;
     continue;
    }
    break;
   };
   if (($3_1 | 0) > ($9_1 | 0)) {
    $756($0_1, $9_1, $3_1)
   }
   if (($1_1 | 0) < ($2_1 | 0)) {
    continue
   }
   break;
  };
 }
 
 function $757($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = HEAP32[$0_1 + 820 >> 2];
  $4_1 = HEAP32[$6_1 + 208 >> 2];
  $2_1 = $4_1;
  $7_1 = HEAP32[$1_1 + 820 >> 2];
  $3_1 = HEAP32[$7_1 + 208 >> 2];
  $5_1 = $3_1;
  $8_1 = 1;
  if (($4_1 | 0) <= -1) {
   $2_1 = HEAP32[HEAP32[$0_1 + 824 >> 2] + 208 >> 2]
  }
  if (($3_1 | 0) <= -1) {
   $5_1 = HEAP32[HEAP32[$1_1 + 824 >> 2] + 208 >> 2]
  }
  label$1 : {
   if (($2_1 | 0) < ($5_1 | 0)) {
    break label$1
   }
   $5_1 = $4_1;
   $2_1 = $3_1;
   if (($4_1 | 0) <= -1) {
    $5_1 = HEAP32[HEAP32[$0_1 + 824 >> 2] + 208 >> 2]
   }
   if (($3_1 | 0) <= -1) {
    $2_1 = HEAP32[HEAP32[$1_1 + 824 >> 2] + 208 >> 2]
   }
   if (HEAP32[HEAP32[$6_1 + 188 >> 2] + 12 >> 2] < HEAP32[HEAP32[$7_1 + 188 >> 2] + 12 >> 2] ? ($2_1 | 0) == ($5_1 | 0) : 0) {
    break label$1
   }
   $8_1 = 0;
   $2_1 = ($4_1 | 0) <= -1 ? HEAP32[HEAP32[$0_1 + 824 >> 2] + 208 >> 2] : $4_1;
   if (($3_1 | 0) <= -1) {
    $3_1 = HEAP32[HEAP32[$1_1 + 824 >> 2] + 208 >> 2]
   }
   if (($2_1 | 0) != ($3_1 | 0) | HEAP32[HEAP32[$6_1 + 188 >> 2] + 12 >> 2] != HEAP32[HEAP32[$7_1 + 188 >> 2] + 12 >> 2]) {
    break label$1
   }
   $8_1 = HEAP32[HEAP32[HEAP32[$0_1 + 824 >> 2] + 188 >> 2] + 12 >> 2] < HEAP32[HEAP32[HEAP32[$1_1 + 824 >> 2] + 188 >> 2] + 12 >> 2];
  }
  return $8_1;
 }
 
 function $758($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $4_1 = $115($2_1);
  $5_1 = HEAPF32[$1_1 + 444 >> 2];
  $7_1 = $6_1;
  $8_1 = $4_1;
  $2_1 = $116($2_1);
  $9_1 = Math_fround(-$2_1);
  if (Math_fround(Math_abs($4_1)) > Math_fround(1.1920928955078125e-07)) {
   $2_1 = Math_fround(Math_fround($2_1 * $2_1) / Math_fround($4_1 * $4_1));
   $4_1 = Math_fround($2_1 + Math_fround(1.0));
   $5_1 = Math_fround($2_1 / Math_fround($5_1 * $5_1));
   $2_1 = HEAPF32[$1_1 + 448 >> 2];
   $5_1 = Math_fround(Math_sqrt(Math_fround($4_1 / Math_fround($5_1 + Math_fround(Math_fround(1.0) / Math_fround($2_1 * $2_1))))));
  }
  $452($7_1, Math_fround(0.0), $8_1, $9_1, $5_1);
  $658($0_1, $6_1, $3_1, Math_fround(0.0), Math_fround(0.0));
  global$0 = $6_1 + 16 | 0;
 }
 
 function $759($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 21068;
  $124($0_1 + 68 | 0);
  $124($0_1 + 48 | 0);
  $124($0_1 + 28 | 0);
  return $0_1 | 0;
 }
 
 function $760($0_1) {
  $0_1 = $0_1 | 0;
  $33($759($0_1));
 }
 
 function $761($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  label$1 : {
   if (($5_1 | 0) >= 0) {
    $12_1 = HEAP32[$0_1 + 16 >> 2];
    $7_1 = ($12_1 | 0) > 0 ? $12_1 : 0;
    while (1) {
     if (($6_1 | 0) == ($7_1 | 0)) {
      $6_1 = $7_1;
      $8_1 = 0;
      break label$1;
     }
     $8_1 = HEAP32[$0_1 + 12 >> 2] + $9_1 | 0;
     $13_1 = HEAP32[$8_1 >> 2];
     $10_1 = HEAP32[HEAP32[$13_1 + 28 >> 2] + 208 >> 2];
     if (($10_1 | 0) <= -1) {
      $10_1 = HEAP32[HEAP32[$13_1 + 32 >> 2] + 208 >> 2]
     }
     if (($5_1 | 0) == ($10_1 | 0)) {
      break label$1
     }
     $9_1 = $9_1 + 4 | 0;
     $6_1 = $6_1 + 1 | 0;
     continue;
    };
   }
   $5_1 = HEAP32[$0_1 + 8 >> 2];
   Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2]]($5_1, $1_1, $2_1, $3_1, $4_1, HEAP32[$0_1 + 12 >> 2], HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 4 >> 2], HEAP32[$0_1 + 20 >> 2], HEAP32[$0_1 + 24 >> 2]));
   return;
  }
  $9_1 = $6_1 << 2;
  $6_1 = (($6_1 | 0) > ($12_1 | 0) ? $6_1 : $12_1) - $6_1 | 0;
  while (1) {
   if ($6_1) {
    $10_1 = HEAP32[HEAP32[$0_1 + 12 >> 2] + $9_1 >> 2];
    $7_1 = HEAP32[HEAP32[$10_1 + 28 >> 2] + 208 >> 2];
    if (($7_1 | 0) <= -1) {
     $7_1 = HEAP32[HEAP32[$10_1 + 32 >> 2] + 208 >> 2]
    }
    $6_1 = $6_1 - 1 | 0;
    $9_1 = $9_1 + 4 | 0;
    $11_1 = (($5_1 | 0) == ($7_1 | 0)) + $11_1 | 0;
    continue;
   }
   break;
  };
  $5_1 = HEAP32[$0_1 + 4 >> 2];
  if (HEAP32[$5_1 + 88 >> 2] >= 2) {
   $6_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = $0_1 + 28 | 0;
   while (1) if ($6_1) {
    $459($2_1, $1_1);
    $6_1 = $6_1 - 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   } else {
    $6_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
    $1_1 = $0_1 + 48 | 0;
    while (1) if ($6_1) {
     $459($1_1, $3_1);
     $6_1 = $6_1 - 1 | 0;
     $3_1 = $3_1 + 4 | 0;
     continue;
    } else {
     $1_1 = $0_1 + 68 | 0;
     while (1) {
      if ($11_1) {
       $459($1_1, $8_1);
       $11_1 = $11_1 - 1 | 0;
       $8_1 = $8_1 + 4 | 0;
       continue;
      }
      break;
     };
     if (HEAP32[HEAP32[$0_1 + 4 >> 2] + 88 >> 2] < (HEAP32[$0_1 + 52 >> 2] + HEAP32[$0_1 + 72 >> 2] | 0)) {
      $762($0_1)
     }
     return;
    };
   };
  }
  $6_1 = HEAP32[$0_1 + 8 >> 2];
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 12 >> 2]]($6_1, $1_1, $2_1, $3_1, $4_1, $8_1, $11_1, $5_1, HEAP32[$0_1 + 20 >> 2], HEAP32[$0_1 + 24 >> 2]));
 }
 
 function $762($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  $2_1 = HEAP32[$0_1 + 32 >> 2];
  $4_1 = $2_1 ? HEAP32[$0_1 + 40 >> 2] : 0;
  $5_1 = $2_1;
  $2_1 = HEAP32[$0_1 + 52 >> 2];
  $6_1 = $2_1 ? HEAP32[$0_1 + 60 >> 2] : 0;
  $7_1 = $2_1;
  $2_1 = HEAP32[$0_1 + 72 >> 2];
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $4_1, $5_1, $6_1, $7_1, $2_1 ? HEAP32[$0_1 + 80 >> 2] : 0, $2_1, HEAP32[$0_1 + 4 >> 2], HEAP32[$0_1 + 20 >> 2], HEAP32[$0_1 + 24 >> 2]));
  HEAP32[$1_1 + 12 >> 2] = 0;
  $499($0_1 + 28 | 0, $1_1 + 12 | 0);
  HEAP32[$1_1 + 8 >> 2] = 0;
  $499($0_1 + 48 | 0, $1_1 + 8 | 0);
  HEAP32[$1_1 + 4 >> 2] = 0;
  $763($0_1 + 68 | 0, 0, $1_1 + 4 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $763($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   if (($3_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) > ($3_1 | 0)) {
    $182($0_1, $1_1)
   }
   $4_1 = $1_1 - $3_1 | 0;
   $3_1 = $3_1 << 2;
   while (1) {
    if (!$4_1) {
     break label$1
    }
    HEAP32[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 2] = HEAP32[$2_1 >> 2];
    $4_1 = $4_1 - 1 | 0;
    $3_1 = $3_1 + 4 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $764($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 20868;
  if (HEAPU8[$0_1 + 308 | 0]) {
   $1_1 = HEAP32[$0_1 + 240 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $121(HEAP32[$0_1 + 240 >> 2]);
  }
  $1_1 = HEAP32[$0_1 + 232 >> 2];
  if ($1_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $121(HEAP32[$0_1 + 232 >> 2]);
  }
  if (HEAPU8[$0_1 + 309 | 0]) {
   $1_1 = HEAP32[$0_1 + 236 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $121(HEAP32[$0_1 + 236 >> 2]);
  }
  $124($0_1 + 340 | 0);
  $163($0_1 + 312 | 0);
  HEAP32[$0_1 + 324 >> 2] = 0;
  HEAP8[$0_1 + 328 | 0] = 1;
  $1_1 = $0_1 + 316 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $163($0_1 + 264 | 0);
  HEAP32[$0_1 + 276 >> 2] = 0;
  HEAP8[$0_1 + 280 | 0] = 1;
  $1_1 = $0_1 + 268 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $124($0_1 + 244 | 0);
  $124($0_1 + 212 | 0);
  $709($0_1);
  return $0_1 | 0;
 }
 
 function $765($0_1) {
  $0_1 = $0_1 | 0;
  $121($764($0_1));
 }
 
 function $766($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $715($0_1);
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0)) {
    break label$1
   }
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 56 >> 2]]($1_1) & 6144)) {
    break label$1
   }
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 108 >> 2]]($0_1) | 0;
   while (1) {
    if (($1_1 | 0) < 1) {
     break label$1
    }
    $1_1 = $1_1 - 1 | 0;
    ((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 112 >> 2]]($0_1, $1_1) | 0), wasm2js_i32$0 = HEAP32[HEAP32[$0_1 >> 2] + 176 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    continue;
   };
  }
  label$3 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0)) {
    break label$3
   }
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 56 >> 2]]($1_1) & 16387)) {
    break label$3
   }
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0)) {
    break label$3
   }
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 56 >> 2]]($1_1) | 0)) {
    break label$3
   }
   $1_1 = 0;
   while (1) {
    if (HEAP32[$0_1 + 316 >> 2] <= ($1_1 | 0)) {
     break label$3
    }
    $3_1 = HEAP32[HEAP32[$0_1 + 324 >> 2] + $2_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, HEAP32[$0_1 + 76 >> 2]);
    $2_1 = $2_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   };
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0) {
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 104 >> 2]]($0_1);
  }
 }
 
 function $767($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $718($0_1, $1_1, $2_1, $3_1);
 }
 
 function $768($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if (!(!$1_1 | !(HEAP32[$1_1 + 252 >> 2] & 2))) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 96 >> 2]]($0_1, $1_1);
   return;
  }
  $720($0_1, $1_1);
 }
 
 function $769($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]]($1_1);
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, 104, 1) | 0;
  $2_1 = $2(HEAP32[$4_1 + 8 >> 2], 0, 104);
  $132($0_1 + 284 | 0, $2_1 + 88 | 0);
  $3_1 = $0_1 + 128 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 28 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 32 >> 2] = $5_1;
  $3_1 = $0_1 + 120 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 20 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 24 >> 2] = $5_1;
  $3_1 = $0_1 + 108 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 12 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 16 >> 2] = $5_1;
  $3_1 = $0_1 + 100 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $5_1;
  HEAPF32[$2_1 >> 2] = HEAPF32[$0_1 + 96 >> 2];
  HEAPF32[$2_1 + 36 >> 2] = HEAPF32[$0_1 + 140 >> 2];
  HEAPF32[$2_1 + 40 >> 2] = HEAPF32[$0_1 + 156 >> 2];
  HEAPF32[$2_1 + 44 >> 2] = HEAPF32[$0_1 + 160 >> 2];
  HEAPF32[$2_1 + 48 >> 2] = HEAPF32[$0_1 + 164 >> 2];
  HEAPF32[$2_1 + 52 >> 2] = HEAPF32[$0_1 + 168 >> 2];
  HEAPF32[$2_1 + 60 >> 2] = HEAPF32[$0_1 + 188 >> 2];
  HEAPF32[$2_1 + 64 >> 2] = HEAPF32[$0_1 + 192 >> 2];
  HEAP32[$2_1 + 68 >> 2] = HEAP32[$0_1 + 116 >> 2];
  HEAP32[$2_1 + 72 >> 2] = HEAP32[$0_1 + 176 >> 2];
  HEAP32[$2_1 + 76 >> 2] = HEAP32[$0_1 + 180 >> 2];
  HEAP32[$2_1 + 80 >> 2] = HEAP32[$0_1 + 184 >> 2];
  HEAP32[$2_1 + 84 >> 2] = HEAP32[$0_1 + 152 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1, $4_1, 21265, 1145853764, $2_1);
  $723($0_1, $1_1);
  $2_1 = 0;
  while (1) {
   label$2 : {
    if (HEAP32[$0_1 + 8 >> 2] <= ($2_1 | 0)) {
     $6_1 = 0;
     $2_1 = 0;
     while (1) {
      if (HEAP32[$0_1 + 248 >> 2] <= ($2_1 | 0)) {
       break label$2
      }
      $4_1 = HEAP32[HEAP32[$0_1 + 256 >> 2] + $6_1 >> 2];
      $3_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 36 >> 2]]($4_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
      (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $3_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 40 >> 2]]($4_1, HEAP32[$3_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1397641027), wasm2js_i32$5 = $4_1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
      $6_1 = $6_1 + 4 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue;
     };
    }
    $4_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $6_1 >> 2];
    if (HEAPU8[$4_1 + 252 | 0] & 2) {
     $3_1 = ((((wasm2js_i32$5 = $1_1, wasm2js_i32$4 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1) | 0), wasm2js_i32$1 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$5 | 0, wasm2js_i32$4 | 0, wasm2js_i32$1 | 0) | 0);
     $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 20 >> 2]]($4_1, HEAP32[$3_1 + 8 >> 2], $1_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1, $3_1, $5_1, 1497645650, $4_1);
    }
    $6_1 = $6_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
  $724($0_1, $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1);
 }
 
 function $770($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($2_1) {
    HEAPF32[$0_1 + 304 >> 2] = $3_1;
    $1_1 = Math_fround(HEAPF32[$0_1 + 300 >> 2] + $1_1);
    HEAPF32[$0_1 + 300 >> 2] = $1_1;
    if (!($1_1 >= $3_1)) {
     break label$1
    }
    $5_1 = $0_1;
    $6_1 = $1_1;
    $1_1 = Math_fround($1_1 / $3_1);
    label$3 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $4_1 = ~~$1_1;
      break label$3;
     }
     $4_1 = -2147483648;
    }
    HEAPF32[$5_1 + 300 >> 2] = $6_1 - Math_fround(Math_fround($4_1 | 0) * $3_1);
    break label$1;
   }
   HEAP32[$0_1 + 304 >> 2] = 0;
   HEAPF32[$0_1 + 300 >> 2] = HEAPU8[$0_1 + 336 | 0] ? Math_fround(0.0) : $1_1;
   $3_1 = $1_1;
   $4_1 = !(Math_fround(Math_abs($1_1)) < Math_fround(1.1920928955078125e-07));
   $2_1 = $4_1;
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0) {
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   (wasm2js_i32$0 = 22724, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 56 >> 2]]($5_1) >>> 4 & 1), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  }
  label$6 : {
   if ($4_1) {
    $2_1 = ($2_1 | 0) < ($4_1 | 0) ? $2_1 : $4_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 168 >> 2]]($0_1, Math_fround($3_1 * Math_fround($2_1 | 0)));
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 180 >> 2]]($0_1);
    $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
    while (1) {
     if (!$2_1) {
      break label$6
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 160 >> 2]]($0_1, $3_1);
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 84 >> 2]]($0_1);
     $2_1 = $2_1 - 1 | 0;
     continue;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 84 >> 2]]($0_1);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 124 >> 2]]($0_1);
  return $4_1 | 0;
 }
 
 function $771($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  $459($0_1 + 244 | 0, $3_1 + 12 | 0);
  if ($2_1) {
   $660(HEAP32[$1_1 + 28 >> 2], $1_1);
   $660(HEAP32[$1_1 + 32 >> 2], $1_1);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $772($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $665($0_1 + 244 | 0, $1_1);
  $664(HEAP32[$1_1 + 28 >> 2], $1_1);
  $664(HEAP32[$1_1 + 32 >> 2], $1_1);
 }
 
 function $773($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$0_1 + 316 >> 2];
  label$1 : {
   if (($2_1 | 0) != HEAP32[$0_1 + 320 >> 2]) {
    break label$1
   }
   $3_1 = $2_1 ? $2_1 << 1 : 1;
   if (($3_1 | 0) <= ($2_1 | 0)) {
    break label$1
   }
   $6_1 = $0_1 + 312 | 0;
   if ($3_1) {
    $5_1 = $120($3_1 << 2);
    $2_1 = HEAP32[$0_1 + 316 >> 2];
   }
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     HEAP32[$4_1 + $5_1 >> 2] = HEAP32[HEAP32[$0_1 + 324 >> 2] + $4_1 >> 2];
     $2_1 = $2_1 - 1 | 0;
     $4_1 = $4_1 + 4 | 0;
     continue;
    }
    break;
   };
   $163($6_1);
   HEAP32[$0_1 + 324 >> 2] = $5_1;
   HEAP8[$0_1 + 328 | 0] = 1;
   HEAP32[$0_1 + 320 >> 2] = $3_1;
   $2_1 = HEAP32[$0_1 + 316 >> 2];
  }
  HEAP32[$0_1 + 316 >> 2] = $2_1 + 1;
  HEAP32[HEAP32[$0_1 + 324 >> 2] + ($2_1 << 2) >> 2] = $1_1;
 }
 
 function $774($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0_1 + 316 >> 2];
  $5_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  label$1 : {
   while (1) {
    if (($2_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    if (HEAP32[HEAP32[$0_1 + 324 >> 2] + $4_1 >> 2] != ($1_1 | 0)) {
     $4_1 = $4_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 324 >> 2];
   $2_1 = $1_1 + ($2_1 << 2) | 0;
   $4_1 = HEAP32[$2_1 >> 2];
   $5_1 = $2_1;
   $6_1 = $1_1;
   $1_1 = $3_1 - 1 | 0;
   $2_1 = $1_1 << 2;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 + $2_1 >> 2];
   HEAP32[$0_1 + 316 >> 2] = $1_1;
   HEAP32[$2_1 + HEAP32[$0_1 + 324 >> 2] >> 2] = $4_1;
  }
 }
 
 function $775($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 284 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 288 >> 2] = $2_1;
  $3_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 292 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $6_1;
  while (1) {
   if (($4_1 | 0) < HEAP32[$0_1 + 268 >> 2]) {
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[HEAP32[$0_1 + 276 >> 2] + $5_1 >> 2];
      switch (HEAP32[$2_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     if (HEAP8[$2_1 + 568 | 0] & 1) {
      break label$3
     }
     $655($2_1, $1_1);
    }
    $5_1 = $5_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $776($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 288 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 284 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $1_1 = $1_1 + 292 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $777($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (HEAPU8[$0_1 + 310 | 0]) {
    $5_1 = $0_1 + 336 | 0;
    $6_1 = $0_1 + 304 | 0;
    $4_1 = $0_1 + 300 | 0;
    while (1) {
     if (HEAP32[$0_1 + 8 >> 2] <= ($1_1 | 0)) {
      break label$1
     }
     $3_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $2_1 >> 2];
     if (!(!$3_1 | !(HEAP32[$3_1 + 252 >> 2] & 2))) {
      $778(HEAPF32[$4_1 >> 2], HEAPF32[$6_1 >> 2], HEAPU8[$5_1 | 0], $3_1)
     }
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue;
    };
   }
   $3_1 = $0_1 + 336 | 0;
   $5_1 = $0_1 + 304 | 0;
   $6_1 = $0_1 + 300 | 0;
   while (1) {
    if (HEAP32[$0_1 + 268 >> 2] <= ($1_1 | 0)) {
     break label$1
    }
    label$6 : {
     label$7 : {
      $4_1 = HEAP32[HEAP32[$0_1 + 276 >> 2] + $2_1 >> 2];
      switch (HEAP32[$4_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$6;
      default:
       break label$7;
      };
     }
     $778(HEAPF32[$6_1 >> 2], HEAPF32[$5_1 >> 2], HEAPU8[$3_1 | 0], $4_1);
    }
    $2_1 = $2_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   };
  }
 }
 
 function $778($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 + -64 | 0;
  global$0 = $4_1;
  if (!(!HEAP32[$3_1 + 544 >> 2] | HEAPU8[$3_1 + 204 | 0] & 3)) {
   $650($3_1 + 68 | 0, HEAPF32[$3_1 + 132 >> 2], HEAPF32[$3_1 + 136 >> 2], HEAPF32[$3_1 + 140 >> 2], $3_1 + 148 | 0, !($2_1 & 255) | $1_1 == Math_fround(0.0) ? Math_fround(HEAPF32[$3_1 + 272 >> 2] * $0_1) : Math_fround($0_1 - $1_1), $4_1);
   $2_1 = HEAP32[$3_1 + 544 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $4_1);
  }
  global$0 = $4_1 - -64 | 0;
 }
 
 function $779($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  if (!(HEAPU8[$1_1 + 204 | 0] & 3 | HEAP8[$1_1 + 568 | 0] & 1)) {
   $655($1_1, $0_1 + 284 | 0)
  }
  if (HEAP32[$1_1 + 192 >> 2]) {
   label$3 : {
    if (!(HEAP8[$1_1 + 204 | 0] & 1)) {
     $663($0_1 + 264 | 0, $2_1 + 12 | 0);
     break label$3;
    }
    if ((HEAP32[$1_1 + 220 >> 2] & -2) == 4) {
     break label$3
    }
    HEAP32[$1_1 + 220 >> 2] = 2;
   }
   $3_1 = $1_1;
   $1_1 = HEAP32[$1_1 + 204 >> 2] & 3;
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 36 >> 2]]($0_1, $3_1, $1_1 ? 2 : 1, $1_1 ? -3 : -1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $780($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  if (!(HEAPU8[$1_1 + 204 | 0] & 3 | HEAP8[$1_1 + 568 | 0] & 1)) {
   $655($1_1, $0_1 + 284 | 0)
  }
  if (HEAP32[$1_1 + 192 >> 2]) {
   label$3 : {
    if (!(HEAP8[$1_1 + 204 | 0] & 1)) {
     $663($0_1 + 264 | 0, $4_1 + 12 | 0);
     break label$3;
    }
    if ((HEAP32[$1_1 + 220 >> 2] & -2) == 4) {
     break label$3
    }
    HEAP32[$1_1 + 220 >> 2] = 2;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 36 >> 2]]($0_1, $1_1, $2_1, $3_1);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $781($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0_1 + 268 >> 2];
  $5_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  label$1 : {
   while (1) {
    if (($2_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    if (HEAP32[HEAP32[$0_1 + 276 >> 2] + $4_1 >> 2] != ($1_1 | 0)) {
     $4_1 = $4_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   $6_1 = $2_1 << 2;
   $2_1 = HEAP32[$0_1 + 276 >> 2];
   $4_1 = $6_1 + $2_1 | 0;
   $5_1 = HEAP32[$4_1 >> 2];
   $6_1 = $2_1;
   $2_1 = $3_1 - 1 | 0;
   $3_1 = $2_1 << 2;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 + $3_1 >> 2];
   HEAP32[$0_1 + 268 >> 2] = $2_1;
   HEAP32[$3_1 + HEAP32[$0_1 + 276 >> 2] >> 2] = $5_1;
  }
  $720($0_1, $1_1);
 }
 
 function $782($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if (HEAPU8[$0_1 + 309 | 0]) {
   $121(HEAP32[$0_1 + 236 >> 2])
  }
  HEAP32[$0_1 + 236 >> 2] = $1_1;
  HEAP8[$0_1 + 309 | 0] = 0;
  HEAP32[HEAP32[$0_1 + 232 >> 2] + 8 >> 2] = $1_1;
 }
 
 function $783($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 236 >> 2];
 }
 
 function $784($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 248 >> 2];
 }
 
 function $785($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[HEAP32[$0_1 + 256 >> 2] + ($1_1 << 2) >> 2];
 }
 
 function $786($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 268 >> 2] > ($3_1 | 0)) {
    $2_1 = HEAP32[HEAP32[$0_1 + 276 >> 2] + $4_1 >> 2];
    $1_1 = $2_1;
    HEAP32[$1_1 + 476 >> 2] = 0;
    HEAP32[$1_1 + 480 >> 2] = 0;
    $1_1 = $1_1 + 500 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $2_1 + 492 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $2_1 = $2_1 + 484 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $4_1 = $4_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $787($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1, $1_1);
 }
 
 function $788($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 72 >> 2]]($0_1, $1_1);
 }
 
 function $789($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  while (1) {
   if (HEAP32[$0_1 + 268 >> 2] > ($7_1 | 0)) {
    $3_1 = HEAP32[HEAP32[$0_1 + 276 >> 2] + $8_1 >> 2];
    if (!(HEAPU8[$3_1 + 204 | 0] & 3)) {
     (wasm2js_i32$0 = $2_1, wasm2js_f32$0 = $118(Math_fround(Math_fround(1.0) - HEAPF32[$3_1 + 508 >> 2]), $1_1)), HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
     $4_1 = $218($3_1 + 376 | 0, $2_1 + 16 | 0);
     (wasm2js_i32$0 = $2_1, wasm2js_f32$0 = $118(Math_fround(Math_fround(1.0) - HEAPF32[$3_1 + 512 >> 2]), $1_1)), HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
     $5_1 = $218($3_1 + 392 | 0, $2_1 + 16 | 0);
     label$4 : {
      if (!HEAPU8[$3_1 + 516 | 0]) {
       break label$4
      }
      $9_1 = $3_1 + 396 | 0;
      $10_1 = $3_1 + 400 | 0;
      label$5 : {
       if (!($149(HEAPF32[$5_1 >> 2], HEAPF32[$9_1 >> 2], HEAPF32[$10_1 >> 2]) < HEAPF32[$3_1 + 528 >> 2])) {
        break label$5
       }
       if (!($149(HEAPF32[$4_1 >> 2], HEAPF32[$3_1 + 380 >> 2], HEAPF32[$3_1 + 384 >> 2]) < HEAPF32[$3_1 + 524 >> 2])) {
        break label$5
       }
       $11_1 = $3_1 + 520 | 0;
       $218($5_1, $11_1);
       $218($4_1, $11_1);
      }
      $6_1 = $137(HEAPF32[$4_1 >> 2], HEAPF32[$3_1 + 380 >> 2], HEAPF32[$3_1 + 384 >> 2]);
      label$6 : {
       if (!($6_1 < HEAPF32[$3_1 + 508 >> 2])) {
        break label$6
       }
       if ($6_1 > Math_fround(.004999999888241291)) {
        $185($2_1 + 16 | 0, $4_1);
        HEAP32[$2_1 + 12 >> 2] = 0;
        HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$2_1 + 24 >> 2] * Math_fround(.004999999888241291);
        HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$2_1 + 20 >> 2] * Math_fround(.004999999888241291);
        HEAPF32[$2_1 >> 2] = HEAPF32[$2_1 + 16 >> 2] * Math_fround(.004999999888241291);
        $489($4_1, $2_1);
        break label$6;
       }
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$4_1 + 4 >> 2] = 0;
       $4_1 = $4_1 + 8 | 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$4_1 + 4 >> 2] = 0;
      }
      $6_1 = $137(HEAPF32[$5_1 >> 2], HEAPF32[$9_1 >> 2], HEAPF32[$10_1 >> 2]);
      if (!($6_1 < HEAPF32[$3_1 + 512 >> 2])) {
       break label$4
      }
      if ($6_1 > Math_fround(.004999999888241291)) {
       $185($2_1 + 16 | 0, $5_1);
       HEAP32[$2_1 + 12 >> 2] = 0;
       HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$2_1 + 24 >> 2] * Math_fround(.004999999888241291);
       HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$2_1 + 20 >> 2] * Math_fround(.004999999888241291);
       HEAPF32[$2_1 >> 2] = HEAPF32[$2_1 + 16 >> 2] * Math_fround(.004999999888241291);
       $489($5_1, $2_1);
       break label$4;
      }
      HEAP32[$5_1 >> 2] = 0;
      HEAP32[$5_1 + 4 >> 2] = 0;
      $4_1 = $5_1 + 8 | 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$4_1 + 4 >> 2] = 0;
     }
     $649($3_1, $1_1, $3_1 + 68 | 0);
    }
    $8_1 = $8_1 + 4 | 0;
    $7_1 = $7_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $2_1 + 32 | 0;
 }
 
 function $790($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0);
  $2_1 = global$0 - 288 | 0;
  global$0 = $2_1;
  label$1 : {
   $7_1 = HEAP32[$0_1 + 268 >> 2];
   if (($7_1 | 0) < 1) {
    break label$1
   }
   $13_1 = HEAP32[$0_1 + 276 >> 2];
   $11_1 = $2_1 + 48 | 0;
   $14_1 = $2_1 + 32 | 0;
   $15_1 = $2_1 + 16 | 0;
   $16_1 = $2_1 + 152 | 0;
   $17_1 = $2_1 + 136 | 0;
   $8_1 = $2_1 + 272 | 0;
   while (1) {
    if (!$7_1) {
     break label$1
    }
    $4_1 = HEAP32[$13_1 >> 2];
    HEAP32[$4_1 + 272 >> 2] = 1065353216;
    label$3 : {
     label$4 : {
      switch (HEAP32[$4_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     if (HEAPU8[$4_1 + 204 | 0] & 3) {
      break label$3
     }
     $649($4_1, $1_1, $2_1 + 224 | 0);
     label$5 : {
      if (!HEAPU8[$0_1 + 44 | 0]) {
       break label$5
      }
      $9_1 = $149(Math_fround(HEAPF32[$2_1 + 272 >> 2] - HEAPF32[$4_1 + 52 >> 2]), Math_fround(HEAPF32[$2_1 + 276 >> 2] - HEAPF32[$4_1 + 56 >> 2]), Math_fround(HEAPF32[$2_1 + 280 >> 2] - HEAPF32[$4_1 + 60 >> 2]));
      $12_1 = HEAPF32[$4_1 + 280 >> 2];
      $12_1 = Math_fround($12_1 * $12_1);
      if ($12_1 == Math_fround(0.0) | !($9_1 > $12_1) | HEAP32[HEAP32[$4_1 + 192 >> 2] + 4 >> 2] > 19) {
       break label$5
      }
      HEAP32[5684] = HEAP32[5684] + 1;
      $3_1 = HEAP32[$0_1 + 72 >> 2];
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 36 >> 2]]($3_1) | 0;
      $3_1 = $4_1 + 52 | 0;
      $6_1 = HEAP32[$3_1 + 4 >> 2];
      HEAP32[$17_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$17_1 + 4 >> 2] = $6_1;
      $3_1 = $3_1 + 8 | 0;
      $10_1 = HEAP32[$3_1 + 4 >> 2];
      $6_1 = $17_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $10_1;
      $3_1 = HEAP32[$8_1 + 4 >> 2];
      HEAP32[$16_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$16_1 + 4 >> 2] = $3_1;
      $3_1 = $8_1 + 8 | 0;
      $10_1 = HEAP32[$3_1 + 4 >> 2];
      $6_1 = $16_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $10_1;
      HEAP32[$2_1 + 124 >> 2] = 1065353216;
      HEAP32[$2_1 + 120 >> 2] = 21200;
      HEAP32[$2_1 + 200 >> 2] = 0;
      HEAP32[$2_1 + 216 >> 2] = HEAP32[$0_1 + 24 >> 2];
      HEAP32[$2_1 + 212 >> 2] = $5_1;
      HEAP32[$2_1 + 204 >> 2] = $4_1;
      $457($2_1 - -64 | 0, HEAPF32[$4_1 + 276 >> 2]);
      HEAPF32[$2_1 + 208 >> 2] = HEAPF32[$0_1 + 56 >> 2];
      $5_1 = HEAP32[$4_1 + 188 >> 2];
      $6_1 = HEAP32[$5_1 + 8 >> 2];
      HEAP32[$2_1 + 128 >> 2] = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$2_1 + 132 >> 2] = $6_1;
      $6_1 = HEAP32[$3_1 + 4 >> 2];
      $5_1 = $11_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $6_1;
      $3_1 = HEAP32[$8_1 + 4 >> 2];
      HEAP32[$11_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$11_1 + 4 >> 2] = $3_1;
      $3_1 = $4_1 + 4 | 0;
      $6_1 = $3_1 + 8 | 0;
      $10_1 = HEAP32[$6_1 + 4 >> 2];
      $5_1 = $2_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $10_1;
      $5_1 = $4_1 + 20 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$15_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$15_1 + 4 >> 2] = $6_1;
      $6_1 = $4_1 + 28 | 0;
      $10_1 = HEAP32[$6_1 + 4 >> 2];
      $5_1 = $15_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $10_1;
      $5_1 = $4_1 + 36 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$14_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$14_1 + 4 >> 2] = $6_1;
      $6_1 = $4_1 + 44 | 0;
      $10_1 = HEAP32[$6_1 + 4 >> 2];
      $5_1 = $14_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $10_1;
      $5_1 = HEAP32[$3_1 + 4 >> 2];
      HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $5_1;
      $745($0_1, $2_1 - -64 | 0, $3_1, $2_1, $2_1 + 120 | 0, Math_fround(0.0));
      $9_1 = HEAPF32[$2_1 + 124 >> 2];
      if (!($9_1 < Math_fround(1.0))) {
       break label$5
      }
      HEAPF32[$4_1 + 272 >> 2] = $9_1;
      $649($4_1, Math_fround($9_1 * $1_1), $2_1 + 224 | 0);
      HEAP32[$4_1 + 272 >> 2] = 0;
      $656($4_1, $2_1 + 224 | 0);
      break label$3;
     }
     $656($4_1, $2_1 + 224 | 0);
    }
    $7_1 = $7_1 - 1 | 0;
    $13_1 = $13_1 + 4 | 0;
    continue;
   };
  }
  label$6 : {
   if (!HEAPU8[$0_1 + 311 | 0]) {
    break label$6
   }
   $8_1 = 0;
   label$7 : while (1) {
    if (HEAP32[$0_1 + 344 >> 2] <= ($8_1 | 0)) {
     break label$6
    }
    $11_1 = HEAP32[HEAP32[$0_1 + 352 >> 2] + ($8_1 << 2) >> 2];
    $3_1 = HEAP32[$11_1 + 824 >> 2];
    $3_1 = HEAP32[$3_1 + 252 >> 2] << 30 >> 31 & $3_1;
    $4_1 = HEAP32[$11_1 + 820 >> 2];
    $4_1 = HEAP32[$4_1 + 252 >> 2] << 30 >> 31 & $4_1;
    $7_1 = $11_1 + 128 | 0;
    $13_1 = 0;
    while (1) if (HEAP32[$11_1 + 828 >> 2] <= ($13_1 | 0)) {
     $8_1 = $8_1 + 1 | 0;
     continue label$7;
    } else {
     $1_1 = Math_fround(HEAPF32[$4_1 + 232 >> 2] * HEAPF32[$3_1 + 232 >> 2]);
     label$11 : {
      if (!($1_1 > Math_fround(0.0))) {
       break label$11
      }
      $9_1 = HEAPF32[$7_1 >> 2];
      if ($9_1 == Math_fround(0.0)) {
       break label$11
      }
      HEAP32[$2_1 + 132 >> 2] = 0;
      $12_1 = Math_fround($1_1 * Math_fround($9_1 * Math_fround(-HEAPF32[$7_1 - 60 >> 2])));
      HEAPF32[$2_1 + 120 >> 2] = $12_1;
      $18_1 = Math_fround($1_1 * Math_fround($9_1 * Math_fround(-HEAPF32[$7_1 - 56 >> 2])));
      HEAPF32[$2_1 + 124 >> 2] = $18_1;
      $1_1 = Math_fround($1_1 * Math_fround($9_1 * Math_fround(-HEAPF32[$7_1 - 52 >> 2])));
      HEAPF32[$2_1 + 128 >> 2] = $1_1;
      HEAP32[$2_1 + 236 >> 2] = 0;
      HEAPF32[$2_1 + 232 >> 2] = HEAPF32[$7_1 - 68 >> 2] - HEAPF32[$4_1 + 60 >> 2];
      HEAPF32[$2_1 + 228 >> 2] = HEAPF32[$7_1 - 72 >> 2] - HEAPF32[$4_1 + 56 >> 2];
      HEAPF32[$2_1 + 224 >> 2] = HEAPF32[$7_1 - 76 >> 2] - HEAPF32[$4_1 + 52 >> 2];
      HEAP32[$2_1 + 12 >> 2] = 0;
      HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$7_1 - 84 >> 2] - HEAPF32[$3_1 + 60 >> 2];
      HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$7_1 - 88 >> 2] - HEAPF32[$3_1 + 56 >> 2];
      HEAPF32[$2_1 >> 2] = HEAPF32[$7_1 - 92 >> 2] - HEAPF32[$3_1 + 52 >> 2];
      $791($4_1, $2_1 + 120 | 0, $2_1 + 224 | 0);
      HEAP32[$2_1 + 76 >> 2] = 0;
      HEAPF32[$2_1 + 72 >> 2] = -$1_1;
      HEAPF32[$2_1 + 68 >> 2] = -$18_1;
      HEAPF32[$2_1 + 64 >> 2] = -$12_1;
      $791($3_1, $2_1 - -64 | 0, $2_1);
     }
     $7_1 = $7_1 + 204 | 0;
     $13_1 = $13_1 + 1 | 0;
     continue;
    };
   };
  }
  global$0 = $2_1 + 288 | 0;
 }
 
 function $791($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  if (HEAPF32[$0_1 + 408 >> 2] != Math_fround(0.0)) {
   $4_1 = $1_1 + 4 | 0;
   $5_1 = $1_1 + 8 | 0;
   $953($0_1, HEAPF32[$1_1 >> 2], HEAPF32[$4_1 >> 2], HEAPF32[$5_1 >> 2]);
   $201($3_1, HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$0_1 + 412 >> 2]), Math_fround(HEAPF32[$4_1 >> 2] * HEAPF32[$0_1 + 416 >> 2]), Math_fround(HEAPF32[$5_1 >> 2] * HEAPF32[$0_1 + 420 >> 2]));
   $951($0_1, HEAPF32[$3_1 >> 2], HEAPF32[$3_1 + 4 >> 2], HEAPF32[$3_1 + 8 >> 2]);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $792($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = HEAP32[$0_1 + 240 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $0_1, HEAP32[$0_1 + 24 >> 2]);
  $1_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 344 >> 2] <= ($3_1 | 0)) {
    label$3 : {
     $1_1 = 0;
     $3_1 = HEAP32[$0_1 + 248 >> 2];
     $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
     while (1) {
      if (!$3_1) {
       break label$3
      }
      $2_1 = HEAP32[HEAP32[$0_1 + 256 >> 2] + $1_1 >> 2];
      label$5 : {
       if (!HEAPU8[$2_1 + 20 | 0]) {
        break label$5
       }
       $4_1 = HEAP32[$2_1 + 28 >> 2];
       if (HEAPU8[$4_1 + 204 | 0] & 3) {
        break label$5
       }
       $2_1 = HEAP32[$2_1 + 32 >> 2];
       if (HEAPU8[$2_1 + 204 | 0] & 3) {
        break label$5
       }
       $751(HEAP32[$0_1 + 240 >> 2] + 4 | 0, HEAP32[$4_1 + 208 >> 2], HEAP32[$2_1 + 208 >> 2]);
      }
      $3_1 = $3_1 - 1 | 0;
      $1_1 = $1_1 + 4 | 0;
      continue;
     };
    }
   } else {
    $4_1 = HEAP32[HEAP32[$0_1 + 352 >> 2] + $1_1 >> 2];
    $2_1 = HEAP32[$4_1 + 820 >> 2];
    label$7 : {
     if (!$2_1) {
      break label$7
     }
     $4_1 = HEAP32[$4_1 + 824 >> 2];
     if (!$4_1 | HEAP32[$2_1 + 204 >> 2] & 3 | HEAPU8[$4_1 + 204 | 0] & 3) {
      break label$7
     }
     $751(HEAP32[$0_1 + 240 >> 2] + 4 | 0, HEAP32[$2_1 + 208 >> 2], HEAP32[$4_1 + 208 >> 2]);
    }
    $1_1 = $1_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
  $1_1 = HEAP32[$0_1 + 240 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $0_1);
 }
 
 function $793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $9_1 = HEAPU8[22724];
  while (1) {
   if (($6_1 | 0) < HEAP32[$0_1 + 268 >> 2]) {
    $2_1 = HEAP32[HEAP32[$0_1 + 276 >> 2] + $7_1 >> 2];
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     label$4 : {
      label$5 : {
       $3_1 = HEAP32[$2_1 + 220 >> 2];
       switch ($3_1 - 2 | 0) {
       case 0:
       case 2:
        break label$4;
       default:
        break label$5;
       };
      }
      label$6 : {
       $5_1 = $149(HEAPF32[$2_1 + 376 >> 2], HEAPF32[$2_1 + 380 >> 2], HEAPF32[$2_1 + 384 >> 2]);
       $4_1 = HEAPF32[$2_1 + 536 >> 2];
       if (!($5_1 < Math_fround($4_1 * $4_1))) {
        break label$6
       }
       $5_1 = $149(HEAPF32[$2_1 + 392 >> 2], HEAPF32[$2_1 + 396 >> 2], HEAPF32[$2_1 + 400 >> 2]);
       $4_1 = HEAPF32[$2_1 + 540 >> 2];
       if (!($5_1 < Math_fround($4_1 * $4_1))) {
        break label$6
       }
       HEAPF32[$2_1 + 224 >> 2] = HEAPF32[$2_1 + 224 >> 2] + $1_1;
       break label$4;
      }
      HEAP32[$2_1 + 224 >> 2] = 0;
      if (($3_1 & -2) == 4) {
       break label$4
      }
      $3_1 = 0;
      HEAP32[$2_1 + 220 >> 2] = 0;
     }
     label$7 : {
      if (($3_1 | 0) == 4 | $9_1) {
       break label$7
      }
      $8_1 = $3_1 & -2;
      if (HEAPF32[$2_1 + 224 >> 2] > Math_fround(2.0) ? 0 : ($8_1 | 0) != 2) {
       break label$7
      }
      if (HEAPU8[$2_1 + 204 | 0] & 3) {
       if (($8_1 | 0) == 4) {
        break label$3
       }
       HEAP32[$2_1 + 220 >> 2] = 2;
       break label$3;
      }
      if (($3_1 | 0) == 1) {
       HEAP32[$2_1 + 220 >> 2] = 3;
       break label$3;
      }
      if (($3_1 | 0) != 2) {
       break label$3
      }
      HEAP32[$2_1 + 392 >> 2] = 0;
      HEAP32[$2_1 + 396 >> 2] = 0;
      HEAP32[$2_1 + 376 >> 2] = 0;
      HEAP32[$2_1 + 380 >> 2] = 0;
      $3_1 = $2_1 + 400 | 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = 0;
      $3_1 = $2_1 + 384 | 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = 0;
      HEAP32[$2_1 + 308 >> 2] = HEAP32[$2_1 + 308 >> 2] + 2;
      break label$3;
     }
     if (($3_1 & -2) == 4) {
      break label$3
     }
     HEAP32[$2_1 + 220 >> 2] = 1;
    }
    $7_1 = $7_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $794($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = HEAP32[$0_1 + 88 >> 2];
  if ($2_1) {
   FUNCTION_TABLE[$2_1 | 0]($0_1, $1_1)
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 144 >> 2]]($0_1, $1_1);
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAPF32[$0_1 + 28 >> 2] = $1_1;
  (wasm2js_i32$0 = $0_1 + 48 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 164 >> 2]]($0_1, $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 152 >> 2]]($0_1);
  HEAPF32[$0_1 + 108 >> 2] = $1_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 172 >> 2]]($0_1, $0_1 + 96 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 148 >> 2]]($0_1, $1_1);
  $795($0_1, $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 156 >> 2]]($0_1, $1_1);
  $2_1 = HEAP32[$0_1 + 84 >> 2];
  if ($2_1) {
   FUNCTION_TABLE[$2_1 | 0]($0_1, $1_1)
  }
 }
 
 function $795($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 316 >> 2] > ($2_1 | 0)) {
    $4_1 = HEAP32[HEAP32[$0_1 + 324 >> 2] + $3_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $0_1, $1_1);
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $796($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = 0, $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0);
  $2_1 = global$0 - 528 | 0;
  global$0 = $2_1;
  while (1) {
   if (($9_1 | 0) < HEAP32[$0_1 + 344 >> 2]) {
    $3_1 = HEAP32[$0_1 + 24 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, HEAP32[HEAP32[$0_1 + 352 >> 2] + $10_1 >> 2]);
    $10_1 = $10_1 + 4 | 0;
    $9_1 = $9_1 + 1 | 0;
    continue;
   }
   break;
  };
  $30_1 = $0_1 + 340 | 0;
  $124($30_1);
  label$3 : {
   $9_1 = HEAP32[$0_1 + 268 >> 2];
   if (($9_1 | 0) < 1) {
    break label$3
   }
   $10_1 = HEAP32[$0_1 + 276 >> 2];
   $33_1 = $2_1 + 124 | 0;
   $18_1 = $2_1 + 92 | 0;
   $19_1 = $2_1 + 72 | 0;
   $20_1 = $2_1 + 24 | 0;
   $21_1 = $2_1 + 408 | 0;
   $22_1 = $2_1 + 288 | 0;
   $23_1 = $2_1 + 272 | 0;
   $24_1 = $2_1 + 256 | 0;
   $25_1 = $2_1 + 392 | 0;
   $26_1 = $2_1 + 376 | 0;
   $12_1 = $2_1 + 512 | 0;
   while (1) {
    if (!$9_1) {
     break label$3
    }
    $6_1 = HEAP32[$10_1 >> 2];
    HEAP32[$6_1 + 272 >> 2] = 1065353216;
    label$5 : {
     label$6 : {
      switch (HEAP32[$6_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$5;
      default:
       break label$6;
      };
     }
     if (HEAPU8[$6_1 + 204 | 0] & 3) {
      break label$5
     }
     $649($6_1, $1_1, $2_1 + 464 | 0);
     if (!HEAPU8[$0_1 + 44 | 0]) {
      break label$5
     }
     $13_1 = HEAPF32[$2_1 + 512 >> 2];
     $31_1 = HEAPF32[$2_1 + 516 >> 2];
     $32_1 = HEAPF32[$2_1 + 520 >> 2];
     $11_1 = $149(Math_fround($13_1 - HEAPF32[$6_1 + 52 >> 2]), Math_fround($31_1 - HEAPF32[$6_1 + 56 >> 2]), Math_fround($32_1 - HEAPF32[$6_1 + 60 >> 2]));
     $8_1 = HEAPF32[$6_1 + 280 >> 2];
     $8_1 = Math_fround($8_1 * $8_1);
     if ($8_1 == Math_fround(0.0) | !($8_1 < $11_1) | HEAP32[HEAP32[$6_1 + 192 >> 2] + 4 >> 2] > 19) {
      break label$5
     }
     HEAP32[5684] = HEAP32[5684] + 1;
     $3_1 = HEAP32[$0_1 + 72 >> 2];
     $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 36 >> 2]]($3_1) | 0;
     $27_1 = $6_1 + 52 | 0;
     $4_1 = $27_1;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$26_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$26_1 + 4 >> 2] = $3_1;
     $28_1 = $4_1 + 8 | 0;
     $4_1 = $28_1;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $26_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     $3_1 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$25_1 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$25_1 + 4 >> 2] = $3_1;
     $29_1 = $12_1 + 8 | 0;
     $4_1 = $29_1;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $25_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     HEAP32[$2_1 + 364 >> 2] = 1065353216;
     HEAP32[$2_1 + 360 >> 2] = 21200;
     HEAP32[$2_1 + 440 >> 2] = 0;
     HEAP32[$2_1 + 456 >> 2] = HEAP32[$0_1 + 24 >> 2];
     HEAP32[$2_1 + 452 >> 2] = $7_1;
     HEAP32[$2_1 + 444 >> 2] = $6_1;
     $457($2_1 + 304 | 0, HEAPF32[$6_1 + 276 >> 2]);
     HEAPF32[$2_1 + 448 >> 2] = HEAPF32[$0_1 + 56 >> 2];
     $4_1 = HEAP32[$6_1 + 188 >> 2];
     $3_1 = HEAP32[$4_1 + 8 >> 2];
     HEAP32[$2_1 + 368 >> 2] = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$2_1 + 372 >> 2] = $3_1;
     $3_1 = HEAP32[$29_1 + 4 >> 2];
     $4_1 = $22_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$29_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $3_1;
     $3_1 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$22_1 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$22_1 + 4 >> 2] = $3_1;
     $3_1 = $6_1 + 4 | 0;
     $5_1 = $3_1 + 8 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     $7_1 = $2_1 + 248 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $4_1;
     $5_1 = $6_1 + 20 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$24_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$24_1 + 4 >> 2] = $4_1;
     $5_1 = $6_1 + 28 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     $7_1 = $24_1 + 8 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $4_1;
     $5_1 = $6_1 + 36 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$23_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$23_1 + 4 >> 2] = $4_1;
     $5_1 = $6_1 + 44 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     $7_1 = $23_1 + 8 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 240 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 244 >> 2] = $4_1;
     $745($0_1, $2_1 + 304 | 0, $3_1, $2_1 + 240 | 0, $2_1 + 360 | 0, Math_fround(0.0));
     $14_1 = HEAPF32[$2_1 + 364 >> 2];
     if (!($14_1 < Math_fround(1.0))) {
      break label$5
     }
     $15_1 = HEAPF32[$6_1 + 52 >> 2];
     $16_1 = HEAPF32[$6_1 + 56 >> 2];
     $34_1 = HEAPF32[$6_1 + 60 >> 2];
     $35_1 = HEAPF32[$2_1 + 416 >> 2];
     $36_1 = HEAPF32[$2_1 + 412 >> 2];
     $37_1 = HEAPF32[$2_1 + 408 >> 2];
     $3_1 = HEAP32[$0_1 + 24 >> 2];
     $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $6_1, HEAP32[$2_1 + 440 >> 2]) | 0;
     HEAP32[$2_1 + 236 >> 2] = $7_1;
     $459($30_1, $2_1 + 236 | 0);
     $17_1 = HEAPF32[$6_1 + 52 >> 2];
     $11_1 = HEAPF32[$6_1 + 56 >> 2];
     $8_1 = HEAPF32[$6_1 + 60 >> 2];
     $463($2_1 + 8 | 0, HEAP32[$2_1 + 440 >> 2] + 4 | 0);
     $13_1 = Math_fround($14_1 * Math_fround($13_1 - $15_1));
     $15_1 = Math_fround($17_1 + $13_1);
     $16_1 = Math_fround($14_1 * Math_fround($31_1 - $16_1));
     $17_1 = Math_fround($11_1 + $16_1);
     $11_1 = Math_fround($14_1 * Math_fround($32_1 - $34_1));
     $8_1 = Math_fround($8_1 + $11_1);
     $146($2_1 + 216 | 0, $2_1 + 8 | 0, $15_1, $17_1, $8_1);
     $3_1 = $2_1 + 16 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = HEAP32[$2_1 + 220 >> 2];
     HEAP32[$20_1 >> 2] = HEAP32[$2_1 + 216 >> 2];
     HEAP32[$20_1 + 4 >> 2] = $3_1;
     $4_1 = $2_1 + 224 | 0;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $20_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     HEAP32[$18_1 >> 2] = 0;
     HEAP32[$18_1 + 4 >> 2] = 0;
     $3_1 = $18_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = HEAP32[$21_1 + 4 >> 2];
     HEAP32[$19_1 >> 2] = HEAP32[$21_1 >> 2];
     HEAP32[$19_1 + 4 >> 2] = $3_1;
     $4_1 = $21_1 + 8 | 0;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $19_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     HEAP32[$2_1 + 8 >> 2] = 0;
     HEAP32[$2_1 + 12 >> 2] = 0;
     HEAPF32[$2_1 + 88 >> 2] = Math_fround(Math_fround($16_1 * Math_fround(-$36_1)) - Math_fround($13_1 * $37_1)) - Math_fround($11_1 * $35_1);
     $2($33_1, 0, 48);
     $7_1 = $7_1 + Math_imul($406($7_1, $2_1 + 8 | 0), 204) | 0;
     HEAP32[$7_1 + 100 >> 2] = 0;
     HEAPF32[$7_1 + 88 >> 2] = Math_min(Math_fround(Math_max(Math_fround(HEAPF32[$6_1 + 228 >> 2] * HEAPF32[HEAP32[$2_1 + 440 >> 2] + 228 >> 2]), Math_fround(-10.0))), Math_fround(10.0));
     $3_1 = HEAP32[$28_1 + 4 >> 2];
     $4_1 = $7_1 + 60 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$28_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $3_1;
     $5_1 = HEAP32[$27_1 + 4 >> 2];
     $4_1 = HEAP32[$27_1 >> 2];
     HEAP32[$7_1 + 48 >> 2] = 0;
     HEAPF32[$7_1 + 44 >> 2] = $8_1;
     HEAPF32[$7_1 + 40 >> 2] = $17_1;
     $3_1 = $7_1 + 52 | 0;
     HEAP32[$3_1 >> 2] = $4_1;
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     HEAPF32[$7_1 + 36 >> 2] = $15_1;
    }
    $9_1 = $9_1 - 1 | 0;
    $10_1 = $10_1 + 4 | 0;
    continue;
   };
  }
  global$0 = $2_1 + 528 | 0;
 }
 
 function $797($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  while (1) {
   if (($6_1 | 0) < HEAP32[$0_1 + 8 >> 2]) {
    $2_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $7_1 >> 2];
    if (!(!$2_1 | !(HEAP32[$2_1 + 252 >> 2] & 2) | (!(HEAPU8[$2_1 + 204 | 0] & 2) | $1_1 == Math_fround(0.0) | HEAP32[$2_1 + 220 >> 2] == 2))) {
     $3_1 = HEAP32[$2_1 + 544 >> 2];
     if ($3_1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $2_1 + 4 | 0)
     }
     $3_1 = $2_1 + 376 | 0;
     $4_1 = $2_1 + 392 | 0;
     $654($2_1 + 68 | 0, $2_1 + 4 | 0, $1_1, $3_1, $4_1);
     $8_1 = $2_1 + 384 | 0;
     $9_1 = HEAP32[$8_1 + 4 >> 2];
     $5_1 = $2_1 + 140 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $9_1;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 132 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 136 >> 2] = $5_1;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$2_1 + 148 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 152 >> 2] = $3_1;
     $4_1 = $2_1 + 400 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 156 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $3_1 = HEAP32[$2_1 + 8 >> 2];
     HEAP32[$2_1 + 68 >> 2] = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$2_1 + 72 >> 2] = $3_1;
     $4_1 = $2_1 + 12 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 76 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $4_1 = $2_1 + 20 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 84 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $4_1 = $2_1 + 28 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 92 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $4_1 = $2_1 + 44 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 108 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $4_1 = $2_1 + 36 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 100 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $4_1 = $2_1 + 60 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 124 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $3_1 = $2_1 + 116 | 0;
     $2_1 = $2_1 + 52 | 0;
     $4_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
    }
    $7_1 = $7_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $798($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $3_1 = HEAP32[$0_1 + 248 >> 2];
  HEAP32[$7_1 + 12 >> 2] = 0;
  $4_1 = $0_1 + 212 | 0;
  $763($4_1, $3_1, $7_1 + 12 | 0);
  while (1) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 108 >> 2]]($0_1) | 0) > ($5_1 | 0)) {
    HEAP32[HEAP32[$0_1 + 224 >> 2] + $2_1 >> 2] = HEAP32[HEAP32[$0_1 + 256 >> 2] + $2_1 >> 2];
    $2_1 = $2_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    continue;
   }
   break;
  };
  $2_1 = HEAP32[$0_1 + 216 >> 2];
  if (($2_1 | 0) >= 2) {
   $799($4_1, 0, $2_1 - 1 | 0)
  }
  $5_1 = 0;
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 108 >> 2]]($0_1) | 0) {
   $12_1 = HEAP32[$0_1 + 224 >> 2]
  }
  $3_1 = HEAP32[$0_1 + 216 >> 2];
  $2_1 = HEAP32[$0_1 + 232 >> 2];
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0), HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
  HEAP32[$2_1 + 16 >> 2] = $3_1;
  HEAP32[$2_1 + 12 >> 2] = $12_1;
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  HEAP32[$7_1 + 12 >> 2] = 0;
  $499($2_1 + 28 | 0, $7_1 + 12 | 0);
  HEAP32[$7_1 + 12 >> 2] = 0;
  $499($2_1 + 48 | 0, $7_1 + 12 | 0);
  HEAP32[$7_1 + 12 >> 2] = 0;
  $763($2_1 + 68 | 0, 0, $7_1 + 12 | 0);
  $2_1 = HEAP32[$0_1 + 236 >> 2];
  $3_1 = HEAP32[$0_1 + 24 >> 2];
  (((wasm2js_i32$1 = $2_1, wasm2js_i32$2 = HEAP32[$0_1 + 8 >> 2]), wasm2js_i32$3 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 36 >> 2]]($3_1) | 0), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
  $17_1 = HEAP32[$0_1 + 232 >> 2];
  $8_1 = HEAP32[$0_1 + 24 >> 2];
  $9_1 = HEAP32[$0_1 + 240 >> 2];
  HEAP32[$7_1 + 12 >> 2] = 0;
  $12_1 = $9_1 + 24 | 0;
  $499($12_1, $7_1 + 12 | 0);
  $2_1 = HEAP32[$9_1 + 8 >> 2];
  $4_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $3_1 = $9_1 + 16 | 0;
  $2_1 = 0;
  while (1) if (($2_1 | 0) == ($4_1 | 0)) {
   $6_1 = HEAP32[$9_1 + 8 >> 2];
   if (($6_1 | 0) >= 2) {
    $747($9_1 + 4 | 0, 0, $6_1 - 1 | 0);
    $6_1 = HEAP32[$9_1 + 8 >> 2];
   }
   $15_1 = $6_1 - 1 | 0;
   $2_1 = 0;
   $18_1 = $9_1 + 16 | 0;
   while (1) {
    label$9 : {
     if (($2_1 | 0) < ($6_1 | 0)) {
      $4_1 = HEAP32[$18_1 >> 2] + ($2_1 << 3) | 0;
      $5_1 = $4_1 + 8 | 0;
      $3_1 = $2_1 + 1 | 0;
      $10_1 = (($3_1 | 0) < ($6_1 | 0) ? $6_1 : $3_1) - 1 | 0;
      $14_1 = HEAP32[$4_1 >> 2];
      $3_1 = $2_1;
      label$11 : {
       while (1) {
        if (($3_1 | 0) == ($15_1 | 0)) {
         $3_1 = $6_1;
         break label$11;
        }
        $3_1 = $3_1 + 1 | 0;
        $11_1 = HEAP32[$5_1 >> 2];
        $5_1 = $5_1 + 8 | 0;
        if (($11_1 | 0) == ($14_1 | 0)) {
         continue
        }
        break;
       };
       $10_1 = $3_1 - 1 | 0;
      }
      $5_1 = $4_1 + 4 | 0;
      $11_1 = $5_1;
      $4_1 = $2_1;
      label$14 : {
       while (1) {
        if (($4_1 | 0) <= ($10_1 | 0)) {
         label$17 : {
          $16_1 = HEAP32[$0_1 + 16 >> 2];
          $13_1 = HEAP32[$16_1 + (HEAP32[$11_1 >> 2] << 2) >> 2];
          if (($14_1 | 0) != HEAP32[$13_1 + 208 >> 2]) {
           break label$17
          }
          switch (HEAP32[$13_1 + 220 >> 2] - 1 | 0) {
          case 0:
          case 3:
           break label$14;
          default:
           break label$17;
          };
         }
         $11_1 = $11_1 + 8 | 0;
         $4_1 = $4_1 + 1 | 0;
         continue;
        }
        break;
       };
       while (1) {
        if (($2_1 | 0) > ($10_1 | 0)) {
         break label$9
        }
        $4_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + (HEAP32[$5_1 >> 2] << 2) >> 2];
        if (!(($14_1 | 0) != HEAP32[$4_1 + 208 >> 2] | (HEAP32[$4_1 + 220 >> 2] & -2) == 4)) {
         HEAP32[$4_1 + 220 >> 2] = 2
        }
        $5_1 = $5_1 + 8 | 0;
        $2_1 = $2_1 + 1 | 0;
        continue;
       };
      }
      while (1) {
       if (($2_1 | 0) > ($10_1 | 0)) {
        break label$9
       }
       $4_1 = HEAP32[$16_1 + (HEAP32[$5_1 >> 2] << 2) >> 2];
       if (!(($14_1 | 0) != HEAP32[$4_1 + 208 >> 2] | HEAP32[$4_1 + 220 >> 2] != 2)) {
        HEAP32[$4_1 + 220 >> 2] = 3;
        HEAP32[$4_1 + 224 >> 2] = 0;
       }
       $5_1 = $5_1 + 8 | 0;
       $2_1 = $2_1 + 1 | 0;
       continue;
      };
     }
     $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 36 >> 2]]($8_1) | 0;
     $6_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
     $2_1 = 0;
     while (1) {
      if (($2_1 | 0) != ($6_1 | 0)) {
       $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 40 >> 2]]($8_1, $2_1) | 0;
       HEAP32[$7_1 + 12 >> 2] = $4_1;
       label$24 : {
        if (HEAP32[$4_1 + 828 >> 2] ? 0 : HEAPU8[$0_1 + 68 | 0]) {
         break label$24
        }
        $3_1 = HEAP32[$4_1 + 824 >> 2];
        $4_1 = HEAP32[$4_1 + 820 >> 2];
        if (!$3_1 | HEAP32[$3_1 + 220 >> 2] == 2 ? !(HEAP32[$4_1 + 220 >> 2] != 2 ? $4_1 : 0) : 0) {
         break label$24
        }
        $10_1 = HEAP32[$4_1 + 204 >> 2];
        if (!(!($10_1 & 2) | $10_1 & 4 | HEAP32[$4_1 + 220 >> 2] == 2)) {
         $135($3_1, 0)
        }
        $10_1 = HEAP32[$3_1 + 204 >> 2];
        if (!(!($10_1 & 2) | $10_1 & 4 | HEAP32[$3_1 + 220 >> 2] == 2)) {
         $135($4_1, 0)
        }
        if (!HEAPU8[$9_1 + 64 | 0]) {
         break label$24
        }
        if (!(FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 28 >> 2]]($8_1, $4_1, $3_1) | 0)) {
         break label$24
        }
        $459($12_1, $7_1 + 12 | 0);
       }
       $2_1 = $2_1 + 1 | 0;
       continue;
      }
      break;
     };
     label$30 : {
      if (!HEAPU8[$9_1 + 64 | 0]) {
       $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 44 >> 2]]($8_1) | 0;
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 36 >> 2]]($8_1) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$17_1 >> 2] + 8 >> 2]]($17_1, HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 8 >> 2], $2_1, $3_1, -1);
       break label$30;
      }
      $10_1 = HEAP32[$9_1 + 8 >> 2];
      $11_1 = HEAP32[$9_1 + 28 >> 2];
      label$32 : {
       if (HEAPU8[$0_1 + 68 | 0]) {
        if (($11_1 | 0) < 2) {
         break label$32
        }
        $756($12_1, 0, $11_1 - 1 | 0);
        break label$32;
       }
       if (($11_1 | 0) < 2) {
        break label$32
       }
       $754($12_1, 0, $11_1 - 1 | 0);
      }
      $18_1 = $9_1 + 44 | 0;
      $16_1 = $9_1 + 16 | 0;
      $4_1 = 1;
      $8_1 = 0;
      $2_1 = 0;
      while (1) {
       if (($2_1 | 0) >= ($10_1 | 0)) {
        break label$30
       }
       $5_1 = $2_1 << 3;
       $15_1 = HEAP32[$5_1 + HEAP32[$16_1 >> 2] >> 2];
       $12_1 = 1;
       while (1) {
        label$36 : {
         if (($2_1 | 0) == ($10_1 | 0)) {
          $2_1 = $10_1;
          break label$36;
         }
         $3_1 = HEAP32[$16_1 >> 2] + $5_1 | 0;
         if (($15_1 | 0) != HEAP32[$3_1 >> 2]) {
          break label$36
         }
         $3_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + (HEAP32[$3_1 + 4 >> 2] << 2) >> 2];
         HEAP32[$7_1 + 12 >> 2] = $3_1;
         $459($18_1, $7_1 + 12 | 0);
         $3_1 = HEAP32[$3_1 + 220 >> 2];
         $12_1 = (($3_1 | 0) == 2 | ($3_1 | 0) == 5) & $12_1;
         $5_1 = $5_1 + 8 | 0;
         $2_1 = $2_1 + 1 | 0;
         continue;
        }
        break;
       };
       $5_1 = 0;
       $3_1 = 0;
       label$38 : {
        if (($8_1 | 0) >= ($11_1 | 0)) {
         break label$38
        }
        $13_1 = HEAP32[$9_1 + 36 >> 2];
        $19_1 = $8_1 << 2;
        $14_1 = $13_1 + $19_1 | 0;
        $3_1 = HEAP32[$14_1 >> 2];
        $6_1 = HEAP32[HEAP32[$3_1 + 820 >> 2] + 208 >> 2];
        if (($6_1 | 0) <= -1) {
         $6_1 = HEAP32[HEAP32[$3_1 + 824 >> 2] + 208 >> 2]
        }
        $3_1 = 0;
        if (($6_1 | 0) != ($15_1 | 0)) {
         break label$38
        }
        $3_1 = $8_1 + 1 | 0;
        $6_1 = ($3_1 | 0) < ($11_1 | 0) ? $11_1 : $3_1;
        $20_1 = $6_1 - 1 | 0;
        $5_1 = ($13_1 + $19_1 | 0) + 4 | 0;
        $4_1 = $8_1;
        while (1) {
         label$41 : {
          if (($4_1 | 0) == ($20_1 | 0)) {
           $4_1 = $6_1;
           break label$41;
          }
          $13_1 = HEAP32[$5_1 >> 2];
          $3_1 = HEAP32[HEAP32[$13_1 + 820 >> 2] + 208 >> 2];
          if (($3_1 | 0) <= -1) {
           $3_1 = HEAP32[HEAP32[$13_1 + 824 >> 2] + 208 >> 2]
          }
          $4_1 = $4_1 + 1 | 0;
          $5_1 = $5_1 + 4 | 0;
          if (($3_1 | 0) == ($15_1 | 0)) {
           continue
          }
         }
         break;
        };
        $5_1 = $4_1 - $8_1 | 0;
        $3_1 = $14_1;
       }
       if (!($12_1 & 1)) {
        FUNCTION_TABLE[HEAP32[HEAP32[$17_1 >> 2] + 8 >> 2]]($17_1, HEAP32[$9_1 + 56 >> 2], HEAP32[$9_1 + 48 >> 2], $3_1, $5_1, $15_1)
       }
       HEAP32[$7_1 + 12 >> 2] = 0;
       $499($18_1, $7_1 + 12 | 0);
       $8_1 = $5_1 ? $4_1 : $8_1;
       continue;
      };
     }
     $762(HEAP32[$0_1 + 232 >> 2]);
     $2_1 = HEAP32[$0_1 + 236 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1, HEAP32[$0_1 + 76 >> 2]);
     global$0 = $7_1 + 16 | 0;
     return;
    }
    $2_1 = $3_1;
    continue;
   };
  } else {
   $6_1 = $753(HEAP32[$3_1 >> 2], $2_1);
   HEAP32[HEAP32[$3_1 >> 2] + $5_1 >> 2] = $6_1;
   $5_1 = $5_1 + 8 | 0;
   $2_1 = $2_1 + 1 | 0;
   continue;
  };
 }
 
 function $799($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  while (1) {
   $6_1 = HEAP32[$0_1 + 12 >> 2];
   $9_1 = $1_1;
   $10_1 = HEAP32[$6_1 + (($2_1 + $1_1 | 0) / 2 << 2) >> 2];
   $4_1 = $2_1;
   $5_1 = $1_1;
   while (1) {
    $7_1 = (($5_1 << 2) + $6_1 | 0) - 4 | 0;
    while (1) {
     $5_1 = $5_1 + 1 | 0;
     $7_1 = $7_1 + 4 | 0;
     $11_1 = HEAP32[$7_1 >> 2];
     if ($804($11_1, $10_1)) {
      continue
     }
     break;
    };
    $3_1 = $4_1 << 2;
    $1_1 = $5_1 - 1 | 0;
    while (1) {
     $4_1 = $4_1 - 1 | 0;
     $8_1 = $3_1 + $6_1 | 0;
     $12_1 = $3_1 - 4 | 0;
     $3_1 = $12_1;
     $8_1 = HEAP32[$8_1 >> 2];
     if ($804($10_1, $8_1)) {
      continue
     }
     break;
    };
    $3_1 = $4_1 + 1 | 0;
    if (($3_1 | 0) >= ($1_1 | 0)) {
     HEAP32[$7_1 >> 2] = $8_1;
     HEAP32[(HEAP32[$0_1 + 12 >> 2] + $12_1 | 0) + 4 >> 2] = $11_1;
     $3_1 = $4_1;
     $1_1 = $5_1;
    }
    if (($1_1 | 0) <= ($3_1 | 0)) {
     $6_1 = HEAP32[$0_1 + 12 >> 2];
     $4_1 = $3_1;
     $5_1 = $1_1;
     continue;
    }
    break;
   };
   if (($3_1 | 0) > ($9_1 | 0)) {
    $799($0_1, $9_1, $3_1)
   }
   if (($1_1 | 0) < ($2_1 | 0)) {
    continue
   }
   break;
  };
 }
 
 function $800($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0), $20_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = 0;
  $2_1 = global$0 - 224 | 0;
  global$0 = $2_1;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 56 >> 2]]($3_1) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 56 >> 2]]($4_1) | 0;
  $13_1 = HEAPF32[$1_1 + 40 >> 2];
  label$1 : {
   if ($13_1 <= Math_fround(0.0)) {
    break label$1
   }
   $5_1 = $3_1 & 2048;
   $8_1 = $4_1 & 4096;
   label$2 : {
    switch (HEAP32[$1_1 + 4 >> 2] - 3 | 0) {
    case 0:
     $3_1 = $2_1 + 172 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $2_1 + 184 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 180 >> 2] = 1065353216;
     $3_1 = $2_1 + 192 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $2_1 + 204 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 200 >> 2] = 1065353216;
     $3_1 = $2_1 + 212 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 220 >> 2] = 0;
     HEAP32[$2_1 + 164 >> 2] = 0;
     HEAP32[$2_1 + 168 >> 2] = 0;
     HEAP32[$2_1 + 160 >> 2] = 1065353216;
     $146($2_1 + 96 | 0, HEAP32[$1_1 + 28 >> 2] + 4 | 0, HEAPF32[$1_1 + 300 >> 2], HEAPF32[$1_1 + 304 >> 2], HEAPF32[$1_1 + 308 >> 2]);
     $6_1 = HEAP32[$2_1 + 108 >> 2];
     $3_1 = $2_1 + 216 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 + 104 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = HEAP32[$2_1 + 100 >> 2];
     HEAP32[$2_1 + 208 >> 2] = HEAP32[$2_1 + 96 >> 2];
     HEAP32[$2_1 + 212 >> 2] = $4_1;
     $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 64 >> 2]]($4_1, $2_1 + 160 | 0, $13_1);
     $146($2_1 + 96 | 0, HEAP32[$1_1 + 32 >> 2] + 4 | 0, HEAPF32[$1_1 + 316 >> 2], HEAPF32[$1_1 + 320 >> 2], HEAPF32[$1_1 + 324 >> 2]);
     $1_1 = HEAP32[$2_1 + 108 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 + 104 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $1_1;
     $1_1 = HEAP32[$2_1 + 100 >> 2];
     HEAP32[$2_1 + 208 >> 2] = HEAP32[$2_1 + 96 >> 2];
     HEAP32[$2_1 + 212 >> 2] = $1_1;
     if (!$5_1) {
      break label$1
     }
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($0_1, $2_1 + 160 | 0, $13_1);
     break label$1;
    case 1:
     $464($2_1 + 160 | 0, HEAP32[$1_1 + 28 >> 2] + 4 | 0, $1_1 + 552 | 0);
     label$8 : {
      if ($5_1) {
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 160 | 0, $13_1);
       $464($2_1 + 96 | 0, HEAP32[$1_1 + 32 >> 2] + 4 | 0, $1_1 + 616 | 0);
       $4_1 = $2_1 + 104 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 168 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $4_1 = $2_1 + 120 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 184 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $4_1 = $2_1 + 136 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 200 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $4_1 = $2_1 + 152 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 216 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $3_1 = HEAP32[$2_1 + 100 >> 2];
       HEAP32[$2_1 + 160 >> 2] = HEAP32[$2_1 + 96 >> 2];
       HEAP32[$2_1 + 164 >> 2] = $3_1;
       $3_1 = HEAP32[$2_1 + 116 >> 2];
       HEAP32[$2_1 + 176 >> 2] = HEAP32[$2_1 + 112 >> 2];
       HEAP32[$2_1 + 180 >> 2] = $3_1;
       $3_1 = HEAP32[$2_1 + 132 >> 2];
       HEAP32[$2_1 + 192 >> 2] = HEAP32[$2_1 + 128 >> 2];
       HEAP32[$2_1 + 196 >> 2] = $3_1;
       $3_1 = HEAP32[$2_1 + 148 >> 2];
       HEAP32[$2_1 + 208 >> 2] = HEAP32[$2_1 + 144 >> 2];
       HEAP32[$2_1 + 212 >> 2] = $3_1;
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 160 | 0, $13_1);
       break label$8;
      }
      $464($2_1 + 96 | 0, HEAP32[$1_1 + 32 >> 2] + 4 | 0, $1_1 + 616 | 0);
      $4_1 = $2_1 + 104 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 168 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $4_1 = $2_1 + 120 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 184 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $4_1 = $2_1 + 136 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 200 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $4_1 = $2_1 + 152 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 216 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $3_1 = HEAP32[$2_1 + 100 >> 2];
      HEAP32[$2_1 + 160 >> 2] = HEAP32[$2_1 + 96 >> 2];
      HEAP32[$2_1 + 164 >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 + 116 >> 2];
      HEAP32[$2_1 + 176 >> 2] = HEAP32[$2_1 + 112 >> 2];
      HEAP32[$2_1 + 180 >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 + 132 >> 2];
      HEAP32[$2_1 + 192 >> 2] = HEAP32[$2_1 + 128 >> 2];
      HEAP32[$2_1 + 196 >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 + 148 >> 2];
      HEAP32[$2_1 + 208 >> 2] = HEAP32[$2_1 + 144 >> 2];
      HEAP32[$2_1 + 212 >> 2] = $3_1;
     }
     $10_1 = HEAPF32[$1_1 + 688 >> 2];
     $19_1 = HEAPF32[$1_1 + 692 >> 2];
     $11_1 = $119(Math_fround($10_1 - $19_1));
     label$10 : {
      if ($11_1 < Math_fround(-3.1415927410125732)) {
       $11_1 = Math_fround($11_1 + Math_fround(6.2831854820251465));
       break label$10;
      }
      if (!($11_1 > Math_fround(3.1415927410125732))) {
       break label$10
      }
      $11_1 = Math_fround($11_1 + Math_fround(-6.2831854820251465));
     }
     $10_1 = $119(Math_fround($10_1 + $19_1));
     label$12 : {
      if ($10_1 < Math_fround(-3.1415927410125732)) {
       $10_1 = Math_fround($10_1 + Math_fround(6.2831854820251465));
       break label$12;
      }
      if (!($10_1 > Math_fround(3.1415927410125732))) {
       break label$12
      }
      $10_1 = Math_fround($10_1 + Math_fround(-6.2831854820251465));
     }
     if (!$8_1 | $10_1 == $11_1) {
      break label$1
     }
     HEAPF32[$2_1 + 96 >> 2] = HEAPF32[$2_1 + 168 >> 2];
     HEAP32[$2_1 + 108 >> 2] = 0;
     HEAPF32[$2_1 + 100 >> 2] = HEAPF32[$2_1 + 184 >> 2];
     HEAPF32[$2_1 + 104 >> 2] = HEAPF32[$2_1 + 200 >> 2];
     HEAPF32[$2_1 + 80 >> 2] = HEAPF32[$2_1 + 160 >> 2];
     HEAPF32[$2_1 + 84 >> 2] = HEAPF32[$2_1 + 176 >> 2];
     HEAP32[$2_1 + 92 >> 2] = 0;
     HEAPF32[$2_1 + 88 >> 2] = HEAPF32[$2_1 + 192 >> 2];
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     $1_1 = $2_1 + 72 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 64 >> 2] = 0;
     HEAP32[$2_1 + 68 >> 2] = 0;
     $1_1 = $19_1 > Math_fround(0.0);
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1, $2_1 + 208 | 0, $2_1 + 96 | 0, $2_1 + 80 | 0, $13_1, $13_1, $1_1 ? $11_1 : Math_fround(0.0), $1_1 ? $10_1 : Math_fround(6.2831854820251465), $2_1 - -64 | 0, $1_1, Math_fround(10.0));
     break label$1;
    case 2:
     $15_1 = $1_1 + 300 | 0;
     $464($2_1 + 160 | 0, HEAP32[$1_1 + 28 >> 2] + 4 | 0, $15_1);
     label$14 : {
      if ($5_1) {
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 160 | 0, $13_1);
       $464($2_1 + 96 | 0, HEAP32[$1_1 + 32 >> 2] + 4 | 0, $1_1 + 364 | 0);
       $4_1 = $2_1 + 104 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 168 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $4_1 = $2_1 + 120 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 184 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $4_1 = $2_1 + 136 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 200 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $4_1 = $2_1 + 152 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 216 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $3_1 = HEAP32[$2_1 + 100 >> 2];
       HEAP32[$2_1 + 160 >> 2] = HEAP32[$2_1 + 96 >> 2];
       HEAP32[$2_1 + 164 >> 2] = $3_1;
       $3_1 = HEAP32[$2_1 + 116 >> 2];
       HEAP32[$2_1 + 176 >> 2] = HEAP32[$2_1 + 112 >> 2];
       HEAP32[$2_1 + 180 >> 2] = $3_1;
       $3_1 = HEAP32[$2_1 + 132 >> 2];
       HEAP32[$2_1 + 192 >> 2] = HEAP32[$2_1 + 128 >> 2];
       HEAP32[$2_1 + 196 >> 2] = $3_1;
       $3_1 = HEAP32[$2_1 + 148 >> 2];
       HEAP32[$2_1 + 208 >> 2] = HEAP32[$2_1 + 144 >> 2];
       HEAP32[$2_1 + 212 >> 2] = $3_1;
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 160 | 0, $13_1);
       break label$14;
      }
      $464($2_1 + 96 | 0, HEAP32[$1_1 + 32 >> 2] + 4 | 0, $1_1 + 364 | 0);
      $4_1 = $2_1 + 104 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 168 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $4_1 = $2_1 + 120 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 184 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $4_1 = $2_1 + 136 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 200 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $4_1 = $2_1 + 152 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 216 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $3_1 = HEAP32[$2_1 + 100 >> 2];
      HEAP32[$2_1 + 160 >> 2] = HEAP32[$2_1 + 96 >> 2];
      HEAP32[$2_1 + 164 >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 + 116 >> 2];
      HEAP32[$2_1 + 176 >> 2] = HEAP32[$2_1 + 112 >> 2];
      HEAP32[$2_1 + 180 >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 + 132 >> 2];
      HEAP32[$2_1 + 192 >> 2] = HEAP32[$2_1 + 128 >> 2];
      HEAP32[$2_1 + 196 >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 + 148 >> 2];
      HEAP32[$2_1 + 208 >> 2] = HEAP32[$2_1 + 144 >> 2];
      HEAP32[$2_1 + 212 >> 2] = $3_1;
     }
     if (!$8_1) {
      break label$1
     }
     $758($2_1 + 80 | 0, $1_1, Math_fround(6.0868353843688965), $13_1);
     $146($2_1 + 80 | 0, $2_1 + 160 | 0, HEAPF32[$2_1 + 80 >> 2], HEAPF32[$2_1 + 84 >> 2], HEAPF32[$2_1 + 88 >> 2]);
     $3_1 = $2_1 + 208 | 0;
     $4_1 = 0;
     label$16 : {
      while (1) {
       label$18 : {
        if (($4_1 | 0) == 32) {
         $11_1 = HEAPF32[$1_1 + 512 >> 2];
         $10_1 = HEAPF32[$1_1 + 452 >> 2];
         $4_1 = HEAP32[$1_1 + 32 >> 2];
         if (!(HEAPF32[$4_1 + 408 >> 2] > Math_fround(0.0))) {
          break label$18
         }
         $464($2_1 + 96 | 0, $4_1 + 4 | 0, $1_1 + 364 | 0);
         break label$16;
        }
        $758($2_1 + 96 | 0, $1_1, Math_fround(Math_fround(Math_fround($4_1 | 0) * Math_fround(6.283185005187988)) * Math_fround(.03125)), $13_1);
        $6_1 = $2_1 + 104 | 0;
        $146($2_1 - -64 | 0, $2_1 + 160 | 0, HEAPF32[$2_1 + 96 >> 2], HEAPF32[$2_1 + 100 >> 2], HEAPF32[$6_1 >> 2]);
        $5_1 = $2_1 + 72 | 0;
        $16_1 = HEAP32[$5_1 + 4 >> 2];
        HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $16_1;
        $12_1 = HEAP32[$2_1 + 68 >> 2];
        HEAP32[$2_1 + 96 >> 2] = HEAP32[$2_1 + 64 >> 2];
        HEAP32[$2_1 + 100 >> 2] = $12_1;
        $12_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
        HEAP32[$5_1 >> 2] = 0;
        HEAP32[$5_1 + 4 >> 2] = 0;
        HEAP32[$2_1 + 64 >> 2] = 0;
        HEAP32[$2_1 + 68 >> 2] = 0;
        FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 16 >> 2]]($12_1, $2_1 + 80 | 0, $2_1 + 96 | 0, $2_1 - -64 | 0);
        if (!($4_1 & 3)) {
         $12_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
         HEAP32[$5_1 >> 2] = 0;
         HEAP32[$5_1 + 4 >> 2] = 0;
         HEAP32[$2_1 + 64 >> 2] = 0;
         HEAP32[$2_1 + 68 >> 2] = 0;
         FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 16 >> 2]]($12_1, $3_1, $2_1 + 96 | 0, $2_1 - -64 | 0);
        }
        $12_1 = HEAP32[$6_1 + 4 >> 2];
        $5_1 = $2_1 + 88 | 0;
        HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$5_1 + 4 >> 2] = $12_1;
        $6_1 = HEAP32[$2_1 + 100 >> 2];
        HEAP32[$2_1 + 80 >> 2] = HEAP32[$2_1 + 96 >> 2];
        HEAP32[$2_1 + 84 >> 2] = $6_1;
        $4_1 = $4_1 + 1 | 0;
        continue;
       }
       break;
      };
      $464($2_1 + 96 | 0, HEAP32[$1_1 + 28 >> 2] + 4 | 0, $15_1);
     }
     $4_1 = $2_1 + 104 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $1_1 = $2_1 + 168 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $6_1;
     $4_1 = $2_1 + 120 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $1_1 = $2_1 + 184 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $6_1;
     $4_1 = $2_1 + 136 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $1_1 = $2_1 + 200 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $6_1;
     $1_1 = HEAP32[$2_1 + 148 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 + 144 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $1_1;
     $4_1 = $2_1 + 152 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $1_1 = $3_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $6_1;
     $1_1 = HEAP32[$2_1 + 100 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$2_1 + 96 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $1_1;
     $1_1 = HEAP32[$2_1 + 116 >> 2];
     HEAP32[$2_1 + 176 >> 2] = HEAP32[$2_1 + 112 >> 2];
     HEAP32[$2_1 + 180 >> 2] = $1_1;
     $1_1 = HEAP32[$2_1 + 132 >> 2];
     HEAP32[$2_1 + 192 >> 2] = HEAP32[$2_1 + 128 >> 2];
     HEAP32[$2_1 + 196 >> 2] = $1_1;
     $4_1 = $3_1 + 8 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $1_1 = $2_1 + 104 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $6_1;
     $1_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 96 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 100 >> 2] = $1_1;
     HEAPF32[$2_1 + 64 >> 2] = HEAPF32[$2_1 + 160 >> 2];
     HEAPF32[$2_1 + 68 >> 2] = HEAPF32[$2_1 + 176 >> 2];
     HEAP32[$2_1 + 76 >> 2] = 0;
     HEAPF32[$2_1 + 72 >> 2] = HEAPF32[$2_1 + 192 >> 2];
     HEAPF32[$2_1 + 48 >> 2] = HEAPF32[$2_1 + 164 >> 2];
     HEAPF32[$2_1 + 52 >> 2] = HEAPF32[$2_1 + 180 >> 2];
     HEAP32[$2_1 + 60 >> 2] = 0;
     HEAPF32[$2_1 + 56 >> 2] = HEAPF32[$2_1 + 196 >> 2];
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     $1_1 = $2_1 + 40 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 32 >> 2] = 0;
     HEAP32[$2_1 + 36 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1, $2_1 + 96 | 0, $2_1 - -64 | 0, $2_1 + 48 | 0, $13_1, $13_1, Math_fround(Math_fround(-$11_1) - $10_1), Math_fround($10_1 - $11_1), $2_1 + 32 | 0, 1, Math_fround(10.0));
     break label$1;
    case 3:
    case 6:
     $4_1 = $1_1 + 1072 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $7_1 = $2_1 + 168 | 0;
     $3_1 = $7_1;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = $1_1 + 1088 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 184 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = $1_1 + 1104 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 200 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = $1_1 + 1120 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 216 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $12_1 = $1_1 + 1064 | 0;
     $3_1 = $12_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $4_1;
     $15_1 = $1_1 + 1080 | 0;
     $3_1 = $15_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 176 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 180 >> 2] = $4_1;
     $16_1 = $1_1 + 1096 | 0;
     $3_1 = $16_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 192 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 196 >> 2] = $4_1;
     $18_1 = $1_1 + 1112 | 0;
     $3_1 = $18_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 208 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 212 >> 2] = $4_1;
     $3_1 = $2_1 + 208 | 0;
     $4_1 = $2_1 + 192 | 0;
     $6_1 = $2_1 + 176 | 0;
     if ($5_1) {
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $2_1 + 160 | 0, $13_1);
      $9_1 = $1_1 + 1184 | 0;
      $14_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $3_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $14_1;
      $5_1 = $1_1 + 1176 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $9_1;
      $5_1 = $1_1 + 1144 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $9_1;
      $9_1 = $1_1 + 1152 | 0;
      $14_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $6_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $14_1;
      $5_1 = $1_1 + 1160 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $9_1;
      $9_1 = $1_1 + 1168 | 0;
      $14_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $4_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $14_1;
      $5_1 = $1_1 + 1136 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $9_1;
      $5_1 = $1_1 + 1128 | 0;
      $7_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$2_1 + 160 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$2_1 + 164 >> 2] = $7_1;
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $2_1 + 160 | 0, $13_1);
     }
     if (!$8_1) {
      break label$1
     }
     $5_1 = HEAP32[$15_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$15_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$16_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$18_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$18_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $7_1 = $12_1 + 8 | 0;
     $9_1 = HEAP32[$7_1 + 4 >> 2];
     $8_1 = $2_1 + 168 | 0;
     $5_1 = $8_1;
     HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $9_1;
     $9_1 = $15_1 + 8 | 0;
     $14_1 = HEAP32[$9_1 + 4 >> 2];
     $7_1 = $6_1 + 8 | 0;
     $5_1 = $7_1;
     HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $14_1;
     $14_1 = $16_1 + 8 | 0;
     $17_1 = HEAP32[$14_1 + 4 >> 2];
     $9_1 = $4_1 + 8 | 0;
     $5_1 = $9_1;
     HEAP32[$5_1 >> 2] = HEAP32[$14_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $17_1;
     $17_1 = $18_1 + 8 | 0;
     $20_1 = HEAP32[$17_1 + 4 >> 2];
     $14_1 = $3_1 + 8 | 0;
     $5_1 = $14_1;
     HEAP32[$5_1 >> 2] = HEAP32[$17_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $20_1;
     $5_1 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $5_1;
     HEAPF32[$2_1 + 96 >> 2] = HEAPF32[$8_1 >> 2];
     HEAPF32[$2_1 + 100 >> 2] = HEAPF32[$2_1 + 184 >> 2];
     HEAP32[$2_1 + 108 >> 2] = 0;
     HEAPF32[$2_1 + 104 >> 2] = HEAPF32[$2_1 + 200 >> 2];
     HEAPF32[$2_1 + 80 >> 2] = HEAPF32[$2_1 + 160 >> 2];
     HEAPF32[$2_1 + 84 >> 2] = HEAPF32[$2_1 + 176 >> 2];
     HEAP32[$2_1 + 92 >> 2] = 0;
     HEAPF32[$2_1 + 88 >> 2] = HEAPF32[$2_1 + 192 >> 2];
     $11_1 = HEAPF32[$1_1 + 932 >> 2];
     $10_1 = HEAPF32[$1_1 + 936 >> 2];
     $19_1 = HEAPF32[$1_1 + 996 >> 2];
     $23_1 = HEAPF32[$1_1 + 1e3 >> 2];
     $17_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     $5_1 = $2_1 + 72 | 0;
     HEAP32[$5_1 >> 2] = 0;
     HEAP32[$5_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 64 >> 2] = 0;
     HEAP32[$2_1 + 68 >> 2] = 0;
     $5_1 = $1_1 + 1176 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$17_1 >> 2] + 72 >> 2]]($17_1, $5_1, $2_1 + 96 | 0, $2_1 + 80 | 0, Math_fround($13_1 * Math_fround(.8999999761581421)), $11_1, $10_1, $19_1, $23_1, $2_1 - -64 | 0, Math_fround(10.0), 1);
     HEAP32[$2_1 + 92 >> 2] = 0;
     $23_1 = HEAPF32[$2_1 + 196 >> 2];
     HEAPF32[$2_1 + 88 >> 2] = $23_1;
     $11_1 = HEAPF32[$2_1 + 180 >> 2];
     HEAPF32[$2_1 + 84 >> 2] = $11_1;
     $10_1 = HEAPF32[$2_1 + 164 >> 2];
     HEAPF32[$2_1 + 80 >> 2] = $10_1;
     $21_1 = HEAPF32[$1_1 + 1196 >> 2];
     $22_1 = HEAPF32[$1_1 + 1200 >> 2];
     $17_1 = $1_1 + 1136 | 0;
     $20_1 = HEAP32[$17_1 + 4 >> 2];
     HEAP32[$8_1 >> 2] = HEAP32[$17_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $20_1;
     $8_1 = $1_1 + 1144 | 0;
     $17_1 = HEAP32[$8_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $17_1;
     $8_1 = $1_1 + 1152 | 0;
     $17_1 = HEAP32[$8_1 + 4 >> 2];
     HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $17_1;
     $8_1 = $1_1 + 1160 | 0;
     $7_1 = HEAP32[$8_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $7_1;
     $8_1 = $1_1 + 1168 | 0;
     $7_1 = HEAP32[$8_1 + 4 >> 2];
     HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $7_1;
     $8_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $8_1;
     $8_1 = $1_1 + 1184 | 0;
     $7_1 = HEAP32[$8_1 + 4 >> 2];
     HEAP32[$14_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$14_1 + 4 >> 2] = $7_1;
     $8_1 = $1_1 + 1128 | 0;
     $7_1 = HEAP32[$8_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $7_1;
     $19_1 = $116($22_1);
     $22_1 = $115($22_1);
     HEAPF32[$2_1 + 68 >> 2] = Math_fround($11_1 * $22_1) - Math_fround($19_1 * $10_1);
     $24_1 = $116($21_1);
     $21_1 = $115($21_1);
     HEAPF32[$2_1 + 72 >> 2] = Math_fround(Math_fround($10_1 * Math_fround($22_1 * $24_1)) + Math_fround($11_1 * Math_fround($24_1 * $19_1))) + Math_fround($23_1 * $21_1);
     HEAPF32[$2_1 + 64 >> 2] = Math_fround(Math_fround($10_1 * Math_fround($21_1 * $22_1)) + Math_fround($11_1 * Math_fround($21_1 * $19_1))) - Math_fround($24_1 * $23_1);
     HEAP32[$2_1 + 60 >> 2] = 0;
     HEAPF32[$2_1 + 56 >> 2] = -HEAPF32[$2_1 + 192 >> 2];
     HEAPF32[$2_1 + 52 >> 2] = -HEAPF32[$2_1 + 176 >> 2];
     HEAPF32[$2_1 + 48 >> 2] = -HEAPF32[$2_1 + 160 >> 2];
     $11_1 = HEAPF32[$1_1 + 868 >> 2];
     $10_1 = HEAPF32[$1_1 + 872 >> 2];
     label$22 : {
      if ($11_1 > $10_1) {
       $8_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       $7_1 = $2_1 + 40 | 0;
       HEAP32[$7_1 >> 2] = 0;
       HEAP32[$7_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 32 >> 2] = 0;
       HEAP32[$2_1 + 36 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 68 >> 2]]($8_1, $5_1, $2_1 + 48 | 0, $2_1 - -64 | 0, $13_1, $13_1, Math_fround(-3.1415927410125732), Math_fround(3.1415927410125732), $2_1 + 32 | 0, 0, Math_fround(10.0));
       break label$22;
      }
      if (!($10_1 > $11_1)) {
       break label$22
      }
      $8_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      $7_1 = $2_1 + 40 | 0;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      HEAP32[$2_1 + 32 >> 2] = 0;
      HEAP32[$2_1 + 36 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 68 >> 2]]($8_1, $5_1, $2_1 + 48 | 0, $2_1 - -64 | 0, $13_1, $13_1, $11_1, $10_1, $2_1 + 32 | 0, 1, Math_fround(10.0));
     }
     $5_1 = HEAP32[$15_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$15_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$16_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$18_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$18_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $8_1 = $12_1 + 8 | 0;
     $7_1 = HEAP32[$8_1 + 4 >> 2];
     $5_1 = $2_1 + 168 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $7_1;
     $5_1 = $15_1 + 8 | 0;
     $15_1 = HEAP32[$5_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $15_1;
     $6_1 = $16_1 + 8 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $4_1 = $4_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $4_1 = $18_1 + 8 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $3_1;
     $4_1 = $1_1 + 688 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 40 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = $1_1 + 680 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 36 >> 2] = $4_1;
     $4_1 = $1_1 + 704 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 24 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $1_1 = $1_1 + 696 | 0;
     $3_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$2_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$2_1 + 20 >> 2] = $3_1;
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     $1_1 = $2_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 80 >> 2]]($0_1, $2_1 + 32 | 0, $2_1 + 16 | 0, $2_1 + 160 | 0, $2_1);
     break label$1;
    case 9:
     $4_1 = $1_1 + 1244 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $7_1 = $2_1 + 168 | 0;
     $3_1 = $7_1;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = $1_1 + 1260 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 184 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = $1_1 + 1276 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 200 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = $1_1 + 1292 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 216 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $12_1 = $1_1 + 1236 | 0;
     $3_1 = $12_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $4_1;
     $15_1 = $1_1 + 1252 | 0;
     $3_1 = $15_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 176 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 180 >> 2] = $4_1;
     $16_1 = $1_1 + 1268 | 0;
     $3_1 = $16_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 192 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 196 >> 2] = $4_1;
     $18_1 = $1_1 + 1284 | 0;
     $3_1 = $18_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 208 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 212 >> 2] = $4_1;
     $3_1 = $2_1 + 208 | 0;
     $4_1 = $2_1 + 192 | 0;
     $6_1 = $2_1 + 176 | 0;
     if ($5_1) {
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $2_1 + 160 | 0, $13_1);
      $9_1 = $1_1 + 1356 | 0;
      $14_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $3_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $14_1;
      $5_1 = $1_1 + 1348 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $9_1;
      $5_1 = $1_1 + 1316 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $9_1;
      $9_1 = $1_1 + 1324 | 0;
      $14_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $6_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $14_1;
      $5_1 = $1_1 + 1332 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $9_1;
      $9_1 = $1_1 + 1340 | 0;
      $14_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $4_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $14_1;
      $5_1 = $1_1 + 1308 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $9_1;
      $5_1 = $1_1 + 1300 | 0;
      $7_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$2_1 + 160 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$2_1 + 164 >> 2] = $7_1;
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $2_1 + 160 | 0, $13_1);
     }
     if (!$8_1) {
      break label$1
     }
     $5_1 = HEAP32[$15_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$15_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$16_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$18_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$18_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $8_1 = $12_1 + 8 | 0;
     $9_1 = HEAP32[$8_1 + 4 >> 2];
     $7_1 = $2_1 + 168 | 0;
     $5_1 = $7_1;
     HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $9_1;
     $8_1 = $15_1 + 8 | 0;
     $14_1 = HEAP32[$8_1 + 4 >> 2];
     $9_1 = $6_1 + 8 | 0;
     $5_1 = $9_1;
     HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $14_1;
     $8_1 = $16_1 + 8 | 0;
     $17_1 = HEAP32[$8_1 + 4 >> 2];
     $14_1 = $4_1 + 8 | 0;
     $5_1 = $14_1;
     HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $17_1;
     $8_1 = $18_1 + 8 | 0;
     $20_1 = HEAP32[$8_1 + 4 >> 2];
     $17_1 = $3_1 + 8 | 0;
     $5_1 = $17_1;
     HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $20_1;
     $5_1 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $5_1;
     HEAPF32[$2_1 + 96 >> 2] = HEAPF32[$7_1 >> 2];
     HEAPF32[$2_1 + 100 >> 2] = HEAPF32[$2_1 + 184 >> 2];
     HEAP32[$2_1 + 108 >> 2] = 0;
     HEAPF32[$2_1 + 104 >> 2] = HEAPF32[$2_1 + 200 >> 2];
     HEAPF32[$2_1 + 80 >> 2] = HEAPF32[$2_1 + 160 >> 2];
     HEAPF32[$2_1 + 84 >> 2] = HEAPF32[$2_1 + 176 >> 2];
     HEAP32[$2_1 + 92 >> 2] = 0;
     HEAPF32[$2_1 + 88 >> 2] = HEAPF32[$2_1 + 192 >> 2];
     $8_1 = $1_1 + 1348 | 0;
     $11_1 = HEAPF32[$1_1 + 1056 >> 2];
     $10_1 = HEAPF32[$1_1 + 1060 >> 2];
     if ($11_1 <= $10_1) {
      $19_1 = HEAPF32[$1_1 + 1148 >> 2];
      $23_1 = HEAPF32[$1_1 + 1144 >> 2];
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      $20_1 = $2_1 + 72 | 0;
      HEAP32[$20_1 >> 2] = 0;
      HEAP32[$20_1 + 4 >> 2] = 0;
      HEAP32[$2_1 + 64 >> 2] = 0;
      HEAP32[$2_1 + 68 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 72 >> 2]]($5_1, $8_1, $2_1 + 96 | 0, $2_1 + 80 | 0, Math_fround($13_1 * Math_fround(.8999999761581421)), $11_1, $10_1, $23_1, $19_1, $2_1 - -64 | 0, Math_fround(10.0), 1);
     }
     HEAP32[$2_1 + 92 >> 2] = 0;
     $11_1 = HEAPF32[$2_1 + 164 >> 2];
     HEAPF32[$2_1 + 80 >> 2] = $11_1;
     $23_1 = HEAPF32[$2_1 + 196 >> 2];
     HEAPF32[$2_1 + 88 >> 2] = $23_1;
     $10_1 = HEAPF32[$2_1 + 180 >> 2];
     HEAPF32[$2_1 + 84 >> 2] = $10_1;
     $21_1 = HEAPF32[$1_1 + 1368 >> 2];
     $22_1 = HEAPF32[$1_1 + 1372 >> 2];
     $5_1 = $1_1 + 1300 | 0;
     $20_1 = $5_1 + 8 | 0;
     $25_1 = HEAP32[$20_1 + 4 >> 2];
     HEAP32[$7_1 >> 2] = HEAP32[$20_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $25_1;
     $7_1 = HEAP32[$5_1 + 20 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $7_1;
     $7_1 = $5_1 + 24 | 0;
     $20_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $20_1;
     $7_1 = HEAP32[$5_1 + 36 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$5_1 + 32 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $7_1;
     $7_1 = $5_1 + 40 | 0;
     $9_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$14_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$14_1 + 4 >> 2] = $9_1;
     $7_1 = HEAP32[$8_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $7_1;
     $7_1 = $8_1 + 8 | 0;
     $9_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$17_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$17_1 + 4 >> 2] = $9_1;
     $19_1 = $116($22_1);
     $22_1 = $115($22_1);
     HEAPF32[$2_1 + 68 >> 2] = Math_fround($10_1 * $22_1) - Math_fround($11_1 * $19_1);
     $7_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $7_1;
     $24_1 = $116($21_1);
     $21_1 = $115($21_1);
     HEAPF32[$2_1 + 72 >> 2] = Math_fround(Math_fround($11_1 * Math_fround($22_1 * $24_1)) + Math_fround($10_1 * Math_fround($24_1 * $19_1))) + Math_fround($23_1 * $21_1);
     HEAPF32[$2_1 + 64 >> 2] = Math_fround(Math_fround($11_1 * Math_fround($21_1 * $22_1)) + Math_fround($10_1 * Math_fround($21_1 * $19_1))) - Math_fround($24_1 * $23_1);
     HEAP32[$2_1 + 60 >> 2] = 0;
     HEAPF32[$2_1 + 56 >> 2] = -HEAPF32[$2_1 + 192 >> 2];
     HEAPF32[$2_1 + 52 >> 2] = -HEAPF32[$2_1 + 176 >> 2];
     HEAPF32[$2_1 + 48 >> 2] = -HEAPF32[$2_1 + 160 >> 2];
     $11_1 = HEAPF32[$1_1 + 968 >> 2];
     $10_1 = HEAPF32[$1_1 + 972 >> 2];
     label$26 : {
      if ($11_1 > $10_1) {
       $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       $7_1 = $2_1 + 40 | 0;
       HEAP32[$7_1 >> 2] = 0;
       HEAP32[$7_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 32 >> 2] = 0;
       HEAP32[$2_1 + 36 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 68 >> 2]]($5_1, $8_1, $2_1 + 48 | 0, $2_1 - -64 | 0, $13_1, $13_1, Math_fround(-3.1415927410125732), Math_fround(3.1415927410125732), $2_1 + 32 | 0, 0, Math_fround(10.0));
       break label$26;
      }
      if (!($10_1 > $11_1)) {
       break label$26
      }
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      $7_1 = $2_1 + 40 | 0;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      HEAP32[$2_1 + 32 >> 2] = 0;
      HEAP32[$2_1 + 36 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 68 >> 2]]($5_1, $8_1, $2_1 + 48 | 0, $2_1 - -64 | 0, $13_1, $13_1, $11_1, $10_1, $2_1 + 32 | 0, 1, Math_fround(10.0));
     }
     $5_1 = HEAP32[$15_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$15_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$16_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$18_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$18_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $8_1 = $12_1 + 8 | 0;
     $7_1 = HEAP32[$8_1 + 4 >> 2];
     $5_1 = $2_1 + 168 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $7_1;
     $5_1 = $15_1 + 8 | 0;
     $15_1 = HEAP32[$5_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $15_1;
     $6_1 = $16_1 + 8 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $4_1 = $4_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $4_1 = $18_1 + 8 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $3_1;
     $4_1 = $1_1 + 688 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 40 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = $1_1 + 680 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 36 >> 2] = $4_1;
     $4_1 = $1_1 + 704 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 24 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $1_1 = $1_1 + 696 | 0;
     $3_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$2_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$2_1 + 20 >> 2] = $3_1;
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     $1_1 = $2_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 80 >> 2]]($0_1, $2_1 + 32 | 0, $2_1 + 16 | 0, $2_1 + 160 | 0, $2_1);
     break label$1;
    case 4:
     break label$2;
    default:
     break label$1;
    };
   }
   $4_1 = $1_1 + 832 | 0;
   $6_1 = HEAP32[$4_1 + 4 >> 2];
   $12_1 = $2_1 + 168 | 0;
   $3_1 = $12_1;
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $4_1 = $1_1 + 848 | 0;
   $6_1 = HEAP32[$4_1 + 4 >> 2];
   $3_1 = $2_1 + 184 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $4_1 = $1_1 + 864 | 0;
   $6_1 = HEAP32[$4_1 + 4 >> 2];
   $3_1 = $2_1 + 200 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $4_1 = $1_1 + 880 | 0;
   $6_1 = HEAP32[$4_1 + 4 >> 2];
   $3_1 = $2_1 + 216 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $15_1 = $1_1 + 824 | 0;
   $3_1 = $15_1;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 164 >> 2] = $4_1;
   $3_1 = $1_1 + 840 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 176 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 180 >> 2] = $4_1;
   $3_1 = $1_1 + 856 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 192 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 196 >> 2] = $4_1;
   $3_1 = $1_1 + 872 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 208 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 212 >> 2] = $4_1;
   $3_1 = $2_1 + 208 | 0;
   $4_1 = $2_1 + 192 | 0;
   $6_1 = $2_1 + 176 | 0;
   label$28 : {
    if ($5_1) {
     $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $2_1 + 160 | 0, $13_1);
     $16_1 = $1_1 + 944 | 0;
     $18_1 = HEAP32[$16_1 + 4 >> 2];
     $5_1 = $3_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $18_1;
     $5_1 = $1_1 + 936 | 0;
     $16_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $16_1;
     $3_1 = $1_1 + 904 | 0;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $5_1;
     $3_1 = $6_1 + 8 | 0;
     $6_1 = $1_1 + 912 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $3_1 = $1_1 + 920 | 0;
     $6_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $6_1;
     $3_1 = $4_1 + 8 | 0;
     $4_1 = $1_1 + 928 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = $1_1 + 896 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$12_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $4_1;
     $3_1 = $1_1 + 888 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $4_1;
     $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 160 | 0, $13_1);
     break label$28;
    }
    $5_1 = $1_1 + 896 | 0;
    $16_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $16_1;
    $5_1 = $1_1 + 904 | 0;
    $12_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $12_1;
    $5_1 = $1_1 + 912 | 0;
    $12_1 = HEAP32[$5_1 + 4 >> 2];
    $6_1 = $6_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $12_1;
    $6_1 = $1_1 + 920 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $6_1 = $1_1 + 928 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $4_1 = $1_1 + 936 | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $4_1 = $1_1 + 944 | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $3_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $3_1 = $1_1 + 888 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 164 >> 2] = $4_1;
   }
   if (!$8_1) {
    break label$1
   }
   $3_1 = HEAPU8[$1_1 + 180 | 0] ? $15_1 : $1_1 + 888 | 0;
   $6_1 = $3_1 + 8 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $2_1 + 104 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $6_1 = $3_1 + 24 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $2_1 + 120 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $6_1 = $3_1 + 40 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $2_1 + 136 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $6_1 = $3_1 + 56 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $2_1 + 152 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 96 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 100 >> 2] = $4_1;
   $4_1 = HEAP32[$3_1 + 20 >> 2];
   HEAP32[$2_1 + 112 >> 2] = HEAP32[$3_1 + 16 >> 2];
   HEAP32[$2_1 + 116 >> 2] = $4_1;
   $4_1 = HEAP32[$3_1 + 36 >> 2];
   HEAP32[$2_1 + 128 >> 2] = HEAP32[$3_1 + 32 >> 2];
   HEAP32[$2_1 + 132 >> 2] = $4_1;
   $4_1 = HEAP32[$3_1 + 52 >> 2];
   HEAP32[$2_1 + 144 >> 2] = HEAP32[$3_1 + 48 >> 2];
   HEAP32[$2_1 + 148 >> 2] = $4_1;
   $146($2_1 + 80 | 0, $2_1 + 96 | 0, HEAPF32[$1_1 + 184 >> 2], Math_fround(0.0), Math_fround(0.0));
   $146($2_1 - -64 | 0, $2_1 + 96 | 0, HEAPF32[$1_1 + 188 >> 2], Math_fround(0.0), Math_fround(0.0));
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   $4_1 = $2_1 + 56 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 0;
   HEAP32[$2_1 + 48 >> 2] = 0;
   HEAP32[$2_1 + 52 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $2_1 + 80 | 0, $2_1 - -64 | 0, $2_1 + 48 | 0);
   HEAPF32[$2_1 + 48 >> 2] = HEAPF32[$2_1 + 96 >> 2];
   HEAPF32[$2_1 + 52 >> 2] = HEAPF32[$2_1 + 112 >> 2];
   HEAP32[$2_1 + 60 >> 2] = 0;
   HEAPF32[$2_1 + 56 >> 2] = HEAPF32[$2_1 + 128 >> 2];
   HEAPF32[$2_1 + 32 >> 2] = HEAPF32[$2_1 + 100 >> 2];
   HEAPF32[$2_1 + 36 >> 2] = HEAPF32[$2_1 + 116 >> 2];
   HEAP32[$2_1 + 44 >> 2] = 0;
   HEAPF32[$2_1 + 40 >> 2] = HEAPF32[$2_1 + 132 >> 2];
   $11_1 = HEAPF32[$1_1 + 196 >> 2];
   $10_1 = HEAPF32[$1_1 + 192 >> 2];
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   $3_1 = $2_1 + 24 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$2_1 + 16 >> 2] = 0;
   HEAP32[$2_1 + 20 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1, $1_1 + 936 | 0, $2_1 + 48 | 0, $2_1 + 32 | 0, $13_1, $13_1, $10_1, $11_1, $2_1 + 16 | 0, 1, Math_fround(10.0));
  }
  global$0 = $2_1 + 224 | 0;
 }
 
 function $801($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  while (1) {
   if (($2_1 | 0) < HEAP32[$0_1 + 268 >> 2]) {
    label$3 : {
     label$4 : {
      $1_1 = HEAP32[HEAP32[$0_1 + 276 >> 2] + $3_1 >> 2];
      switch (HEAP32[$1_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     if (HEAPU8[$1_1 + 204 | 0] & 3) {
      break label$3
     }
     $802($1_1, HEAPF32[$1_1 + 428 >> 2], HEAPF32[$1_1 + 432 >> 2], HEAPF32[$1_1 + 436 >> 2]);
    }
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $802($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 >> 2] = HEAPF32[$0_1 + 412 >> 2] * $1_1;
  HEAPF32[$4_1 + 8 >> 2] = HEAPF32[$0_1 + 420 >> 2] * $3_1;
  HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$0_1 + 416 >> 2] * $2_1;
  $158($0_1 + 476 | 0, $4_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $803($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $795($0_1, $1_1);
 }
 
 function $804($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[HEAP32[$1_1 + 28 >> 2] + 208 >> 2];
  if (($2_1 | 0) <= -1) {
   $2_1 = HEAP32[HEAP32[$1_1 + 32 >> 2] + 208 >> 2]
  }
  $1_1 = HEAP32[HEAP32[$0_1 + 28 >> 2] + 208 >> 2];
  if (($1_1 | 0) <= -1) {
   $1_1 = HEAP32[HEAP32[$0_1 + 32 >> 2] + 208 >> 2]
  }
  return ($1_1 | 0) < ($2_1 | 0);
 }
 
 function $805($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2];
   $3_1 = HEAP32[$0_1 + 84 >> 2];
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   if (!$806($0_1, $1_1)) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 96 >> 2];
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($1_1, $3_1, $2_1) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 96 >> 2];
   return FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($1_1, HEAP32[$0_1 + 84 >> 2], $2_1) | 0;
  }
  return 0;
 }
 
 function $806($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if (!(HEAP32[$0_1 + 12 >> 2] & HEAP32[$1_1 + 4 >> 2])) {
   return 0
  }
  return (HEAP32[$1_1 + 8 >> 2] & HEAP32[$0_1 + 8 >> 2]) != 0 | 0;
 }
 
 function $807($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = 0;
  $3_1 = Math_fround(1.0);
  $4_1 = HEAP32[$1_1 >> 2];
  if (!(($4_1 | 0) == HEAP32[$0_1 + 84 >> 2] | HEAPU8[$4_1 + 204 | 0] & 4 | Math_fround(-HEAPF32[$0_1 + 88 >> 2]) <= Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 + 32 >> 2] - HEAPF32[$0_1 + 16 >> 2]) * HEAPF32[$1_1 + 8 >> 2]) + Math_fround(Math_fround(HEAPF32[$0_1 + 36 >> 2] - HEAPF32[$0_1 + 20 >> 2]) * HEAPF32[$1_1 + 12 >> 2])) + Math_fround(Math_fround(HEAPF32[$0_1 + 40 >> 2] - HEAPF32[$0_1 + 24 >> 2]) * HEAPF32[$1_1 + 16 >> 2])))) {
   $3_1 = $808($0_1, $1_1, $2_1)
  }
  return Math_fround($3_1);
 }
 
 function $808($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$1_1 + 40 >> 2];
  $3_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $3_1;
  label$1 : {
   if ($2_1) {
    $2_1 = HEAP32[$1_1 + 12 >> 2];
    HEAP32[$0_1 + 48 >> 2] = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$0_1 + 52 >> 2] = $2_1;
    $3_1 = $1_1 + 16 | 0;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 56 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    break label$1;
   }
   $431($4_1, $3_1 + 4 | 0, HEAPF32[$1_1 + 8 >> 2], HEAPF32[$1_1 + 12 >> 2], HEAPF32[$1_1 + 16 >> 2]);
   $3_1 = $4_1 + 8 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0_1 + 56 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $2_1 = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$0_1 + 48 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0_1 + 52 >> 2] = $2_1;
  }
  $2_1 = HEAP32[$1_1 + 28 >> 2];
  HEAP32[$0_1 + 64 >> 2] = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$0_1 + 68 >> 2] = $2_1;
  $2_1 = $1_1 + 32 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $0_1 = $0_1 + 72 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  global$0 = $4_1 + 16 | 0;
  return Math_fround(HEAPF32[$1_1 + 40 >> 2]);
 }
 
 function $809($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $3_1 = 0;
  $3_1 = $120(16);
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = $2_1;
  HEAPF32[$3_1 + 4 >> 2] = $1_1;
  HEAPF32[$3_1 >> 2] = $0_1;
  return $3_1 | 0;
 }
 
 function $810($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = $3_1;
  HEAPF32[$0_1 + 4 >> 2] = $2_1;
  HEAPF32[$0_1 >> 2] = $1_1;
 }
 
 function $811($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 >> 2]);
 }
 
 function $812($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 4 >> 2]);
 }
 
 function $813($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 8 >> 2]);
 }
 
 function $814($0_1, $1_1, $2_1, $3_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $4_1 = 0;
  $4_1 = $29(16);
  HEAPF32[$4_1 + 12 >> 2] = $3_1;
  HEAPF32[$4_1 + 8 >> 2] = $2_1;
  HEAPF32[$4_1 + 4 >> 2] = $1_1;
  HEAPF32[$4_1 >> 2] = $0_1;
  return $4_1 | 0;
 }
 
 function $815($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  HEAPF32[$0_1 + 12 >> 2] = $4_1;
  HEAPF32[$0_1 + 8 >> 2] = $3_1;
  HEAPF32[$0_1 + 4 >> 2] = $2_1;
  HEAPF32[$0_1 >> 2] = $1_1;
 }
 
 function $816($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 12 >> 2]);
 }
 
 function $817() {
  var $0_1 = 0, $1_1 = 0;
  $1_1 = $29(64);
  $0_1 = $1_1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 1065353216;
  HEAP32[$0_1 + 24 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 48 >> 2] = 0;
  HEAP32[$0_1 + 40 >> 2] = 1065353216;
  $0_1 = $0_1 + 12 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $1_1 + 32 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $1_1 + 52 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 60 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $818($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $29(64);
  $454($1_1, $0_1);
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  $0_1 = $1_1 + 12 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 24 >> 2] = 0;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 + 20 >> 2] = 1065353216;
  $0_1 = $1_1 + 32 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 44 >> 2] = 0;
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 40 >> 2] = 1065353216;
  $0_1 = $1_1 + 52 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 60 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $819($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 1065353216;
  $1_1 = $0_1 + 12 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  $1_1 = $0_1 + 32 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 44 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 40 >> 2] = 1065353216;
  $1_1 = $0_1 + 52 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 60 >> 2] = 0;
 }
 
 function $820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 48 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 52 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 56 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $821($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $454($0_1, $1_1);
 }
 
 function $822($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 48 | 0;
 }
 
 function $823($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $651($0_1, $1_1);
  $0_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[5687] = HEAP32[$0_1 >> 2];
  HEAP32[5688] = $2_1;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[5685] = HEAP32[$1_1 >> 2];
  HEAP32[5686] = $0_1;
  global$0 = $1_1 + 16 | 0;
  return 22740;
 }
 
 function $824($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $651($0_1, $1_1);
  return $1_1 | 0;
 }
 
 function $825($0_1) {
  $0_1 = $0_1 | 0;
  if ($0_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 4 >> 2]]($0_1)
  }
 }
 
 function $826() {
  var $0_1 = 0;
  $0_1 = $29(8);
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 21356;
  return $0_1 | 0;
 }
 
 function $827($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$3(HEAP32[$0_1 + 4 >> 2], $1_1 | 0);
 }
 
 function $828($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$4(HEAP32[$0_1 + 4 >> 2], $1_1 | 0);
 }
 
 function $829($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $830($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $4_1 = global$0 + -64 | 0;
  global$0 = $4_1;
  $7_1 = $0_1 + 8 | 0;
  $6_1 = HEAP32[$7_1 + 4 >> 2];
  $3_1 = $4_1 + 8 | 0;
  $1_1 = $3_1;
  HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $6_1;
  $1_1 = $0_1 + 24 | 0;
  $7_1 = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = HEAP32[$0_1 + 16 >> 2];
  $11_1 = HEAP32[$0_1 + 20 >> 2];
  $9_1 = HEAP32[$0_1 >> 2];
  $8_1 = HEAP32[$0_1 + 4 >> 2];
  $5_1 = $0_1 + 40 | 0;
  $10_1 = HEAP32[$5_1 + 4 >> 2];
  $2_1 = $4_1 + 40 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $10_1;
  $2_1 = HEAP32[$0_1 + 32 >> 2];
  $5_1 = HEAP32[$0_1 + 36 >> 2];
  $12_1 = $0_1 + 56 | 0;
  $13_1 = HEAP32[$12_1 + 4 >> 2];
  $10_1 = $4_1 + 56 | 0;
  HEAP32[$10_1 >> 2] = HEAP32[$12_1 >> 2];
  HEAP32[$10_1 + 4 >> 2] = $13_1;
  $10_1 = $4_1 + 24 | 0;
  HEAP32[$10_1 >> 2] = $7_1;
  HEAP32[$10_1 + 4 >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = $9_1;
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  HEAP32[$4_1 + 32 >> 2] = $2_1;
  HEAP32[$4_1 + 36 >> 2] = $5_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$4_1 + 48 >> 2] = HEAP32[$0_1 + 48 >> 2];
  HEAP32[$4_1 + 52 >> 2] = $1_1;
  HEAP32[$4_1 + 16 >> 2] = $6_1;
  HEAP32[$4_1 + 20 >> 2] = $11_1;
  $0_1 = $120(200);
  if (!(HEAP8[22756] & 1)) {
   if (!(HEAP8[22824] & 1)) {
    HEAP32[5708] = 0;
    HEAP32[5709] = 0;
    HEAP32[5707] = 1065353216;
    HEAP32[5710] = 0;
    HEAP32[5711] = 0;
    HEAP32[5713] = 0;
    HEAP32[5714] = 0;
    HEAP32[5712] = 1065353216;
    HEAP32[5715] = 0;
    HEAP32[5716] = 0;
    HEAP32[5717] = 1065353216;
    HEAP32[5718] = 0;
    HEAP32[5706] = 1;
   }
   HEAP32[5702] = 0;
   HEAP32[5703] = 0;
   HEAP32[5704] = 0;
   HEAP32[5705] = 0;
   HEAP32[5689] = 1;
   $1_1 = HEAP32[5710];
   HEAP32[5692] = HEAP32[5709];
   HEAP32[5693] = $1_1;
   $1_1 = HEAP32[5708];
   HEAP32[5690] = HEAP32[5707];
   HEAP32[5691] = $1_1;
   $1_1 = HEAP32[5712];
   HEAP32[5694] = HEAP32[5711];
   HEAP32[5695] = $1_1;
   $1_1 = HEAP32[5714];
   HEAP32[5696] = HEAP32[5713];
   HEAP32[5697] = $1_1;
   $1_1 = HEAP32[5716];
   HEAP32[5698] = HEAP32[5715];
   HEAP32[5699] = $1_1;
   $1_1 = HEAP32[5718];
   HEAP32[5700] = HEAP32[5717];
   HEAP32[5701] = $1_1;
  }
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 21432;
  $7_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 12 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $7_1;
  $1_1 = $4_1 + 16 | 0;
  $6_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 20 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 24 >> 2] = $6_1;
  $7_1 = $4_1 + 32 | 0;
  $6_1 = $7_1;
  $11_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$0_1 + 36 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$0_1 + 40 >> 2] = $11_1;
  $6_1 = $4_1 + 48 | 0;
  $9_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$0_1 + 52 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$0_1 + 56 >> 2] = $9_1;
  $11_1 = $1_1 + 8 | 0;
  $8_1 = $11_1;
  $2_1 = HEAP32[$8_1 + 4 >> 2];
  $9_1 = $0_1 + 28 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $2_1;
  $9_1 = $7_1 + 8 | 0;
  $2_1 = $9_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  $8_1 = $0_1 + 44 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $5_1;
  $8_1 = $6_1 + 8 | 0;
  $5_1 = $8_1;
  $10_1 = HEAP32[$5_1 + 4 >> 2];
  $2_1 = $0_1 + 60 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $10_1;
  $5_1 = HEAP32[5693];
  $2_1 = $0_1 + 76 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[5692];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $2_1 = HEAP32[5691];
  HEAP32[$0_1 + 68 >> 2] = HEAP32[5690];
  HEAP32[$0_1 + 72 >> 2] = $2_1;
  $5_1 = HEAP32[5697];
  $2_1 = $0_1 + 92 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[5696];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $2_1 = HEAP32[5695];
  HEAP32[$0_1 + 84 >> 2] = HEAP32[5694];
  HEAP32[$0_1 + 88 >> 2] = $2_1;
  $5_1 = HEAP32[5701];
  $2_1 = $0_1 + 108 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[5700];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $2_1 = HEAP32[5699];
  HEAP32[$0_1 + 100 >> 2] = HEAP32[5698];
  HEAP32[$0_1 + 104 >> 2] = $2_1;
  $5_1 = HEAP32[5705];
  $2_1 = $0_1 + 124 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[5704];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $2_1 = HEAP32[5703];
  HEAP32[$0_1 + 116 >> 2] = HEAP32[5702];
  HEAP32[$0_1 + 120 >> 2] = $2_1;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 140 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $3_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$0_1 + 132 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$0_1 + 136 >> 2] = $3_1;
  $2_1 = HEAP32[$11_1 + 4 >> 2];
  $3_1 = $0_1 + 156 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 148 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 152 >> 2] = $3_1;
  $1_1 = HEAP32[$9_1 + 4 >> 2];
  $3_1 = $0_1 + 172 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $3_1 = HEAP32[$7_1 + 4 >> 2];
  HEAP32[$0_1 + 164 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 168 >> 2] = $3_1;
  $1_1 = HEAP32[$8_1 + 4 >> 2];
  $3_1 = $0_1 + 188 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $3_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$0_1 + 180 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$0_1 + 184 >> 2] = $3_1;
  HEAP32[$0_1 + 196 >> 2] = 0;
  global$0 = $4_1 - -64 | 0;
  return $0_1 | 0;
 }
 
 function $831($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 128 | 0;
  global$0 = $2_1;
  $463($2_1, $0_1 + 68 | 0);
  $464($2_1 - -64 | 0, $0_1 + 4 | 0, $2_1);
  $3_1 = $2_1 + 72 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $0_1 = $1_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $0_1 = HEAP32[$2_1 + 68 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 64 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $0_1;
  $0_1 = HEAP32[$2_1 + 84 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$2_1 + 80 >> 2];
  HEAP32[$1_1 + 20 >> 2] = $0_1;
  $3_1 = $2_1 + 88 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $0_1 = $1_1 + 24 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $0_1 = HEAP32[$2_1 + 100 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$2_1 + 96 >> 2];
  HEAP32[$1_1 + 36 >> 2] = $0_1;
  $3_1 = $2_1 + 104 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $0_1 = $1_1 + 40 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $0_1 = HEAP32[$2_1 + 116 >> 2];
  HEAP32[$1_1 + 48 >> 2] = HEAP32[$2_1 + 112 >> 2];
  HEAP32[$1_1 + 52 >> 2] = $0_1;
  $0_1 = $1_1 + 56 | 0;
  $1_1 = $2_1 + 120 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  global$0 = $2_1 + 128 | 0;
 }
 
 function $832($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $464($3_1, $1_1, $0_1 + 68 | 0);
  $2_1 = $3_1 + 8 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 12 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $1_1;
  $2_1 = HEAP32[$3_1 + 20 >> 2];
  $1_1 = $0_1 + 20 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $2_1 = $3_1 + 24 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 28 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$3_1 + 36 >> 2];
  $1_1 = $0_1 + 36 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $2_1 = $3_1 + 40 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 44 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$3_1 + 52 >> 2];
  $1_1 = $0_1 + 52 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $1_1 = $3_1 + 56 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 60 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  global$0 = $3_1 - -64 | 0;
 }
 
 function $833() {
  var $0_1 = 0;
  $0_1 = $120(328);
  $122($0_1);
  return $0_1 | 0;
 }
 
 function $834($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAPF32[$0_1 + 184 >> 2] = $1_1 | 0;
 }
 
 function $835($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 220 >> 2] = $1_1;
 }
 
 function $836($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $135($0_1, $1_1);
 }
 
 function $837($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = HEAP32[$0_1 + 220 >> 2];
  return ($0_1 | 0) != 2 & ($0_1 | 0) != 5;
 }
 
 function $838($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 232 >> 2] = $1_1;
  HEAP32[$0_1 + 308 >> 2] = HEAP32[$0_1 + 308 >> 2] + 1;
 }
 
 function $839($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 228 >> 2] = $1_1;
  HEAP32[$0_1 + 308 >> 2] = HEAP32[$0_1 + 308 >> 2] + 1;
 }
 
 function $840($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 236 >> 2] = $1_1;
  HEAP32[$0_1 + 308 >> 2] = HEAP32[$0_1 + 308 >> 2] + 1;
 }
 
 function $841($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 204 >> 2];
 }
 
 function $842($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 204 >> 2] = $1_1;
 }
 
 function $843($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1);
 }
 
 function $844($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 280 >> 2]);
 }
 
 function $845($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 280 >> 2] = $1_1;
 }
 
 function $846($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 276 >> 2]);
 }
 
 function $847($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 276 >> 2] = $1_1;
 }
 
 function $848($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 264 >> 2];
 }
 
 function $849($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 264 >> 2] = $1_1;
 }
 
 function $850($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 220 >> 2];
 }
 
 function $851($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0_1 + 308 >> 2] = HEAP32[$0_1 + 308 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 148 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 152 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 156 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $852($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0_1 + 308 >> 2] = HEAP32[$0_1 + 308 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 132 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 136 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 140 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $853($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 8 >> 2] != 0 | 0;
 }
 
 function $854($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 24 >> 2];
 }
 
 function $855($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
 }
 
 function $856($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 16 >> 2] = $1_1;
 }
 
 function $857($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = Math_fround(0);
  $1_1 = HEAPF32[$0_1 + 4 >> 2];
  if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
   return ~~$1_1 | 0
  }
  return -2147483648;
 }
 
 function $858($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAPF32[$0_1 + 4 >> 2] = $1_1 | 0;
 }
 
 function $859($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 8 >> 2] = $1_1;
 }
 
 function $860($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 + 16 >> 2] = $2_1;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = 1065353216;
  HEAP32[$0_1 + 8 >> 2] = 0;
 }
 
 function $861($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = $29(92);
  $2_1 = $3_1;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 24 >> 2] = -1;
  HEAP32[$2_1 + 12 >> 2] = 1;
  HEAP32[$2_1 + 16 >> 2] = -1;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 >> 2] = 21492;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$3_1 + 28 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$3_1 + 32 >> 2] = $2_1;
  $0_1 = $0_1 + 8 | 0;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = $3_1 + 36 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 44 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 48 >> 2] = $0_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $3_1 + 52 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  return $3_1 | 0;
 }
 
 function $862($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if (!(HEAP32[$0_1 + 16 >> 2] & HEAP32[$1_1 + 4 >> 2])) {
   return 0
  }
  return (HEAP32[$1_1 + 8 >> 2] & HEAP32[$0_1 + 12 >> 2]) != 0 | 0;
 }
 
 function $863($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  if ($3_1) {
   HEAP32[$0_1 + 24 >> 2] = HEAP32[$3_1 >> 2]
  }
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$1_1 + 24 >> 2];
  $3_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $3_1;
  label$2 : {
   if ($2_1) {
    $2_1 = HEAP32[$1_1 + 12 >> 2];
    HEAP32[$0_1 + 60 >> 2] = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$0_1 + 64 >> 2] = $2_1;
    $3_1 = $1_1 + 16 | 0;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 68 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    break label$2;
   }
   $431($4_1, $3_1 + 4 | 0, HEAPF32[$1_1 + 8 >> 2], HEAPF32[$1_1 + 12 >> 2], HEAPF32[$1_1 + 16 >> 2]);
   $3_1 = $4_1 + 8 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0_1 + 68 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $2_1 = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$0_1 + 60 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0_1 + 64 >> 2] = $2_1;
  }
  $435($0_1 + 76 | 0, $0_1 + 28 | 0, $0_1 + 44 | 0, HEAPF32[$1_1 + 24 >> 2]);
  global$0 = $4_1 + 16 | 0;
  return Math_fround(HEAPF32[$1_1 + 24 >> 2]);
 }
 
 function $864($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 28 | 0;
 }
 
 function $865($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 28 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 32 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 36 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $866($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 44 | 0;
 }
 
 function $867($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 44 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 48 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 52 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $868($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 60 | 0;
 }
 
 function $869($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 76 | 0;
 }
 
 function $870($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 4 >> 2];
 }
 
 function $871($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[HEAP32[$0_1 + 12 >> 2] + ($1_1 << 2) >> 2];
 }
 
 function $872($0_1) {
  $0_1 = $0_1 | 0;
  $124($0_1);
 }
 
 function $873($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[$0_1 + 12 >> 2] + ($1_1 << 4) | 0;
 }
 
 function $874($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0);
  $2_1 = HEAPF32[HEAP32[$0_1 + 12 >> 2] + ($1_1 << 2) >> 2];
  if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
   return ~~$2_1 | 0
  }
  return -2147483648;
 }
 
 function $875($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = $29(160);
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 24 >> 2] = -1;
  HEAP32[$2_1 + 12 >> 2] = 1;
  HEAP32[$2_1 + 16 >> 2] = -1;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP8[$2_1 + 44 | 0] = 1;
  HEAP32[$2_1 >> 2] = 21624;
  HEAP32[$2_1 + 40 >> 2] = 0;
  HEAP32[$2_1 + 32 >> 2] = 0;
  HEAP32[$2_1 + 36 >> 2] = 0;
  HEAP8[$2_1 + 96 | 0] = 1;
  HEAP32[$2_1 + 92 >> 2] = 0;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$2_1 + 48 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$2_1 + 52 >> 2] = $3_1;
  $3_1 = $0_1 + 8 | 0;
  $0_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $2_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 64 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 68 >> 2] = $0_1;
  $1_1 = $1_1 + 8 | 0;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $2_1 + 72 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $0_1;
  HEAP8[$2_1 + 116 | 0] = 1;
  HEAP32[$2_1 + 84 >> 2] = 0;
  HEAP32[$2_1 + 88 >> 2] = 0;
  HEAP32[$2_1 + 112 >> 2] = 0;
  HEAP32[$2_1 + 104 >> 2] = 0;
  HEAP32[$2_1 + 108 >> 2] = 0;
  HEAP8[$2_1 + 136 | 0] = 1;
  HEAP32[$2_1 + 132 >> 2] = 0;
  HEAP32[$2_1 + 124 >> 2] = 0;
  HEAP32[$2_1 + 128 >> 2] = 0;
  HEAP8[$2_1 + 156 | 0] = 1;
  HEAP32[$2_1 + 152 >> 2] = 0;
  HEAP32[$2_1 + 144 >> 2] = 0;
  HEAP32[$2_1 + 148 >> 2] = 0;
  return $2_1 | 0;
 }
 
 function $876($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 21624;
  $124($0_1 + 140 | 0);
  $124($0_1 + 120 | 0);
  $124($0_1 + 100 | 0);
  $124($0_1 + 80 | 0);
  $124($0_1 + 28 | 0);
  return $0_1 | 0;
 }
 
 function $877($0_1) {
  $0_1 = $0_1 | 0;
  $33($876($0_1));
 }
 
 function $878($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  $663($0_1 + 28 | 0, $1_1);
  label$1 : {
   if ($2_1) {
    $4_1 = $1_1 + 16 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $2_1 = $3_1 + 24 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    $2_1 = HEAP32[$1_1 + 12 >> 2];
    HEAP32[$3_1 + 16 >> 2] = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$3_1 + 20 >> 2] = $2_1;
    break label$1;
   }
   $431($3_1 + 16 | 0, HEAP32[$0_1 + 8 >> 2] + 4 | 0, HEAPF32[$1_1 + 8 >> 2], HEAPF32[$1_1 + 12 >> 2], HEAPF32[$1_1 + 16 >> 2]);
  }
  $200($0_1 + 100 | 0, $3_1 + 16 | 0);
  $435($3_1, $0_1 + 48 | 0, $0_1 - -64 | 0, HEAPF32[$1_1 + 24 >> 2]);
  $200($0_1 + 120 | 0, $3_1);
  $338($0_1 + 140 | 0, $1_1 + 24 | 0);
  $205($0_1 + 80 | 0, HEAP32[$1_1 + 4 >> 2]);
  global$0 = $3_1 + 32 | 0;
  return Math_fround(HEAPF32[$0_1 + 4 >> 2]);
 }
 
 function $879($0_1) {
  $0_1 = $0_1 | 0;
  $124($0_1 + 80 | 0);
  $124($0_1 + 140 | 0);
  $124($0_1 + 28 | 0);
  $124($0_1 + 120 | 0);
  $124($0_1 + 100 | 0);
 }
 
 function $880($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 - -64 | 0;
 }
 
 function $881($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 64 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 68 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 72 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $882($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 120 | 0;
 }
 
 function $883($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 100 | 0;
 }
 
 function $884($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 140 | 0;
 }
 
 function $885($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 32 | 0;
 }
 
 function $886($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = Math_fround(0);
  $1_1 = HEAPF32[$0_1 + 80 >> 2];
  if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
   return ~~$1_1 | 0
  }
  return -2147483648;
 }
 
 function $887($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 196 >> 2];
 }
 
 function $888($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 200 >> 2];
 }
 
 function $889($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 108 >> 2];
 }
 
 function $890($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 112 >> 2];
 }
 
 function $891($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPF32[$0_1 + 4 >> 2] < Math_fround(1.0) | 0;
 }
 
 function $892($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = $29(84);
  HEAP32[$2_1 + 12 >> 2] = -1;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  HEAP32[$2_1 + 8 >> 2] = 1;
  HEAP32[$2_1 >> 2] = 21708;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$2_1 + 16 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$2_1 + 20 >> 2] = $3_1;
  $0_1 = $0_1 + 8 | 0;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $3_1 = $2_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 32 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 36 >> 2] = $0_1;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $2_1 + 40 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  HEAP32[$2_1 + 80 >> 2] = 0;
  return $2_1 | 0;
 }
 
 function $893($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 80 >> 2];
 }
 
 function $894($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 80 >> 2] = $1_1;
 }
 
 function $895($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = $29(128);
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 24 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = -1;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  HEAP32[$2_1 + 8 >> 2] = 1;
  HEAP8[$2_1 + 32 | 0] = 1;
  HEAP32[$2_1 >> 2] = 21848;
  HEAP32[$2_1 + 28 >> 2] = 0;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$2_1 + 36 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$2_1 + 40 >> 2] = $3_1;
  $0_1 = $0_1 + 8 | 0;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $3_1 = $2_1 + 44 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 52 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 56 >> 2] = $0_1;
  $0_1 = $1_1 + 8 | 0;
  $1_1 = HEAP32[$0_1 >> 2];
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$2_1 + 80 >> 2] = 0;
  HEAP32[$2_1 + 72 >> 2] = 0;
  HEAP32[$2_1 + 76 >> 2] = 0;
  HEAP32[$2_1 + 100 >> 2] = 0;
  HEAP32[$2_1 + 112 >> 2] = 0;
  HEAP32[$2_1 + 116 >> 2] = 0;
  HEAP32[$2_1 + 120 >> 2] = 0;
  HEAP8[$2_1 + 124 | 0] = 1;
  HEAP8[$2_1 + 104 | 0] = 1;
  HEAP8[$2_1 + 84 | 0] = 1;
  HEAP32[$2_1 + 92 >> 2] = 0;
  HEAP32[$2_1 + 96 >> 2] = 0;
  $3_1 = $2_1 + 60 | 0;
  HEAP32[$3_1 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = $0_1;
  return $2_1 | 0;
 }
 
 function $896($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 21848;
  $124($0_1 + 108 | 0);
  $124($0_1 + 88 | 0);
  $124($0_1 + 68 | 0);
  $124($0_1 + 16 | 0);
  return $0_1 | 0;
 }
 
 function $897($0_1) {
  $0_1 = $0_1 | 0;
  $33($896($0_1));
 }
 
 function $898($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $663($0_1 + 16 | 0, $1_1);
  label$1 : {
   if ($2_1) {
    $4_1 = $1_1 + 16 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $2_1 = $3_1 + 8 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    $2_1 = HEAP32[$1_1 + 12 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $2_1;
    break label$1;
   }
   $431($3_1, HEAP32[$1_1 >> 2] + 4 | 0, HEAPF32[$1_1 + 8 >> 2], HEAPF32[$1_1 + 12 >> 2], HEAPF32[$1_1 + 16 >> 2]);
  }
  $200($0_1 + 68 | 0, $3_1);
  $200($0_1 + 88 | 0, $1_1 + 24 | 0);
  $338($0_1 + 108 | 0, $1_1 + 40 | 0);
  global$0 = $3_1 + 16 | 0;
  return Math_fround(HEAPF32[$0_1 + 4 >> 2]);
 }
 
 function $899($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 68 | 0;
 }
 
 function $900($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 88 | 0;
 }
 
 function $901($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 108 | 0;
 }
 
 function $902($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 12 >> 2];
 }
 
 function $903($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
 }
 
 function $904($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $1_1);
 }
 
 function $905($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 32 >> 2]]($0_1, $1_1, $2_1);
 }
 
 function $906($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 4 >> 2] == 31 | 0;
 }
 
 function $907($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0);
  $1_1 = $120(60);
  $190($1_1);
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 10280;
  $3_1 = HEAPF32[$0_1 >> 2];
  $4_1 = HEAPF32[$0_1 + 4 >> 2];
  $2_1 = HEAPF32[$0_1 + 8 >> 2];
  HEAP32[$1_1 + 44 >> 2] = 0;
  $5_1 = Math_fround($2_1 * HEAPF32[$1_1 + 24 >> 2]);
  $2_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAPF32[$1_1 + 40 >> 2] = $5_1 - $2_1;
  HEAPF32[$1_1 + 36 >> 2] = Math_fround($4_1 * HEAPF32[$1_1 + 20 >> 2]) - $2_1;
  HEAPF32[$1_1 + 32 >> 2] = Math_fround($3_1 * HEAPF32[$1_1 + 16 >> 2]) - $2_1;
  $219($1_1, $0_1);
  return $1_1 | 0;
 }
 
 function $908($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $120(60);
  $154($2_1);
  HEAPF32[$2_1 + 48 >> 2] = $0_1;
  HEAP32[$2_1 >> 2] = 10644;
  HEAP32[$2_1 + 56 >> 2] = 1;
  HEAP32[$2_1 + 4 >> 2] = 10;
  HEAP32[$2_1 + 44 >> 2] = 0;
  HEAPF32[$2_1 + 40 >> 2] = $0_1;
  HEAPF32[$2_1 + 36 >> 2] = $1_1 * Math_fround(.5);
  HEAPF32[$2_1 + 32 >> 2] = $0_1;
  return $2_1 | 0;
 }
 
 function $909($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0);
  HEAP32[$0_1 + 16 >> 2] = 1065353216;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  HEAP32[$0_1 + 56 >> 2] = $3_1;
  $5_1 = $0_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = 1065353216;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $6_1 = $1_1;
  $4_1 = $2_1;
  label$1 : {
   label$2 : {
    switch ($3_1 | 0) {
    case 0:
     $6_1 = $2_1;
     $4_1 = $1_1;
     break label$1;
    case 1:
     break label$1;
    default:
     break label$2;
    };
   }
   $4_1 = $1_1;
   $1_1 = $2_1;
  }
  HEAPF32[$0_1 + 32 >> 2] = $6_1;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$0_1 + 40 >> 2] = $1_1;
  HEAPF32[$0_1 + 36 >> 2] = $4_1;
  HEAPF32[$0_1 + 48 >> 2] = HEAPF32[($0_1 + 32 | 0) + (($3_1 + 2 | 0) % 3 << 2) >> 2];
 }
 
 function $910($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $1_1 = $120(60);
  $3_1 = $154($1_1);
  HEAP32[$1_1 + 56 >> 2] = 1;
  HEAP32[$1_1 >> 2] = 10808;
  $4_1 = HEAPF32[$0_1 >> 2];
  $5_1 = HEAPF32[$0_1 + 4 >> 2];
  $2_1 = HEAPF32[$0_1 + 8 >> 2];
  HEAP32[$1_1 + 44 >> 2] = 0;
  $6_1 = Math_fround($2_1 * HEAPF32[$1_1 + 24 >> 2]);
  $2_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAPF32[$1_1 + 40 >> 2] = $6_1 - $2_1;
  HEAPF32[$1_1 + 36 >> 2] = Math_fround($5_1 * HEAPF32[$1_1 + 20 >> 2]) - $2_1;
  HEAPF32[$1_1 + 32 >> 2] = Math_fround($4_1 * HEAPF32[$1_1 + 16 >> 2]) - $2_1;
  $219($3_1, $0_1);
  HEAP32[$1_1 + 4 >> 2] = 13;
  return $1_1 | 0;
 }
 
 function $911($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$0_1 + 16 >> 2] = 1065353216;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  HEAP32[$0_1 + 56 >> 2] = $3_1;
  $6_1 = $0_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = 1065353216;
  HEAP32[$6_1 + 4 >> 2] = 0;
  $7_1 = $1_1;
  $5_1 = $2_1;
  label$1 : {
   label$2 : {
    switch ($3_1 | 0) {
    case 0:
     $7_1 = $2_1;
     $5_1 = $1_1;
     break label$1;
    case 1:
     break label$1;
    default:
     break label$2;
    };
   }
   $5_1 = $1_1;
   $1_1 = $2_1;
  }
  HEAPF32[$0_1 + 32 >> 2] = $7_1;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$0_1 + 40 >> 2] = $1_1;
  HEAPF32[$0_1 + 36 >> 2] = $5_1;
  $1_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = $5_1;
  HEAPF32[$4_1 + 4 >> 2] = $2_1;
  HEAPF32[$4_1 >> 2] = $1_1;
  $489($0_1 + 32 | 0, $4_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $912($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  $1_1 = $120(56);
  $457($1_1, $0_1);
  return $1_1 | 0;
 }
 
 function $913($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $120(80);
  $154($2_1);
  HEAPF32[$2_1 + 64 >> 2] = $1_1;
  HEAPF32[$2_1 + 60 >> 2] = $0_1;
  HEAP32[$2_1 >> 2] = 10972;
  HEAP32[$2_1 + 76 >> 2] = 2;
  HEAP32[$2_1 + 68 >> 2] = 0;
  HEAP32[$2_1 + 72 >> 2] = 1;
  HEAP32[$2_1 + 4 >> 2] = 11;
  HEAPF32[$2_1 + 40 >> 2] = $0_1;
  HEAPF32[$2_1 + 36 >> 2] = $1_1;
  HEAPF32[$2_1 + 32 >> 2] = $0_1;
  HEAPF32[$2_1 + 56 >> 2] = $0_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($0_1 * $0_1) + Math_fround($1_1 * $1_1))));
  return $2_1 | 0;
 }
 
 function $914($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $120(88);
  HEAP32[$2_1 + 12 >> 2] = -1;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 35;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 >> 2] = 11152;
  $185($2_1 + 52 | 0, $0_1);
  HEAP32[$2_1 + 80 >> 2] = 1065353216;
  HEAP32[$2_1 + 84 >> 2] = 0;
  HEAP32[$2_1 + 72 >> 2] = 1065353216;
  HEAP32[$2_1 + 76 >> 2] = 1065353216;
  HEAPF32[$2_1 + 68 >> 2] = $1_1;
  HEAP32[$2_1 + 4 >> 2] = 28;
  return $2_1 | 0;
 }
 
 function $915($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $120(160);
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = -1;
  HEAP8[$1_1 + 32 | 0] = 1;
  HEAP32[$1_1 >> 2] = 11324;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP8[$1_1 + 112 | 0] = 1;
  HEAP32[$1_1 + 92 >> 2] = 0;
  HEAP32[$1_1 + 84 >> 2] = 1065353216;
  HEAP32[$1_1 + 88 >> 2] = 1065353216;
  HEAP32[$1_1 + 76 >> 2] = 0;
  HEAP32[$1_1 + 80 >> 2] = 1065353216;
  HEAP32[$1_1 + 68 >> 2] = 0;
  HEAP32[$1_1 + 72 >> 2] = 1;
  HEAP32[$1_1 + 60 >> 2] = -581039253;
  HEAP32[$1_1 + 64 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = -581039253;
  HEAP32[$1_1 + 56 >> 2] = -581039253;
  HEAP32[$1_1 + 44 >> 2] = 1566444395;
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 36 >> 2] = 1566444395;
  HEAP32[$1_1 + 40 >> 2] = 1566444395;
  HEAP32[$1_1 + 20 >> 2] = 0;
  HEAP32[$1_1 + 24 >> 2] = 0;
  HEAP32[$1_1 + 108 >> 2] = 0;
  HEAP32[$1_1 + 100 >> 2] = 0;
  HEAP32[$1_1 + 104 >> 2] = 0;
  HEAP8[$1_1 + 132 | 0] = 1;
  HEAP32[$1_1 + 128 >> 2] = 0;
  HEAP8[$1_1 + 152 | 0] = 1;
  HEAP32[$1_1 + 120 >> 2] = 0;
  HEAP32[$1_1 + 124 >> 2] = 0;
  HEAP32[$1_1 + 148 >> 2] = 0;
  HEAP32[$1_1 + 140 >> 2] = 0;
  HEAP32[$1_1 + 144 >> 2] = 0;
  HEAP8[$1_1 + 156 | 0] = 0;
  HEAP32[$1_1 + 4 >> 2] = 31;
  if ($0_1) {
   $0_1 = $120(40);
   $282($0_1);
   HEAP32[$1_1 + 68 >> 2] = $0_1;
  }
  $300($1_1 + 16 | 0, 0);
  return $1_1 | 0;
 }
 
 function $916($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 20 >> 2];
 }
 
 function $917($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = Math_fround(0);
  $3_1 = global$0 - 128 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 + 72 >> 2] = HEAP32[$0_1 + 72 >> 2] + 1;
  $4_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $7_1 = $3_1 + 72 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $5_1;
  $12_1 = HEAP32[$1_1 >> 2];
  $13_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = $1_1 + 24 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $7_1 = $3_1 + 88 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $5_1;
  $5_1 = $1_1 + 40 | 0;
  $14_1 = HEAP32[$5_1 >> 2];
  $15_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = HEAP32[$1_1 + 32 >> 2];
  $11_1 = HEAP32[$1_1 + 36 >> 2];
  $9_1 = HEAP32[$1_1 + 16 >> 2];
  $10_1 = HEAP32[$1_1 + 20 >> 2];
  $4_1 = $1_1 + 56 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $7_1 = $3_1 + 120 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $5_1;
  $5_1 = $3_1 + 104 | 0;
  HEAP32[$5_1 >> 2] = $14_1;
  HEAP32[$5_1 + 4 >> 2] = $15_1;
  HEAP32[$3_1 + 64 >> 2] = $12_1;
  HEAP32[$3_1 + 68 >> 2] = $13_1;
  HEAP32[$3_1 + 80 >> 2] = $9_1;
  HEAP32[$3_1 + 84 >> 2] = $10_1;
  $5_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$3_1 + 112 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 116 >> 2] = $5_1;
  HEAP32[$3_1 + 96 >> 2] = $6_1;
  HEAP32[$3_1 + 100 >> 2] = $11_1;
  $11_1 = HEAP32[$2_1 + 4 >> 2];
  $16_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1));
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $1_1, $3_1 + 48 | 0, $3_1 + 32 | 0);
  $1_1 = 0;
  label$1 : {
   while (1) {
    label$3 : {
     if (($1_1 | 0) == 12) {
      $7_1 = HEAP32[$0_1 + 68 >> 2];
      if ($7_1) {
       break label$3
      }
      $5_1 = 0;
      break label$1;
     }
     $8_1 = HEAPF32[($3_1 + 48 | 0) + $1_1 >> 2];
     $4_1 = $0_1 + $1_1 | 0;
     $5_1 = $4_1 + 36 | 0;
     if ($8_1 < HEAPF32[$5_1 >> 2]) {
      HEAPF32[$5_1 >> 2] = $8_1
     }
     $8_1 = HEAPF32[($3_1 + 32 | 0) + $1_1 >> 2];
     $5_1 = $4_1 + 52 | 0;
     if ($8_1 > HEAPF32[$5_1 >> 2]) {
      HEAPF32[$5_1 >> 2] = $8_1
     }
     $1_1 = $1_1 + 4 | 0;
     continue;
    }
    break;
   };
   $5_1 = $3_1 + 40 | 0;
   $1_1 = HEAP32[$5_1 + 4 >> 2];
   $4_1 = $3_1 + 24 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $1_1;
   $5_1 = $3_1 + 56 | 0;
   $1_1 = HEAP32[$5_1 + 4 >> 2];
   $4_1 = $3_1 + 8 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[$3_1 + 36 >> 2];
   HEAP32[$3_1 + 16 >> 2] = HEAP32[$3_1 + 32 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $1_1;
   $1_1 = HEAP32[$3_1 + 52 >> 2];
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $1_1;
   $5_1 = $294($7_1, $3_1, HEAP32[$0_1 + 20 >> 2]);
  }
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  if (($1_1 | 0) == HEAP32[$0_1 + 24 >> 2]) {
   $300($0_1 + 16 | 0, $1_1 ? $1_1 << 1 : 1);
   $1_1 = HEAP32[$0_1 + 20 >> 2];
  }
  $6_1 = HEAP32[$0_1 + 28 >> 2] + Math_imul($1_1, 80) | 0;
  $9_1 = $3_1 + 80 | 0;
  $4_1 = $9_1;
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$6_1 + 16 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 20 >> 2] = $1_1;
  $1_1 = HEAP32[$3_1 + 68 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$3_1 + 64 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $1_1;
  $10_1 = $3_1 + 96 | 0;
  $4_1 = $10_1;
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$6_1 + 32 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 36 >> 2] = $1_1;
  $7_1 = $3_1 + 112 | 0;
  $4_1 = $7_1;
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$6_1 + 48 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 52 >> 2] = $1_1;
  HEAP32[$6_1 + 64 >> 2] = $2_1;
  $2_1 = $3_1 + 72 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $6_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 8 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $6_1 + 24 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $2_1 = $10_1 + 8 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $6_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $2_1 = $7_1 + 8 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $6_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  HEAP32[$6_1 + 76 >> 2] = $5_1;
  HEAPF32[$6_1 + 72 >> 2] = $16_1;
  HEAP32[$6_1 + 68 >> 2] = $11_1;
  HEAP32[$0_1 + 20 >> 2] = HEAP32[$0_1 + 20 >> 2] + 1;
  HEAP32[$3_1 >> 2] = 1056964608;
  $338($0_1 + 96 | 0, $3_1);
  HEAP32[$3_1 >> 2] = 0;
  $338($0_1 + 136 | 0, $3_1);
  HEAP32[$3_1 >> 2] = 0;
  $338($0_1 + 116 | 0, $3_1);
  global$0 = $3_1 + 128 | 0;
 }
 
 function $918($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($0_1, $1_1);
 }
 
 function $919($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $314($0_1, $1_1);
 }
 
 function $920($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $1_1 = $1_1 << 2;
  HEAPF32[$1_1 + HEAP32[$0_1 + 108 >> 2] >> 2] = $2_1;
  HEAPF32[$1_1 + HEAP32[$0_1 + 148 >> 2] >> 2] = $3_1;
  HEAP8[$0_1 + 156 | 0] = 1;
  HEAPF32[$1_1 + HEAP32[$0_1 + 128 >> 2] >> 2] = $4_1;
 }
 
 function $921($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[(HEAP32[$0_1 + 28 >> 2] + Math_imul($1_1, 80) | 0) + 64 >> 2];
 }
 
 function $922($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $305($0_1, $1_1, $2_1, $3_1);
 }
 
 function $923() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $0_1 = $120(172);
  HEAP8[$0_1 + 36 | 0] = 1;
  HEAP32[$0_1 + 12 >> 2] = 1065353216;
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 1065353216;
  HEAP32[$0_1 + 8 >> 2] = 1065353216;
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP32[$0_1 + 48 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAP8[$0_1 + 100 | 0] = 1;
  HEAP32[$0_1 >> 2] = 11860;
  HEAP32[$0_1 + 96 >> 2] = 0;
  HEAP8[$0_1 + 120 | 0] = 1;
  HEAP32[$0_1 + 88 >> 2] = 0;
  HEAP32[$0_1 + 92 >> 2] = 0;
  HEAP32[$0_1 + 116 >> 2] = 0;
  HEAP8[$0_1 + 140 | 0] = 1;
  HEAP32[$0_1 + 108 >> 2] = 0;
  HEAP32[$0_1 + 112 >> 2] = 0;
  HEAP32[$0_1 + 136 >> 2] = 0;
  HEAP32[$0_1 + 128 >> 2] = 0;
  HEAP32[$0_1 + 132 >> 2] = 0;
  HEAP8[$0_1 + 160 | 0] = 1;
  HEAP32[$0_1 + 168 >> 2] = 0;
  HEAP32[$0_1 + 156 >> 2] = 0;
  HEAP32[$0_1 + 148 >> 2] = 0;
  HEAP32[$0_1 + 152 >> 2] = 0;
  HEAP16[$0_1 + 164 >> 1] = 257;
  $2_1 = $120(32);
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
  $9_1 = $0_1 + 20 | 0;
  while (1) {
   if ($1_1) {
    $6_1 = HEAP32[$0_1 + 32 >> 2] + $5_1 | 0;
    $3_1 = $6_1;
    $7_1 = HEAP32[$3_1 + 4 >> 2];
    $4_1 = $2_1 + $5_1 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    $3_1 = $3_1 + 24 | 0;
    $7_1 = HEAP32[$3_1 + 4 >> 2];
    $8_1 = $4_1 + 24 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $7_1;
    $8_1 = $6_1 + 16 | 0;
    $7_1 = HEAP32[$8_1 + 4 >> 2];
    $3_1 = $4_1 + 16 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $7_1;
    $6_1 = $6_1 + 8 | 0;
    $3_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $1_1 = $1_1 - 1 | 0;
    $5_1 = $5_1 + 32 | 0;
    continue;
   }
   break;
  };
  $163($9_1);
  HEAP32[$0_1 + 32 >> 2] = $2_1;
  HEAP8[$0_1 + 36 | 0] = 1;
  HEAP32[$0_1 + 28 >> 2] = 1;
  $1_1 = $2_1 + (HEAP32[$0_1 + 24 >> 2] << 5) | 0;
  HEAP32[$1_1 + 24 >> 2] = 2;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP32[$1_1 + 20 >> 2] = 16;
  HEAP32[$1_1 + 8 >> 2] = 12;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = HEAP32[$0_1 + 24 >> 2] + 1;
  $2_1 = HEAP32[$0_1 + 32 >> 2];
  HEAP32[$2_1 + 4 >> 2] = 0;
  $5_1 = HEAPU8[$0_1 + 164 | 0];
  HEAP32[$2_1 + 24 >> 2] = $5_1 ? 2 : 3;
  $4_1 = HEAP32[($5_1 ? 128 : 148) + $0_1 >> 2];
  $1_1 = 12;
  HEAP32[$2_1 + 8 >> 2] = $5_1 ? 12 : 6;
  HEAP32[$2_1 >> 2] = ($4_1 | 0) / 3;
  label$3 : {
   if (HEAPU8[$0_1 + 165 | 0]) {
    $1_1 = 16;
    $5_1 = HEAP32[$0_1 + 88 >> 2];
    break label$3;
   }
   $5_1 = HEAP32[$0_1 + 108 >> 2] / 3 | 0;
  }
  HEAP32[$2_1 + 20 >> 2] = $1_1;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = $5_1;
  return $0_1 | 0;
 }
 
 function $924($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = HEAP32[$0_1 + 32 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 1;
  $336($0_1, $337($0_1, $1_1, $4_1));
  $336($0_1, $337($0_1, $2_1, $4_1));
  $336($0_1, $337($0_1, $3_1, $4_1));
 }
 
 function $925($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = $120(80);
  HEAP32[$3_1 + 12 >> 2] = -1;
  HEAP32[$3_1 + 16 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 21;
  HEAP32[$3_1 + 8 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 11960;
  HEAP32[$3_1 + 52 >> 2] = $0_1;
  label$1 : {
   if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 40 >> 2]]($0_1) | 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1, $3_1 + 20 | 0, $3_1 + 36 | 0);
    break label$1;
   }
   $339($3_1);
  }
  HEAP8[$3_1 + 65 | 0] = 0;
  HEAP8[$3_1 + 64 | 0] = $1_1;
  HEAP32[$3_1 + 56 >> 2] = 0;
  HEAP32[$3_1 + 60 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 12764;
  HEAP32[$3_1 + 4 >> 2] = 21;
  if ($2_1) {
   $387($3_1)
  }
  return $3_1 | 0;
 }
 
 function $926() {
  var $0_1 = 0;
  $0_1 = $120(36);
  HEAP32[$0_1 + 12 >> 2] = -1;
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 27;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 13396;
  return $0_1 | 0;
 }
 
 function $927() {
  var $0_1 = 0, $1_1 = 0;
  $1_1 = $29(88);
  HEAP32[$1_1 >> 2] = 16128;
  $0_1 = $120(4);
  HEAP32[$1_1 + 24 >> 2] = $0_1;
  HEAP32[$0_1 >> 2] = 16016;
  $0_1 = $120(20);
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 16 >> 2] = 3;
  HEAP32[$0_1 >> 2] = 14056;
  HEAP32[$1_1 + 28 >> 2] = $0_1;
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 + 24 >> 2];
  $0_1 = $120(8);
  HEAP32[$0_1 >> 2] = 16160;
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP32[$1_1 + 32 >> 2] = $0_1;
  $0_1 = $120(8);
  HEAP32[$0_1 >> 2] = 16180;
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP32[$1_1 + 36 >> 2] = $0_1;
  $0_1 = $120(8);
  HEAP32[$0_1 >> 2] = 16200;
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP32[$1_1 + 40 >> 2] = $0_1;
  $0_1 = $120(8);
  HEAP32[$0_1 >> 2] = 16220;
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP32[$1_1 + 44 >> 2] = $0_1;
  $0_1 = $120(8);
  HEAP32[$0_1 >> 2] = 16240;
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP32[$1_1 + 48 >> 2] = $0_1;
  $0_1 = $120(8);
  HEAP32[$0_1 >> 2] = 16260;
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP32[$1_1 + 52 >> 2] = $0_1;
  $0_1 = $120(8);
  HEAP32[$0_1 >> 2] = 16280;
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP32[$1_1 + 56 >> 2] = $0_1;
  $0_1 = $120(8);
  HEAP32[$0_1 >> 2] = 16300;
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP32[$1_1 + 72 >> 2] = $0_1;
  $0_1 = $120(8);
  HEAP32[$1_1 + 76 >> 2] = $0_1;
  HEAP32[$0_1 >> 2] = 16300;
  HEAP8[$0_1 + 4 | 0] = 1;
  $0_1 = $120(8);
  HEAP32[$0_1 >> 2] = 16320;
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP32[$1_1 + 68 >> 2] = $0_1;
  $0_1 = $120(16);
  HEAP32[$0_1 + 8 >> 2] = 1;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 16340;
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP32[$1_1 + 84 >> 2] = $0_1;
  $0_1 = $120(16);
  HEAP32[$0_1 + 8 >> 2] = 1;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 16340;
  HEAP32[$1_1 + 80 >> 2] = $0_1;
  HEAP8[$0_1 + 4 | 0] = 1;
  HEAP8[$1_1 + 12 | 0] = 1;
  $0_1 = $120(24);
  $559($0_1, 852);
  HEAP8[$1_1 + 20 | 0] = 1;
  HEAP32[$1_1 + 8 >> 2] = $0_1;
  $0_1 = $120(24);
  $559($0_1, 128);
  HEAP32[$1_1 + 16 >> 2] = $0_1;
  return $1_1 | 0;
 }
 
 function $928($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 820 >> 2];
 }
 
 function $929($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 824 >> 2];
 }
 
 function $930($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 828 >> 2];
 }
 
 function $931($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (Math_imul($1_1, 204) + $0_1 | 0) + 4 | 0;
 }
 
 function $932($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 36 >> 2]]($0_1) | 0;
 }
 
 function $933($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 40 >> 2]]($0_1, $1_1) | 0;
 }
 
 function $934($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = $29(10448);
  HEAP32[$1_1 + 28 >> 2] = 13860;
  HEAP32[$1_1 >> 2] = 17132;
  HEAP8[$1_1 + 24 | 0] = 1;
  HEAP32[$1_1 + 4 >> 2] = 2;
  HEAP32[$1_1 + 20 >> 2] = 0;
  HEAP32[$1_1 + 10444 >> 2] = $0_1;
  HEAP32[$1_1 + 60 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP32[$1_1 + 64 >> 2] = 73;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1) | 0), HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1) | 0), HEAP32[wasm2js_i32$0 + 72 >> 2] = wasm2js_i32$1;
  $5_1 = $1_1 + 5260 | 0;
  label$1 : while (1) {
   if (($3_1 | 0) != 36) {
    $0_1 = 0;
    $4_1 = $5_1;
    while (1) if (($0_1 | 0) == 36) {
     $5_1 = $5_1 + 144 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$1;
    } else {
     $2_1 = HEAP32[$1_1 + 10444 >> 2];
     (wasm2js_i32$0 = $4_1 - 5184 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $3_1, $0_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $2_1 = HEAP32[$1_1 + 10444 >> 2];
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $3_1, $0_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $4_1 = $4_1 + 4 | 0;
     $0_1 = $0_1 + 1 | 0;
     continue;
    };
   }
   break;
  };
  return $1_1 | 0;
 }
 
 function $935() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $1_1 = $29(176);
  HEAP32[$1_1 >> 2] = 17832;
  $2_1 = $1_1 + 84 | 0;
  $0_1 = $1_1 + 4 | 0;
  while (1) {
   $4_1 = $282($0_1);
   $0_1 = $0_1 + 40 | 0;
   if (($2_1 | 0) != ($4_1 + 40 | 0)) {
    continue
   }
   break;
  };
  HEAP32[$1_1 + 168 >> 2] = 0;
  HEAP8[$1_1 + 172 | 0] = 1;
  HEAP32[$1_1 + 160 >> 2] = 0;
  HEAP32[$1_1 + 164 >> 2] = 0;
  HEAP8[$1_1 + 154 | 0] = 1;
  HEAP16[$1_1 + 152 >> 1] = 1;
  HEAP32[$1_1 + 124 >> 2] = 0;
  HEAP32[$1_1 + 100 >> 2] = 0;
  HEAP32[$1_1 + 104 >> 2] = 0;
  HEAP32[$1_1 + 136 >> 2] = 0;
  HEAP32[$1_1 + 128 >> 2] = 0;
  HEAP32[$1_1 + 132 >> 2] = 0;
  HEAP32[$1_1 + 116 >> 2] = 10;
  HEAP32[$1_1 + 120 >> 2] = 1;
  HEAP32[$1_1 + 108 >> 2] = 1;
  HEAP32[$1_1 + 112 >> 2] = 0;
  $0_1 = $120(72);
  HEAP8[$0_1 + 20 | 0] = 1;
  HEAP32[$0_1 >> 2] = 17328;
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP8[$0_1 + 44 | 0] = 1;
  HEAP32[$0_1 + 24 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 40 >> 2] = 0;
  HEAP8[$0_1 + 64 | 0] = 1;
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP32[$0_1 + 36 >> 2] = 0;
  HEAP32[$0_1 + 60 >> 2] = 0;
  HEAP32[$0_1 + 68 >> 2] = 0;
  HEAP32[$0_1 + 52 >> 2] = 0;
  HEAP32[$0_1 + 56 >> 2] = 0;
  $383($0_1 + 4 | 0, 2);
  $595($0_1);
  HEAP32[$1_1 + 148 >> 2] = 0;
  HEAP32[$1_1 + 96 >> 2] = $0_1;
  HEAP32[$1_1 + 140 >> 2] = 0;
  HEAP32[$1_1 + 144 >> 2] = 0;
  $0_1 = 0;
  while (1) {
   if (($0_1 | 0) == 12) {
    label$4 : {
     HEAP32[$3_1 + 20 >> 2] = 0;
     HEAP8[$3_1 + 24 | 0] = 1;
     HEAP32[$3_1 + 12 >> 2] = 0;
     HEAP32[$3_1 + 16 >> 2] = 0;
     $4_1 = HEAP32[$1_1 + 160 >> 2];
     if (($4_1 | 0) >= 2) {
      $0_1 = $4_1 - 1 | 0;
      $2_1 = 20;
      while (1) {
       if (!$0_1) {
        break label$4
       }
       $124(HEAP32[$1_1 + 168 >> 2] + $2_1 | 0);
       $0_1 = $0_1 - 1 | 0;
       $2_1 = $2_1 + 20 | 0;
       continue;
      };
     }
     label$7 : {
      if (($4_1 | 0) == 1) {
       break label$7
      }
      $0_1 = 0;
      if (HEAP32[$1_1 + 164 >> 2] > 0) {
       break label$7
      }
      $5_1 = $1_1 + 156 | 0;
      $6_1 = $120(20);
      $2_1 = HEAP32[$1_1 + 160 >> 2];
      $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
      while (1) {
       if ($2_1) {
        $616($0_1 + $6_1 | 0, HEAP32[$1_1 + 168 >> 2] + $0_1 | 0);
        $2_1 = $2_1 - 1 | 0;
        $0_1 = $0_1 + 20 | 0;
        continue;
       }
       break;
      };
      $617($5_1, HEAP32[$1_1 + 160 >> 2]);
      $163($5_1);
      HEAP32[$1_1 + 168 >> 2] = $6_1;
      HEAP8[$1_1 + 172 | 0] = 1;
      HEAP32[$1_1 + 164 >> 2] = 1;
     }
     $0_1 = $4_1 - 1 | 0;
     $2_1 = Math_imul($4_1, 20);
     while (1) {
      if (!$0_1) {
       break label$4
      }
      $616(HEAP32[$1_1 + 168 >> 2] + $2_1 | 0, $3_1 + 8 | 0);
      $0_1 = $0_1 + 1 | 0;
      $2_1 = $2_1 + 20 | 0;
      continue;
     };
    }
   } else {
    HEAP32[$0_1 + $2_1 >> 2] = 0;
    $0_1 = $0_1 + 4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$1_1 + 160 >> 2] = 1;
  $124($3_1 + 8 | 0);
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 44 >> 2]]($0_1, 22144);
  global$0 = $3_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $936($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $0_1 = 0;
  label$1 : {
   if (!(HEAP32[$2_1 + 8 >> 2] & HEAP32[$1_1 + 4 >> 2]) | !(HEAP32[$1_1 + 8 >> 2] & HEAP32[$2_1 + 4 >> 2])) {
    break label$1
   }
   $1_1 = HEAP32[$1_1 >> 2];
   $2_1 = HEAP32[$2_1 >> 2];
   if ((HEAP8[$2_1 + 204 | 0] & 1 ? HEAP8[$1_1 + 204 | 0] & 1 : 0) | (HEAP32[$2_1 + 220 >> 2] == 2 ? HEAP32[$1_1 + 220 >> 2] == 2 : 0)) {
    break label$1
   }
   $0_1 = 1;
  }
  return $0_1 | 0;
 }
 
 function $937($0_1, $1_1, $2_1, $3_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $29(144);
  HEAP32[$4_1 + 72 >> 2] = $2_1;
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  HEAPF32[$4_1 >> 2] = $0_1;
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$4_1 + 76 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 80 >> 2] = $1_1;
  $2_1 = $3_1 + 8 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $4_1 + 84 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  HEAP32[$4_1 + 136 >> 2] = 1008981770;
  HEAP32[$4_1 + 140 >> 2] = 1008981770;
  HEAP32[$4_1 + 128 >> 2] = 1000593162;
  HEAP32[$4_1 + 132 >> 2] = 1008981770;
  HEAP8[$4_1 + 124 | 0] = 0;
  HEAP32[$4_1 + 116 >> 2] = 1061997773;
  HEAP32[$4_1 + 120 >> 2] = 1065353216;
  HEAP32[$4_1 + 108 >> 2] = 0;
  HEAP32[$4_1 + 112 >> 2] = 0;
  HEAP32[$4_1 + 100 >> 2] = 1056964608;
  HEAP32[$4_1 + 104 >> 2] = 0;
  HEAP32[$4_1 + 92 >> 2] = 0;
  HEAP32[$4_1 + 96 >> 2] = 0;
  HEAP32[$4_1 + 8 >> 2] = 1065353216;
  $1_1 = $4_1 + 20 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAP32[$4_1 + 16 >> 2] = 0;
  HEAP32[$4_1 + 28 >> 2] = 1065353216;
  HEAP32[$4_1 + 32 >> 2] = 0;
  HEAP32[$4_1 + 36 >> 2] = 0;
  $1_1 = $4_1 + 40 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 48 >> 2] = 1065353216;
  HEAP32[$4_1 + 52 >> 2] = 0;
  HEAP32[$4_1 + 56 >> 2] = 0;
  $1_1 = $4_1 + 60 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 68 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $938($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0;
  $1_1 = $120(680);
  $6_1 = $122($1_1);
  HEAP8[$1_1 + 564 | 0] = 1;
  HEAP32[$1_1 >> 2] = 18188;
  HEAP32[$1_1 + 560 >> 2] = 0;
  HEAP32[$1_1 + 552 >> 2] = 0;
  HEAP32[$1_1 + 556 >> 2] = 0;
  HEAP32[$1_1 + 376 >> 2] = 0;
  HEAP32[$1_1 + 380 >> 2] = 0;
  HEAP32[$1_1 + 252 >> 2] = 2;
  $2_1 = $1_1 + 384 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 392 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 400 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 616 >> 2] = 1065353216;
  HEAP32[$1_1 + 620 >> 2] = 0;
  HEAP32[$1_1 + 608 >> 2] = 1065353216;
  HEAP32[$1_1 + 612 >> 2] = 1065353216;
  HEAP32[$1_1 + 420 >> 2] = 1065353216;
  HEAP32[$1_1 + 412 >> 2] = 1065353216;
  HEAP32[$1_1 + 416 >> 2] = 1065353216;
  $2($1_1 + 424 | 0, 0, 36);
  $2_1 = $1_1 + 500 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 492 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 484 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 476 >> 2] = 0;
  HEAP32[$1_1 + 480 >> 2] = 0;
  $640($1_1, HEAPF32[$0_1 + 92 >> 2], HEAPF32[$0_1 + 96 >> 2]);
  HEAP32[$1_1 + 672 >> 2] = 0;
  HEAP32[$1_1 + 676 >> 2] = 0;
  $2_1 = HEAP32[$0_1 + 120 >> 2];
  HEAP32[$1_1 + 536 >> 2] = HEAP32[$0_1 + 116 >> 2];
  HEAP32[$1_1 + 540 >> 2] = $2_1;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$1_1 + 544 >> 2] = $3_1;
  HEAP8[$1_1 + 516 | 0] = HEAPU8[$0_1 + 124 | 0];
  $2_1 = HEAP32[$0_1 + 132 >> 2];
  HEAP32[$1_1 + 520 >> 2] = HEAP32[$0_1 + 128 >> 2];
  HEAP32[$1_1 + 524 >> 2] = $2_1;
  $2_1 = HEAP32[$0_1 + 140 >> 2];
  HEAP32[$1_1 + 528 >> 2] = HEAP32[$0_1 + 136 >> 2];
  HEAP32[$1_1 + 532 >> 2] = $2_1;
  label$1 : {
   if ($3_1) {
    $2_1 = $1_1 + 4 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $2_1);
    break label$1;
   }
   $2_1 = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$1_1 + 4 >> 2] = HEAP32[$0_1 + 8 >> 2];
   HEAP32[$1_1 + 8 >> 2] = $2_1;
   $3_1 = $0_1 + 16 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $1_1 + 12 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $0_1 + 32 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $1_1 + 28 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $2_1 = $0_1 + 24 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$1_1 + 20 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 24 >> 2] = $3_1;
   $2_1 = $0_1 + 40 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$1_1 + 36 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 40 >> 2] = $3_1;
   $3_1 = $0_1 + 48 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $1_1 + 44 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $0_1 - -64 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $1_1 + 60 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $2_1 = $0_1 + 56 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$1_1 + 52 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 56 >> 2] = $3_1;
   $2_1 = $1_1 + 4 | 0;
  }
  HEAP32[$1_1 + 132 >> 2] = 0;
  HEAP32[$1_1 + 136 >> 2] = 0;
  $3_1 = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$1_1 + 84 >> 2] = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$1_1 + 88 >> 2] = $3_1;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$1_1 + 68 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 72 >> 2] = $3_1;
  $3_1 = HEAP32[$1_1 + 40 >> 2];
  HEAP32[$1_1 + 100 >> 2] = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$1_1 + 104 >> 2] = $3_1;
  $3_1 = HEAP32[$1_1 + 56 >> 2];
  HEAP32[$1_1 + 116 >> 2] = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$1_1 + 120 >> 2] = $3_1;
  $3_1 = $1_1 + 156 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $1_1 + 148 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $1_1 + 140 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $2_1 = $2_1 + 8 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $1_1 + 76 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 28 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $1_1 + 92 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 44 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $1_1 + 108 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 60 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $1_1 + 124 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  HEAPF32[$1_1 + 228 >> 2] = HEAPF32[$0_1 + 100 >> 2];
  HEAPF32[$1_1 + 236 >> 2] = HEAPF32[$0_1 + 104 >> 2];
  HEAPF32[$1_1 + 240 >> 2] = HEAPF32[$0_1 + 108 >> 2];
  HEAPF32[$1_1 + 232 >> 2] = HEAPF32[$0_1 + 112 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($6_1, HEAP32[$0_1 + 72 >> 2]);
  $2_1 = HEAP32[5680];
  HEAP32[$1_1 + 572 >> 2] = $2_1;
  HEAP32[5680] = $2_1 + 1;
  $641($1_1, HEAPF32[$0_1 >> 2], $0_1 + 76 | 0);
  $642($1_1);
  HEAP32[$1_1 + 576 >> 2] = 0;
  HEAP32[$1_1 + 580 >> 2] = 0;
  HEAP32[$1_1 + 568 >> 2] = 8;
  $0_1 = $1_1 + 584 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $1_1 + 592 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $1_1 + 600 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $5_1 = HEAPF32[$1_1 + 408 >> 2];
  HEAPF32[$1_1 + 632 >> 2] = $5_1 * HEAPF32[$1_1 + 420 >> 2];
  HEAPF32[$1_1 + 628 >> 2] = $5_1 * HEAPF32[$1_1 + 416 >> 2];
  HEAPF32[$1_1 + 624 >> 2] = $5_1 * HEAPF32[$1_1 + 412 >> 2];
  $2($1_1 + 636 | 0, 0, 36);
  return $1_1 | 0;
 }
 
 function $939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $656($0_1, $1_1);
 }
 
 function $940($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  HEAPF32[$0_1 + 540 >> 2] = $2_1;
  HEAPF32[$0_1 + 536 >> 2] = $1_1;
 }
 
 function $941($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 536 >> 2]);
 }
 
 function $942($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 540 >> 2]);
 }
 
 function $943($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $640($0_1, $1_1, $2_1);
 }
 
 function $944($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $641($0_1, $1_1, $2_1);
 }
 
 function $945($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 412 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 416 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $0_1 + 420 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  HEAP32[$0_1 + 636 >> 2] = 0;
  $3_1 = HEAPF32[$0_1 + 408 >> 2];
  HEAPF32[$0_1 + 628 >> 2] = $3_1 * HEAPF32[$0_1 + 416 >> 2];
  HEAPF32[$0_1 + 624 >> 2] = $3_1 * HEAPF32[$0_1 + 412 >> 2];
  HEAPF32[$0_1 + 632 >> 2] = $3_1 * HEAPF32[$2_1 >> 2];
 }
 
 function $946($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $947($0_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
 }
 
 function $947($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 >> 2] = HEAPF32[$0_1 + 608 >> 2] * $1_1;
  HEAPF32[$4_1 + 8 >> 2] = HEAPF32[$0_1 + 616 >> 2] * $3_1;
  HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$0_1 + 612 >> 2] * $2_1;
  $158($0_1 + 492 | 0, $4_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $948($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1_1 + 4 | 0;
  $5_1 = $1_1 + 8 | 0;
  $802($0_1, HEAPF32[$1_1 >> 2], HEAPF32[$4_1 >> 2], HEAPF32[$5_1 >> 2]);
  $201($3_1, HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$0_1 + 412 >> 2]), Math_fround(HEAPF32[$4_1 >> 2] * HEAPF32[$0_1 + 416 >> 2]), Math_fround(HEAPF32[$5_1 >> 2] * HEAPF32[$0_1 + 420 >> 2]));
  $947($0_1, HEAPF32[$3_1 >> 2], HEAPF32[$3_1 + 4 >> 2], HEAPF32[$3_1 + 8 >> 2]);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $949($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $802($0_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
 }
 
 function $950($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $951($0_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
 }
 
 function $951($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $431($4_1, $0_1 + 328 | 0, $1_1, $2_1, $3_1);
  HEAP32[$4_1 + 28 >> 2] = 0;
  HEAPF32[$4_1 + 24 >> 2] = HEAPF32[$4_1 + 8 >> 2] * HEAPF32[$0_1 + 616 >> 2];
  HEAPF32[$4_1 + 20 >> 2] = HEAPF32[$4_1 + 4 >> 2] * HEAPF32[$0_1 + 612 >> 2];
  HEAPF32[$4_1 + 16 >> 2] = HEAPF32[$4_1 >> 2] * HEAPF32[$0_1 + 608 >> 2];
  $158($0_1 + 392 | 0, $4_1 + 16 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $952($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $791($0_1, $1_1, $2_1);
 }
 
 function $953($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $5_1 = Math_fround(HEAPF32[$0_1 + 412 >> 2] * $1_1);
  $1_1 = HEAPF32[$0_1 + 408 >> 2];
  HEAPF32[$4_1 >> 2] = $5_1 * $1_1;
  HEAPF32[$4_1 + 8 >> 2] = $1_1 * Math_fround(HEAPF32[$0_1 + 420 >> 2] * $3_1);
  HEAPF32[$4_1 + 4 >> 2] = $1_1 * Math_fround(HEAPF32[$0_1 + 416 >> 2] * $2_1);
  $158($0_1 + 376 | 0, $4_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $954($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $953($0_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
 }
 
 function $955($0_1) {
  $0_1 = $0_1 | 0;
  $642($0_1);
 }
 
 function $956($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 376 | 0;
 }
 
 function $957($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 392 | 0;
 }
 
 function $958($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0_1 + 308 >> 2] = HEAP32[$0_1 + 308 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 376 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 380 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 384 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $959($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0_1 + 308 >> 2] = HEAP32[$0_1 + 308 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 392 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 396 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 400 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $960($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0_1 + 308 >> 2] = HEAP32[$0_1 + 308 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 608 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 612 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 616 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $961($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 444 | 0;
 }
 
 function $962($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $655($0_1, $1_1);
 }
 
 function $963($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 476 | 0;
 }
 
 function $964($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 492 | 0;
 }
 
 function $965($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 568 >> 2];
 }
 
 function $966($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 568 >> 2] = $1_1;
 }
 
 function $967($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 + 476 >> 2] = 0;
  HEAP32[$0_1 + 480 >> 2] = 0;
  $1_1 = $0_1 + 500 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 492 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $0_1 = $0_1 + 484 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
 }
 
 function $968($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 + 376 >> 2] = 0;
  HEAP32[$0_1 + 380 >> 2] = 0;
  HEAP32[$0_1 + 476 >> 2] = 0;
  HEAP32[$0_1 + 480 >> 2] = 0;
  $1_1 = $0_1 + 400 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 392 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 384 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 484 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 492 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $0_1 = $0_1 + 500 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
 }
 
 function $969() {
  var $0_1 = 0;
  $0_1 = $120(272);
  $666($0_1);
  return $0_1 | 0;
 }
 
 function $970($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 + 16 | 0];
 }
 
 function $971($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 + 16 | 0] = $1_1;
 }
 
 function $972($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 32 >> 2]]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $973($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 36 >> 2]]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $974($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 44 >> 2]]($0_1, $1_1);
 }
 
 function $975($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $745($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $976($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 96 | 0;
 }
 
 function $977($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $3_1 = $120(364);
  HEAP32[$3_1 + 16 >> 2] = 0;
  HEAP8[$3_1 + 20 | 0] = 1;
  HEAP32[$3_1 + 120 >> 2] = 1101004800;
  HEAP32[$3_1 + 112 >> 2] = 0;
  HEAP32[$3_1 + 104 >> 2] = 1050253722;
  HEAP32[$3_1 + 108 >> 2] = 1015580809;
  HEAP32[$3_1 + 96 >> 2] = 1058642330;
  HEAP32[$3_1 + 100 >> 2] = 1065353216;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 84 >> 2] = 0;
  HEAP32[$3_1 + 88 >> 2] = 0;
  HEAP8[$3_1 + 80 | 0] = 1;
  HEAP32[$3_1 + 76 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = $1_1;
  HEAP8[$3_1 + 68 | 0] = 0;
  HEAP32[$3_1 + 64 >> 2] = 0;
  HEAP8[$3_1 + 60 | 0] = 0;
  HEAP32[$3_1 + 56 >> 2] = 1025758986;
  HEAP8[$3_1 + 54 | 0] = 1;
  HEAP16[$3_1 + 52 >> 1] = 256;
  HEAP32[$3_1 + 48 >> 2] = 0;
  HEAP8[$3_1 + 44 | 0] = 1;
  HEAP32[$3_1 + 36 >> 2] = 1;
  HEAP32[$3_1 + 40 >> 2] = 1065353216;
  HEAP32[$3_1 + 28 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 0;
  HEAP32[$3_1 + 24 >> 2] = $0_1;
  HEAP32[$3_1 + 8 >> 2] = 0;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 + 144 >> 2] = 1045220557;
  HEAP32[$3_1 + 148 >> 2] = 0;
  HEAP32[$3_1 + 136 >> 2] = 0;
  HEAP32[$3_1 + 140 >> 2] = 0;
  HEAP32[$3_1 + 128 >> 2] = 1045220557;
  HEAP32[$3_1 + 132 >> 2] = 1045220557;
  HEAP32[$3_1 + 116 >> 2] = 10;
  HEAP32[$3_1 + 208 >> 2] = 0;
  HEAP32[$3_1 + 152 >> 2] = 1;
  HEAP32[$3_1 + 156 >> 2] = -1121724662;
  HEAP32[$3_1 + 160 >> 2] = 1036831949;
  HEAP32[$3_1 + 164 >> 2] = 0;
  HEAP32[$3_1 + 168 >> 2] = 1062836634;
  HEAP32[$3_1 + 172 >> 2] = 1062836634;
  HEAP32[$3_1 + 176 >> 2] = 260;
  HEAP32[$3_1 + 180 >> 2] = 2;
  HEAP32[$3_1 + 184 >> 2] = 128;
  HEAP32[$3_1 + 188 >> 2] = 1120403456;
  HEAP32[$3_1 + 192 >> 2] = 1900671690;
  HEAP32[$3_1 + 196 >> 2] = 0;
  HEAP16[$3_1 + 204 >> 1] = 0;
  HEAP32[$3_1 + 200 >> 2] = 1045220557;
  HEAP32[$3_1 + 124 >> 2] = 1065353216;
  HEAP32[$3_1 >> 2] = 20868;
  HEAP8[$3_1 + 228 | 0] = 1;
  HEAP32[$3_1 + 232 >> 2] = 0;
  HEAP32[$3_1 + 224 >> 2] = 0;
  HEAP32[$3_1 + 236 >> 2] = $2_1;
  HEAP8[$3_1 + 260 | 0] = 1;
  HEAP32[$3_1 + 216 >> 2] = 0;
  HEAP32[$3_1 + 220 >> 2] = 0;
  HEAP8[$3_1 + 280 | 0] = 1;
  HEAP32[$3_1 + 256 >> 2] = 0;
  HEAP32[$3_1 + 248 >> 2] = 0;
  HEAP32[$3_1 + 252 >> 2] = 0;
  HEAP32[$3_1 + 276 >> 2] = 0;
  HEAP32[$3_1 + 268 >> 2] = 0;
  HEAP32[$3_1 + 272 >> 2] = 0;
  HEAP32[$3_1 + 284 >> 2] = 0;
  HEAP32[$3_1 + 288 >> 2] = -1054867456;
  HEAP16[$3_1 + 310 >> 1] = 0;
  $1_1 = $3_1 + 300 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 292 >> 2] = 0;
  HEAP32[$3_1 + 296 >> 2] = 0;
  HEAP8[$3_1 + 328 | 0] = 1;
  HEAP8[$3_1 + 356 | 0] = 1;
  HEAP32[$3_1 + 324 >> 2] = 0;
  HEAP8[$3_1 + 336 | 0] = 1;
  HEAP32[$3_1 + 316 >> 2] = 0;
  HEAP32[$3_1 + 320 >> 2] = 0;
  HEAP32[$3_1 + 332 >> 2] = 0;
  HEAP32[$3_1 + 352 >> 2] = 0;
  HEAP32[$3_1 + 360 >> 2] = 0;
  HEAP32[$3_1 + 344 >> 2] = 0;
  HEAP32[$3_1 + 348 >> 2] = 0;
  $4_1 = $3_1;
  if ($2_1) {
   $1_1 = 0
  } else {
   $1_1 = $120(272);
   $666($1_1);
   HEAP32[$3_1 + 236 >> 2] = $1_1;
   $1_1 = 1;
  }
  HEAP8[$4_1 + 309 | 0] = $1_1;
  $1_1 = $120(68);
  HEAP8[$1_1 + 20 | 0] = 1;
  HEAP32[$1_1 >> 2] = 20808;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP8[$1_1 + 40 | 0] = 1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 36 >> 2] = 0;
  HEAP8[$1_1 + 60 | 0] = 1;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 + 32 >> 2] = 0;
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP8[$1_1 + 64 | 0] = 1;
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = 0;
  HEAP8[$3_1 + 308 | 0] = 1;
  HEAP32[$3_1 + 240 >> 2] = $1_1;
  $1_1 = $120(88);
  HEAP32[$1_1 + 72 >> 2] = 0;
  HEAP32[$1_1 + 76 >> 2] = 0;
  HEAP8[$1_1 + 44 | 0] = 1;
  HEAP32[$1_1 + 24 >> 2] = $0_1;
  HEAP32[$1_1 + 20 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 21068;
  HEAP32[$1_1 + 40 >> 2] = 0;
  HEAP8[$1_1 + 64 | 0] = 1;
  HEAP32[$1_1 + 32 >> 2] = 0;
  HEAP32[$1_1 + 36 >> 2] = 0;
  HEAP32[$1_1 + 60 >> 2] = 0;
  HEAP8[$1_1 + 84 | 0] = 1;
  HEAP32[$1_1 + 52 >> 2] = 0;
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 80 >> 2] = 0;
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$3_1 + 236 >> 2];
  HEAP32[$3_1 + 232 >> 2] = $1_1;
  return $3_1 | 0;
 }
 
 function $978($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 76 >> 2]]($0_1, $1_1);
 }
 
 function $979($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 80 >> 2]]($1_1, $0_1);
  $0_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[5721] = HEAP32[$0_1 >> 2];
  HEAP32[5722] = $2_1;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[5719] = HEAP32[$1_1 >> 2];
  HEAP32[5720] = $0_1;
  global$0 = $1_1 + 16 | 0;
  return 22876;
 }
 
 function $980($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 92 >> 2]]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $981($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 96 >> 2]]($0_1, $1_1);
 }
 
 function $982($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, $1_1, $2_1, $3_1) | 0;
 }
 
 function __wasm_i64_mul($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = $2_1 >>> 16 | 0;
  $5_1 = $0_1 >>> 16 | 0;
  $9_1 = Math_imul($4_1, $5_1);
  $6_1 = $2_1 & 65535;
  $7_1 = $0_1 & 65535;
  $8_1 = Math_imul($6_1, $7_1);
  $5_1 = ($8_1 >>> 16 | 0) + Math_imul($5_1, $6_1) | 0;
  $4_1 = ($5_1 & 65535) + Math_imul($4_1, $7_1) | 0;
  i64toi32_i32$HIGH_BITS = (Math_imul($1_1, $2_1) + $9_1 | 0) + Math_imul($0_1, $3_1) + ($5_1 >>> 16) + ($4_1 >>> 16) | 0;
  return $8_1 & 65535 | $4_1 << 16;
 }
 
 function __wasm_i64_udiv($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E : {
   label$1 : {
    label$2 : {
     label$3 : {
      label$4 : {
       label$5 : {
        label$6 : {
         label$7 : {
          label$9 : {
           label$11 : {
            if ($1_1) {
             if (!$2_1) {
              break label$11
             }
             break label$9;
            }
            $0_1 = ($0_1 >>> 0) / ($2_1 >>> 0) | 0;
            i64toi32_i32$HIGH_BITS = 0;
            break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
           }
           if (!$0_1) {
            break label$7
           }
           break label$6;
          }
          if (!($2_1 - 1 & $2_1)) {
           break label$5
          }
          $5_1 = (Math_clz32($2_1) + 33 | 0) - Math_clz32($1_1) | 0;
          $6_1 = 0 - $5_1 | 0;
          break label$3;
         }
         $0_1 = ($1_1 >>> 0) / 0 | 0;
         i64toi32_i32$HIGH_BITS = 0;
         break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
        }
        $3_1 = 32 - Math_clz32($1_1) | 0;
        if ($3_1 >>> 0 < 31) {
         break label$4
        }
        break label$2;
       }
       if (($2_1 | 0) == 1) {
        break label$1
       }
       $3_1 = $2_1 ? 31 - Math_clz32($2_1 - 1 ^ $2_1) | 0 : 32;
       $2_1 = $3_1 & 31;
       if (($3_1 & 63) >>> 0 >= 32) {
        $3_1 = 0;
        $0_1 = $1_1 >>> $2_1 | 0;
       } else {
        $3_1 = $1_1 >>> $2_1 | 0;
        $0_1 = ((1 << $2_1) - 1 & $1_1) << 32 - $2_1 | $0_1 >>> $2_1;
       }
       i64toi32_i32$HIGH_BITS = $3_1;
       break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
      }
      $5_1 = $3_1 + 1 | 0;
      $6_1 = 63 - $3_1 | 0;
     }
     $3_1 = $5_1 & 63;
     $4_1 = $3_1 & 31;
     if ($3_1 >>> 0 >= 32) {
      $3_1 = 0;
      $7_1 = $1_1 >>> $4_1 | 0;
     } else {
      $3_1 = $1_1 >>> $4_1 | 0;
      $7_1 = ((1 << $4_1) - 1 & $1_1) << 32 - $4_1 | $0_1 >>> $4_1;
     }
     $6_1 = $6_1 & 63;
     $4_1 = $6_1 & 31;
     if ($6_1 >>> 0 >= 32) {
      $1_1 = $0_1 << $4_1;
      $0_1 = 0;
     } else {
      $1_1 = (1 << $4_1) - 1 & $0_1 >>> 32 - $4_1 | $1_1 << $4_1;
      $0_1 = $0_1 << $4_1;
     }
     if ($5_1) {
      $4_1 = $2_1 - 1 | 0;
      $6_1 = ($4_1 | 0) != -1 ? 0 : -1;
      while (1) {
       $8_1 = $3_1 << 1 | $7_1 >>> 31;
       $3_1 = $7_1 << 1 | $1_1 >>> 31;
       $7_1 = $6_1 - ($8_1 + ($3_1 >>> 0 > $4_1 >>> 0) | 0) | 0;
       $9_1 = $7_1 >> 31;
       $10_1 = $2_1 & $9_1;
       $7_1 = $3_1 - $10_1 | 0;
       $3_1 = $8_1 - ($3_1 >>> 0 < $10_1 >>> 0) | 0;
       $1_1 = $1_1 << 1 | $0_1 >>> 31;
       $0_1 = $11_1 | $0_1 << 1;
       $8_1 = $9_1 & 1;
       $11_1 = $8_1;
       $5_1 = $5_1 - 1 | 0;
       if ($5_1) {
        continue
       }
       break;
      };
     }
     i64toi32_i32$HIGH_BITS = $1_1 << 1 | $0_1 >>> 31;
     $0_1 = $8_1 | $0_1 << 1;
     break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
    }
    $0_1 = 0;
    $1_1 = 0;
   }
   i64toi32_i32$HIGH_BITS = $1_1;
  }
  return $0_1;
 }
 
 function __wasm_rotl_i32($0_1) {
  var $1_1 = 0;
  $1_1 = $0_1 & 31;
  $0_1 = 0 - $0_1 & 31;
  return (-1 >>> $1_1 & -2) << $1_1 | (-1 << $0_1 & -2) >>> $0_1;
 }
 
 function __wasm_rotl_i64($0_1, $1_1) {
  i64toi32_i32$HIGH_BITS = $0_1;
  return $1_1;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = [null, $26, $0, $10, $12, $13, $47, $50, $50, $57, $51, $55, $58, $59, $48, $49, $51, $52, $47, $50, $50, $51, $64, $51, $67, $48, $57, $57, $57, $57, $57, $78, $78, $57, $78, $78, $50, $71, $72, $72, $69, $58, $84, $58, $87, $58, $87, $58, $84, $58, $88, $109, $106, $91, $79, $108, $105, $92, $79, $107, $102, $94, $58, $95, $79, $96, $79, $99, $152, $147, $667, $668, $669, $577, $123, $125, $126, $127, $129, $130, $133, $142, $155, $192, $136, $139, $138, $156, $223, $227, $194, $229, $230, $231, $141, $157, $144, $159, $197, $198, $161, $164, $191, $155, $193, $195, $196, $199, $208, $220, $221, $222, $224, $226, $228, $232, $233, $234, $235, $236, $237, $143, $238, $239, $235, $240, $241, $242, $244, $245, $246, $247, $248, $249, $250, $251, $252, $253, $254, $244, $221, $222, $255, $256, $249, $228, $251, $257, $258, $259, $261, $262, $244, $263, $264, $265, $266, $251, $267, $268, $270, $271, $142, $244, $272, $273, $274, $275, $276, $277, $278, $230, $279, $280, $301, $302, $303, $304, $306, $307, $308, $309, $310, $311, $312, $313, $315, $321, $322, $317, $323, $323, $324, $324, $330, $324, $324, $325, $326, $327, $335, $318, $328, $329, $331, $333, $142, $244, $340, $341, $342, $275, $343, $143, $140, $344, $345, $394, $142, $346, $347, $142, $346, $348, $351, $352, $353, $381, $356, $357, $362, $379, $380, $382, $346, $386, $346, $385, $388, $389, $390, $391, $251, $392, $393, $395, $396, $142, $346, $397, $346, $399, $346, $399, $142, $244, $400, $401, $402, $403, $404, $405, $142, $346, $415, $142, $346, $434, $142, $346, $198, $198, $436, $346, $460, $461, $437, $244, $400, $443, $444, $194, $445, $442, $440, $441, $142, $346, $446, $447, $448, $449, $456, $458, $250, $324, $198, $142, $346, $346, $198, $198, $465, $346, $462, $346, $466, $485, $486, $487, $490, $491, $468, $469, $470, $220, $192, $275, $472, $473, $474, $475, $476, $478, $478, $479, $480, $481, $482, $483, $484, $346, $492, $495, $497, $498, $502, $503, $142, $346, $198, $504, $298, $198, $299, $299, $507, $508, $509, $511, $512, $513, $515, $516, $518, $519, $346, $520, $324, $142, $346, $521, $522, $324, $523, $524, $525, $522, $527, $346, $528, $531, $532, $533, $522, $527, $346, $534, $535, $536, $537, $522, $527, $538, $539, $540, $522, $527, $142, $346, $558, $570, $572, $573, $574, $575, $576, $142, $346, $569, $346, $568, $346, $567, $346, $566, $346, $565, $346, $564, $346, $563, $346, $562, $346, $561, $346, $560, $578, $579, $580, $581, $582, $584, $585, $586, $587, $588, $589, $590, $591, $591, $592, $593, $142, $346, $594, $596, $597, $598, $600, $601, $512, $512, $602, $603, $604, $605, $606, $607, $608, $610, $197, $611, $612, $346, $614, $346, $615, $618, $619, $620, $622, $624, $626, $627, $629, $630, $631, $631, $632, $633, $634, $346, $637, $638, $346, $639, $346, $639, $644, $645, $646, $647, $648, $672, $673, $198, $674, $198, $675, $481, $676, $684, $686, $688, $689, $690, $692, $694, $346, $705, $155, $708, $709, $710, $711, $712, $713, $714, $715, $716, $717, $718, $719, $720, $721, $722, $142, $346, $727, $346, $707, $733, $346, $732, $142, $346, $730, $731, $346, $733, $142, $346, $734, $735, $736, $737, $738, $346, $744, $346, $744, $346, $743, $142, $346, $741, $742, $346, $746, $748, $749, $750, $752, $764, $765, $766, $767, $768, $769, $770, $771, $772, $773, $774, $775, $776, $777, $779, $780, $781, $782, $783, $784, $785, $785, $475, $786, $787, $788, $787, $788, $789, $790, $792, $793, $794, $796, $797, $798, $800, $801, $324, $803, $759, $760, $761, $346, $805, $807, $142, $346, $827, $828, $244, $831, $832, $346, $862, $863, $876, $877, $878, $346, $806, $808, $896, $897, $898, $142, $244, $936];
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "_ZSt17__throw_bad_allocv": $0, 
  "_Znwm": $29, 
  "_ZnwmRKSt9nothrow_t": $30, 
  "_Znam": $31, 
  "_ZnamRKSt9nothrow_t": $32, 
  "_ZdlPv": $33, 
  "_ZdlPvRKSt9nothrow_t": $34, 
  "_ZdlPvm": $34, 
  "_ZdaPv": $35, 
  "_ZdaPvRKSt9nothrow_t": $36, 
  "_ZdaPvm": $36, 
  "_ZnwmSt11align_val_t": $37, 
  "_ZnwmSt11align_val_tRKSt9nothrow_t": $38, 
  "_ZnamSt11align_val_t": $39, 
  "_ZnamSt11align_val_tRKSt9nothrow_t": $40, 
  "_ZdlPvSt11align_val_t": $41, 
  "_ZdlPvSt11align_val_tRKSt9nothrow_t": $42, 
  "_ZdlPvmSt11align_val_t": $43, 
  "_ZdaPvSt11align_val_t": $44, 
  "_ZdaPvSt11align_val_tRKSt9nothrow_t": $45, 
  "_ZdaPvmSt11align_val_t": $46, 
  "_ZSt7nothrow": global$1, 
  "_ZSt14set_unexpectedPFvvE": $7, 
  "__cxa_unexpected_handler": global$2, 
  "_ZSt13set_terminatePFvvE": $9, 
  "__cxa_terminate_handler": global$3, 
  "_ZSt14get_unexpectedv": $22, 
  "_ZSt10unexpectedv": $24, 
  "_ZSt13get_terminatev": $25, 
  "_ZSt9terminatev": $26, 
  "_ZSt15set_new_handlerPFvvE": $27, 
  "__cxa_new_handler": global$4, 
  "_ZSt15get_new_handlerv": $28, 
  "__cxa_pure_virtual": $69, 
  "__cxa_deleted_virtual": $70, 
  "_ZNSt9exceptionD2Ev": $47, 
  "_ZNSt9exceptionD0Ev": $48, 
  "_ZNSt9exceptionD1Ev": $47, 
  "_ZNKSt9exception4whatEv": $49, 
  "_ZNSt13bad_exceptionD2Ev": $50, 
  "_ZNSt13bad_exceptionD0Ev": $51, 
  "_ZNSt13bad_exceptionD1Ev": $50, 
  "_ZNKSt13bad_exception4whatEv": $52, 
  "_ZNSt9bad_allocC2Ev": $53, 
  "_ZTVSt9bad_alloc": global$5, 
  "_ZTVSt9exception": global$6, 
  "_ZNSt9bad_allocD2Ev": $50, 
  "_ZNSt9bad_allocD0Ev": $51, 
  "_ZNSt9bad_allocD1Ev": $50, 
  "_ZNKSt9bad_alloc4whatEv": $55, 
  "_ZNSt20bad_array_new_lengthC2Ev": $56, 
  "_ZTVSt20bad_array_new_length": global$7, 
  "_ZNSt20bad_array_new_lengthD2Ev": $57, 
  "_ZNSt20bad_array_new_lengthD0Ev": $58, 
  "_ZNSt20bad_array_new_lengthD1Ev": $57, 
  "_ZNKSt20bad_array_new_length4whatEv": $59, 
  "_ZTISt9bad_alloc": global$8, 
  "_ZTISt20bad_array_new_length": global$9, 
  "_ZTISt9exception": global$10, 
  "_ZTSSt9exception": global$11, 
  "_ZTVSt13bad_exception": global$12, 
  "_ZTISt13bad_exception": global$13, 
  "_ZTSSt13bad_exception": global$14, 
  "_ZTSSt9bad_alloc": global$15, 
  "_ZTSSt20bad_array_new_length": global$16, 
  "_ZNSt9bad_allocC1Ev": $53, 
  "_ZNSt20bad_array_new_lengthC1Ev": $56, 
  "_ZNSt9type_infoD2Ev": $47, 
  "_ZNSt9type_infoD0Ev": $48, 
  "_ZNSt9type_infoD1Ev": $47, 
  "_ZNSt8bad_castC2Ev": $61, 
  "_ZTVSt8bad_cast": global$17, 
  "_ZNSt8bad_castD2Ev": $50, 
  "_ZNSt8bad_castD0Ev": $51, 
  "_ZNSt8bad_castD1Ev": $50, 
  "_ZNKSt8bad_cast4whatEv": $64, 
  "_ZNSt10bad_typeidC2Ev": $65, 
  "_ZTVSt10bad_typeid": global$18, 
  "_ZNSt10bad_typeidD2Ev": $50, 
  "_ZNSt10bad_typeidD0Ev": $51, 
  "_ZNSt10bad_typeidD1Ev": $50, 
  "_ZNKSt10bad_typeid4whatEv": $67, 
  "_ZTISt8bad_cast": global$19, 
  "_ZTISt10bad_typeid": global$20, 
  "_ZTVSt9type_info": global$21, 
  "_ZTISt9type_info": global$22, 
  "_ZTSSt9type_info": global$23, 
  "_ZTSSt8bad_cast": global$24, 
  "_ZTSSt10bad_typeid": global$25, 
  "_ZNSt8bad_castC1Ev": $61, 
  "_ZNSt10bad_typeidC1Ev": $65, 
  "_ZTIN10__cxxabiv117__class_type_infoE": global$26, 
  "_ZTIN10__cxxabiv116__shim_type_infoE": global$27, 
  "__dynamic_cast": $89, 
  "_ZTIN10__cxxabiv117__pbase_type_infoE": global$28, 
  "_ZTIDn": global$29, 
  "_ZTIN10__cxxabiv119__pointer_type_infoE": global$30, 
  "_ZTIv": global$31, 
  "_ZTIN10__cxxabiv120__function_type_infoE": global$32, 
  "_ZTIN10__cxxabiv129__pointer_to_member_type_infoE": global$33, 
  "_ZTSN10__cxxabiv116__shim_type_infoE": global$34, 
  "_ZTVN10__cxxabiv120__si_class_type_infoE": global$35, 
  "_ZTSN10__cxxabiv117__class_type_infoE": global$36, 
  "_ZTSN10__cxxabiv117__pbase_type_infoE": global$37, 
  "_ZTSN10__cxxabiv119__pointer_type_infoE": global$38, 
  "_ZTSN10__cxxabiv120__function_type_infoE": global$39, 
  "_ZTSN10__cxxabiv129__pointer_to_member_type_infoE": global$40, 
  "_ZTVN10__cxxabiv116__shim_type_infoE": global$41, 
  "_ZTVN10__cxxabiv123__fundamental_type_infoE": global$42, 
  "_ZTIN10__cxxabiv123__fundamental_type_infoE": global$43, 
  "_ZTSN10__cxxabiv123__fundamental_type_infoE": global$44, 
  "_ZTSv": global$45, 
  "_ZTSPv": global$46, 
  "_ZTIPv": global$47, 
  "_ZTVN10__cxxabiv119__pointer_type_infoE": global$48, 
  "_ZTSPKv": global$49, 
  "_ZTIPKv": global$50, 
  "_ZTSDn": global$51, 
  "_ZTSPDn": global$52, 
  "_ZTIPDn": global$53, 
  "_ZTSPKDn": global$54, 
  "_ZTIPKDn": global$55, 
  "_ZTSb": global$56, 
  "_ZTIb": global$57, 
  "_ZTSPb": global$58, 
  "_ZTIPb": global$59, 
  "_ZTSPKb": global$60, 
  "_ZTIPKb": global$61, 
  "_ZTSw": global$62, 
  "_ZTIw": global$63, 
  "_ZTSPw": global$64, 
  "_ZTIPw": global$65, 
  "_ZTSPKw": global$66, 
  "_ZTIPKw": global$67, 
  "_ZTSc": global$68, 
  "_ZTIc": global$69, 
  "_ZTSPc": global$70, 
  "_ZTIPc": global$71, 
  "_ZTSPKc": global$72, 
  "_ZTIPKc": global$73, 
  "_ZTSh": global$74, 
  "_ZTIh": global$75, 
  "_ZTSPh": global$76, 
  "_ZTIPh": global$77, 
  "_ZTSPKh": global$78, 
  "_ZTIPKh": global$79, 
  "_ZTSa": global$80, 
  "_ZTIa": global$81, 
  "_ZTSPa": global$82, 
  "_ZTIPa": global$83, 
  "_ZTSPKa": global$84, 
  "_ZTIPKa": global$85, 
  "_ZTSs": global$86, 
  "_ZTIs": global$87, 
  "_ZTSPs": global$88, 
  "_ZTIPs": global$89, 
  "_ZTSPKs": global$90, 
  "_ZTIPKs": global$91, 
  "_ZTSt": global$92, 
  "_ZTIt": global$93, 
  "_ZTSPt": global$94, 
  "_ZTIPt": global$95, 
  "_ZTSPKt": global$96, 
  "_ZTIPKt": global$97, 
  "_ZTSi": global$98, 
  "_ZTIi": global$99, 
  "_ZTSPi": global$100, 
  "_ZTIPi": global$101, 
  "_ZTSPKi": global$102, 
  "_ZTIPKi": global$103, 
  "_ZTSj": global$104, 
  "_ZTIj": global$105, 
  "_ZTSPj": global$106, 
  "_ZTIPj": global$107, 
  "_ZTSPKj": global$108, 
  "_ZTIPKj": global$109, 
  "_ZTSl": global$110, 
  "_ZTIl": global$111, 
  "_ZTSPl": global$112, 
  "_ZTIPl": global$113, 
  "_ZTSPKl": global$114, 
  "_ZTIPKl": global$115, 
  "_ZTSm": global$116, 
  "_ZTIm": global$117, 
  "_ZTSPm": global$118, 
  "_ZTIPm": global$119, 
  "_ZTSPKm": global$120, 
  "_ZTIPKm": global$121, 
  "_ZTSx": global$122, 
  "_ZTIx": global$123, 
  "_ZTSPx": global$124, 
  "_ZTIPx": global$125, 
  "_ZTSPKx": global$126, 
  "_ZTIPKx": global$127, 
  "_ZTSy": global$128, 
  "_ZTIy": global$129, 
  "_ZTSPy": global$130, 
  "_ZTIPy": global$131, 
  "_ZTSPKy": global$132, 
  "_ZTIPKy": global$133, 
  "_ZTSn": global$134, 
  "_ZTIn": global$135, 
  "_ZTSPn": global$136, 
  "_ZTIPn": global$137, 
  "_ZTSPKn": global$138, 
  "_ZTIPKn": global$139, 
  "_ZTSo": global$140, 
  "_ZTIo": global$141, 
  "_ZTSPo": global$142, 
  "_ZTIPo": global$143, 
  "_ZTSPKo": global$144, 
  "_ZTIPKo": global$145, 
  "_ZTSDh": global$146, 
  "_ZTIDh": global$147, 
  "_ZTSPDh": global$148, 
  "_ZTIPDh": global$149, 
  "_ZTSPKDh": global$150, 
  "_ZTIPKDh": global$151, 
  "_ZTSf": global$152, 
  "_ZTIf": global$153, 
  "_ZTSPf": global$154, 
  "_ZTIPf": global$155, 
  "_ZTSPKf": global$156, 
  "_ZTIPKf": global$157, 
  "_ZTSd": global$158, 
  "_ZTId": global$159, 
  "_ZTSPd": global$160, 
  "_ZTIPd": global$161, 
  "_ZTSPKd": global$162, 
  "_ZTIPKd": global$163, 
  "_ZTSe": global$164, 
  "_ZTIe": global$165, 
  "_ZTSPe": global$166, 
  "_ZTIPe": global$167, 
  "_ZTSPKe": global$168, 
  "_ZTIPKe": global$169, 
  "_ZTSg": global$170, 
  "_ZTIg": global$171, 
  "_ZTSPg": global$172, 
  "_ZTIPg": global$173, 
  "_ZTSPKg": global$174, 
  "_ZTIPKg": global$175, 
  "_ZTSDu": global$176, 
  "_ZTIDu": global$177, 
  "_ZTSPDu": global$178, 
  "_ZTIPDu": global$179, 
  "_ZTSPKDu": global$180, 
  "_ZTIPKDu": global$181, 
  "_ZTSDs": global$182, 
  "_ZTIDs": global$183, 
  "_ZTSPDs": global$184, 
  "_ZTIPDs": global$185, 
  "_ZTSPKDs": global$186, 
  "_ZTIPKDs": global$187, 
  "_ZTSDi": global$188, 
  "_ZTIDi": global$189, 
  "_ZTSPDi": global$190, 
  "_ZTIPDi": global$191, 
  "_ZTSPKDi": global$192, 
  "_ZTIPKDi": global$193, 
  "_ZTVN10__cxxabiv117__array_type_infoE": global$194, 
  "_ZTIN10__cxxabiv117__array_type_infoE": global$195, 
  "_ZTSN10__cxxabiv117__array_type_infoE": global$196, 
  "_ZTVN10__cxxabiv120__function_type_infoE": global$197, 
  "_ZTVN10__cxxabiv116__enum_type_infoE": global$198, 
  "_ZTIN10__cxxabiv116__enum_type_infoE": global$199, 
  "_ZTSN10__cxxabiv116__enum_type_infoE": global$200, 
  "_ZTVN10__cxxabiv117__class_type_infoE": global$201, 
  "_ZTIN10__cxxabiv120__si_class_type_infoE": global$202, 
  "_ZTSN10__cxxabiv120__si_class_type_infoE": global$203, 
  "_ZTVN10__cxxabiv121__vmi_class_type_infoE": global$204, 
  "_ZTIN10__cxxabiv121__vmi_class_type_infoE": global$205, 
  "_ZTSN10__cxxabiv121__vmi_class_type_infoE": global$206, 
  "_ZTVN10__cxxabiv117__pbase_type_infoE": global$207, 
  "_ZTVN10__cxxabiv129__pointer_to_member_type_infoE": global$208, 
  "btVector3_create": $809, 
  "btVector3_setValue": $810, 
  "btVector3_x": $811, 
  "btVector3_y": $812, 
  "btVector3_z": $813, 
  "btQuaternion_create": $814, 
  "btQuaternion_setValue": $815, 
  "btQuaternion_x": $811, 
  "btQuaternion_y": $812, 
  "btQuaternion_z": $813, 
  "btQuaternion_w": $816, 
  "btTransform_create": $817, 
  "btTransform_create2": $818, 
  "btTransform_setIdentity": $819, 
  "btTransform_setOrigin": $820, 
  "btTransform_setRotation": $821, 
  "btTransform_getOrigin": $822, 
  "btTransform_getRotation": $823, 
  "btTransform_getRotationRef": $824, 
  "btMotionState_destroy": $825, 
  "CCMotionState_create": $826, 
  "CCMotionState_setBodyID": $829, 
  "btDefaultMotionState_create": $830, 
  "btCollisionObject_create": $833, 
  "btCollisionObject_destroy": $825, 
  "btCollisionObject_setContactProcessingThreshold": $834, 
  "btCollisionObject_forceActivationState": $835, 
  "btCollisionObject_activate": $836, 
  "btCollisionObject_isActive": $837, 
  "btCollisionObject_setRestitution": $838, 
  "btCollisionObject_setFriction": $839, 
  "btCollisionObject_setRollingFriction": $840, 
  "btCollisionObject_getCollisionFlags": $841, 
  "btCollisionObject_setCollisionFlags": $842, 
  "btCollisionObject_getWorldTransform": $602, 
  "btCollisionObject_setCollisionShape": $843, 
  "btCollisionObject_getCcdMotionThreshold": $844, 
  "btCollisionObject_setCcdMotionThreshold": $845, 
  "btCollisionObject_getCcdSweptSphereRadius": $846, 
  "btCollisionObject_setCcdSweptSphereRadius": $847, 
  "btCollisionObject_getUserIndex": $848, 
  "btCollisionObject_setUserIndex": $849, 
  "btCollisionObject_getActivationState": $850, 
  "btCollisionObject_setInterpolationAngularVelocity": $851, 
  "btCollisionObject_setInterpolationLinearVelocity": $852, 
  "RayResultCallback_hasHit": $853, 
  "RayResultCallback_get_m_shapePart": $854, 
  "RayResultCallback_set_m_collisionFilterGroup": $855, 
  "RayResultCallback_set_m_collisionFilterMask": $856, 
  "RayResultCallback_get_m_closestHitFraction": $857, 
  "RayResultCallback_set_m_closestHitFraction": $858, 
  "RayResultCallback_get_m_collisionObject": $573, 
  "RayResultCallback_set_m_collisionObject": $859, 
  "RayResultCallback_reset": $860, 
  "ClosestRayResultCallback_create": $861, 
  "ClosestRayResultCallback_get_m_rayFromWorld": $864, 
  "ClosestRayResultCallback_set_m_rayFromWorld": $865, 
  "ClosestRayResultCallback_get_m_rayToWorld": $866, 
  "ClosestRayResultCallback_set_m_rayToWorld": $867, 
  "ClosestRayResultCallback_get_m_hitNormalWorld": $868, 
  "ClosestRayResultCallback_get_m_hitPointWorld": $869, 
  "btCollisionObjectArray_size": $870, 
  "btCollisionObjectArray_at": $871, 
  "btCollisionObjectArray_clear": $872, 
  "btVector3Array_at": $873, 
  "btVector3Array_clear": $872, 
  "btScalarArray_at": $874, 
  "btScalarArray_clear": $872, 
  "AllHitsRayResultCallback_create": $875, 
  "AllHitsRayResultCallback_reset": $879, 
  "AllHitsRayResultCallback_get_m_rayFromWorld": $822, 
  "AllHitsRayResultCallback_set_m_rayFromWorld": $820, 
  "AllHitsRayResultCallback_get_m_rayToWorld": $880, 
  "AllHitsRayResultCallback_set_m_rayToWorld": $881, 
  "AllHitsRayResultCallback_get_m_hitPointWorld": $882, 
  "AllHitsRayResultCallback_get_m_hitNormalWorld": $883, 
  "AllHitsRayResultCallback_get_m_collisionObjects": $864, 
  "AllHitsRayResultCallback_get_m_hitFractions": $884, 
  "AllHitsRayResultCallback_get_m_shapeParts": $306, 
  "btManifoldPoint_get_m_positionWorldOnA": $822, 
  "btManifoldPoint_get_m_positionWorldOnB": $885, 
  "btManifoldPoint_get_m_normalWorldOnB": $880, 
  "btManifoldPoint_getDistance": $886, 
  "btManifoldPoint_getShape0": $887, 
  "btManifoldPoint_getShape1": $888, 
  "btManifoldPoint_get_m_index0": $889, 
  "btManifoldPoint_get_m_index1": $890, 
  "ConvexResultCallback_hasHit": $891, 
  "ConvexResultCallback_set_m_collisionFilterGroup": $859, 
  "ConvexResultCallback_set_m_collisionFilterMask": $859, 
  "ConvexResultCallback_get_m_closestHitFraction": $812, 
  "ConvexResultCallback_set_m_closestHitFraction": $858, 
  "ClosestConvexResultCallback_create": $892, 
  "ClosestConvexResultCallback_get_m_hitNormalWorld": $822, 
  "ClosestConvexResultCallback_get_m_hitPointWorld": $880, 
  "ClosestConvexResultCallback_get_m_hitCollisionObject": $893, 
  "ClosestConvexResultCallback_set_m_hitCollisionObject": $894, 
  "AllConvexResultCallback_create": $895, 
  "AllConvexResultCallback_get_m_hitNormalWorld": $899, 
  "AllConvexResultCallback_get_m_hitPointWorld": $900, 
  "AllConvexResultCallback_get_m_hitFractions": $901, 
  "AllConvexResultCallback_get_m_collisionObjects": $223, 
  "btCollisionShape_destroy": $825, 
  "btCollisionShape_setUserIndex": $855, 
  "btCollisionShape_getUserIndex": $902, 
  "btCollisionShape_getLocalScaling": $903, 
  "btCollisionShape_setLocalScaling": $904, 
  "btCollisionShape_calculateLocalInertia": $905, 
  "btCollisionShape_isCompound": $906, 
  "btBoxShape_create": $907, 
  "btCapsuleShape_create": $908, 
  "btCapsuleShape_updateProp": $909, 
  "btConvexInternalShape_getImplicitShapeDimensions": $885, 
  "btCylinderShape_create": $910, 
  "btCylinderShape_updateProp": $911, 
  "btSphereShape_create": $912, 
  "btConeShape_create": $913, 
  "btStaticPlaneShape_create": $914, 
  "btCompoundShape_create": $915, 
  "btCompoundShape_getNumChildShapes": $916, 
  "btCompoundShape_addChildShape": $917, 
  "removeChildShape": $918, 
  "btCompoundShape_removeChildShapeByIndex": $919, 
  "btCompoundShape_setMaterial": $920, 
  "btCompoundShape_getChildShape": $921, 
  "btCompoundShape_updateChildTransform": $922, 
  "btStridingMeshInterface_destroy": $825, 
  "btTriangleMesh_create": $923, 
  "btTriangleMesh_addTriangle": $924, 
  "btBvhTriangleMeshShape_create": $925, 
  "btEmptyShape_create": $926, 
  "btDefaultCollisionConfiguration_create": $927, 
  "btDefaultCollisionConfiguration_destroy": $825, 
  "btPersistentManifold_getBody0": $928, 
  "btPersistentManifold_getBody1": $929, 
  "btPersistentManifold_getNumContacts": $930, 
  "btPersistentManifold_getContactPoint": $931, 
  "btDispatcher_getNumManifolds": $932, 
  "btDispatcher_getManifoldByIndexInternal": $933, 
  "btCollisionDispatcher_create": $934, 
  "btCollisionDispatcher_destroy": $825, 
  "btDbvtBroadphase_create": $935, 
  "btDbvtBroadphase_destroy": $825, 
  "btRigidBodyConstructionInfo_create": $937, 
  "btRigidBodyConstructionInfo_destroy": $346, 
  "btRigidBody_create": $938, 
  "btRigidBody_setCenterOfMassTransform": $939, 
  "btRigidBody_setSleepingThresholds": $940, 
  "btRigidBody_getLinearSleepingThreshold": $941, 
  "btRigidBody_getAngularSleepingThreshold": $942, 
  "btRigidBody_setDamping": $943, 
  "btRigidBody_setMassProps": $944, 
  "btRigidBody_setLinearFactor": $945, 
  "btRigidBody_applyTorque": $946, 
  "btRigidBody_applyForce": $948, 
  "btRigidBody_applyCentralForce": $949, 
  "btRigidBody_applyTorqueImpulse": $950, 
  "btRigidBody_applyImpulse": $952, 
  "btRigidBody_applyCentralImpulse": $954, 
  "btRigidBody_updateInertiaTensor": $955, 
  "btRigidBody_getLinearVelocity": $956, 
  "btRigidBody_getAngularVelocity": $957, 
  "btRigidBody_setLinearVelocity": $958, 
  "btRigidBody_setAngularVelocity": $959, 
  "btRigidBody_setAngularFactor": $960, 
  "btRigidBody_getGravity": $961, 
  "btRigidBody_setGravity": $962, 
  "btRigidBody_getTotalForce": $963, 
  "btRigidBody_getTotalTorque": $964, 
  "btRigidBody_getFlags": $965, 
  "btRigidBody_setFlags": $966, 
  "btRigidBody_clearForces": $967, 
  "btRigidBody_wantsSleeping": $634, 
  "btRigidBody_clearState": $968, 
  "btSequentialImpulseConstraintSolver_create": $969, 
  "btCollisionWorld_get_m_useContinuous": $970, 
  "btCollisionWorld_set_m_useContinuous": $971, 
  "btCollisionWorld_destroy": $825, 
  "btCollisionWorld_rayTest": $972, 
  "btCollisionWorld_getDispatchInfo": $864, 
  "btCollisionWorld_addCollisionObject": $973, 
  "btCollisionWorld_removeCollisionObject": $974, 
  "btCollisionWorld_convexSweepTest": $975, 
  "btDynamicsWorld_addAction": $787, 
  "btDynamicsWorld_removeAction": $788, 
  "btDynamicsWorld_getSolverInfo": $976, 
  "btDiscreteDynamicsWorld_create": $977, 
  "btDiscreteDynamicsWorld_setGravity": $978, 
  "btDiscreteDynamicsWorld_getGravity": $979, 
  "btDiscreteDynamicsWorld_addRigidBody": $980, 
  "btDiscreteDynamicsWorld_removeRigidBody": $981, 
  "btDiscreteDynamicsWorld_stepSimulation": $982
 };
}

  return asmFunc(asmLibraryArg);
}
